<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>670778</D:version-name>
<D:comment>DERBY-3718

Derby has an internal datatype called REF. For REF datatypes, we associate Types.OTHER as it's type. This
 association of Types.OTHER for REF datatype is causing NPE when a row level trigger is fired in the test 
case provided in DERBY-3718.

This NPE happens only in 10.4 and trunk. This is because starting 10.4(DERBY-2917 revision r619995),
rather than saving the TypeId of the DataTypeDescriptor (in DataTypeDescriptor.writeExternal method), we
rely on reconstructing TypeId (in readExternal) by using the Types.xxx associated with a type. This 
approach does not work for internal datatype REF, because we use Types.OTHER for REF datatypes. 
Types.OTHER is not enough to know that the type to be constructed is REF.  

Since we are dealing with the internal type which will be assigned a Types.OTHER type then we can't rely on Types.xxx to get us the correct data type. This fix relies on using the name of the data type rather 
than it's Type.xxx to construct the correct TypeId. This is being accomplised by changing 
DataTypeDescriptor.readExternal to use this.getTypeName rather than this.getJDBCTypeId to construct the TypeId. In addition to this change, I had to change DataTypeDescriptor.getTypeName() to use TypeDescriptor to get the type name rather than TypeId. This is because TypeId is not available when DataTypeDescriptor.readExternal calls DataTypeDescriptor.getTypeName. This will match how we already implement DataTypeDescriptor.getJDBCTypeId(). Junit and old harness suite have run with no new regressions. 

</D:comment>
<D:creator-displayname>mamta</D:creator-displayname>
<S:date>2008-06-23T21:42:23.830498Z</S:date>
</S:log-item>
</S:log-report>
