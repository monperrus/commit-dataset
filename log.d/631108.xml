<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>631108</D:version-name>
<D:comment>DERBY-3304

When a SQL exception is thrown, make sure that rollback caused by it closes all the resultsets 
irrespective of whether they return rows or not. This cleanup was not happening for
CallableStatementResultSet. To fix this, in CallableStatementResultSet class, I have changed 
the no-op cleanup() method to call close(). Without this, the locks held by the resultsets 
created inside the Java procedure method were not getting released.

I have added a test case to make sure that this code change is tested. I have created a
Java procedure which creates a dynamic resultset, a local resultset and then does an 
insert which will cause duplicate key exception. As part of rollback for exception, Derby
closes the dynamic resultset and local resultset along with the CallableStatementResultset.
And the test case is able to drop the tables which were used by the dynamic and local
resultset without running into locking issues.

</D:comment>
<D:creator-displayname>mamta</D:creator-displayname>
<S:date>2008-02-26T07:26:25.460027Z</S:date>
</S:log-item>
</S:log-report>
