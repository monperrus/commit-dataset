<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>453747</D:version-name>
<D:comment>DERBY-1847
contributed by Mamta Satoor
backporting via merge change 453352 from trunk to 10.2 branch.

To recap the problem, in SQL Authorization mode, when a new column is added to
a table, the rows in SYSCOLPERMS for the table in question were not getting 
updated to incorporate the new column. This caused ASSERT failure when a 
non-table owner attempted to select the new column.

Some background information on system table involved: SYSCOLPERMS keeps track 
of column level privileges on a given table. One of the columns in SYSCOLPERMS
is "COLUMNS" and it has a bit map to show which columns have the given 
permission granted on them. When a new column is added to the user table, 
the "COLUMNS" need to be expanded by one bit and that bit should be initialized
to zero since no privileges have been granted on that column at the ALTER 
TABLE...ADD COLUMN time.

I have fixed this problem by having 
AlterTableConstantAction.addNewColumnToTable call the new method in 
DataDictionary called updateSYSCOLPERMSforAddColumnToUserTable. At this point, 
we know of only the TableDescriptor's uuid which can help us determine all the 
rows in SYSCOLPERMS for that given table uuid. I get ColPermsDescriptor for 
each one of those rows and then use the ColPermsDescriptor's uuid to update 
the "COLUMNS" column so SYSCOLPERMS is aware of the newly added column in user
table. This fixes the problem because at the time of SELECT, when we do 
privilege lookup in SYSCOLPERMS, we have info on the newly added column.

</D:comment>
<D:creator-displayname>mikem</D:creator-displayname>
<S:date>2006-10-06T19:54:23.703883Z</S:date>
</S:log-item>
</S:log-report>
