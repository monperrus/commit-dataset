<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>805696</D:version-name>
<D:comment>DERBY-4081: BTreeController.comparePreviousRecord() may fail to release latch on left-most leaf

When a new value is inserted into a nullable unique index, the rows
immediately to the left and the right of the insertion point are
checked for duplicates. comparePreviousRecord() checks the rows to the
left of the insertion point. If the row immediately to the left is
marked as deleted, it will have to go further to the left until it
finds a row that is not deleted.

Now this check may cross page boundaries, and if it does so, and all
the rows to the left of the insertion point are deleted,
comparePreviousRecord() will return NO_MATCH before the latch
left-most leaf in the index has been released.

This means that the left-most leaf is still latched when
comparePreviousRecord() returns, which it is not supposed to be unless
the new value was actually inserted into the left-most leaf. The
unexpected extra latch may cause deadlocks or livelocks.

This patch adds a test that runs into a livelock because of the bug,
and it fixes the bug by releasing the latch on the left-most leaf
before returning NO_MATCH from comparePreviousRecord().
</D:comment>
<D:creator-displayname>kahatlen</D:creator-displayname>
<S:date>2009-08-19T08:28:45.446458Z</S:date>
</S:log-item>
</S:log-report>
