<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>191755</D:version-name>
<D:comment>Fix for 
DERBY-8
Connection object gets created with un-supported holdability on getting Connection object from XAConnection "inside" the global transaction

DERBY-366
In jdk13, when a connection transitions from global transaction to local transaction, its default holdability of HOLD_CURSORS_OVER_COMMIT is not restored.


 have a patch to fix Derby-8 (Connection object gets created with un-supported holdability on getting Connection object from XAConnection "inside" the global transaction) and Derby-366 (In jdk13, when a connection transitions from global transaction to local transaction, its default holdability of HOLD_CURSORS_OVER_COMMIT is not restored.) The patch is attached to both Derby-8 and Derby-366. 

The fix for both these bugs was centered around fixing the holdability handling in BrokeredConnection.java This was because BrokeredConnection.java had no code for restoring the holdability of real connection object and no code for saving the current holdability state of real connection object. I put fix for both these issues in BrokeredConnection.java so that both jdk13 and jdk14+ environments will be handled correctly. Had to use reflection for this holdability work 
because Connection.setHoldability and Connection.getHoldability methods are not available through JDK13 apis. 

					Contributed by Mamta Satoor
</D:comment>
<D:creator-displayname>kmarsden</D:creator-displayname>
<S:date>2005-06-22T03:02:54.017549Z</S:date>
</S:log-item>
</S:log-report>
