<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>1307954</D:version-name>
<D:comment>DERBY-5624 System can run out of stack space while processing DropOnCommit requests.

backporting change #1307679 from 10.8 to 10.5 branch.

Taking care of cleanup after a commit is handled by notifying all "Observers"
that an event has taken place that they might want to act on and cleanup. In
the added test case this is triggered by off line commit which effectively
drops and recreates the base table and all of its indexes after loading the
data into them.

Sometimes these Observers may execute work which adds to the Observer queue,
and that queue can "miss" them in the first pass through.

A previous fix for this problem added a recursive call to notifyObservers in
the place that could cause this addition of observers. This recursive call
was causing stack problems when the number of Observers became large. For
the checked in test case this was 1000 indexes on 1000 columns of the table.
For other users I believe the cause was a by product of sorts on large disk
based sorts for multi-gigabyte tables and indexes. 2 users were reporting
similar failed stacks for failing compresses of large tables, and one was
able to take this fix to their environment and then successfully run the
compress.

The fix was to remove the recursion and instead loop at the outermost point
until there were no Observers.

backport to largedata suite did not go smoothly, so just put the test into
the store suite.

Only run the testDERBY_5624 on windows until linux issue resolved.

Currently on linux with 1024 file descriptors per user this test fails.

</D:comment>
<D:creator-displayname>mikem</D:creator-displayname>
<S:date>2012-04-01T00:22:06.617734Z</S:date>
</S:log-item>
</S:log-report>
