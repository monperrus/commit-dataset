<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>638425</D:version-name>
<D:comment>DERBY-3538 NullPointerException during execution for query with LEFT OUTER JOIN whose inner table selects all constants.

Contributed by Army Brown

Here are some of Army's comments ...
it *appears* that the problem is in the "doProjection()" method of ProjectRestrictResultSet. During code generation we recognize that the SELECT has all constants and thus that its result set is "reusable"; see ProjectRestrictNode.generateMinion(), esp. the call to:

  mb.push(resultColumns.reusableResult());

At execution, ProjectResrictResultSet sees that it can reuse the result set so it "caches" the execution row in doProjection() and then just returns that on subsequent calls. However, when returning the cached row, the method does *not* call "setCurrentRow()" with the cached row. In some cases (esp. left outer join) that can mean that the "current execution row" corresponding to the ProjectRestrictResultSet remains null when it should be set to the cached row. Thus when it comes time to evaluate the ON predicate, which references the ProjectRestrictResultSet's execution row, the predicate fails with an NPE because the "current execution row" is not set for that PRRS. 

</D:comment>
<D:creator-displayname>kmarsden</D:creator-displayname>
<S:date>2008-03-18T15:58:54.279487Z</S:date>
</S:log-item>
</S:log-report>
