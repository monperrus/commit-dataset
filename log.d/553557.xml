<?xml version="1.0" encoding="utf-8"?>
<S:log-report xmlns:S="svn:" xmlns:D="DAV:">
<S:log-item>
<D:version-name>553557</D:version-name>
<D:comment>DERBY-2777

Currently, the parameters in LIKE clause always pickup their collation from the compilation schema. That logic is not 
complete. I am fixing that logic here along with addition of some tests.

For the sake of explanation, let me use the following syntax for LIKE clause
receiver LIKE leftOperand ESCAPE rightOperand
With the fix in this patch, if receiver is a parameter, it will set it's collation using following logic
1)check if leftOperand is not a parameter. If yes, then receiver will pick up collation from leftOperand. If not, goto step 2
2)check if rightOperand is not a parameter. If yes, then receiver will pick up collation from rightOperand. If not, goto step 3
3)receiver picks up the collation of the compilation schema because everything in the LIKE clause is ?

Next, if leftOperand is a parameter, it will set it's collation using receiver. By this time, even if receiver is a
parameter, we have set correct collation for receiver and hence leftOperand can simply rely on receiver for correct
collation IF leftOperand is a parameter.

Next, if rightOperand is a parameter, it will set it's collation using receiver. By this time, even if receiver is a
parameter, we have set correct collation for receiver and hence rightOperand can simply rely on receiver for correct
collation IF rightOperand is a parameter.

</D:comment>
<D:creator-displayname>mamta</D:creator-displayname>
<S:date>2007-07-05T16:44:18.124630Z</S:date>
</S:log-item>
</S:log-report>
