{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12596071","self":"https://issues.apache.org/jira/rest/api/latest/issue/12596071","key":"LUCENE-4167","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/2","id":"2","description":"The problem described is an issue which will never be fixed.","name":"Won't Fix"},"customfield_12312322":null,"customfield_12310220":"2012-06-27 14:55:53.628","customfield_12312323":null,"customfield_12310420":"243798","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_7407075172_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2012-09-21T04:59:06.429+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-4167/watchers","watchCount":3,"isWatching":false},"created":"2012-06-27T11:27:51.267+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2012-09-21T04:59:06.437+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312623","id":"12312623","name":"modules/spatial","description":"issues related to Spatial module"}],"timeoriginalestimate":null,"description":"Looking at the code in TwoDoublesStrategy I noticed SpatialOperations.BBoxWithin vs isWithin which confused me.  Looking over the other Strategys I see that really only isWithin and Intersects is supported.  Only TwoDoublesStrategy supports IsDisjointTo.  The remainder of SpatialOperations are not supported.\r\n\r\nI don't think we should use SpatialOperation as this stage since it is not clear what Operations are supported by what Strategys, many Operations are not supported, and the code for handling the Operations is usually the same.  We can spin off the code for TwoDoublesStrategy's IsDisjointTo support into a different Strategy.","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"23852","summary":"Remove the use of SpatialOperation","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":28,"total":28,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402274","id":"13402274","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I agree with your complaint.  The only two supported operations are:\r\n* Intersects -- equivalent to IsWithin when index data is points\r\n* BBoxWIntersects -- again, equivalent to BBoxIsWithin when the indexed data is points.\r\n\r\nThe distinction of \"overlaps\" with \"intersects\" seems dubious.\r\n\r\nThe bbox handling is universally handled in SpatialArgs.getShape() which checks the operation and returns the wrapping rectangle.  So effectively the strategies need not even bother with the whole SpatialOperation concept, at least not at the moment.\r\n\r\nMy concern with your suggestion to remove SpatialOperation is that I do think it will return.  I know I want to work on an IsWithin when indexed data is shapes with area.  And it is serving the purpose of SpatialArgsParser parsing out the operation you want to do, which I don't think should go away (i.e. the query string shouldn't assume an intersect, it should include \"Intersects(...)\"  Perhaps the unsupported operations could be commented out?\r\n\r\nSeparately, I think com.spatial4j.core.query.* belongs in Lucene spatial.  It's not used by any of the rest of Spatial4j, yet it's tightly related to the concept of querying which is Lucene spatial's business, and is not the business of Spatial4j.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-27T14:55:53.628+0000","updated":"2012-06-27T14:55:53.628+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402286","id":"13402286","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nIntersects – equivalent to IsWithin when index data is points\r\nBBoxWIntersects – again, equivalent to BBoxIsWithin when the indexed data is points.\r\n{quote}\r\n\r\nI don't see the need to differentiate BBoxIntersects and Intersects.  If the user wants to find those Documents related to the bounding box of a Shape, then they can call shape.getBoundingBox() and pass that into the Strategy.  The Strategys shouldn't have to worry about the Shape (although TwoDoubles does but that needs to be re-thought separately).  The Strategys should just take the Shape given and roll with it.  Is that what you're suggesting?\r\n\r\n{quote}\r\nMy concern with your suggestion to remove SpatialOperation is that I do think it will return. I know I want to work on an IsWithin when indexed data is shapes with area. And it is serving the purpose of SpatialArgsParser parsing out the operation you want to do, which I don't think should go away (i.e. the query string shouldn't assume an intersect, it should include \"Intersects(...)\" Perhaps the unsupported operations could be commented out?\r\n{quote}\r\n\r\nI can see the need for different behaviour for different Shape relationships to.  But I think we should perhaps do that using method specialization.  We already have the PrefixTreeStrategy abstraction, so you could write a WithinRecursivePrefixTreeStrategy which specialized makeQuery differently.  That way it is clear to the user what the Strategy does, we won't need the runtime checks and we won't have Strategys like TwoDoubles which has methods for each of the different behaviours in the same class.\r\n\r\nSo I think we can remove the need for SpatialOperation now and support the idea differently in the future.\r\n\r\n(As a side note, this actually makes me think we should decouple the indexing code of Strategys from the querying code).\r\n\r\n{quote}\r\nSeparately, I think com.spatial4j.core.query.* belongs in Lucene spatial. It's not used by any of the rest of Spatial4j, yet it's tightly related to the concept of querying which is Lucene spatial's business, and is not the business of Spatial4j.\r\n{quote}\r\n\r\n+1.  As a short term solution I think we just replicate the code that we need in Lucene now and then drop it from Spatial4J in the next release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-27T15:12:13.516+0000","updated":"2012-06-27T15:12:13.516+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402531","id":"13402531","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"bq. I don't see the need to differentiate BBoxIntersects and Intersects. If the user wants to find those Documents related to the bounding box of a Shape, then they can call shape.getBoundingBox() and pass that into the Strategy. The Strategys shouldn't have to worry about the Shape (although TwoDoubles does but that needs to be re-thought separately). The Strategys should just take the Shape given and roll with it. Is that what you're suggesting?\r\n\r\nThe stategy shouldn't care about the bbox concept, I agree. I think the bbox capability should be decoupled from SpatialOperation.  It's not a simple matter of the client calling queryShape.getBoundingBox() since the expression of the query shape from client to server is a string.  So instead of \"BBoxIntersects(Circle(3,5 d=10))\" I propose supporting \"INTERSECTS(BBOX(Circle(3,5 d=10)))\".  The actual set of operations I want to support are [E]CQL spatial predicates: http://docs.geoserver.org/latest/en/user/filter/ecql_reference.html#spatial-predicate but that perhaps deserves its own issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-27T20:29:30.068+0000","updated":"2012-06-27T20:29:30.068+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402591","id":"13402591","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"bq. I can see the need for different behaviour for different Shape relationships to. But I think we should perhaps do that using method specialization. We already have the PrefixTreeStrategy abstraction, so you could write a WithinRecursivePrefixTreeStrategy which specialized makeQuery differently. That way it is clear to the user what the Strategy does, we won't need the runtime checks and we won't have Strategys like TwoDoubles which has methods for each of the different behaviours in the same class.\r\n\r\nSorry, but I disagree with your point of view.  The Strategy is supposed to be a single facade to the implementation details of how a query will work, including the various possible spatial predicates (i.e. spatial operations) that is supports.  If one Java class file shows that it becomes too complicated and it would be better separated because implementing different predicates are just so fundamentally different, then then the operations could be decomposed to separate source files but it would be behind the facade of the Strategy.  I don't believe that TwoDoublesStrategy demonstrates complexity of a class trying to do too many things.  I absolutely think TwoDoublesStrategy could be coded to be more clear.  If it is as buggy/untested as I think it is and nobody wants to fix it (I don't), personally I think this strategy can go away.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-27T22:01:59.002+0000","updated":"2012-06-27T22:01:59.002+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402783","id":"13402783","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nThe stategy shouldn't care about the bbox concept, I agree. I think the bbox capability should be decoupled from SpatialOperation. It's not a simple matter of the client calling queryShape.getBoundingBox() since the expression of the query shape from client to server is a string. So instead of \"BBoxIntersects(Circle(3,5 d=10))\" I propose supporting \"INTERSECTS(BBOX(Circle(3,5 d=10)))\". The actual set of operations I want to support are [E]CQL spatial predicates: http://docs.geoserver.org/latest/en/user/filter/ecql_reference.html#spatial-predicate but that perhaps deserves its own issue.\r\n{quote}\r\n\r\nI think we need to be cautious here about exposing too much complexity in the Strategys.  Query language requirements shouldn't be passed on down to Strategy.  Instead, the Strategys should have a very controlled list of spatial operations they support and how they are connected to the query parser should be the parser's responsibility.  Requiring direct users of the Strategys to use queryShape.getBoundingBox() seems like a good way to mitigate complexity in the Strategys themselves and we can then do whatever we like in any parsers to make our query languages work.\r\n\r\n{quote}\r\nSorry, but I disagree with your point of view. The Strategy is supposed to be a single facade to the implementation details of how a query will work, including the various possible spatial predicates (i.e. spatial operations) that is supports. If one Java class file shows that it becomes too complicated and it would be better separated because implementing different predicates are just so fundamentally different, then then the operations could be decomposed to separate source files but it would be behind the facade of the Strategy.\r\n{quote}\r\n\r\nOkay fair enough.  I think we can come to a compromise.  My goal here is to make it clear to the user what operations our Strategys support at compile time, not through some undocumented runtime check.  That seems a recipe for disaster.  Imagine someone who uses one of the Prefix Strategys and then tries to do a Disjoint operation.  At runtime they get an error and then after some reading through source code they discover they actually need to use TwoDoubles which requires a re-index.\r\n\r\nInstead what I recommend is that we rename makeQuery to makeIntersectsQuery.  Then all implementations of that method will only construct a Query for the intersects operation.  We can then add makeXXXQuery methods to the Strategy interface as we add support to all the implementations.  If a Strategy impl supports a particular operation that the rest don't, then that can just be a method on that specific Strategy and not added to the Strategy interface.  Consequently TwoDoubles will get a makeDisjointQuery method.  This way we have more readable code, better compile time checking and less confused users.\r\n\r\nHow we map this into any Client / Server interaction or a query language should be the responsibility of those classes, not the Strategys.\r\n\r\nI'm going to create a patch to this effect.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T02:19:54.276+0000","updated":"2012-06-28T02:19:54.276+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402825","id":"13402825","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"First shot at this.  \r\n\r\nI completely removed SpatialArgs from the Strategy interface.  We don't have so many parameters that we can't force them to be defined.  \r\n\r\nChanged makeQuery/makeFilter to makeIntersectsQuery/makeIntersectsFilter respectively.\r\n\r\nI want to address the method javadocs before committing this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T04:04:33.469+0000","updated":"2012-06-28T04:04:33.469+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402827","id":"13402827","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I agree that something could/should be done to improve the awareness of exactly which operations a Strategy supports.  This is of course just one aspect of a Strategy's limitations, consider wether or not the Strategy supports multi-value data or wether it supports indexing non-point shapes.  Surely *that* is quite relevant to a potential client.  It seems very doubtful to me that the compile-time type checks could be added for everything.  And even with spatial operations -- there are a lot of them to support, and wouldn't it be twice as many for both makeXXXQuery & makeXXXFilter?  I don't know where you would draw the line.  At least the current interface is fairly simple, and there is always Javadocs.\r\n\r\nThat said, I look forward to seeing any patches you may having demonstrating what you have in mind.  Maybe I just won't get it until I see it.\r\n\r\nbq. How we map this into any Client / Server interaction or a query language should be the responsibility of those classes, not the Strategies.\r\n\r\nTrue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-28T04:09:29.289+0000","updated":"2012-06-28T04:09:29.289+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402830","id":"13402830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nThis is of course just one aspect of a Strategy's limitations, consider wether or not the Strategy supports multi-value data or wether it supports indexing non-point shapes. Surely that is quite relevant to a potential client. It seems very doubtful to me that the compile-time type checks could be added for everything\r\n{quote}\r\n\r\nQuite right and we can tackle these issues on a case by case basis.  Having a check like supportsMultiValued() on Strategys seems like a good idea.  That way the user can consult this method before indexing.\r\n\r\n{quote}\r\nAnd even with spatial operations – there are a lot of them to support, and wouldn't it be twice as many for both makeXXXQuery & makeXXXFilter? I don't know where you would draw the line. At least the current interface is fairly simple, and there is always Javadocs.\r\n{quote}\r\n\r\nWe don't have any useful Javadocs on this issue so I'm not going to rely on that.  I don't see any issue with having a makeXXXQuery/Filter for each operation.  Strategys are essentially factories so I think the ability to see at compile time what the factory can create is vitally important.  If we get to 20 operations I'll start to worry.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T04:15:46.648+0000","updated":"2012-06-28T04:15:46.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402865","id":"13402865","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"A follow up to this patch is to break out the operation specific makeXXXQuery/Filter into their own interfaces so the concrete Strategys can declare what operations they support.  We would strip SpatialStrategy back to just having createFields and then each operation specific interface (say IntersectsStrategy) would extend it.  If a concrete Strategy didnt care for any of the standard operations, then it could just implement SpatialStrategy and do what it likes.  However those we have currently could implement IntersectsStrategy, and TwoDoubles could implement DisjointStrategy.\r\n\r\nI'll update the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T05:34:56.187+0000","updated":"2012-06-28T05:34:56.187+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402867","id":"13402867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I looked at the patch.  {{shrug}}  Some things are marginally simpler but it seems like a step back for supporting anything other than one spatial operation.  Please hold off for a few days before committing without more consensus; I'd like to hear Ryan's point of view on this issue as it's a big deal.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-28T05:39:49.955+0000","updated":"2012-06-28T05:39:49.955+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402870","id":"13402870","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"I don't see how it makes it harder to support more than one operation.  If anything, it is making operations a 1st class citizen.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T05:45:13.182+0000","updated":"2012-06-28T05:45:13.182+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402883","id":"13402883","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ryantxu","name":"ryantxu","emailAddress":"ryantxu at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan McKinley","active":true},"body":"This is essentially a java API vs 'query string' question.  As is we essentially pass the query string all the way to the SpatialStrategy before it checks the operation; Chris proposes that the operation should be parsed *before* it gets to the strategy and have real java functions for each operation.\r\n\r\nI support:\r\n * removing the make* functions from SpatialStrategy\r\n * for each possible strategy, we would create an interface like:\r\n\r\n{code:java}\r\ninterface IntersectsSpatialQueryBuilder {\r\n  public Query makeIntersectsQuery(SpatialArgs args);\r\n  public Filter makeIntersectsFilter(SpatialArgs args);\r\n}\r\n\r\ninterface IsWithinSpatialQueryBuilder {\r\n  public Query makeIsWithinQuery(SpatialArgs args);\r\n  public Filter makeIsWithinFilter(SpatialArgs args);\r\n}\r\n{code}\r\n\r\nand then concrete SpatialStrategy implementations would implement everything they can do.  This may be just Intersects, or it may be a list of 10 things it can do.\r\n\r\n\r\nThe advantage to this approach would be:\r\n * clear java API and good place in javadocs to give the inevitable caveats for the operation implementation details\r\n * testing can check for instances of 'IsWithinSpatialQueryBuilder' \r\n\r\nThe end user query string can still look like \"INTERSECTS( xxxx )\" but this would let us take that parsing out of the indexing class.\r\n\r\n- - - -\r\n\r\nI'm going to go ahead and push the BBox strategy into trunk because it is a strategy with a bunch of operations, and i want to make sure general operations remain a top level concept.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ryantxu","name":"ryantxu","emailAddress":"ryantxu at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan McKinley","active":true},"created":"2012-06-28T06:15:06.948+0000","updated":"2012-06-28T06:15:06.948+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13402888","id":"13402888","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Thanks for your input Ryan.\r\n\r\nbq. Chris proposes that the operation should be parsed before it gets to the strategy and have real java functions for each operation.\r\n\r\nmakeFilter & makeQuery receives a SpatialArgs object which has already been parsed; it's not a string anymore.  (The \"Command\" design pattern, by the way).  And he's also proposing that SpatialArgs is gone, at least from these methods, and instead you get a Shape + distancePrecision pair of args.\r\n\r\nSomewhat related to this is the Filter/Query distinction.  Minutes ago I had the realization that makeQuery() could have a fixed implementation based on makeFilter() with makeValueSource() (for the distance). It's already committed so you can see.  Assuming you also think it makes a good default implementation, this suggests any variety of makeXXXXQuery would call the same method, which seems less than ideal but not terrible.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-28T06:43:43.127+0000","updated":"2012-06-28T06:43:43.127+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403055","id":"13403055","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nmakeFilter & makeQuery receives a SpatialArgs object which has already been parsed; it's not a string anymore. (The \"Command\" design pattern, by the way). And he's also proposing that SpatialArgs is gone, at least from these methods, and instead you get a Shape + distancePrecision pair of args.\r\n{quote}\r\n\r\nI gather you don't like that idea, it reads that way at least.  \r\n\r\nWe don't need SpatialArgs at the moment.  It feels like a hack to allow us to add whatever arguments we want without having to change method signature and so we can have some defaults.  The Strategy API should be explicit so users know exactly what they need to provide (distance precision is used in both of the PrefixTreeStrategys, it is important) and we should consider any changes to the API very carefully.  This API shouldnt have any mystery or surprises, it should be extremely clear to what user what to expect.  I cannot stress this enough.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T12:33:42.441+0000","updated":"2012-06-28T12:33:42.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403056","id":"13403056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nThis is essentially a java API vs 'query string' question. As is we essentially pass the query string all the way to the SpatialStrategy before it checks the operation; Chris proposes that the operation should be parsed before it gets to the strategy and have real java functions for each operation.\r\n{quote}\r\n\r\nThis is exactly what I'm suggesting.  The Strategys shouldn't be doing decision making, they are Factorys.  The logic for parsing queries, validating, choosing Strategys, constructing Shapes and identifying operations, shouldn't be their concern at all.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T12:36:56.950+0000","updated":"2012-06-28T12:36:56.950+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403059","id":"13403059","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"{quote}\r\nSomewhat related to this is the Filter/Query distinction. Minutes ago I had the realization that makeQuery() could have a fixed implementation based on makeFilter() with makeValueSource() (for the distance). It's already committed so you can see. Assuming you also think it makes a good default implementation, this suggests any variety of makeXXXXQuery would call the same method, which seems less than ideal but not terrible.\r\n{quote}\r\n\r\nNow I think about it, what exactly are the purposes of makeQuery and makeValueSource()? I don't think it's clear.  Does makeQuery() have to score the same Documents as makeFilter() identifies?  We don't verify that they do.  What does the score for makeQuery() mean? Is it always the distance between the centre of two Shapes? I can think of a IsDisJoint scenario where the two Shapes are disjoint but they have the same central point.  Consequently is the score related to the operation? What is makeValueSource() all about then? does it return the same score for the same Document as makeQuery() just doesn't do any filtering as well?\r\n\r\nWhatever the answer is to all these questions, we really need to document them.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-28T12:42:25.312+0000","updated":"2012-06-28T12:44:04.093+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403181","id":"13403181","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"bq. We don't need SpatialArgs at the moment. It feels like a hack to allow us to add whatever arguments we want without having to change method signature and so we can have some defaults.\r\n\r\nThe command pattern isn't a hack, I find it rather appropriate in this case, and I remember thinking it was a brilliant move by Ryan to have used it when I first saw it in Strategy for the first time.  The distance precision is kind of a \"hint\" that is optional.  On the other hand, the shape & operation are fundamental.  I agree putting the operation into the method name does indeed make it clear which operations are supported, which is good for clarity and compile-time safety.  But the compile-time safety is only realized if used directly by client code, not when the client is remote and passes a query string that is parsed and evaluated against a Strategy.  This is what happens in Solr, in some of our testing, and I expect similarly for potential users like ElasticSearch when that eventually happens.\r\n\r\nCurious, how do you propose compile-time safety be added to see what shape(s) a Strategy indexes?  And what about multi-value compile-time checks?\r\n\r\nbq. Now I think about it, what exactly are the purposes of makeQuery and makeValueSource()? I don't think it's clear.\r\n\r\nI'll copy-paste the javadocs for you here:\r\n{code:java}\r\n  /**\r\n   * Make a query which has a score based on the distance from the data to the query shape.\r\n   * The default implementation constructs a {@link FilteredQuery} based on\r\n   * {@link #makeFilter(com.spatial4j.core.query.SpatialArgs, SpatialFieldInfo)} and\r\n   * {@link #makeValueSource(com.spatial4j.core.query.SpatialArgs, SpatialFieldInfo)}.\r\n   */\r\n  public Query makeQuery(SpatialArgs args, T fieldInfo) {\r\n{code}\r\n\r\n{code:java}\r\n  /**\r\n   * The value source yields a number that is proportional to the distance between the query shape and indexed data.\r\n   * @param args\r\n   * @param fieldInfo\r\n   */\r\n  public abstract ValueSource makeValueSource(SpatialArgs args, T fieldInfo);\r\n{code}\r\n\r\nYou rightly point out that the javadocs for makeValueSource is a bit vague.  I thought it would be best to leave some wiggle room for different ways of calculating the distance instead of being precise.  Do you think we should spell it out exactly and thus leave no room for alternatives?  In terms of its relationship with makeQuery(), I think it makes sense to effectively fix the Strategy specification to essentially be what makeQuery()'s default impl does now (now as of last night anyway).  So yes, the filter & query's matching documents should always be the same.  Adding documentation to this affect would be good; one has to infer that at the moment based on the existing docs.\r\n\r\nHere's an idea: what if makeQuery() goes away?  Why is it needed when it can be constructed by a client quite simply like it is now:\r\n{code:java}\r\n  public Query makeQuery(SpatialArgs args, T fieldInfo) {\r\n    Filter filter = makeFilter(args, fieldInfo);\r\n    ValueSource vs = makeValueSource(args, fieldInfo);\r\n    return new FilteredQuery(new FunctionQuery(vs), filter);\r\n  }\r\n{code}\r\n\r\nIf it goes away, my acceptance level of putting the operation name into the method would be higher since you'd only have makeXXXXFilter without a Query variant.\r\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-28T16:00:32.950+0000","updated":"2012-06-28T16:00:32.950+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403444","id":"13403444","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Shall I move com.spatial4j.core.query.* into Lucene spatial now or will that create too many conflicts with your patch, Chris?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-28T20:09:13.492+0000","updated":"2012-06-28T20:09:13.492+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403642","id":"13403642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"I don't see consensus being reached on how the Strategy API should look so I'm going to leave the patch.  Go ahead and do your moves.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-06-29T01:20:28.653+0000","updated":"2012-06-29T01:20:28.653+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13403696","id":"13403696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Attached is the patch copying com.spatial4j.core.query into Lucene spatial, and updating code to reference this instead.  I also moved Spatial4j's UnsupportedSpatialOperation which is tightly related, into the same destination.\r\n\r\nI'll commit shortly to both branches.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-06-29T04:58:49.372+0000","updated":"2012-06-29T04:58:49.372+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13414857","id":"13414857","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"Okay I'm going to try to find some middle ground here so we can move forward:\r\n\r\nbq. Here's an idea: what if makeQuery() goes away? Why is it needed when it can be constructed by a client quite simply like it is now:\r\n\r\n+1.  The score for spatial Documents seems like it could be calculated from a variety of factors.  One of those factors could be distance, another could be overlap percentage.  So using ValueSource with FunctionQuery seems to give us maximum flexibility.  \r\n\r\nWe can maybe move the makeQuery as you defined to a utility class (maybe with the stored-field stuff) which focuses on providing an easy API for the 90% of use cases.\r\n\r\nCan we rename makeValueSource to makeDistanceValueSource so that it is clearer what it does? I'm not really sure how best to handle ValueSources calculating scores from other factors just yet so lets just put that on the backburner.\r\n\r\nThis leaves us with only needing makeXXXFilter for each Operation.  I like Ryan's suggestion of using the XXXFilterBuilder interfaces.  It doesn't seem like a huge overhead for Strategys that share logic between operations to have to implement a method and call another, 3 lines at the most.  Reasonable?\r\n\r\nbq. The command pattern isn't a hack, I find it rather appropriate in this case, and I remember thinking it was a brilliant move by Ryan to have used it when I first saw it in Strategy for the first time. The distance precision is kind of a \"hint\" that is optional. On the other hand, the shape & operation are fundamental\r\n\r\nI can see situations whereby we do have a mix of required parameters (such as Shape, field name) and some that are optional and only apply to certain Strategys.  So how about we rename SpatialArgs to SpatialCommand? and we document that we will treat changes to SpatialCommand like we would to the Strategy APIs, i.e. we won't be removing / changing things without consideration.  Having the Command also means we can handle bw compat more I guess.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-07-16T05:36:06.903+0000","updated":"2012-07-16T05:36:06.903+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13415154","id":"13415154","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"bq. We can maybe move the makeQuery as you defined to a utility class (maybe with the stored-field stuff) which focuses on providing an easy API for the 90% of use cases.\r\n\r\nWhy not just a static method on Strategy?  I'm not sure there is much need for a utility class yet.\r\n\r\nbq. Can we rename makeValueSource to makeDistanceValueSource so that it is clearer what it does? I'm not really sure how best to handle ValueSources calculating scores from other factors just yet so lets just put that on the backburner.\r\n\r\n+1 my first reaction is that I love it, but I have a few questions:\r\n* What should BBoxStrategy do?  It's very existence is largely due to its overlap percentage based relevancy -- pretty cool.  Would it have a makeDistanceValueSource() that does something different?  -- perhaps one that gets the center of the indexed shape and uses that?  It could work via new BBoxSimilarityValueSource(CenterDistanceSimilarity(...)) (hypothetical implementation to be developed).  And the current one might be makeCustomValueSource with the ability for the caller to pass in AreaSimilarity()\r\n* Would a makeDistanceValueSource() make it inefficient to support an inverted distance?  This may be a stupid question but we ultimately want this as the default for a query: LUCENE-4208 -- for example at the Solr layer.\r\n\r\nbq. So how about we rename SpatialArgs to SpatialCommand? \r\n\r\nOkay I guess.  How about SpatialQueryCommand or SpatialArgsCommand?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-07-16T14:17:32.362+0000","updated":"2012-07-16T14:17:32.362+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13415180","id":"13415180","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"bq. Why not just a static method on Strategy? I'm not sure there is much need for a utility class yet.\r\n\r\nMy problem with this and with having the stored-field stuff as static methods too, is that having them on Strategy it seems that they are the only/preferred/recommended way to do something and I don't feel that's the case.  Instead they are methods which we think do a good job in a certain selection of use cases, possibly even the majority of use cases.  I don't want users to get the wrong idea.\r\n\r\nbq. What should BBoxStrategy do? It's very existence is largely due to its overlap percentage based relevancy – pretty cool. Would it have a makeDistanceValueSource() that does something different? – perhaps one that gets the center of the indexed shape and uses that? It could work via new BBoxSimilarityValueSource(CenterDistanceSimilarity(...)) (hypothetical implementation to be developed). And the current one might be makeCustomValueSource with the ability for the caller to pass in AreaSimilarity()\r\n\r\nYeah this is difficult but I like the idea of makeCustomValueSource.  I don't know much about BBoxStrategy but as long as it is possible to calculate the distance between the centre of two BBoxes, then we should be fine with makeDistanceValueSource, right? We can then document makeCustomValueSource as being a generic method which Strategys may define custom behavior for (we can perhaps have it default to just calling makeDistanceValueSource).  If we get to a situation where we have another Strategy-wide ValueSource idea, we can then spin that off into another makeXXXValueSource method.\r\n\r\nbq. Would a makeDistanceValueSource() make it inefficient to support an inverted distance? This may be a stupid question but we ultimately want this as the default for a query: LUCENE-4208 – for example at the Solr layer.\r\n\r\nWe can have the DistanceCalculator or whatever is used to calculate the distance, return the inverted distance.  Certainly wrapping a ValueSource in _another_ ValueSource just to invert the distance would be inefficient.\r\n\r\nbq. Okay I guess. How about SpatialQueryCommand or SpatialArgsCommand?\r\n\r\nI like SpatialQueryCommand.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-07-16T14:35:25.073+0000","updated":"2012-07-16T14:36:23.569+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13415199","id":"13415199","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Keeping score... we're +1 for makeQuery() going away.  Nice.\r\n\r\nbq. My problem with this and with having the stored-field stuff as static methods too, is that having them on Strategy it seems that they are the only/preferred/recommended way to do something and I don't feel that's the case.\r\n\r\nOkay then.  So a SpatialUtil class with a private no-arg constructor with static methods?\r\n\r\nbq. then we should be fine with makeDistanceValueSource, right?\r\n\r\nYes, it is totally do-able with BBoxStrategy and should in theory be for any Strategy.  Until someone has the time to do it for BBoxStrategy (should be easy) it could throw an UnsupportedOperationException.\r\n\r\nBy the way, I was not suggesting makeCustomValueSource() be on the Strategy API, it would be specific to BBoxStrategy.\r\n\r\nbq. We can have the DistanceCalculator or whatever is used to calculate the distance, return the inverted distance.\r\n\r\nSo... are we then talking about a makeInvertedDistanceValueSource() method?  Hmm, this is somewhat less satisfying.  Perhaps instead a boolean argument to invert it?\r\n\r\nbq. I like SpatialQueryCommand.\r\n\r\nGood; lets do it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-07-16T14:55:20.100+0000","updated":"2012-07-16T14:55:20.100+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13415206","id":"13415206","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"bq. Okay then. So a SpatialUtil class with a private no-arg constructor with static methods?\r\n\r\nYeah something like that.\r\n\r\nbq. By the way, I was not suggesting makeCustomValueSource() be on the Strategy API, it would be specific to BBoxStrategy.\r\n\r\nAh okay.  Perhaps we can call it makeOverlapValueSource() then? if that's what the value is\r\n\r\nbq. So... are we then talking about a makeInvertedDistanceValueSource() method? Hmm, this is somewhat less satisfying. Perhaps instead a boolean argument to invert it?\r\n\r\nNo I don't think we need to call it that or make the differentiation.  Our makeDistanceValueSource() should return the inverted distance since it's arguably more useful.  If people want the original distance (maybe for display sake) then they can un-invert it themselves.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-07-16T15:08:09.345+0000","updated":"2012-07-16T15:08:09.345+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13421987","id":"13421987","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"body":"I think somewhere along the lines we lost track of the original purpose of this issue, removing SpatialOperation.  Originally I strongly pushed to remove SpatialOperation and use strongly typed methods.  But after considering that a little and dabbling in adding operations to some Strategies, I'm unsure how effective it would be.  \r\n\r\nRequiring an interface per operation seems heavy handed since inevitably the consumer will interact with a Strategy instance, not a ContainsXYZ instance.  Equally, having a makeXYZFilter method for each operation in Strategy would seem to simply move the problem rather than address it since many Strategies won't be implementing all the operations (meaning they'll have to throw an UOE) while other Strategies will be implementing many operations.\r\n\r\nAs such I withdraw my interest in removing SpatialOperation and instead think we need to focus on documentation to make it clear to consumers which Strategies fit their needs.  I'll extract some of the other improvements discussed here and spin them off as issues.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cmale","name":"cmale","emailAddress":"gento0nz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Male","active":true},"created":"2012-07-25T04:03:01.457+0000","updated":"2012-07-25T04:03:01.457+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13423072","id":"13423072","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I spent some time working on TwoDoublesStrategy to make it not use makeQuery and to simplify it and fix the dateline bug.  Then it a realization hit me: if makeQuery() goes away (the default impl gets used) and the input is a circle and sorting is desired, the distances will wind up getting calculated twice.  The first is for the filter, the 2nd is makeDistanceValueSource called via default impl of makeQuery().  I still think makeQuery() should go away, albeit I have less conviction about that now.\r\n\r\nRemember my suggestion of having some sort of object which I proposed be called SpatialSearch that is returned from a method on the strategy?  This would have a makeFilter() and makeDistanceValueSource() instead of them being directly on the strategy.  The SpatialSearch instance is per-search and affords the opportunity to cache intermediate results across method calls.  Ryan told me about wanting to do this for a specialized use-case he has with JtsStrategy (in Spatial4j right now) where he unfortunately resorts to a ThreadLocal work-around to share the results.  I can also imagine a sort strategy for RecursivePrefixTreeStrategy in which the filter is informed it should calculate matching distances in addition to its filtering job, so that they can be retrieved later.  Of course the filtering would be slower the more points that are covered by the search radius, but it's viable for some use-cases.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-07-26T13:52:06.503+0000","updated":"2012-07-26T13:52:06.503+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12596071/comment/13423636","id":"13423636","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"We concluded in private chat that the status quo is probably best right now.  That is, makeQuery() stays, so that it affords the opportunity for internal efficiencies when doing a combined filter & sort.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-07-27T02:24:52.334+0000","updated":"2012-07-27T02:24:52.334+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-4167/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04fyv:"}}