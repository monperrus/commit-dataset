{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12384034","self":"https://issues.apache.org/jira/rest/api/latest/issue/12384034","key":"DERBY-3257","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313142","id":"12313142","description":"","name":"10.3.3.0","archived":false,"released":true,"releaseDate":"2008-05-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-12-06 17:01:36.133","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23526","customfield_12310222":"1_*:*_1_*:*_4130662647_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_183031083","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2008-01-22T20:22:12.220+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3257/watchers","watchCount":0,"isWatching":false},"created":"2007-12-06T00:57:49.573+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"8.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312876","id":"12312876","description":"","name":"10.3.2.1","archived":false,"released":true,"releaseDate":"2007-12-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12318534","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318534","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"12354628","key":"DERBY-2034","self":"https://issues.apache.org/jira/rest/api/2/issue/12354628","fields":{"summary":"Tracking of bugs that lead to incorrect results being stored or returned to the client","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/5","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/trivial.png","name":"Trivial","id":"5"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}},{"id":"12318428","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318428","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12325311","key":"DERBY-681","self":"https://issues.apache.org/jira/rest/api/2/issue/12325311","fields":{"summary":"Eliminate the parser's rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2009-06-30T15:55:47.325+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"Attached program demonstrates the problem.  Only one count is returned (matching CODE= GBR) - the count of CODE=CHA is not returned.  Works fine with versions 10.1 and 10.2 or if program is run using 10.3 jars and 10.2 database (soft upgrade).\n\nQuery:\nSELECT COUNT(t0.ID) FROM CTS1.TEST_TABLE t0 \n  GROUP BY t0.CODE \n    HAVING (t0.CODE = 'GBR' OR t0.CODE = 'CHA') AND t0.CODE IS NOT NULL\n\nIncorrect results (see last line):\nDatabase product: Apache Derby\nDatabase version: 10.3.1.5 - (579866)\nDriver name:      Apache Derby Embedded JDBC Driver\nDriver version:   10.3.1.5 - (579866)\nresult: 2\n\n\nCorrect results:\nDatabase product: Apache Derby\nDatabase version: 10.2.2.0 - (485682)\nDriver name:      Apache Derby Embedded JDBC Driver\nDriver version:   10.2.2.0 - (485682)\nresult: 4\nresult: 2","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"38819","summary":"SELECT with HAVING clause containing OR conditional incorrectly return 1 row - should return 2 rows - works correctly with 10.2 DB","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stan","name":"stan","emailAddress":"Stan dot Bradbury at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stan Bradbury","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stan","name":"stan","emailAddress":"Stan dot Bradbury at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stan Bradbury","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":22,"total":22,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12549097","id":"12549097","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thanks for the reproducible program, Stan.  The test returns correct results before svn # 516454 (for DERBY-681), but returns incorrect results after.  So it appears that DERBY-681 is at least partially at play here.  Early (incremental) changes for DERBY-47 might also be a factor, but I haven't confirmed one way or the other.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-12-06T17:01:36.133+0000","updated":"2007-12-06T17:01:36.133+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12551569","id":"12551569","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"My trunk client is at revision 603368\r\n$ svn info\r\nPath: .\r\nURL: https://svn.apache.org/repos/asf/db/derby/code/trunk\r\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\r\nRevision: 603368\r\nNode Kind: directory\r\nSchedule: normal\r\nLast Changed Author: kmarsden\r\nLast Changed Rev: 603301\r\nLast Changed Date: 2007-12-11 09:03:01 -0800 (Tue, 11 Dec 2007)\r\nProperties Last Updated: 2007-11-26 09:22:05 -0800 (Mon, 26 Nov 2007)\r\n\r\nWhen I run the attached test case with revision 603368, I get incorrect results, ie only one count is returned back.\r\n$ java org.apache.derbyTesting.functionTests.tests.lang.DERBY_3257_Repro\r\nDatabase product: Apache Derby\r\nDatabase version: 10.4.0.0 alpha - (1)\r\nDriver name:      Apache Derby Embedded JDBC Driver\r\nDriver version:   10.4.0.0 alpha - (1)\r\nresult: 2","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2007-12-13T18:24:35.532+0000","updated":"2007-12-13T18:24:35.532+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12559758","id":"12559758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"In DERBY-3231, Manish mentioned.\r\n\r\n>Mike, I'll take a look at DERBY-3257.\r\n\r\nManish, I was wondering if you have been able to make any progress on this issue. I'd be willing to help in any way I can, adding tests, committing the change etc.  I am not sure exactly how much else I can offer. I thought I would try to educate myself by reading the notes attached to DERBY-681, but have to admit I am a bit lost.  Any tips for the novice that you can offer would be greatly appreciated.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-17T00:21:43.654+0000","updated":"2008-01-17T00:21:43.654+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560034","id":"12560034","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Attaching the query plans for 10.2 vs 10.4\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-17T19:06:21.739+0000","updated":"2008-01-17T19:06:21.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560068","id":"12560068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Interestingly if I remove AND t0.CODE IS NOT NULL (there are no null codes to eliminate), I get the right result, two rows.\r\n        PreparedStatement pstmt = conn.prepareStatement(\"SELECT t0.CODE, COUNT(t0.ID) FROM CTS1.TEST_TABLE t0 GROUP BY t0.CODE  HAVING (t0.CODE = ? OR t0.CODE = ?)\");","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-17T20:15:30.005+0000","updated":"2008-01-17T20:15:30.005+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560151","id":"12560151","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"I noticed that if the ordering of the predicates inside the HAVING clause is reversed, the query returns the \"other\" results, i.e:\r\n\r\n  -- Returns \"2\"\r\n  SELECT COUNT(t0.ID) FROM TEST_TABLE t0\r\n   GROUP BY t0.CODE HAVING (t0.CODE = 'GBR' OR t0.CODE = 'CHA') AND t0.CODE IS NOT NULL;\r\n\r\n  -- Returns \"4\"\r\n  SELECT COUNT(t0.ID) FROM TEST_TABLE t0\r\n   GROUP BY t0.CODE HAVING (t0.CODE = 'CHA' OR t0.CODE = 'GBR') AND t0.CODE IS NOT NULL;\r\n\r\nWith a little tracing it turns out that the HAVING clause is somehow getting messed up during preprocessing.  More specifically, see line 883 in SelectNode.preprocess():\r\n\r\n    if (havingClause != null) {\r\n        havingClause = havingClause.preprocess(\r\n                numTables, fromList, havingSubquerys, wherePredicates);\r\n    }\r\n\r\nBefore the call to \"havingClause.preprocess(...)\" the HAVING clause is correct:\r\n\r\n  havingClause ==> (OrNode AND NotNullNode)\r\n\r\nwhere:\r\n\r\n  -- OrNode ==> (BinaryRelationalOperatorNode_0  OR BinaryRelationalOperatorNode_1)\r\n  -- BinaryRelationalOperatorNode_0 ==> (t0.CODE = 'GBR')\r\n  -- BinaryRelationalOperatorNode_1 ==> (t0.CODE = 'CHA')\r\n\r\nBut after the call to that method, the OrNode has been replaced with its left operand:\r\n\r\n  havingClause ==> (BinaryRelationalOperatorNode_0 AND NotNullNode)\r\n\r\nSo we lose half of the OR condition, and that's why we end up with missing rows.  A good start for this issue would be to set a break point inside the above \"if\" statement and then trace through the preprocessing logic to see when/how/why the OrNode gets replaced with its left operand...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-17T23:09:05.712+0000","updated":"2008-01-17T23:09:05.712+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560161","id":"12560161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"I started worrying that the underlying cause of this might be DERBY-47 after all, so I did a little more tracing.  From what I can tell, the code in OrNode.preprocess() that converts an OR chain into a IN list was doing the wrong thing--esp. it was only grabbing the left OR value, not the right.  If the same predicate appears in the WHERE clause the preprocessing is fine, though...\r\n\r\nIt turns out that the OrNode preprocess() method expects everything to be normalized to Conjunctive Normal Form--and we do in fact normalize the WHERE as part of SelectNode.normExpressions().  But we do *NOT* currently normalize the HAVING clause, so when the OrNode in the HAVING clause was preprocessed, we were doing the wrong thing.\r\n\r\nI made a very quick change to normalize the HAVING clause, as well, and the queries posted to this issue now return correct results (2 rows).  I have not run any other tests on it, though, so this might not be a valid fix.  But it does indicate what the problem is to some degree...\r\n\r\nWhy this worked before DERBY-681 and fails after I'm not sure, but given the scope of DERBY-681 it seems quite possible that the changes for that issue affected HAVING predicates in a way such that normalization is now a requirement...?\r\n\r\nI'm calling my quick change d3257_doNOTCommit.patch because I haven't tested it at all (except for the queries in this issue).  It should not be considered a viable approach until someone does more verification...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-17T23:40:36.972+0000","updated":"2008-01-17T23:40:36.972+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560164","id":"12560164","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Sorry for the spam, attached wrong file last time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-17T23:50:16.701+0000","updated":"2008-01-17T23:50:16.701+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560186","id":"12560186","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Army for looking at this issue. I ran lang._Suite with the patch and see an interesting symptom that some queries are now throwing a 42X24 exception. e.g. in aggregate.sql\r\n\r\nselect c1 from t1\r\ngroup by c1\r\nhaving max(c2) in (select c1 from t2);\r\nERROR 42X24: Column C1 is referenced in the HAVING clause but is not in the GROUP BY list.\r\n\r\nThanks for the jump start though.  I will investigate what is going on with this error with the patch.  \r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-18T01:07:27.839+0000","updated":"2008-01-18T01:07:27.839+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560206","id":"12560206","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Here is the script to reproduce the 42X24 error message with the patch.\r\n\r\nij> run '42X24_error.sql';\r\nij> connect 'jdbc:derby:wombat;create=true';\r\nWARNING 01J01: Database 'wombat' not created, connection made to existing database instead.\r\nij> drop table t1;\r\n0 rows inserted/updated/deleted\r\nij> drop table t2;\r\n0 rows inserted/updated/deleted\r\nij> create table t1 (c1 int, c2 int);\r\n0 rows inserted/updated/deleted\r\nij> create table t2 (c1 int, c2 int);\r\n0 rows inserted/updated/deleted\r\nij> create table oneRow (c1 int, c2 int);\r\nERROR X0Y32: Table/View 'ONEROW' already exists in Schema 'APP'.\r\njava.sql.SQLException: Table/View 'ONEROW' already exists in Schema 'APP'.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:202)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1666)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1324)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:624)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:556)\r\n        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:330)\r\n        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:508)\r\n        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350)\r\n        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)\r\n        at org.apache.derby.impl.tools.ij.Main.go(Main.java:215)\r\n        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)\r\n        at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)\r\n        at org.apache.derby.tools.ij.main(ij.java:59)\r\nCaused by: ERROR X0Y32: Table/View 'ONEROW' already exists in Schema 'APP'.\r\n        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:371)\r\n        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(DataDictionaryImpl.java:167\r\n3)\r\n        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(DataDictionaryImpl.java:1664)\r\n        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(DataDictionaryImpl.java:1643)\r\n        at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(CreateTableConstantAction.j\r\nava:238)\r\n        at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1234)\r\n        ... 10 more\r\nij> insert into oneRow values(1,1);\r\n1 row inserted/updated/deleted\r\nij> insert into t1 values (null, null), (1,1), (null, null), (2,1), (3,1), (10,10);\r\n6 rows inserted/updated/deleted\r\nij> insert into t2 values (null, null), (1,1), (null, null), (2,1), (3,1), (10,10);\r\n6 rows inserted/updated/deleted\r\nij> select c1 from t1\r\ngroup by c1\r\nhaving max(c2) in (select c1 from t2);\r\nERROR 42X24: Column C1 is referenced in the HAVING clause but is not in the GROUP BY list.\r\njava.sql.SQLException: Column C1 is referenced in the HAVING clause but is not in the GROUP BY list.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:202)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1666)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:613)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:556)\r\n        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:330)\r\n        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:508)\r\n        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350)\r\n        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)\r\n        at org.apache.derby.impl.tools.ij.Main.go(Main.java:215)\r\n        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)\r\n        at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)\r\n        at org.apache.derby.tools.ij.main(ij.java:59)\r\nCaused by: ERROR 42X24: Column C1 is referenced in the HAVING clause but is not in the GROUP BY list.\r\n        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n        at org.apache.derby.impl.sql.compile.GroupByNode.addNewColumnsForAggregation(GroupByNode.java:529)\r\n        at org.apache.derby.impl.sql.compile.GroupByNode.addAggregates(GroupByNode.java:237)\r\n        at org.apache.derby.impl.sql.compile.GroupByNode.init(GroupByNode.java:181)\r\n        at org.apache.derby.iapi.sql.compile.NodeFactory.getNode(NodeFactory.java:273)\r\n        at org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(SelectNode.java:1242)\r\n        at org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths(SelectNode.java:1816)\r\n        at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(DMLStatementNode.java:307)\r\n        at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(CursorNode.java:515)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:365)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)\r\n        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConne\r\nctionContext.java:756)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:607)\r\n        ... 9 more\r\nij>","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-18T03:16:48.804+0000","updated":"2008-01-18T03:16:48.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560469","id":"12560469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I notice that if I avoid normExpressions for SubqueryNodes, things seem to work ok for both the test case and 42X24_error.sql.  i.e.\r\n\t\tif (! (havingClause instanceof SubqueryNode))\r\n\t\t    havingClause = normExpressions(havingClause);\r\n\r\nI am not sure that this is the right solution.  I think I need a better understanding of why it is necessary for the havingClause to be in CNF before the call to preprocess and is it a problem to avoid that for SubqueryNodes.  I am running suites.All to see if there are any issues but would appreciate input on whether I am on the right track here.\r\n\r\nThanks\r\n\r\nKathey\r\n\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-18T17:24:20.398+0000","updated":"2008-01-18T17:24:20.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560471","id":"12560471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"TestHaving cannot be contributed to Apache. We will need to make another test.  Reattaching without grant license.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-18T17:26:26.955+0000","updated":"2008-01-18T17:26:26.955+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560494","id":"12560494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> I think I need a better understanding of why it is necessary for the havingClause\r\n> to be in CNF before the call to preprocess\r\n\r\nThis is a good question--and perhaps in the long run this is not requirement per se.  The only reason I thought to normalize the havingClause is because the OrNode.preprocess() method expects that the OrNode has been normalized.  I.e. it expects that the predicate:\r\n\r\n  [not normalized] =>  (t0.CODE = 'GBR' OR t0.CODE = 'CHA')\r\n\r\nbecomes\r\n\r\n  [normalized] => (t0.CODE = 'GBR' OR ((t0.CODE = 'CHA') OR FALSE))\r\n\r\nWhen it transforms the OR list into an IN list, then, it just walks the tree and grabs the left operand from all of the chained ORs.  So in the normalized case we grab:\r\n\r\n  1. t0.CODE = 'GBR'\r\n  2. t0.CODE = 'CHA'\r\n\r\nFrom those two predicates we then get \"t0.CODE in ('GBR', 'CHA')\", which is correct.  If the HAVING clause is not normalized, though, then the logic in OrNode will only grab:\r\n\r\n  1. t0.CODE = 'GBR'\r\n\r\nbecause there is only one OrNode and that's its left operand.   So we end up with \"t0.CODE in ('GBR')\" and thus we miss the row for 'CHA'.\r\n\r\nAll of that said, maybe normalizing the HAVING clause is not the best solution, or perhaps it goes too far?  Maybe OrNode should be changed to recognize if it is NON-normalized and should not try to transform itself in that case?  If that's true, the follow-up question would be: Are there other places in the code that expect the having clause to be normalized, as well?\r\n\r\nIt seems to me that something in DERBY-681 has exposed the HAVING clause to processing that was previously only applied to WHERE clauses.  If that's true, and if the change was intentional, then the HAVING clause should (in theory) have to go through the same pre-processing steps as the WHERE clause--which includes normalization.  If that change in behavior was not intentional, though, then maybe the fix for this issue is to somehow prevent WHERE-clause -specific processing from happening on the HAVING clause.  I don't know for sure, but that last option sounds pretty hard...\r\n\r\n> is it a problem to avoid [normalization] for SubqueryNodes?\r\n\r\nI would follow this up with two other questions:\r\n\r\n  1. What it is about normalization that causes problems for the SubqueryNode?  It looks like the 42X24 error comes because the result column referenced within the subquery has a \"source level\" that is the same as the outer query--and that is (apparently?) because the SuqbueryNode somehow \"disappears\" as a result of the normalization.  That suggests that perhaps the Subquery is being flattened during, or as a result of, normalization.  Without normalization, the SubqueryNode hangs around and its result column gets a source level that is different from the outer query, so the check in GroupByNode.addNewColumnsForAggregation() passes.\r\n\r\n  2. What happens if the same nested query appears in a WHERE clause and the WHERE clause is normalized?  Will the subquery be flattened during or after normalization?\r\n\r\nThese two questions don't answer yours, but perhaps some investigation of them will lead to an answer.  If the answer is \"Yes, it's okay to avoid normalization for SubqueryNodes\", then that leads to yet another question: are there other nodes for which it is okay to avoid normalization, as well?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-18T18:37:46.486+0000","updated":"2008-01-18T18:37:46.486+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560503","id":"12560503","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Just noticed that the code which is failing with 42X24 was added as part of DERBY-681.  The corresponding comments in that issue:\r\n\r\n<begin>\r\n\r\nBasically I want to ensure that there are no column references in the havingClause as the same nesting level as this query. I think the comments with the code are adequate explanation. A new SQLCode is used for this error.\r\n\r\nSince error checking depends on nestingLevel I had to fix up code to make sure that it was set correctly in various places.\r\n\r\n<end>\r\n\r\nNot sure if this is relevant or not, but I thought I'd mention it since I was thinking the error was in code that had been around since before DERBY-681...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-18T18:58:32.875+0000","updated":"2008-01-18T18:58:32.875+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560591","id":"12560591","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Army asked;\r\n>1. What it is about normalization that causes problems for the SubqueryNode?\r\nIn SubqueryNode.preProcess() there is this code\r\n\tflattenable = (resultSet instanceof SelectNode) &&\r\n\t\t\t\t\t  underTopAndNode &&\r\n\t\t\t\t\t  (isIN() || isANY() || isEXISTS() || flattenableNotExists ||       \r\n                       parentComparisonOperator != null);\r\n\r\nWithout normalization underTopAndNode is false and so we don't flatten.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-18T23:04:36.871+0000","updated":"2008-01-18T23:04:36.871+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12560745","id":"12560745","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Attached is a patch to fix this issue. derby-3257_diff.txt.  It has Army's changes plus code to mark the subqueries that are in the having clause as such so that we can avoid flattenning during preprocess.  We clearly are not setup to handle subquery flattenning within the having clause and just happenned to avoid it before because the having clause was not normalized.  Adding the normalization meant we needed another mechanism to flag these subqueries to avoid flattenning.  Perhaps a better long term strategy would be to allow for flattenning of subqueries in the having clause, but I am guessing that is a fairly significant endeavor.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-19T23:13:53.365+0000","updated":"2008-01-19T23:13:53.365+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12561065","id":"12561065","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you for investigating this further, and for posting a complete patch, Kathey.  I verified that the new test case passes with the changes and fails without them.\r\n\r\n> We clearly are not setup to handle subquery flattenning within the having clause\r\n\r\nThis is good to know.  Just curious: is there something in the code that makes this limitation explicit, or does this statement just follow from the fact that attempts to flatten such a subquery lead to other errors?\r\n\r\nVery minor nits on the patch that you can ignore if you choose:\r\n\r\n  - Might be good to add another bullet to the list in the comment preceding the following\r\n    line, so that the comments and the code match each other.\r\n\r\n        @@ -609,7 +615,7 @@\r\n        -            underTopAndNode &&\r\n        +           underTopAndNode && !havingSubquery &&\r\n\r\n    Likewise for the other, similar change further down in that method.\r\n\r\n  - Some whitespace inconsistencies between new code and existing code.\r\n\r\n  - Maybe the new test case in GroupByTest would be better called \"testOrNodeInHavingClause()\"\r\n    instead of \"testDerby3257?\"  This doesn't affect the test at all, and the comments for the fixture\r\n    clearly indicate what is being tested, so this is definitely \"nit-picking\".  But a meaningful method\r\n    name seems (to me, as reader of the test) slightly more convenient than the Derby Jira number.\r\n\r\nBut these nits aside, if you've run derbyall and suites.All with this change and there were no failures, I think the patch can be committed...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-21T17:02:28.065+0000","updated":"2008-01-21T17:02:28.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12561101","id":"12561101","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Army for looking at the patch.\r\nAttached is a revised patch derby-3257_diff2.txt with the changes you recommended.  I will commit this afternoon if I don't hear anything back.\r\n\r\nYou asked\r\n>Is there something in the code that makes this limitation explicit, or does this statement just follow from the fact that attempts to flatten such a subquery lead to other errors?\r\n\r\nFlattenning produces a column in the having clause that is not generated to replace an aggregate causing this condition to throw the exception:\r\nif (!cr.getGeneratedToReplaceAggregate() && \r\n\t\t\t\t\t\tcr.getSourceLevel() == level) {\r\n\t\t\t\t\tthrow StandardException.newException(\r\n\t\t\t\t\t\t\tSQLState.LANG_INVALID_COL_HAVING_CLAUSE, \r\n\t\t\t\t\t\t\tcr.getSQLColumnName());\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\nI tried to understand why this condition was necessary by commenting it out and I ended up with a null pointer exception in the generated code when I had a select in the having clause.  I didn't pursue it much further than that and figured Manish put that condition and error there for good reason.  Perhaps there is a way to allow the flattenning of the subquery  but I was not able to figure out how to do it so went with this solution.\r\n            \r\nI'm hoping at some point.  Manish or someone else can take a look at this and come up with a more elegant solution allowing the subqueries to be flattenned in the having clause.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-21T19:18:00.959+0000","updated":"2008-01-21T19:18:00.959+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12561113","id":"12561113","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Fwiw: I applied the first version of your patch and verified that the repro worked correctly. I also ran all the tests with the patch. I saw no failures. +1 to commit. And thanks for addressing this - one less regression to worry about :)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-21T20:13:32.297+0000","updated":"2008-01-21T20:14:12.691+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12561384","id":"12561384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Looks like there were no issues with the nightlies due to this change.  I will check into 10.3 as soon as my tests complete.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-22T17:21:32.256+0000","updated":"2008-01-22T17:21:32.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12561449","id":"12561449","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Merged fix to 10.3 with revision  614304","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-22T20:22:12.148+0000","updated":"2008-01-22T20:45:34.189+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12384034/comment/12562288","id":"12562288","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stan","name":"stan","emailAddress":"Stan dot Bradbury at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stan Bradbury","active":true},"body":"Catching up on Closing my reported issues.  Thanks to Dyre for the workflow reminder today.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stan","name":"stan","emailAddress":"Stan dot Bradbury at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Stan Bradbury","active":true},"created":"2008-01-24T23:12:43.276+0000","updated":"2008-01-24T23:12:43.276+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3257/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i070br:"}}