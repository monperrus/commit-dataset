{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12543915","self":"https://issues.apache.org/jira/rest/api/latest/issue/12543915","key":"LUCENE-3821","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2012-02-23 22:52:03.808","customfield_12312323":null,"customfield_12310420":"229153","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-3821/watchers","watchCount":0,"isWatching":false},"created":"2012-02-23T22:23:17.553+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"8.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317877","id":"12317877","description":"Major release after 3.4","name":"3.5","archived":false,"released":true,"releaseDate":"2011-11-27"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2012-03-13T01:28:09.399+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"components":[],"timeoriginalestimate":null,"description":"The general bug is a case where a phrase with no slop is found,\r\nbut if you add slop its not.\r\n\r\nI committed a test today (TestSloppyPhraseQuery2) that actually triggers this case,\r\njenkins just hasn't had enough time to chew on it.\r\n\r\nant test -Dtestcase=TestSloppyPhraseQuery2 -Dtests.iter=100 is enough to make it fail on trunk or 3.x\r\n","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"24196","summary":"SloppyPhraseScorer sometimes misses documents that ExactPhraseScorer finds.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":32,"total":32,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13215154","id":"13215154","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Here's Naomi's original description (moved from description section): including the queries, however I can't \r\nreproduce with just that phrase of the document (I tried, it passes).\r\n\r\nI think its a more complex bug in SloppyPhraseScorer... and I can reproduce similar behavior with another test.\r\n\r\n{noformat}\r\nIn upgrading from Solr 1.4 to Solr 3.5, the following phrase searches stopped working in dismax:\r\n\"The Beatles as musicians : Revolver through the Anthology\"\r\n\"Color-blindness [print/digital]; its dangers and its detection\"\r\nBoth of these queries have a repeated work, and have many terms. It's not the number of terms or the colon surrounded by spaces, because the following phrase search works in Solr 3.5 (and Solr 1.4):\r\n\"International encyclopedia of revolution and protest : 1500 to the present\"\r\n\r\nWith Robert Muir's help, we have narrowed the problem down to slop (proximity in lucene QueryParser, query slop in dismax). I have included debugQuery details for the Beatles search; I confirmed the same behavior with the color-blindness search.\r\n\r\nSolr 3.5: it fails when (query) slop setting isn't 0.\r\n\r\nlucene QueryParser with proximity set to 1 (or anything > 0) : no match\r\nURL: q=all_search:\"The Beatles as musicians : Revolver through the Anthology\"~1\r\nfinal query: all_search:\"the beatl as musician revolv through the antholog\"~1\r\n\r\nlucene QueryParser with proximity set to 0: result!\r\nURL: q=all_search:\"The Beatles as musicians : Revolver through the Anthology\"\r\nfinal query: all_search:\"the beatl as musician revolv through the antholog\"\r\n\r\n6.0562754 = (MATCH) weight(all_search:\"the beatl as musician revolv through the antholog\" in 1064395), product of:\r\n<snip>\r\n48.450203 = idf(all_search: the=3531140 beatl=398 as=645923 musician=11805 revolv=872 through=81366 the=3531140 antholog=11611)\r\n<snip>\r\n\r\ndismax QueryParser with qs=1: no match\r\nps=0\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=1&ps=0\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01 (all_search:\"the beatl as musician revolv through the antholog\")~0.01\r\nps=1\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=1&ps=1\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01 (all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01\r\n\r\ndismax QueryParser with qs=0: result!\r\nps=0\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=0&ps=0\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\")~0.01 (all_search:\"the beatl as musician revolv through the antholog\")~0.01\r\nps=1\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=0&ps=1\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\")~0.01 (all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01\r\n\r\n8.564867 = (MATCH) sum of:\r\n4.2824335 = (MATCH) weight(all_search:\"the beatl as musician revolv through the antholog\" in 1064395), product of:\r\n<snip>\r\n48.450203 = idf(all_search: the=3531140 beatl=398 as=645923 musician=11805 revolv=872 through=81366 the=3531140 antholog=11611)\r\n<snip>\r\n\r\nSolr 1.4: it works regardless of slop settings\r\n\r\nlucene QueryParser with any proximity value: result!\r\n~0\r\nURL: q=all_search:\"The Beatles as musicians : Revolver through the Anthology\"\r\nfinal query: all_search:\"the beatl as musician revolv through the antholog\"\r\n~1\r\nURL: q=all_search:\"The Beatles as musicians : Revolver through the Anthology\"~1\r\nfinal query: all_search:\"the beatl as musician revolv through the antholog\"~1\r\n\r\n5.2672544 = fieldWeight(all_search:\"the beatl as musician revolv through the antholog\" in 3469163), product of:\r\n<snip>\r\n48.157753 = idf(all_search: the=3549637 beatl=392 as=751093 musician=11992 revolv=822 through=88522 the=3549637 antholog=11246)\r\n<snip>\r\n\r\ndismax QueryParser with any qs: result!\r\nqs=0, ps=0\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=0&ps=0\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\")~0.01 (all_search:\"the beatl as musician revolv through the antholog\")~0.01\r\nqs=0, ps=1\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=0&ps=1\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\")~0.01 (all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01\r\ndismax QueryParser with qs=0: result!\r\nqs=1, ps=0\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=1&ps=0\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01 (all_search:\"the beatl as musician revolv through the antholog\")~0.01\r\nqs=1, ps=1\r\nURL: qf=all_search&pf=all_search&q=\"The Beatles as musicians : Revolver through the Anthology\"&qs=1&ps=1\r\nfinal query: +(all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01 (all_search:\"the beatl as musician revolv through the antholog\"~1)~0.01\r\n\r\n7.4490223 = (MATCH) sum of:\r\n3.7245111 = weight(all_search:\"the beatl as musician revolv through the antholog\"~1 in 3469163), product of:\r\n<snip>\r\n48.157753 = idf(all_search: the=3549637 beatl=392 as=751093 musician=11992 revolv=822 through=88522 the=3549637 antholog=11246)\r\n<snip>\r\n\r\nMore information:\r\n\r\nschema.xml:\r\n<field name=\"all_search\" type=\"text\" indexed=\"true\" stored=\"false\" />\r\n\r\nsolr 3.5:\r\n<fieldtype name=\"text\" class=\"solr.TextField\" positionIncrementGap=\"100\" autoGeneratePhraseQueries=\"true\">\r\n<analyzer>\r\n<tokenizer class=\"solr.WhitespaceTokenizerFactory\" />\r\n<filter class=\"solr.ICUFoldingFilterFactory\"/>\r\n<filter class=\"solr.WordDelimiterFilterFactory\"\r\nsplitOnCaseChange=\"1\" generateWordParts=\"1\" catenateWords=\"1\"\r\nsplitOnNumerics=\"0\" generateNumberParts=\"1\" catenateNumbers=\"1\"\r\ncatenateAll=\"0\" preserveOriginal=\"0\" stemEnglishPossessive=\"1\" />\r\n<filter class=\"solr.EnglishPorterFilterFactory\" protected=\"protwords.txt\" />\r\n<filter class=\"solr.RemoveDuplicatesTokenFilterFactory\" />\r\n</analyzer>\r\n</fieldtype>\r\n\r\nsolr1.4:\r\n<fieldtype name=\"text\" class=\"solr.TextField\" positionIncrementGap=\"100\">\r\n<analyzer>\r\n<tokenizer class=\"solr.WhitespaceTokenizerFactory\" />\r\n<filter class=\"schema.UnicodeNormalizationFilterFactory\" version=\"icu4j\" composed=\"false\" remove_diacritics=\"true\" remove_modifiers=\"true\" fold=\"true\" />\r\n<filter class=\"solr.WordDelimiterFilterFactory\"\r\nsplitOnCaseChange=\"1\" generateWordParts=\"1\" catenateWords=\"1\"\r\nsplitOnNumerics=\"0\" generateNumberParts=\"1\" catenateNumbers=\"1\"\r\ncatenateAll=\"0\" preserveOriginal=\"0\" stemEnglishPossessive=\"1\" />\r\n<filter class=\"solr.LowerCaseFilterFactory\" />\r\n<filter class=\"solr.EnglishPorterFilterFactory\" protected=\"protwords.txt\" />\r\n<filter class=\"solr.RemoveDuplicatesTokenFilterFactory\" />\r\n</analyzer>\r\n</fieldtype>\r\n\r\nAnd the analysis page shows the same results for Solr 3.5 and 1.4\r\n\r\nSolr 3.5:\r\n\r\nposition 1 2 3 4 5 6 7 8\r\nterm text the beatl as musician revolv through the antholog\r\nkeyword false false false false false false false false\r\nstartOffset 0 4 12 15 27 36 44 48\r\nendOffset 3 11 14 24 35 43 47 57\r\ntype word word word word word word word word\r\n\r\nSolr 1.4:\r\n\r\nterm position 1 2 3 4 5 6 7 8\r\nterm text the beatl as musician revolv through the antholog\r\nterm type word word word word word word word word\r\nsource start,end 0,3 4,11 12,14 15,24 27,35 36,43 44,47 48,57\r\n\r\nFor debug purposes, we can consider the Solr document as:\r\n\r\n<doc>\r\n<str name=\"all_search\">The Beatles as musicians : Revolver through the Anthology</str>\r\n</doc>\r\n\r\nI can't attached the full SolrDoc as all_search is indexed, but not stored, and I use SolrJ to write to the index from java objects ... plus our objects have a zillion fields (I work in a library with very rich metadata and very exacting solr fields). I have attached the Solr 3.5 schema and solrconfig, but they are big and ugly for the same reasons.\r\n\r\nFor more details, see the erroneously titled email thread \"result present in Solr 1.4 but missing in Solr 3.5, dismax only\" started on 2012-02-22 on solr-user@lucene.apache.org.\r\n\r\n    Naomi\r\n\r\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-02-23T22:52:03.808+0000","updated":"2012-02-23T22:52:03.808+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13215160","id":"13215160","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Moving to comments...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-02-23T22:59:05.896+0000","updated":"2012-02-23T22:59:05.896+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13215172","id":"13215172","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"body":"How's this for a document:\r\n\r\n<doc>\r\n<str name=\"id\">1</str>\r\n<str name=\"title_245a_display\">The Beatles as musicians</str>\r\n<str name=\"title_245a_search\">The Beatles as musicians :</str>\r\n<str name=\"title_245c_display\">Walter Everett</str>\r\n<str name=\"title_display\">The Beatles as musicians : Revolver through the Anthology</str>\r\n<str name=\"title_full_display\">The Beatles as musicians : Revolver through the Anthology  / Walter Everett.</str>\r\n<str name=\"title_245_search\">The Beatles as musicians : Revolver through the Anthology  / Walter Everett.</str>\r\n<str name=\"title_sort\">Beatles as musicians Revolver through the Anthology</str>\r\n<str name=\"all_search\">The Beatles as musicians : Revolver through the Anthology</str>\r\n</doc>","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"created":"2012-02-23T23:04:56.316+0000","updated":"2012-02-23T23:04:56.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13215174","id":"13215174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Here's an improved test that fails every time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-02-23T23:06:08.306+0000","updated":"2012-02-23T23:06:08.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13215191","id":"13215191","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"I reviewed the random failures: in all cases it fails, repeated terms are in the query.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-02-23T23:21:52.281+0000","updated":"2012-02-23T23:21:52.281+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13219123","id":"13219123","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I just @Ignore'd this test... it's creating a lot of Jenkins noise... but we should fix this bug!!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-02-29T11:44:13.679+0000","updated":"2012-02-29T11:44:13.679+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13219156","id":"13219156","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Fails here too like this: \r\n\r\nant test -Dtestcase=TestSloppyPhraseQuery2 -Dtestmethod=testRandomIncreasingSloppiness -Dtests.seed=-171bbb992c697625:203709d611c854a5:1ca48cb6d33b3f74 -Dargs=\"-Dfile.encoding=UTF-8\"\r\n\r\nI'll look into it","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-02-29T12:52:26.397+0000","updated":"2012-02-29T12:52:26.397+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221737","id":"13221737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I understand the problem. \r\n\r\nIt all has to do - as Robert mentioned - with the repeating terms in the phrase query. I am working on a patch - it will change the way that repeats are handled. \r\n\r\nRepeating PPs require additional computation - and current SloppyPhraseScorer attempts to do that additional work efficiently, but over simplifies in that and fail to cover all cases. \r\n\r\nIn the core of things, each time a repeating PP is selected (from the queue) and  propagated, *all* its sibling repeaters are propagated as well, to prevent a case that two repeating PPs point to the same document position (which was the bug that originally triggered handling repeats in this code). \r\n\r\nBut this is wrong, because it propagates all siblings repeaters, and misses some cases.\r\n\r\nAlso, the code is hard to read, as Mike noted in LUCENE-2410 ([this comment|https://issues.apache.org/jira/browse/LUCENE-2410?focusedCommentId=12879443&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12879443]) ).\r\n\r\nSo this is a chance to also make the code more maintainable.\r\n\r\nI have a working version which is not ready to commit yet, and all the tests pass, except for one which I think is a bug in ExactPhraseScorer, but maybe i am missing something. \r\n\r\nThe case that fails is this:\r\n\r\n{noformat}\r\nAssertionError: Missing in super-set: doc 706\r\nq1: field:\"(j o s) (i b j) (t d)\"\r\nq2: field:\"(j o s) (i b j) (t d)\"~1\r\ntd1: [doc=706 score=7.7783184 shardIndex=-1, doc=175 score=6.222655 shardIndex=-1]\r\ntd2: [doc=523 score=5.5001016 shardIndex=-1, doc=957 score=5.5001016 shardIndex=-1, doc=228 score=4.400081 shardIndex=-1, doc=357 score=4.400081 shardIndex=-1, doc=390 score=4.400081 shardIndex=-1, doc=503 score=4.400081 shardIndex=-1, doc=602 score=4.400081 shardIndex=-1, doc=757 score=4.400081 shardIndex=-1, doc=758 score=4.400081 shardIndex=-1]\r\ndoc 706: Document<stored,indexed,tokenized<field:s o b h j t j z o>>\r\n{noformat}\r\n\r\nIt seems that q1 too should not match this document?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-03T23:45:54.053+0000","updated":"2012-03-03T23:45:54.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221746","id":"13221746","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Doron do you have the seed for that failure?  I can dig on the ExactPhraseScorer...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-03-04T00:09:07.507+0000","updated":"2012-03-04T00:09:07.507+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221747","id":"13221747","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Patch with fix for this problem. I would expect SloppyPhrase scoring performance to degrade, though I did not measure it.\r\n\r\nThe single test that still fails (and I think the bug is in ExactPhraseScorer) is testRandomIncreasingSloppiness, and can be recreated like this:\r\n{noformat}\r\nant test -Dtestcase=TestSloppyPhraseQuery2 -Dtestmethod=testRandomIncreasingSloppiness -Dtests.seed=47267613db69f714:-617bb800c4a3c645:-456a673444fdc184 -Dargs=\"-Dfile.encoding=UTF-8\"\r\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T00:17:16.230+0000","updated":"2012-03-04T00:17:16.230+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221750","id":"13221750","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Hmm patch has this:\r\n\r\n{noformat}\r\nimport backport.api.edu.emory.mathcs.backport.java.util.Arrays;\r\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-03-04T00:27:07.120+0000","updated":"2012-03-04T00:27:07.120+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221755","id":"13221755","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Thanks for digging into the problem Doron!\r\n\r\nI'm going to be ecstatic if that crazy test finds bugs both in exact and sloppy phrase scorers :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-03-04T00:32:20.056+0000","updated":"2012-03-04T00:32:20.056+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221816","id":"13221816","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"bq. Hmm patch has this: ... import backport.api...\r\n\r\nOops, here's a fixed patch, also added some comments, and removed the @Ignore from the test\r\n\r\nbq. I'm going to be ecstatic if that crazy test finds bugs both in exact and sloppy phrase scorers :)\r\n\r\nIt is a great test! Interestingly one thing it exposed is the dependency of the SloppyPhraseScorer in the order of PPs in PhraseScorer when phraseFreq() is invoked. The way things work in the super class, that order depends on the content of previously processed documents. This fix removes that wrong dependency, of course. The point is that deliberately devising a test that exposes such a bug seems almost impossible: first you need to think about such a case, and if you did, writing a test that would create this specific scenario is buggy by itself. Praise to random testing, and this random test in particular.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T07:20:09.102+0000","updated":"2012-03-04T07:20:09.102+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221840","id":"13221840","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"The remaining failure still happens with the updated patch (same seed), and still seems to me like an ExactPhraseScorer bug. \r\n\r\nHowever, it is probably not a simple one I think, because when adding to TestMultiPhraseQuery, it passes, that is, no documents are matched, as expected, although this supposedly created the exact scenario that failed above. \r\n\r\nPerhaps ExactPhraseScorer behavior too is influenced by other docs processed so far.\r\n\r\n{code:title=Add this to TestMultiPhraseQuery}\r\n  public void test_LUCENE_XYZ() throws Exception {\r\n    Directory indexStore = newDirectory();\r\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\r\n    add(\"s o b h j t j z o\", \"LUCENE-XYZ\", writer);\r\n    \r\n    IndexReader reader = writer.getReader();\r\n    IndexSearcher searcher = newSearcher(reader);\r\n    \r\n    MultiPhraseQuery q = new MultiPhraseQuery();\r\n    q.add(new Term[] {new Term(\"body\", \"j\"), new Term(\"body\", \"o\"), new Term(\"body\", \"s\")});\r\n    q.add(new Term[] {new Term(\"body\", \"i\"), new Term(\"body\", \"b\"), new Term(\"body\", \"j\")});\r\n    q.add(new Term[] {new Term(\"body\", \"t\"), new Term(\"body\", \"d\")});\r\n    assertEquals(\"Wrong number of hits\", 0,\r\n        searcher.search(q, null, 1).totalHits);\r\n    \r\n    // just make sure no exc:\r\n    searcher.explain(q, 0);\r\n    \r\n    writer.close();\r\n    searcher.close();\r\n    reader.close();\r\n    indexStore.close();\r\n  }\r\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T10:25:38.664+0000","updated":"2012-03-04T10:25:38.664+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221867","id":"13221867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Update: apparently MultiPhraseQuery.toString does not print its \"holes\".\r\n\r\nSo the query that failed was not:\r\n{noformat}field:\"(j o s) (i b j) (t d)\"{noformat}\r\n\r\nBut rather:\r\n{noformat}\"(j o s) ? (i b j) ? ? (t d)\"{noformat}\r\n\r\nWhich is a different story: this query should match the document\r\n{noformat}s o b h j t j z o{noformat}\r\n\r\nThere is a match for ExactPhraseScorer, but not for Sloppy with slope 1.\r\nSo there is still work to do on SloppyPhraseScorer...\r\n\r\n(I'll fix MFQ.toString() as well)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T12:28:44.667+0000","updated":"2012-03-04T12:28:44.667+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221870","id":"13221870","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"updated patch with fixed MFQ.toString(), which prints the problematic doc and queries in case of failure.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T12:32:15.818+0000","updated":"2012-03-04T12:32:15.818+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13221879","id":"13221879","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I think I understand the cause.\r\n\r\nIn current implementation there is an assumption that once we landed on the first candidate document, it is possible to check if there are repeating pps, by just comparing the in-doc-positions of the terms. \r\n\r\nTricky as it is, while this is true for plain PhrasePositions, it is not true for MultiPhrasePositions - assume to MPPs: (a m n) and (b x y), and first candidate document that starts with \"a b\". The in-doc-positions of the two pps would be 0,1 respectively (for 'a' and 'b') and we would not even detect the fact that there are repetitions, not to mention not putting them in the same group.\r\n\r\nMPPs conflicts with current patch in an additional manner: It is now assumed that each repetition can be assigned a repetition group. \r\n\r\nSo assume these PPs (and query positions): \r\n0:a 1:b 3:a 4:b 7:c\r\nThere are clearly two repetition groups {0:a, 3:a} and {1:b, 4:b}, \r\nwhile 7:c is not a repetition.\r\n\r\nBut assume these PPs (and query positions): \r\n0:(a b) 1:(b x) 3:a 4:b 7:(c x)\r\nWe end up with a single large repetition group:\r\n{0:(a b) 1:(b x) 3:a 4:b 7:(c x)}\r\n\r\nI think if the groups are created correctly at the first candidate document, scorer logic would still work, as a collision is decided only when two pps are in the same in-doc-position. The only impact of MPPs would be performance cost: since repetition groups are larger, it would take longer to check if there are repetitions.\r\n\r\nJust need to figure out how to detect repetition groups without relying on in-(first-)doc-positions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-04T12:59:03.443+0000","updated":"2012-03-04T12:59:03.443+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13222537","id":"13222537","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Attached updated patch. \r\n\r\nRepeating PPs with multi-Phrase-query is handled as well.\r\n\r\nThis called for more cases in the sloppy phrase scorer and more code, and, although I think the code is cleaner now, I don't know to what extent is it easier to maintain. \r\n\r\nIt definitely fixes wrong behavior that exists in current 3x and trunk (patch is for 3x).\r\n\r\nHowever, although the random test passes for me even with -Dtests.iter=2000, it is possible to \"break the scorer\" - that is, create a document and a query which should match each other but would not. \r\n\r\nThe patch adds just such a case as an @Ignored test case:  TestMultiPhraseQuery.testMultiSloppyWithRepeats(). \r\n\r\nI don't see how to solve this specific case in the context of current sloppy phrase scorer. \r\n\r\nSo there are 3 options:\r\n# leave things as they are\r\n# commit this patch and for now document the failing scenario (also keep it in the ignored test case). \r\n# devise a different algorithm for this.\r\n\r\nI would love it to be the 3rd if I just knew how to do it. Otherwise I like the 2nd, just need to keep in mind that the random test might from time to time create this scenario and so there will be noise in the test builds.\r\n\r\nPreferences?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-05T19:25:35.216+0000","updated":"2012-03-05T19:25:35.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13222958","id":"13222958","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"{quote}\r\nI would love it to be the 3rd if I just knew how to do it. Otherwise I like the 2nd, just need to keep in mind that the random test might from time to time create this scenario and so there will be noise in the test builds.\r\n{quote}\r\n\r\nI think there is no problem in fixing \"some of the bugs\" to improve the behavior, even if its still not perfect.\r\n\r\nwe can take our time thinking of how to handle the remaining scenarios... either way I think we should just go\r\nwith your judgement call on this one, since you obviously understand it better than anyone else.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-03-06T03:03:37.219+0000","updated":"2012-03-06T03:03:37.219+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223077","id":"13223077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Thanks Robert, okay, I'll continue with option 2 then.\r\n\r\nIn addition, perhaps should try harder for a sloppy version of current ExactPhraseScorer, for both performance and correctness reasons. \r\n\r\nIn ExactPhraseScorer, the increment of count[posIndex] is by 1, each time the conditions for a match (still) holds.  \r\n\r\nA sloppy version of this, with N terms and slop=S could increment differently:\r\n{noformat}\r\n1 + N*S        at posIndex\r\n1 + N*S - 1    at posIndex-1 and posIndex+1\r\n1 + N*S - 2 at posIndex-2 and posIndex+3\r\n...\r\n1 + N*S - S at posIndex-S and posIndex+S\r\n{noformat}\r\n\r\nFor S=0, this falls back to only increment by 1 and only at posIndex, same as the ExactPhraseScorer, which makes sense.\r\n\r\nAlso, the success criteria in ExactPhraseScorer, when checking term k, is, before adding up 1 for term k:\r\n* count[posIndex] == k-1\r\nOr, after adding up 1 for term k:\r\n* count[posIndex] == k\r\n\r\nIn the sloppy version the criteria (after adding up term k) would be:\r\n* count[posIndex] >= k*(1+N*S)-S\r\n\r\nAgain, for S=0 this falls to the ExactPhraseScorer logic:\r\n* count[posIndex] >= k  \r\n\r\nMike (and all), correctness wise, what do you think?\r\n\r\nIf you are wondering why the increment at the actual position is (1 + N*S) - it allows to match only posIndexes where all terms contributed something.\r\n\r\nI drew an example with 5 terms and slop=2 and so far it seems correct.\r\n\r\nAlso tried 2 terms and slop=5, this seems correct as well, just that, when there is a match, several posIndexes will contribute to the score of the same match. I think this is not too bad, as for these parameters, same behavior would be in all documents. I would be especially forgiving for this if we this way get some of the performance benefits of the ExactPhraseScorer.\r\n\r\nIf we agree on correctness, need to understand how to implement it, and consider the performance effect. The tricky part is to increment at posIndex-n. Say there are 3 terms in the query and one of the terms is found at indexes 10, 15, 18. Assume the slope is 2. Since N=3, the max increment is:\r\n- 1 + N*S = 1 + 3*2 = 7.\r\n\r\nSo the increments for this term would be (pos, incr):\r\n{noformat}\r\nPos   Increment\r\n---   ---------\r\n 8  ,  5\r\n 9  ,  6\r\n10  ,  7\r\n11  ,  6\r\n12  ,  5\r\n13  ,  5\r\n14  ,  6\r\n15  ,  7   =  max(7,5)\r\n16  ,  6   =  max(6,5)\r\n17  ,  6   =  max(5,6)\r\n18  ,  7\r\n19  ,  6\r\n20  ,  5\r\n{noformat}\r\n\r\nSo when we get to posIndex 17, we know that posIndex 15 contributes 5, but we do not know yet about the contribution of posIndex 18, which is 6, and should be used instead of 5. So some look-ahead (or some fix-back) is required, which will complicate the code.\r\n\r\nIf this seems promising, should probably open a new issue for it, just wanted to get some feedback first.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-06T08:07:13.714+0000","updated":"2012-03-06T08:07:13.714+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223410","id":"13223410","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Cool!\r\n\r\nI haven't fully thought this out (sloppy phrase matching is hard to think about!), but, tentatively, I think this is correct...?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-03-06T16:48:44.341+0000","updated":"2012-03-06T16:48:44.341+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223554","id":"13223554","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"OK great! \r\n\r\nIf you did not point a problem with this up front there's a good chance it will work and I'd like to give it a try. \r\n\r\nI have a first patch - not working or anything - it opens ExactPhraseScorer a bit for extensions and adds a class (temporary name) - NonExactPhraseScorer. \r\n\r\nThe idea is to hide in the ChunkState the details of decaying frequencies due to slops. I will try it over the weekend. If we can make it this way, I'd rather do it in this issue rather than committing the other new code for the fix and then replacing it. If that won't go quick, I'll commit the (other) changes to SloppyPhraseScorer and start a new issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-06T19:07:23.284+0000","updated":"2012-03-06T19:07:23.284+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223560","id":"13223560","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"sounds interesting: ExactPhraseScorer really has a lot of useful recent heuristics and optimizations, \r\nespecially about when to next() versus advance() and such?\r\n\r\nnet/net this idea could possibly improvement the performance overall of SloppyPhraseScorer","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-03-06T19:10:57.034+0000","updated":"2012-03-06T19:10:57.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223621","id":"13223621","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Patch adds NonExactPhraseScorer (temporary name) as discussed above - work in progress, it does not yet do any sloppy matching or scoring.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-06T20:23:32.719+0000","updated":"2012-03-06T20:23:32.719+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223629","id":"13223629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"bq. sounds interesting: ExactPhraseScorer really has a lot of useful recent heuristics and optimizations, especially about when to next() versus advance() and such?\r\n\r\nnext()/advance() will remain, but it would still be more costly than exact - score cache won't play, because freqs really are float in this case, and also there would be more computations on the way. But let's see it working first...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-06T20:28:10.473+0000","updated":"2012-03-06T20:28:10.473+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223700","id":"13223700","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I'm afraid it won't solve the problem.\r\n\r\nThe complicity of SloppyPhraseScorer stems firstly from the slop.\r\nThat part is handled in the scorer for long time.\r\n\r\nTwo additional complications are repeating terms, and multi-term phrases.\r\nEach one of these, separately, is handled as well.\r\nTheir combination however, is the cause for this discussion.\r\n\r\nTo prevent two repeating terms from landing on the same document position, we propagate the smaller of them (smaller in its phrase-position, which takes into account both the doc-position and the offset of that term in the query).\r\n\r\nWithout this special treatment, a phrase query \"a b a\"~2 might match a document \"a b\", because both \"a\"'s (query terms) will land on the same document's \"a\". This is illegal and is prevented by such propagation. \r\n\r\nBut when one of the repeating terms is a multi-term, it is not possible to know which of the repeating terms to propagate. This is the unsolved bug.\r\n\r\nNow, back to current ExactPhraseScorer.\r\nIt does not have this problem with repeating terms.\r\nBut not because of the different algorithm - rather because of the different scenario.\r\nIt does not have this problem because exact phrase scoring does not have it.\r\nIn exact phrase scoring, a match is declared only when all PPs are in the same phrase position.\r\nRecall that phrase position = doc-position - query-offset, it is visible that when two PPs with different query offset are in the same phrase-position, their doc-position cannot be the same, and therefore no special handling is needed for repeating terms in exact phrase scorers.\r\n\r\nHowever, once we will add that slopy-decaying frequency, we will match in certain posIndex, different phrase-positions. This is because of the slop. So they might land on the same doc-position, and then we start again...\r\n\r\nThis is really too bad. Sorry for the lengthy post, hopefully this would help when someone wants to get into this.\r\n\r\nBack to option 2.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-06T21:55:05.678+0000","updated":"2012-03-06T21:55:05.678+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223839","id":"13223839","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"body":"I would be glad to try out a nightly build with the patch as is against our tests - I would be glad to get the 80% solution if it fixes my bug.  I haven't compiled from source yet, though, so am inclined to wait for the patch getting posted to the nightly.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"created":"2012-03-07T00:04:33.923+0000","updated":"2012-03-07T00:04:33.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13223856","id":"13223856","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"{quote}\r\nTo prevent two repeating terms from landing on the same document position, we propagate the smaller of them (smaller in its phrase-position, which takes into account both the doc-position and the offset of that term in the query).\r\n\r\nWithout this special treatment, a phrase query \"a b a\"~2 might match a document \"a b\", because both \"a\"'s (query terms) will land on the same document's \"a\". This is illegal and is prevented by such propagation.\r\n\r\nBut when one of the repeating terms is a multi-term, it is not possible to know which of the repeating terms to propagate. This is the unsolved bug.\r\n{quote}\r\n\r\nNot understanding really how SloppyPhraseScorer works now, but not trying to add confusion to the issue, I can't help but think\r\nthis problem is a variant on LevensteinAutomata... in fact that was the motivation for the new test, i just stole the testing\r\nmethodology from there and applied it to this!\r\n\r\nIt seems many things are the same but with a few twists:\r\n* fundamentally we are interleaving the streams from the subscorers into the 'index automaton'\r\n* 'query automaton' is produced from the user-supplied terms\r\n* our 'alphabet' is the terms, and holes from position increment are just an additional symbol.\r\n* just like the LevensteinAutomata case, repeats are problematic because they are different characteristic vectors\r\n* stacked terms at the same position (index or query) just make the automata more complex (so they arent just strings)\r\n\r\nI'm not suggesting we try to re-use any of that code at all, i don't think it will work. But I wonder if we can re-use even\r\nsome of the math to redefine the problem more formally to figure out what minimal state/lookahead we need for example...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-03-07T00:22:50.009+0000","updated":"2012-03-07T00:22:50.009+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13226494","id":"13226494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"{quote}\r\nNot understanding really how SloppyPhraseScorer works now, but not trying to add confusion to the issue, I can't help but think this problem is a variant on LevensteinAutomata... in fact that was the motivation for the new test, i just stole the testing methodology from there and applied it to this!\r\n{quote}\r\n\r\nInteresting! I was not aware of this. I went and read some about this automaton, It is relevant.\r\n\r\n{quote}\r\nIt seems many things are the same but with a few twists:\r\n\r\n* fundamentally we are interleaving the streams from the subscorers into the 'index automaton'\r\n'query automaton' is produced from the user-supplied terms\r\n{quote}\r\n\r\nTrue. In fact, the current code works hard to decide on the \"correct interleaving order\" - while if we had a \"Perfect Levenstein Automaton\" that took care of the computation we could just interleave, in the term position order (forget about phrase position and all that) and let the automaton compute the distance. \r\n\r\nThis might capture the difficulty in making the sloppy phrase scorer correct: it started with the algorithm that was optimized for exact matching, and adopted (hacked?) it for approximate matching.\r\n\r\nInstead, starting with a model that fits approximate matching, might be easier and cleaner. I like that. \r\n\r\n{quote}\r\n* our 'alphabet' is the terms, and holes from position increment are just an additional symbol.\r\n* just like the LevensteinAutomata case, repeats are problematic because they are different characteristic vectors\r\n* stacked terms at the same position (index or query) just make the automata more complex (so they arent just strings)\r\n\r\nI'm not suggesting we try to re-use any of that code at all, i don't think it will work. But I wonder if we can re-use even\r\nsome of the math to redefine the problem more formally to figure out what minimal state/lookahead we need for example...\r\n{quote}\r\n\r\nI agree. I'll think of this.\r\n\r\nIn the meantime I'll commit this partial fix.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-09T21:32:26.847+0000","updated":"2012-03-09T21:32:26.847+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13226623","id":"13226623","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Committed:\r\n- r1299077  3x\r\n- r1299112  trunk\r\n\r\nbq. I would be glad to try out a nightly build with the patch as is against our tests - I would be glad to get the 80% solution if it fixes my bug.\r\n\r\nIt's in now...\r\n\r\nbq.  But I wonder if we can re-use even some of the math to redefine the problem more formally to figure out what minimal state/lookahead we need for example...\r\n\r\nRobert, this gave me an idea... currently, in case of \"collision\" between repeaters, we compare them and advance the \"lesser\" of them (SloppyPhraseScorer.lesser(PhrasePositions, PhrasePositions)) - it should be fairly easy to add lookahead to this logic: if one of the two is multi-term, lesser can also do a lookahead. The amount of lookahead can depend on the slop. I'll give it a try before closing this issue.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2012-03-10T00:14:37.501+0000","updated":"2012-03-10T00:14:37.501+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13226873","id":"13226873","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"{quote}\r\nRobert, this gave me an idea... currently, in case of \"collision\" between repeaters, we compare them and advance the \"lesser\" of them (SloppyPhraseScorer.lesser(PhrasePositions, PhrasePositions)) - it should be fairly easy to add lookahead to this logic: if one of the two is multi-term, lesser can also do a lookahead. The amount of lookahead can depend on the slop. I'll give it a try before closing this issue.\r\n{quote}\r\n\r\nInteresting... its hard to think about for me since the edit distance is a little different, but at least in the\r\nlevAutomata case the maximum 'context' the thing ever needs is {{2n+1}}, where n is the distance/slop. I don't \r\nknow if it applies here... but seems like it should be at least an upperbound.\r\n\r\nSpeaking of which on a related note, I think its possible we can implement a more... exhaustive test for \r\nSloppyPhraseScorer (rather than relying so much on a random one). The idea would be a twist on \r\nTestLevenshteinAutomata.assertCharVectors: using an alphabet of terms={0,1} the idea is to test all possible\r\n'automaton structures', for sloppyphrasescorer, the idea would be we have the minimal test method that\r\ntests all the cases...\r\n\r\nI'll think on this one...\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-03-10T15:04:20.444+0000","updated":"2012-03-10T15:04:20.444+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12543915/comment/13228118","id":"13228118","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"body":"The commits from March 10 fix my two failing tests - huzzah!  Thank you so much!   - Naomi","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ndushay","name":"ndushay","emailAddress":"ndushay at stanford dot edu","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Naomi Dushay","active":true},"created":"2012-03-13T01:28:09.373+0000","updated":"2012-03-13T01:28:09.373+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-3821/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04i3b:"}}