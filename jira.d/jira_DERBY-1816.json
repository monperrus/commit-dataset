{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12349305","self":"https://issues.apache.org/jira/rest/api/latest/issue/12349305","key":"DERBY-1816","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-05-04 20:56:38.376","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22725","customfield_12310222":"1_*:*_1_*:*_22472289871_*|*_6_*:*_3_*:*_1153655252_*|*_5_*:*_1_*:*_1127889283_*|*_4_*:*_2_*:*_73104","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2007-06-20T01:36:15.510+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1816/watchers","watchCount":0,"isWatching":false},"created":"2006-09-06T13:31:08.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/10993","id":"10993","description":"","name":"10.1.1.0","archived":false,"released":true,"releaseDate":"2005-08-03"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12310615","id":"12310615","description":"","name":"10.1.2.1","archived":false,"released":true,"releaseDate":"2005-11-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12311953","id":"12311953","description":"","name":"10.1.3.1","archived":false,"released":true,"releaseDate":"2006-06-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12314013","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12314013","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"12354628","key":"DERBY-2034","self":"https://issues.apache.org/jira/rest/api/2/issue/12354628","fields":{"summary":"Tracking of bugs that lead to incorrect results being stored or returned to the client","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/5","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/trivial.png","name":"Trivial","id":"5"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}},{"id":"12313288","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12313288","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12328223","key":"DERBY-889","self":"https://issues.apache.org/jira/rest/api/2/issue/12328223","fields":{"summary":"with client getTimestamp on a TIME column will print the date  1900-01-01 instead of the current date","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12315954","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12315954","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12368487","key":"DERBY-2602","self":"https://issues.apache.org/jira/rest/api/2/issue/12368487","fields":{"summary":"TIMESTAMP value is truncated  when return to client","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2009-06-30T16:12:53.647+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11407","id":"11407","name":"JDBC"},{"self":"https://issues.apache.org/jira/rest/api/2/component/11690","id":"11690","name":"Network Client"}],"timeoriginalestimate":null,"description":"In embedded the java.sql.Time object returned from ResultSet.getTime() for a SQL TIMESTAMP object has its millisecond value for the time portion equal to that for the java.sql.Timestamp value.\nIn client the millisecond time value for such a value is always set to zero.\n\nNote a Derby SQL TIME value has by definition resolution of only a second so its millisecond  value is always zero,\nbut java.sql.Time  is not a direct mapping to the SQL Type, it's a JDBC type, so when converting from a SQL TIMESTAMP\nit should retain the precision.\n\nThe new test lang.TimeHandlingTest has this assert code that shows the problem, one of its calls will be commented out\nwith a comment with this bug number.\n\n    private void assertTimeEqual(Time tv, Timestamp tsv)\n    {\n        cal.clear();\n        cal.setTime(tv);\n                \n        int hour = cal.get(Calendar.HOUR_OF_DAY);\n        int min = cal.get(Calendar.MINUTE);\n        int sec = cal.get(Calendar.SECOND);\n        int ms = cal.get(Calendar.MILLISECOND);\n                        \n        // Check the time portion is set to the same as tv\n        cal.clear();\n        cal.setTime(tsv);\n        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n        assertEquals(min, cal.get(Calendar.MINUTE));\n        assertEquals(sec, cal.get(Calendar.SECOND));\n        assertEquals(ms, cal.get(Calendar.MILLISECOND));      <<<<<<<<<<<<< FAILS HERE\n    }","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"38747","summary":"Client's ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10101","value":"Release Note Needed","id":"10101"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":26,"total":26,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12432842","id":"12432842","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Another client time handling problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2006-09-06T13:32:52.000+0000","updated":"2006-09-06T13:32:52.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12432843","id":"12432843","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Another issue with time handling in client.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2006-09-06T13:34:14.000+0000","updated":"2006-09-06T13:34:14.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12493798","id":"12493798","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"While looking into this issue I noticed that there are several methods in client/am/DateTime.java which do the following two things:\r\n\r\n  1) Take a \"recyclable\" Time, Timestamp, or Date object with the apparent\r\n     intent of avoiding repeated creation of corresponding java.sql.* objects.\r\n\r\n  2) Make use of \"setXXX\" methods that have been deprecated as of JDK 1.1.\r\n\r\nAs an example, see client/am/DateTime.timeBytesToTime(...).\r\n\r\nThat said, it looks like the \"recyclable\" objects are always null which makes the #1 code pretty meaningless (this is confirmed by the fact that the code coverage results show the relevant code is never executed).\r\n\r\nI believe I have a fix for this Jira (DERBY-1816), but before working more with it I'm posting d1816_recycleCleanup_v1.patch, which is a pre-patch that does the following:\r\n\r\n  1) Replaces each of the recyclable Date, Time, and Timestamp arguments with\r\n     a recyclable java.util.Calendar object.\r\n\r\n  2) Modifies the relevant code to call methods on the recyclable Calendar object\r\n     instead of on Date, Time, and Timestamp objects.  The benefit to doing this\r\n     is that we are now using non-deprecated methods. \r\n\r\nNote that even with this patch we are still creating a new instance of Time/Timestamp/Date for each method--the cleanup patch does not change that.  Instead, the cleanup patch adds the instantiation of a new Calendar object (one per client/am/Cursor) and then (re-)uses that object to replace the deprecated calls.  The goal here is not just to replace the deprecated calls, though; I think that having a Calendar object will help resolve this particular Jira (and maybe others), as well.\r\n\r\nThat said, I was reading through the comments on DERBY-889 and one thing I'm unsure about is how/if timezones need to be handled in this code.  When writing the cleanup patch I took a look at the embedded classes and, as far as I can tell, embedded creates a new instance of GregorianCalendar (no timezone info specified) and creates the appropriate date/time object from that (see for example the \"newTimestamp()\" method in iapi/types/SQLTimestamp, or the \"getTimeInMillis()\" second in iapi/types/SQLDate).  The changes in d1816_recycleCleanup_v1.patch are intended to mimic that behavior in client.\r\n\r\nBut it's quite possible that I've overlooked something, so I would appreciate any reviews/feedback that anyone might have on this \"cleanup\" patch.\r\n\r\nNote that d1816_recycleCleanup_v1.patch is not intended to change any functionality of the client.  The hope for this patch is to keep all behavior the same (even the behavior that is currently wrong) but to make it easier to fix the incorrect behavior with a subsequent patch.\r\n\r\nI ran suites.All and derbyall on SUSE Linux with ibm142 and there were no failures.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-04T20:56:38.376+0000","updated":"2007-05-04T20:56:38.376+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12493804","id":"12493804","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"The DATE/TIME/TIMESTAMP notes here might help:\r\n\r\nhttp://db.apache.org/derby/javadoc/publishedapi/jdbc3/org/apache/derby/jdbc/package-summary.html","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-04T21:22:11.467+0000","updated":"2007-05-04T21:22:11.467+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12493807","id":"12493807","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you for the link, Dan, it's very helpful.\r\n\r\nSince all of the changes that I've made in the clean_v1 patch happen for the getXXX() methods that do not take a Calendar argument, my reading is that  the values should be set \"according to the time zone of the java virtual machine\".  My assumption is that this is what happens with the default \"new java.util.GregorianCalendar()\" constructor, in which case the changes are fine.\r\n\r\nNote that for getXXX() methods which *do* take a Calendar object, the client code first calls the version of the method that takes no arguments (which is what the cleanup_v1 patch affects) and then normalizes the result based on the timezone of the received Calendar object.  So I think that part should be working correctly, as well.\r\n\r\nPlease let me know if I've misread something, though...\r\n\r\nThanks again for the pointer.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-04T21:44:00.642+0000","updated":"2007-05-04T21:44:00.642+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12493824","id":"12493824","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"> Note that for getXXX() methods which *do* take a Calendar object, the client code first calls the version of the method that takes no arguments (which is what the cleanup_v1 patch affects) and then normalizes the result based on the timezone of the received Calendar object.\r\n\r\nany idea why they don't just use the calendar passed in and just perform the conversion once? I think that's what embedded does.\r\nIe. the no calendar version calls the calendar version with a default calendar.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-04T23:19:26.525+0000","updated":"2007-05-04T23:19:26.525+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494101","id":"12494101","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> any idea why they don't just use the calendar passed in and just perform the conversion once?\r\n> I think that's what embedded does.\r\n\r\nI looked at the differences between embedded and client and while I'm not sure what the answer to your question is (i.e. why client doesn't \"just use the calendar passed in\") I did notice a difference in behavior that struck me as noteworthy.\r\n\r\nNamely, when a call to a getXXX() date/time method is made and a Calendar object is passed in, embedded will clobber (or at least wipe out) the received Calendar argument's value.  With the client, though, the argument is preserved (which is more what I would have expected).\r\n\r\nSo while I can look into making the client mimic the embedded behavior, I'm not sure that this particular piece of behavior (clobbering the Calendar argument's value) is correct.\r\n\r\nEx: If \"rs\" is a ResultSet whose first column is the TIMESTAMP value \"2007-05-03 16:49:52.883\" then a call to the \"assertGetWithCal()\" method below will return something similar to the following:\r\n\r\nOn embedded:\r\n\r\n targetBefore -=> 9 10, 2010 -- 10:10:10.205 (GMT-10:00)\r\n got cal     -=> 4 3, 2007 -- 19:49:52.883 (America/Los_Angeles)\r\n targetAfter -=> 4 3, 2007 -- 16:49:52.0 (GMT-10:00)\r\n\r\nWith client:\r\n\r\n targetBefore -=> 9 10, 2010 -- 10:10:10.607 (GMT-10:00)\r\n got cal     -=> 4 3, 2007 -- 19:49:52.883 (America/Los_Angeles)\r\n targetAfter -=> 9 10, 2010 -- 10:10:10.607 (GMT-10:00)\r\n\r\nNotice how, with embedded, \"targetAfter\" has the same year, month, day, and time as the result of the \"getTimestamp(Calendar)\" call, and also that the millisecond value has been wiped out.  But with client, \"targetAfter\" matches \"targetBefore\".  In both cases the correct timezone adjustment takes place.\r\n\r\nMy guess is that the embedded behavior is incorrect, but I'm not confident enough to say for sure.\r\n\r\nAny other opinions?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-07T18:19:49.080+0000","updated":"2007-05-07T18:19:49.080+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494102","id":"12494102","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"\"assertGetWithCal()\" as referenced in previous comment (forgot to paste):\r\n\r\n----\r\n\r\n    private void assertGetWithCal(ResultSet rs) throws Exception\r\n    {\r\n        Calendar targetCal = Calendar.getInstance(java.util.TimeZone.getTimeZone(\"GMT-10:00\"));\r\n        targetCal.set(2010, Calendar.OCTOBER, 10, 10, 10, 10);\r\n\r\n        System.out.println(\" targetBefore -=> \" + printCalendar(targetCal));\r\n\r\n        Timestamp tsv = rs.getTimestamp(1, targetCal);\r\n        Calendar getCal = Calendar.getInstance();\r\n        getCal.setTime(tsv);\r\n\r\n        // System.out.println(\" got ts  -=> \" + tsv + \" (\" + tsv.getTimezoneOffset() + \")\");\r\n        System.out.println(\" got cal     -=> \" + printCalendar(getCal));\r\n        System.out.println(\" targetAfter -=> \" + printCalendar(targetCal) + \"\\n\");\r\n        return;\r\n    }\r\n\r\n    private String printCalendar(Calendar cal)\r\n    {\r\n        StringBuffer sbuf = new StringBuffer();\r\n        sbuf.append(cal.get(Calendar.MONTH) + \" \");\r\n        sbuf.append(cal.get(Calendar.DAY_OF_MONTH) + \", \");\r\n        sbuf.append(cal.get(Calendar.YEAR) + \" -- \");\r\n        sbuf.append(cal.get(Calendar.HOUR_OF_DAY) + \":\");\r\n        sbuf.append(cal.get(Calendar.MINUTE) + \":\");\r\n        sbuf.append(cal.get(Calendar.SECOND) + \".\");\r\n        sbuf.append(cal.get(Calendar.MILLISECOND));\r\n        sbuf.append(\" (\" + cal.getTimeZone().getID() + \")\");\r\n        return sbuf.toString();\r\n    }","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-07T18:21:44.238+0000","updated":"2007-05-07T18:21:44.238+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494122","id":"12494122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"The javadoc for the getTimestamp() with a calendar object state that the passed in Calendar is the one to use in creating the java.sql.Timestamp object.\r\n\r\n\r\n\"This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information.\"\r\n\r\n\"cal - the java.util.Calendar object to use in constructing the date\"\r\n\r\nSo I think the embedded behaviour is within the spec. In fact one might be able to read the spec in such a way that it is expected the passed in Calendar\r\nobject is modified by the call and set to the value corresponding to the column, thus maybe client behaviour is incorrect?\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-07T20:21:12.530+0000","updated":"2007-05-07T20:21:12.530+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494140","id":"12494140","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> So I think the embedded behaviour is within the spec. In fact one might be able to read the\r\n> spec in such a way that it is expected the passed in Calendar object is modified by the call\r\n> and set to the value corresponding to the column, thus maybe client behaviour is incorrect? \r\n\r\nHmm.  So we are to read \"object to use in constructing the date\" as \"object in which to return the constructed date\"?\r\n\r\nSeems odd to a) return the timestamp value as a java.sql.Timestamp, *and* b) return the timestamp via the received Calendar object.\r\n\r\nIf that is in fact the correct behavior, then is there a bug in embedded because it truncates the milliseconds? I.e.:\r\n\r\nOn embedded:\r\n\r\n targetBefore -=> 9 10, 2010 -- 10:10:10.205 (GMT-10:00)\r\n got cal -=> 4 3, 2007 -- 19:49:52.883 (America/Los_Angeles)\r\n targetAfter -=> 4 3, 2007 -- 16:49:52.0 (GMT-10:00) \r\n\r\nNote how the \"targetAfter\" object has no milliseconds.\r\n\r\nFor what it's worth, I ran the exact same program against a DB2 database and, as with Derby client, the Calendar object is *not* modified.  I don't have any other RDMBs against which to try...\r\n\r\nIn any event, I think this discussion goes beyond the scope of the \"recyclableCleanup_v1.patch\", which is targeted for a very specific type of cleanup--and one that does not itself alter functionality.  Maybe changes to way in which client handles Calendar objects can be filed as a separate issue?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-07T21:55:31.797+0000","updated":"2007-05-07T21:55:31.797+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494170","id":"12494170","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"AB> Seems odd to a) return the timestamp value as a java.sql.Timestamp, *and* b) return the timestamp via the received Calendar object. \r\n\r\nWhat's the alternative semantics? Ie. given a Calendar object and the SQL representation of a TIMESTAMP, how does a JDBC driver\r\nuse the passed in Calendar object to create a valid JDBC java.sql.Timestamp without changing its value?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-08T01:16:27.552+0000","updated":"2007-05-08T01:16:27.552+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494182","id":"12494182","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Looking at the network client's implementation of getTimeStamp() with a Calendar I have to say it seems inefficient, confusing and wrong. :-) \r\n\r\nThis is looking at lines 1020-1031 in client.am.ResultSet.java (which isn't modified by the patch so it's existing code)\r\n\r\nInefficient because it creates two new Calendar objects for every call,that will cause a heavy gc overload and cpu overhead.\r\n\r\nConfusing because it uses two Calendar objects (when one will do) and just does strange things:\r\n    - The value from the column is set in the targetCalendar but then never used\r\n    - The value from the column is set in the defaultCalendar but then never used\r\n    - The timezeone offset is calculated using the two calendar objects, and then applied to the long millisecond value obtained from the\r\n       java.sql.Timestamp value, but this is what Calendar objects do, so why is this being done explicitly?\r\n    - no code comments\r\n\r\nWrong because:\r\n    - the passed in calendar is not used to perform the conversion from SQL TIMESTAMP value to java.sql.Timestamp. The passed in Calendar is only used to determine the timezone of the value to be returned (line 1021). However a Calendar object has more meaning than just a time zone, it has behaviour because a Calendar object is an abstract class and thus can have multiple different implementations. The client code is assuming that the Calendar object returned from the static methods Calendar.getInstance() match the Calendar object passed in, this may not be true. If the application passes in a Jewish Calendar implementation for example then most likely this client code will be using a GregorianCalendar to incorrectly perform calculations.\r\n\r\n  - looking beyond these lines of code, I think the complete conversion is incorrect, even if in this method the passed in Calendar was used. Before these lines of code the value is obtained using the getTimestamp() with no Calendar object, this uses a GregorianCalendar() to convert from the over-the-wire value to a java.sql Timestamp. Thus the conversion would be (if the user supplied Calendar object was used):\r\n\r\n   YYYY-MM-DD:hh:mm:ss.ffff  >> GregorianCalendar >>  long milli-seconds >> java.sql.Timestamp >> long milli-seconds >> user supplied Calendar object\r\n\r\nI'm think that if the user supplied Calendar object was not an instance of GregorianCalendar then there's a significant chance the wrong result would be returned.\r\nWhat is required is the same approach as embedded, which is to always perform\r\n   YYYY-MM-DD:hh:mm:ss.ffff >> Calendar >>  long milli-seconds >> java.sql.Timestamp\r\n\r\nwhere the Calendar is either the user-supplied one or a builtin one, so that the calling order is the other way around, getTimestamp(int) should be calling getTimestamp(int, Calendar).\r\n  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-08T03:53:57.267+0000","updated":"2007-05-08T03:53:57.267+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494302","id":"12494302","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you for your extensive comments on this, Dan!\r\n\r\n> Looking at the network client's implementation of getTimeStamp() with a Calendar I have to \r\n> say it seems inefficient, confusing \r\n\r\nI definitely agree with you here!\r\n\r\n> and wrong. :-)\r\n\r\nWell...okay.  Do you by chance know of a concrete repro to demonstrate what you have described above?\r\n\r\n> What is required is the same approach as embedded, which is to always perform\r\n>   YYYY-MM-DD:hh:mm:ss.ffff >> Calendar >> long milli-seconds >> java.sql.Timestamp \r\n\r\nSounds like a separate Jira, agreed?\r\n\r\nIs it okay to proceed with committing the recyclableCleanup_v1.patch (and subquent fix) for this issue as it is now?  I don't think my changes make the situation any worse, and they will make it easier to resolve this issue--and also DERBY-889, I believe.\r\n\r\nUnless I hear objections pretty quickly, I'll plan to commit the cleanup_v1 patch later this morning.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-08T15:17:49.755+0000","updated":"2007-05-08T15:17:49.755+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494319","id":"12494319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> Unless I hear objections pretty quickly, I'll plan to commit the cleanup_v1 patch later this morning.\r\n\r\nActually, I'm not sure how much time I'll have over the next few days to work with this particular issue.  I may need to revisit my approach in light of Dan's comments.  So I'll hold off committing for now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-08T16:11:36.512+0000","updated":"2007-05-08T16:11:36.512+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494830","id":"12494830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"One solution that seems to solve this problem is to create a java.sql.Timestamp object from the SQL TIMESTAMP and then use the \"Time(long time)\" constructor to create a java.sql.Time object, where \"time\" is retrieved from the java.sql.Timestamp object.  For example (in client/am/DateTime.java):\r\n\r\n     java.sql.Time result = new java.sql.Time(timestampBytesToTimestamp(\r\n         buffer, offset, (java.sql.Timestamp)null, encoding).getTime());\r\n\r\nThat said, though, Java API indicates the following:\r\n\r\n  \"The date components should be set to the \"zero epoch\" value of January 1, 1970 and should not be accessed.\"\r\n\r\nSo we would have to explicitly override the date fields for the resultant java.sql.Time object.  Doing so directly via the Time object would require use of deprecated methods (setYear(), setMonth(), setDay()).  The other (recommended) option is to use an intermediary Calendar object:\r\n\r\n     java.sql.Timestamp ts = timestampBytesToTimestamp(\r\n         buffer, offset, (java.sql.Timestamp)null, encoding).getTime());\r\n\r\n     Calendar cal = <cleared Calendar object>;\r\n     cal.setTimeInMillis(ts.getTime());\r\n \r\n     /* Java API indicates that the date components of a Time value must\r\n      * be set to January 1, 1970.\r\n      */\r\n     cal.set(1970, Calendar.JANUARY, 1);\r\n     return new java.sql.Time(cal.getTimeInMillis());\r\n\r\nThe latter approach (use of Calendar) seems cleaner, but requires either 1) repeated instantiation of a Calendar object, or 2) re-use of some passed in Calendar object, per d1816_recyclableCleanup_v1.patch.  The former approach (use of deprecated setXXX() methods) requires fewer changes but seems less wholesome.\r\n\r\nAny votes for/against one or the other?\r\n\r\nI prefer to use the Calendar approach to avoid deprecated methods, which is why I would like to commit the recyclableCleanup_v1.patch.  But I'm open to alternate suggestions.\r\n\r\nEither approach requires the additional instantion of a java.sql.Timestamp object for each call to getTime().  Is that acceptable?  We could avoid that by isolating the timestamp parsing code into its own method and returning its fields via an array, but I'm not sure if that's better or worse than creating an intermediate Timestamp object...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-10T20:45:45.978+0000","updated":"2007-05-10T20:45:45.978+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494832","id":"12494832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"The embedded driver works correctly without creating a Timestamp object, so it should be possible for the client to do the same.\r\n(See SQLTimestamp.newTime(Calendar)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-10T21:01:20.577+0000","updated":"2007-05-10T21:01:20.577+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494841","id":"12494841","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Right, but embedded is also working on an instance of SQLTimestamp, which already has a notion of \"time\" from which it can pull the right pieces.  So it's easier there.\r\n\r\nIn client all we have a is a string.  We have to parse that string into *something* that can be translated into hours, minutes, seconds, etc.\r\n\r\n> it should be possible for the client to do the same.\r\n\r\nYes, it is possible, I didn't mean to suggest it wasn't.   We do that today.  But in order to fix this Jira we'd have to explicitly parse the various pieces out of the string, just as we do with getTimestamp(). So we either duplicate the timestamp parsing code (ick), or we do something like:\r\n\r\n        int [] tsFields = new int [7];\r\n        parseTimestampString(timestamp, tsFields);\r\n\r\n        cal.set(tsFields[0], tsFields[1], ...)\r\n\r\nEither way is possible, it's just that neither is particular pretty.  But if instantiating an extra Timestamp is so bad, it would of course be worth it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-10T21:19:00.051+0000","updated":"2007-05-10T21:19:00.051+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12494881","id":"12494881","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"or just pass in a calendar object into the parse method, e.g. re-write timestampBytesToTimestamp() to pass in a calendar and then create the java.sql.Timestamp object outside when required.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2007-05-10T22:41:36.950+0000","updated":"2007-05-10T22:41:36.950+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12497620","id":"12497620","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Attaching d1816_recycleCleanup_v2.patch, which is pretty much the same as _v1 except that it has been sync'd with the latest codeline (esp. DERBY-889 changes).  If I do not hear any objections, I plan to commit this cleanup patch before the end of the day Tuesday (05/22) PST...\r\n\r\nderbyall ran cleanly on SUSE Linux with ibm142; suites.All had 13 failures, but all of those show up in the tinderbox results, as well.\r\n\r\nNote that the _v2 patch does not resolve this Jira issue; it is simply \"pre-patch\" cleanup.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-21T22:49:22.190+0000","updated":"2007-05-21T22:49:22.190+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12498001","id":"12498001","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Committed d1816_recycleCleanup_v3.patch with svn # 540740:\r\n\r\n  URL: http://svn.apache.org/viewvc?view=rev&rev=540740\r\n\r\nThe difference between v2 and v3 is that the latter sets the time-related fields to \"0\" when getting a timestamp value from a SQL date.  This more accurately matches the behavior as it was is in Derby prior to the changes for this issue:\r\n\r\n_v2:\r\n\r\n< +        cal.set(year, month, day);\r\n< +        return new java.sql.Timestamp(cal.getTimeInMillis());\r\n\r\n---\r\n\r\n_v3:\r\n\r\n> +        cal.set(year, month, day, 0, 0, 0);\r\n> +        java.sql.Timestamp ts = new java.sql.Timestamp(cal.getTimeInMillis());\r\n> +        ts.setNanos(0);\r\n> +        return ts;\r\n\r\nOther than that the two patches are the same.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-22T20:40:44.166+0000","updated":"2007-05-22T20:40:44.166+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12498402","id":"12498402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Attaching d1816_v1.patch, which is a fix for this issue.  The patch does the following:\r\n\r\n  1. Separates the timestamp parse logic in client/am/DateTime.java into a new\r\n     method called \"parseTimestampString()\".  The new method takes a timestamp\r\n     string and a Calendar object, and sets the fields of the Calendar based on\r\n     the fields that are parsed from the timestamp string. (This is, I think,\r\n     what Dan was suggesting in his most recent comment).  The method also\r\n     returns the parsed microseconds value since that cannot be set on a\r\n     Calendar object (the precision of a Calendar is milliseconds).\r\n\r\n  2. Modifies timestampBytesToTimestamp(...) to call the new method for\r\n     parsing timestamps.\r\n\r\n  3. Changes the timestampBytesToTime(...) method so that it now parses the\r\n     *full* timestamp (via the new parseTimestampString() method) instead of\r\n     just parsing the hours, minutes, and seconds.  Then a java.sql.Time\r\n     object is created from the Calendar object into which the timestamp\r\n     string was parsed.  This allows us to preserve the sub-second resolution\r\n     that is parsed from the timestamp.\r\n\r\n  4. Re-enables the relevant test case in lang/TimeHandlingTest.java so that\r\n     it now runs in client mode.\r\n\r\nI ran derbyall and suites.All on a SUSE Linux machine with an earlier  version of this patch and the only failure was in derbyall/derbynetmats/maxthreads, which failed with the following diff:\r\n\r\n  27 del\r\n  < Max threads changed to 9000.\r\n  27a27\r\n  >  Reading from process streams timed out..\r\n\r\nI don't think that is related to my changes, though.\r\n\r\nIf anyone has feedback on this fix/approach, that would be great.  I plan to re-run derbyall and suites.All as a sanity check to make sure the latest version (_v1 as attached here) still runs cleanly, but am open to suggestions in the meantime...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-23T22:04:53.038+0000","updated":"2007-05-23T22:04:53.038+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12498415","id":"12498415","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"I reviewed the patch, and it looks good to me. The code change seems\r\nnice and clean, thanks for adding the comments! I verified that the updated\r\ntest fails as expected without the code change, and works as expected\r\nwith the code change. Thanks for fixing this bug.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2007-05-23T22:38:21.290+0000","updated":"2007-05-23T22:38:21.290+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12498688","id":"12498688","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thanks for the review, Bryan!  I re-ran suites.All and derbyall on SUSE Linux with ibm142 and everything ran cleanly with _v1 patch as attached to this issue.  So I committed with svn # 541333:\r\n\r\n  URL: http://svn.apache.org/viewvc?view=rev&rev=541333\r\n\r\nI also filed DERBY-2690 for tracking of Dan's comments/suggestion re: the current problems with the client's implementation of getTimestamp() with a Calendar object.\r\n\r\nMarking the issue as resolved for 10.3.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-24T15:49:17.846+0000","updated":"2007-05-24T15:49:17.846+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12500478","id":"12500478","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Attaching first attempt at a release note.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-31T20:25:07.393+0000","updated":"2007-05-31T20:25:07.393+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12501992","id":"12501992","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Fix is in trunk (10.3) and I haven't heard any objections to the release note, so closing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-06-06T17:07:27.030+0000","updated":"2007-06-06T17:07:27.030+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12349305/comment/12505554","id":"12505554","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"scrubbed rn","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2007-06-16T22:53:05.679+0000","updated":"2007-06-16T22:53:05.679+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1816/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06zvr:"}}