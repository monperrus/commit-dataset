{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12318179","self":"https://issues.apache.org/jira/rest/api/latest/issue/12318179","key":"DERBY-634","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2005-10-21 23:22:24.0","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22062","customfield_12310222":"1_*:*_1_*:*_26150356000_*|*_6_*:*_2_*:*_18309000_*|*_5_*:*_2_*:*_85000_*|*_4_*:*_1_*:*_43000","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2006-08-20T02:22:44.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-634/watchers","watchCount":0,"isWatching":false},"created":"2005-10-21T05:16:23.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310615","id":"12310615","description":"","name":"10.1.2.1","archived":false,"released":true,"releaseDate":"2005-11-18"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12313140","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12313140","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12348281","key":"DERBY-1733","self":"https://issues.apache.org/jira/rest/api/2/issue/12348281","fields":{"summary":"Redesign dynamic subquery materialization optimization to be based on cost analysis during compile/optimization phases.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2006-08-20T02:22:56.000+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"A performance optimization in subquery processing can cause a stack overflow.\n\nThe optimization materializes a subquery ResultSet in memory where it thinks the rows will fit in memory. The materialization is done as a  set of  nested unions of constant rows (UnionResultSets and RowResultSets). If there are a lot of rows this can cause a stack overflow when fetching a row.\n\nThe obvious fix is to make it use an iterative technique rather than a recursive one for storing and returning the rows. See the method BaseActivation.materializeResultSetIfPossible() in the language execution code.\n\nThere are some other issues with this performance optimization that should be looked at:\n\n1) The optimization can backfire, making the query run much slower. For example, in the query:\n\n    select * from one_row_table where column1 not in\n        (select column2 from million_row_table)\n\nreading million_row_table into memory is an expensive operation. If there is an index on million_row_table.column2, the query should return a result very quickly despite the large size of million_row_table by doing a single probe into million_row_table via the index.\n\nSince in-memory materialization can be an expensive operation, the decision about whether to do it should be made based on query optimizer cost estimates. See SubqueryNode.generateExpression().\n\n2) It may not be wise to cache partial query results in memory at all. Although this can help performance in some cases, it also chews up memory. This is different from a limited-size cache with a backing store (like what the store uses for page caching). The language has no way to limit the total amount of memory used in this type of processing. Note that hash joins originally used in-memory hash tables with no backing store, and that a backing store was added later.\n\n3) The implementation of this optimization has some problems. The decision to materialize the subquery results in memory is made during code generation - all such decisions should be made during the compilation phase. It's not clear to me why materializeResultSetIfPossible() is in BaseActivation - I would expect the of materialization to be done by a type of ResultSet, not by a method in BaseActivation. Also, this method calls getMaxMemoryPerTable() in the OptimizerFactory - nothing in the execution code should refer to anything in the compilation code (perhaps getMaxMemoryPerTable() should be moved somewhere else).\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"40435","summary":"Subquery materialization can cause stack overflow","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jeff_lichtman","name":"jeff_lichtman","emailAddress":"swazoo at rcn dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Lichtman","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jeff_lichtman","name":"jeff_lichtman","emailAddress":"swazoo at rcn dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Lichtman","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":12,"total":12,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12332711","id":"12332711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Satheesh adds this explanation:\r\n\r\nThanks Jeff, great analysis... It seems to me it was originally intended\r\nto cache a small number of subquery result rows, but the code didn't\r\nseem to implement it that way. Implementing the \"optimization\" at\r\nruntime was probably chosen to make sure only small number of rows are\r\nreturned by the subquery. Like you said, using nested unions seems like\r\na bad idea too.\r\n\r\nAny ideas on how to unoptimize without loosing performance gain some\r\nqueries might be getting now? It seems the \"optimization\" was done for a\r\nspecific customer query that is supposedly improved performance by 100\r\ntimes...\r\n\r\nSatheesh","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2005-10-21T23:22:24.000+0000","updated":"2005-10-21T23:22:24.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12332880","id":"12332880","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jeff_lichtman","name":"jeff_lichtman","emailAddress":"swazoo at rcn dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Lichtman","active":true},"body":"In response to Sateesh's question: it's hard to know how to fix this problem without causing a performance regression without seeing the customer's original query.\r\n\r\nOne thing I find perplexing about this problem is that, by the time the compiler gets to code generation (where the decision is made to materialize the subquery), the NOT IN subquery should have been converted to a correlated subquery, and the optimization disallowed. That is:\r\n\r\n   select  path from filesystemfiles where path not in\r\n        (select path from existingfiles)\r\n\r\nshould have been converted to a query tree equivalent to something like this:\r\n\r\n    select path from filesystemfiles where not exists\r\n        (select * from existingfiles where existingfiles.path = filesystemfiles.path)\r\n\r\nThus the subquery should not be materialized in this case.\r\n\r\nThe rewritten query (as above) was suggested to the user who originally reported this problem. The stack overflow didn't happen when he used this version of the query.\r\n\r\nAnother interesting thing is that there is other logic in SubqueryNode having to do with materializing subqueries that seems to handle different cases than the one here.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jeff_lichtman","name":"jeff_lichtman","emailAddress":"swazoo at rcn dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Lichtman","active":true},"created":"2005-10-23T07:00:44.000+0000","updated":"2005-10-23T07:00:44.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12424249","id":"12424249","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"This is not a regression for Derby but is  a serious bug from an old fix before Derby became Derby,  so certainly would be good to see fixed for 10.2\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-07-29T01:00:22.000+0000","updated":"2006-07-29T01:00:22.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12427670","id":"12427670","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"I propose twhere Table2.x=Table3.x and y > 100)\r\no address this issue in phases. Here is my current thinking:\r\n\r\nBackground information:\r\n-----------------------\r\n\r\nA performance optimization was introduced in Cloudscape before open sourcing as Apache Derby.\r\nBefore this optimization was introduced, a query like:\r\n\r\nSelect a, b, c from Table1 where a> 5 and b in \r\n               (select x from Table2, Table3 \r\nwould take longer time time to execute than needed. This becomes worse as the complexity of the\r\nsubquery increases. Basic problem was that for every qualified value of 'b', the subquery was\r\ngetting executed, recreating the results multiple times. Cloudscape, at that time, had the ability\r\nto materialize results of a subquery only if a single row is returned from the subquery.\r\n(where subquery is of the form select max(i) from Table2)\r\n\r\nA performance optimization was introduced that allowed for some \"small number\" of rows greater than\r\n1 to be cached dynamically at runtime. As the subquery was executed first time, results of the\r\nsubquery were cached until MAX_MEMORY_PER_TABLE is reached, which was 1MG by default. If the results\r\nof the subquery could be fit into memory less than this configurable size, a nested union resultset\r\nwould be built to cache the results.\r\n\r\nFuture invocations of the subquery would simply return results from this subquery cache without\r\nactually evaluating subquery. This resulted in performance boost for a customer query from 10 minutes\r\nto a few seconds.\r\n\r\nSide effect of this optimization:\r\n---------------------------------\r\n\r\nWhile the optimization worked well for the customer query, it is causing issues for the query in\r\nquestion here. If the subquery were returning just an integer, the optimization could attempt to cache\r\n1MG/4, about 250,000 rows in nested union resultsets. Nesting of this deep would cause stack overflow.\r\n\r\nJeff Lichman also identified several other issues mentioned in the description of this entry.\r\n\r\nProposed Fix:\r\n-------------\r\n\r\nFirst, I think it is important to fix regression caused by this optimization. The optimization was\r\nintended to cache small number of subquery results. Instead of caching single row result of a subquery,\r\nthis optimization could be adjusted to cache a small number of results.\r\n\r\nSecond, caching results of subquery in nested union resultsets is not needed. This can be rewritten to\r\ngenerate a linear resultset, which would save runtime stack growth.\r\n\r\nThird, as Jeff pointed out, a global subquery optimization that is performed during optimization is\r\nthe best approach. He pointed out subquery materialization based on hash joins decided during\r\noptimization phase is the ideal solution. Fortunately, Army's optimizer enhancements introduced\r\nrecently builds a subquery materialization capability to Derby and this could be extended to handle\r\nthis case as well.\r\n\r\nI propose to address the regression first by caching only small number of rows dynamically. If number\r\nof subquery results could cross 512, I think this optimization should be dynamically disabled.\r\n\r\nI will also file another Improvement that would suggest reworking the original optimization to be\r\nbuilt on Army's subquery materialization framework. My current impression is that Army's subquery\r\nwork needs to be more generalized and stabilized before extending to cover other cases.\r\n\r\nLet me know if anyone has any comments.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-12T01:21:46.000+0000","updated":"2006-08-12T01:21:46.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12427671","id":"12427671","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"Oops... my previous comment got little garbled. Here it is again.\r\n\r\nI propose to address this issue in phases. Here is my current thinking:\r\n\r\nBackground information:\r\n-----------------------\r\n\r\nA performance optimization was introduced in Cloudscape before open sourcing as Apache Derby.\r\nBefore this optimization was introduced, a query like:\r\n\r\nSelect a, b, c from Table1 where a> 5 and b in \r\n               (select x from Table2, Table3 where Table2.x=Table3.x and y > 100)\r\n\r\nwould take longer time time to execute than needed. This becomes worse as the complexity of the\r\nsubquery increases. Basic problem was that for every qualified value of 'b', the subquery was\r\ngetting executed, recreating the results multiple times. Cloudscape, at that time, had the ability\r\nto materialize results of a subquery only if a single row is returned from the subquery.\r\n(where subquery is of the form select max(i) from Table2)\r\n\r\nA performance optimization was introduced that allowed for some \"small number\" of rows greater than\r\n1 to be cached dynamically at runtime. As the subquery was executed first time, results of the\r\nsubquery were cached until MAX_MEMORY_PER_TABLE is reached, which was 1MG by default. If the results\r\nof the subquery could be fit into memory less than this configurable size, a nested union resultset\r\nwould be built to cache the results.\r\n\r\nFuture invocations of the subquery would simply return results from this subquery cache without\r\nactually evaluating subquery. This resulted in performance boost for a customer query from 10 minutes\r\nto a few seconds.\r\n\r\nSide effect of this optimization:\r\n---------------------------------\r\n\r\nWhile the optimization worked well for the customer query, it is causing issues for the query in\r\nquestion here. If the subquery were returning just an integer, the optimization could attempt to cache\r\n1MG/4, about 250,000 rows in nested union resultsets. Nesting of this deep would cause stack overflow.\r\n\r\nJeff Lichman also identified several other issues mentioned in the description of this entry.\r\n\r\nProposed Fix:\r\n-------------\r\n\r\nFirst, I think it is important to fix regression caused by this optimization. The optimization was\r\nintended to cache small number of subquery results. Instead of caching single row result of a subquery,\r\nthis optimization could be adjusted to cache a small number of results.\r\n\r\nSecond, caching results of subquery in nested union resultsets is not needed. This can be rewritten to\r\ngenerate a linear resultset, which would save runtime stack growth.\r\n\r\nThird, as Jeff pointed out, a global subquery optimization that is performed during optimization is\r\nthe best approach. He pointed out subquery materialization based on hash joins decided during\r\noptimization phase is the ideal solution. Fortunately, Army's optimizer enhancements introduced\r\nrecently builds a subquery materialization capability to Derby and this could be extended to handle\r\nthis case as well.\r\n\r\nI propose to address the regression first by caching only small number of rows dynamically. If number\r\nof subquery results could cross 512, I think this optimization should be dynamically disabled.\r\n\r\nI will also file another Improvement that would suggest reworking the original optimization to be\r\nbuilt on Army's subquery materialization framework. My current impression is that Army's subquery\r\nwork needs to be more generalized and stabilized before extending to cover other cases.\r\n\r\nLet me know if anyone has any comments.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-12T01:23:13.000+0000","updated":"2006-08-12T01:23:13.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12427719","id":"12427719","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"This patch addresses stack overflow by preventing bad cases of subquery optimization. However, extending subquery materialization work to cover these cases during optimization phase could benifit more queries. In general, Derby's subquery handling could be improved.\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-12T19:34:26.000+0000","updated":"2006-08-12T19:34:26.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12428385","id":"12428385","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Satheesh for the fix and for filing the follow up issue.  I wanted to clarify a couple of things for a user tracking this issue.\r\n\r\nThe patch description says:\r\n\r\n\"This patch addresses stack overflow by preventing bad cases of subquery optimization. However, extending subquery materialization work to cover these cases during optimization phase could benifit more queries.\"\r\n\r\n1) Might there still  be other queries that could encounter stack overflow due to this issue?\r\n\r\n2) For a user tracking DERBY-634, can they consider this patch a comprehensive fix for the issue, or should they track the new issue as well?\r\n\r\nThanks again for the fix and for helping me understand what is fixed and needs to be fixed moving forward.\r\n\r\nKathey\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-08-16T12:42:03.000+0000","updated":"2006-08-16T12:42:03.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12428436","id":"12428436","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"Kathey, here are some answers...\r\n\r\n1) No... There was a specific bug in the original optimization that could cause stack overflow. That bug has been correctly fixed. There should be no cases of stack overflow now.\r\n2) This is a comprehensive fix to the stack overflow problem. I was only saying generalizing the optimization that was implemented long time ago to be based on new subquery materialization framework would improve performance for more classes of queries. This would be an improvement request, like we already have several optimizer/preprocess improvements. Army and myself compiled about 10 known optimizations that could be implemented in Derby. You can say this would be another.. But this has nothing to do with stack overflow problem itself.\r\n\r\nIf this is not clear, let me know. I can provide more info.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-16T16:55:15.000+0000","updated":"2006-08-16T16:55:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12429225","id":"12429225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"I would like this fix backported to 10.2 release as soon as possible. Have a customer that is waiting for this fix for a long time.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-19T21:15:39.000+0000","updated":"2006-08-19T21:15:39.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12429226","id":"12429226","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"body":"I am closing this issue as I am not doing any further work. But I would appreciate if someone can port this fix to 10.2 beta and then reopen this task to mark as such.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bandaram","name":"bandaram","emailAddress":"bandaram at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Satheesh Bandaram","active":true},"created":"2006-08-19T21:16:52.000+0000","updated":"2006-08-19T21:16:52.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12429239","id":"12429239","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fuzzylogic","name":"fuzzylogic","emailAddress":"mcintyre dot a at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew McIntyre","active":true},"body":"reopening to change Fix In version.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fuzzylogic","name":"fuzzylogic","emailAddress":"mcintyre dot a at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew McIntyre","active":true},"created":"2006-08-20T02:22:01.000+0000","updated":"2006-08-20T02:22:01.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12318179/comment/12429240","id":"12429240","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fuzzylogic","name":"fuzzylogic","emailAddress":"mcintyre dot a at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew McIntyre","active":true},"body":"Merged to 10.2 with revision 432715.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fuzzylogic","name":"fuzzylogic","emailAddress":"mcintyre dot a at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew McIntyre","active":true},"created":"2006-08-20T02:22:44.000+0000","updated":"2006-08-20T02:22:44.000+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-634/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i07aav:"}}