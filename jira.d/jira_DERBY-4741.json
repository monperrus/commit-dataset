{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12469090","self":"https://issues.apache.org/jira/rest/api/latest/issue/12469090","key":"DERBY-4741","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316362","id":"12316362","description":"First release on the 10.8 branch","name":"10.8.1.2","archived":false,"released":true,"releaseDate":"2011-04-29"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2010-09-16 09:42:41.19","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"24438","customfield_12310222":"1_*:*_1_*:*_19731978689_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2011-02-26T03:44:16.787+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4741/watchers","watchCount":2,"isWatching":false},"created":"2010-07-12T18:37:58.135+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":["derby_backport_reject_10_7","derby_triage10_8"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"70.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312027","id":"12312027","description":"","name":"10.2.2.0","archived":false,"released":true,"releaseDate":"2006-12-19"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312876","id":"12312876","description":"","name":"10.3.2.1","archived":false,"released":true,"releaseDate":"2007-12-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313142","id":"12313142","description":"","name":"10.3.3.0","archived":false,"released":true,"releaseDate":"2008-05-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313345","id":"12313345","description":"","name":"10.4.2.0","archived":false,"released":true,"releaseDate":"2008-09-05"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313771","id":"12313771","description":"build: 764942, 14/Apr/09. Voted release: 28/Apr/09. Announced: 1/May/09","name":"10.5.1.1","archived":false,"released":true,"releaseDate":"2009-04-28"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314116","id":"12314116","description":"10.5.2 Release July 30 2009 (794445) Now deprecated","name":"10.5.2.0","archived":false,"released":true,"releaseDate":"2009-07-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314117","id":"12314117","description":"Next release after 10.5.2.0 release candidate #1","name":"10.5.3.0","archived":false,"released":true,"releaseDate":"2009-08-21"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313727","id":"12313727","description":"Feature release","name":"10.6.1.0","archived":false,"released":true,"releaseDate":"2010-05-18"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12336760","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336760","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12494893","key":"DERBY-4960","self":"https://issues.apache.org/jira/rest/api/2/issue/12494893","fields":{"summary":"Race condition in FileContainer#allocCache when reopening RAFContainer after interrupt","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12336909","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336909","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12495640","key":"DERBY-4974","self":"https://issues.apache.org/jira/rest/api/2/issue/12495640","fields":{"summary":"InterruptResilienceTest fails on Solaris with Sun VMs prior to 1.6","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12337026","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12337026","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12496358","key":"DERBY-4982","self":"https://issues.apache.org/jira/rest/api/2/issue/12496358","fields":{"summary":"Retrying after interrupts in store pops a bug in derbyall/storeall/storeunit/T_RawStoreFactory in some cases","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12341290","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12341290","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12506629","key":"DERBY-5223","self":"https://issues.apache.org/jira/rest/api/2/issue/12506629","fields":{"summary":"Thread's interrupted flag not always preserved after Derby returns from JDBC API call","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12339076","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12339076","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12507184","key":"DERBY-5233","self":"https://issues.apache.org/jira/rest/api/2/issue/12507184","fields":{"summary":"Interrupt of create table or index (i.e. a container) will throw XSDF1 under NIO - connection survives","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12341256","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12341256","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12512855","key":"DERBY-5312","self":"https://issues.apache.org/jira/rest/api/2/issue/12512855","fields":{"summary":"InterruptResilienceTest failed with ERROR 40XD1: Container was opened in read-only mode.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12341255","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12341255","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12513487","key":"DERBY-5325","self":"https://issues.apache.org/jira/rest/api/2/issue/12513487","fields":{"summary":"Checkpoint fails with ClosedChannelException in InterruptResilienceTest","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12338252","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12338252","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12502376","key":"DERBY-5152","self":"https://issues.apache.org/jira/rest/api/2/issue/12502376","fields":{"summary":"Shutting down db, information that the thread received an interrupt will not be restored to thread's interrupt flag","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12341254","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12341254","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12514078","key":"DERBY-5333","self":"https://issues.apache.org/jira/rest/api/2/issue/12514078","fields":{"summary":"Intermittent assert failure in testInterruptShutdown: thread's interrupted flag lost after shutdown","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12336821","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336821","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12495149","key":"DERBY-4963","self":"https://issues.apache.org/jira/rest/api/2/issue/12495149","fields":{"summary":"Revert to FileDescriptor#sync from FileChannel#force to improve interrupt resilience","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12336851","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336851","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12495293","key":"DERBY-4967","self":"https://issues.apache.org/jira/rest/api/2/issue/12495293","fields":{"summary":"Handle interrupt received while waiting for database lock","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12336852","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12336852","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12495296","key":"DERBY-4968","self":"https://issues.apache.org/jira/rest/api/2/issue/12495296","fields":{"summary":"Let query stop execution if an interrupt is seen, at same time as we check the query timeout","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12337460","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12337460","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12498366","key":"DERBY-5024","self":"https://issues.apache.org/jira/rest/api/2/issue/12498366","fields":{"summary":"Document the behavior of interrupt handling.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12333918","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12333918","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12399349","key":"DERBY-3746","self":"https://issues.apache.org/jira/rest/api/2/issue/12399349","fields":{"summary":"java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12332947","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12332947","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"30281","key":"DERBY-151","self":"https://issues.apache.org/jira/rest/api/2/issue/30281","fields":{"summary":"Thread termination -> XSDG after operation is 'complete'","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12334872","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12334872","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12480747","key":"DERBY-4911","self":"https://issues.apache.org/jira/rest/api/2/issue/12480747","fields":{"summary":"restoreIntrFlagIfSeen may throw ShutdownException causing confusing console stack trace at server shutdown","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-06-17T09:19:51.775+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11412","id":"11412","name":"Store"}],"timeoriginalestimate":null,"description":"When not executing on a small device VM, Derby has been using the Java NIO classes java.nio.clannel.* for file io for extra concurrency.\r\nIf a thread is interrupted while executing blocking IO operations in NIO, the ClosedByInterruptException will get thrown. Unfortunately, Derby isn't current architected to retry and complete such operations (before passing on the interrupt), so the Derby database store can be left in an inconsistent state, although no data is corrupted, and we therefore have to return a database level error to perform shutdown and recovery. This means the applications can no longer access the database while a shutdown and reboot including a recovery is taking place.\r\n\r\nIt would be nice if Derby could somehow detect and finish IO operations underway when thread interrupts happen before passing the exception on to the application. Derby embedded is sometimes embedded in applications that use Thread.interrupt to stop threads.\r\n\r\n\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"35149","summary":"Make embedded Derby work reliably in the presence of thread interrupts","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":144,"total":144,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12910067","id":"12910067","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Since Derby used to handle interrupts in a better way before we switched to NIO, would it make sense to change the issue type to bug and flag it as a regression?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-09-16T09:42:41.190+0000","updated":"2010-09-16T09:42:41.190+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12910135","id":"12910135","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Yes, I agree, Knut. Just did it :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-09-16T12:57:10.875+0000","updated":"2010-09-16T12:57:10.875+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12918258","id":"12918258","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading an experimental patch which upon seeing the container channel interrupted/closed, \r\ncloses and reopens the container to allow completion of the I/O.\r\n\r\nUsing a modified Derby151Test, the trace on my box (OpenSolaris snv_148, Java 1.6) shows how\r\nthe RAFContainer4.java I/O code recovers. When an interrupt is detected (in the form of an interrupted channel),\r\nthe thread's interrupt flag is tucked away in a thread local variable for now, and the flag is reset, so the thread can continue and retry the I/O operation when the container has been resurrected. \r\n\r\nThe idea is that the thread local variable might be checked \"higher up\" somewhere, where throwing an exception would not make the database go down.\r\n\r\nDuring this investigation, I have found numerous other locations at which an interrupt will make Derby go down, though, so RAFContainer4.java (or in deed NIO) is not the only weak spot we have.\r\nRunning the test on Windows, I see Derby choke on trying to switch log files, cf the enclosed derby.log file \"derby-4741-nio-container-2.log\" due to seeing a ChannelClosedException on the log file (NIO channel.force).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-05T22:18:21.623+0000","updated":"2010-10-05T22:18:21.623+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12918508","id":"12918508","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a modified version of the experimental patch, nio-container-2b, which also includes a standalone test I have been using to flush out effects of interrupts on threads.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-06T13:21:48.004+0000","updated":"2010-10-06T13:21:48.004+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12918975","id":"12918975","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading derby-4741-nio-container+log, which builds on the previous\r\nexperimental patch in the following ways:\r\n\r\n- Adds logic to recover when switching the log file gets interrupted\r\n  (seen on Windows using Derby151Test). The retry had to precolate up\r\n  from the NIO code, so I use an internal exception (temporarily\r\n  borrow an exisiting one; should make a new one later)\r\n\r\n- Makes RAFContainer4#getEmbryonicPage use a minion of readPage, so\r\n  getEmbryonicPage can take advantage of the recovery machinery as\r\n  well (it previously did a direct call to readFull, which made it\r\n  vulnerable to being interrupted; this was also seen on Windows.\r\n\r\n  Unfortunately, the latter could lead to deadlocks, because when\r\n  getEmbryonicPage is called from writeRAFHeader, the thread has a\r\n  lock on \"this\".  If another thread is has been interrupted and is\r\n  about to do recovery, it would get stuck on waiting for the monitor\r\n  on \"this\", while the getEmbryonicPage reader would get stuck on\r\n  waiting on recovery to finish. To solve this, I had to let reads\r\n  from getEmbryonicPage throw an internal exception so it can back out\r\n  and release the monitor on \"this\" (in RAFContainer#clean), and do a\r\n  retry from that level.\r\n\r\nThe patch is just a snapshot of my experiments, only intended so\r\npeople could comment on the approach. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-07T17:04:18.062+0000","updated":"2010-10-07T17:04:18.062+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12918977","id":"12918977","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Now, heading back to Solaris after having flushed out NIO issues on Windows, I see that Derby falls over when it gets interrupted\r\nduring transaction abort (XSTB0), as a result of receving an interrupt during a log flush wait(LogToFile.java:4048). I saw this using InterruptedTest in the patch. The test tries to reconnect (reboot), but eventually I can no longer get a connection, because I  hit a NullPointerException in BaseDataFileFactory.java:639 (containerCache empty??). Cf enclosed xsbt0.log.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-07T17:16:19.810+0000","updated":"2010-10-07T17:16:19.810+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919286","id":"12919286","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a revised experimental patch, derby-4741-nio-container+log+waits, which intercepts and saves away interrupts in \r\n\r\n- LogToFile#flush, when a thread is waiting for another thread to flush the log.\r\n- BasePage#setExclusive (2 places)\r\n- BasePage#setExclusiveNoWait\r\n\r\nIt also fixes a bug in NIO getEmbryonicPage; the new implementation tried to decrypt when reading the embryonic page if the database were encrypted.\r\n\r\nWith these changes in place, the next issue that I sometime see is that we can get interrupted waiting for a lock.\r\n\r\njava.lang.InterruptedException\r\n\tat java.lang.Object.wait(Native Method)\r\n\tat org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(ActiveLock.java:118)\r\n\tat org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:469)\r\n\r\nIn turn this led to continual failure because I hit this ASSERT:\r\n\r\nat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)\r\nat org.apache.derby.impl.services.locks.LockControl.addLock(LockControl.java:276)\r\n\r\nKnut suggested to me we try to treat this situation similarly to how we handle lock time-outs and just throw an interrupted exception at safe place. Sounds good to me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-08T14:10:02.354+0000","updated":"2010-10-08T14:10:02.354+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919335","id":"12919335","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"so far your approach seems fine to me, and I think will help a lot of customers.  I was wondering if\r\nyou have a high level goal.  Basically what should derby do when it encounters an interrupt.\r\n\r\nI think it should always throw some sort of error back to caller, and would be nice if the error or \r\nthe nested error indicated clearly that it is being thrown because of a thread interrupt.  Many times\r\nwhen supporting this issue it takes awhile for the user to realize that they are the ones generating\r\nthe interrupt.\r\n\r\nI think the error should not be database level, and with your retry on I/O and log it seems like we\r\ncan avoid that.  I am not sure if it should be session or statement level,\r\nI am leaning to it being session level, but would like to see a discussion.  I know often users are\r\ndoing the interrupt to stop a thread.  \r\n\r\nUltimately do you plan on always reenabling the interrupt after retrying or getting to a safe place?\r\n\r\nWe should definitely throw an error in the case of an interrupt during a lock wait, this seems like the\r\none valid case to send an interrupt to derby if a user thinks it is waiting too long.  Hopefully you can\r\ncode it to handle it, do processing, get to safe spot and then throw an error indicating a real user \r\ninterrupt during a wait.  \r\n\r\nSomething to think about in the error throwing is the background thread.  What should we do if\r\nit encounters an interrupt.  Throwing an error there might shutdown the db, i am not sure what it\r\ndoes at top level with an error.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2010-10-08T17:51:51.196+0000","updated":"2010-10-08T17:51:51.196+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919376","id":"12919376","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Mike, thanks for looking at this!\r\n\r\n> I was wondering if you have a high level\r\n> goal. Basically what should derby do when it encounters an\r\n> interrupt.\r\n\r\nI started off merely trying to make the new IO pieces stand up as well\r\nas the old I/O, but I guess my ambitions grew a bit as I found many\r\nthings could bring Derby down..\r\n\r\nMy thinking so far is that Derby should:\r\n\r\na) avoid having to shut down if a thread has been interrupted\r\n\r\nb) throw *something* when it finds the thread has been interrupted,\r\npreferably as soon as possible, but not before the code has arrived at\r\na \"safe place\", so we can avoid Derby shutting down.\r\n\r\n> I think it should always throw some sort of error back to caller,\r\n> and would be nice if the error or the nested error indicated clearly\r\n> that it is being thrown because of a thread interrupt. Many times\r\n> when supporting this issue it takes awhile for the user to realize\r\n> that they are the ones generating the interrupt.\r\n\r\nAgreed. So far I have been thinking of just using the connection level error 08000,\r\nwrapping the original NIO channel exception, or InterruptedException.\r\nThis should make it clear what has happened, and unwrapping the exception would \r\nshow where Derby detected it.\r\n\r\n\r\n> I think the error should not be database level, and with your retry\r\n> on I/O and log it seems like we can avoid that. \r\n\r\nThat's what I am trying to achieve, yes.\r\n\r\n> I am not sure if it should be session or statement level, I am\r\n> leaning to it being session level, but would like to see a\r\n> discussion. I know often users are doing the interrupt to stop a\r\n> thread.\r\n\r\nThe existing code throws session level error 08000 already in many\r\nplaces, and I felt it's OK to require that the user reconnect when she\r\nhas done something as drastic as interrupting the thread (?)\r\n\r\n> Ultimately do you plan on always reenabling the interrupt after\r\n> retrying or getting to a safe place?\r\n\r\nI am still pondering this question. I *think* that by the principle of\r\nleast surprise to the user, we should set the interrupted flag of the\r\nthread again just before we throw the exception from the \"safe place\".\r\n\r\nNote: the exisiting code does not resurrect the\r\nthread's interrupted flag when it detects an interrupt of a wait and throws\r\nStandardException.interrupt. (wait would have cleared the flag). \r\n\r\nAn imminent problem is where would the \"safe place\" be? It would be\r\nnice to *avoid* having to check in all JDBC API methods before we\r\nreturn if Derby has been interrupted during the API call, but I am not\r\nyet sure if I am able to determine conclusively which API code paths\r\ncould lead to Derby being interrupted.. One approach would be to throw\r\nas \"soon as possible\" from a \"safe place\" on the stack above the\r\nmethod that saw the interrupt, but it may be hard to always determine\r\nwhere that would be in all cases. I am open to suggestions here :)\r\n\r\nThe current experimental patch mostly doesn't throw yet (I didn't get\r\nthat far) - it just makes a note that an interrupt was detected. Nor\r\ndoes it resurrect the interrupted flag when it does throw - since I\r\nwas still torn on this.\r\n\r\n> We should definitely throw an error in the case of an interrupt\r\n> during a lock wait, this seems like the one valid case to send an\r\n> interrupt to derby if a user thinks it is waiting too\r\n> long. Hopefully you can code it to handle it, do processing, get to\r\n> safe spot and then throw an error indicating a real user interrupt\r\n> during a wait.\r\n\r\nYes, I am trying to do exactly that, agreed. \r\n\r\nI also would like interrupts on queries to be detected no later that\r\nat the place where we check for query time-outs already,\r\ncf. BasicNoPutResultSetImpl#checkCancellationFlag.\r\n\r\n> Something to think about in the error throwing is the background\r\n> thread. What should we do if it encounters an interrupt. Throwing an\r\n> error there might shutdown the db, i am not sure what it does at top\r\n> level with an error.\r\n\r\nRight. A priori, I thought the most common use case would be user\r\nthreads getting interrupted, but I'll look into that. One approach\r\ncould be to shutdown, or possibly try to make it impervious and ignore\r\nall interrupts..\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-08T20:57:45.134+0000","updated":"2010-10-08T20:57:45.134+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919402","id":"12919402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a new version of the experimental patch, derby-4741-nio-container+log+waits+locks,\r\nwhich \r\n\r\na) handles interrupts during lock wait\r\nb) retries when LogToFile fails during call to switchLogFile#preAllocateNewLogFile's call to syncFile, which I also saw,\r\n   but there are probably more places where logging can fail\r\n c) adds a \"lock\" argument to InterruptTest to test safe throws for a)\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-08T22:46:12.203+0000","updated":"2010-10-08T22:46:12.203+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919646","id":"12919646","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks Dag. The proposed plan sounds good to me.\r\n\r\nAs to what to do with the interrupt status after a retry, I'd be happy as long as we always either fail or preserve the interrupt status. I don't have any strong opinions on whether or not we should set the interrupt flag when raising the exception. I see that the pre-NIO methods that may be interrupted (wait, sleep, join) will throw an exception and *clear* the interrupt status, whereas the interruptible NIO methods will throw an exception and *set* the interrupt status, so the precedence from the class library is ambiguous. I agree, though, that the user's intent is probably to stop the thread, and then preserving the interrupt status sounds reasonable in order to prevent that the thread just runs to the next blocking call and gets blocked there.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-10-10T19:06:07.494+0000","updated":"2010-10-10T19:07:23.754+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12919805","id":"12919805","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks, Knut! I agree it's a bit weird that the JRE is a little schizophrenic about the interrupt flag. I think we should try to be consistent when we throw, no matter where/after which Java API call Derby detects it. If we do retain the interrupt flag, I think it adds to the argument for making the exception session-level, since the user would need to undertake some cleaning up anyway, or else the next Derby call would fail as well. Probably this would be the use case for connection pools. As to arguments for making the error statement level, I guess if one just wants to stop a run-away query, one would possibly prefer that just the statement failed.  A thing to consider here is the new JDBC 4.1 method Connection#abort:\r\nThis would be the future portable way of stopping a run-away transaction. It will also close the the connection.\r\n\r\nThis patch passed regressions, for what it's worth.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-11T12:47:52.129+0000","updated":"2010-10-11T12:47:52.129+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920090","id":"12920090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Thanks to Dag for fixing this bug. It will benefit a lot of customers. As for making the exception on either session-level or statement level, I will prefer to have it stop a run-away query and have the exception jut s statement failed. For most web application, it could be easier to rewrite the interrupt near statement than session perspective. \r\nAs test for nio+container+log+waits+locks, it also passed suites.all on my windows 7 machine. However, when running mailjdbc tests, the test got exception on Error 40XD1: Container was opened in read-only mode for Browsing thread, on Error '-1:java.lang.ArrayIndexOutOfBoundsException' for Backup Thread. \r\nI am not totally sure why the different behavior for this patch. However, with derby-4741-nio-container+log patch, mailjdbc get deadlock exception. I am attach derby.log for reference point.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-12T05:00:42.531+0000","updated":"2010-10-12T05:00:42.531+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920177","id":"12920177","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Lily, thanks for test driving the patches :)  Du you know if mailjdbc uses interrupts in any way? I'll try to run it myself, maybe some of the changes changed behavior even in the absence of interrupts. Btw, there are still many holes, I have found more places especially in the logging system that are vulnerable to\r\ninterrupts, so I am still building out the experimental patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-12T12:55:58.538+0000","updated":"2010-10-12T12:55:58.538+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920186","id":"12920186","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Hi Dag,\r\n\r\nThere's some discussion about mailjdbc and interrupts on DERBY-3746. The comments there seem to indicate that the test sometimes interrupts the worker threads.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-10-12T13:33:38.433+0000","updated":"2010-10-12T13:33:38.433+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920218","id":"12920218","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Hi Dag:\r\n     Thank you. I am so exciting to help out testing and hope I can do more. Like Knut said, mailjdbc interrupts on Browse.java and more detail on DERBY-3746 and DERBY-4166, the portion of the code on Browse.java that call interrupt is: \r\n\t\t\t\t//Checking whether Refresh thread is running after doing Browse work\r\n\t\t\t\t//If Refresh is not running, interrupt the thread\r\n\t\t\t\tif (ThreadUtils.isThreadRunning(\"Refresh Thread\")) {\r\n\t\t\t\t\tMailJdbc.logAct.logMsg(\"******** Refresh is running\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tRefresh th = (Refresh) ThreadUtils\r\n\t\t\t\t\t\t\t.getThread(\"Refresh Thread\");\r\n\t\t\t\t\tth.interrupt();\r\n\t\t\t\t}\r\n      Refresh thread and Brose thread are dealing with the same tables for mailjdbc application. I am also reading Derby151Test to see whether we should simplify the mailjdbc test to better fit testing this fix that will benefit a lot of customers. Thanks again. By the way, the read-only error on Browse thread and  ArrayIndexOutOfBoundsException from backup thread is from running mailjdbc with embedded server.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-12T14:24:27.413+0000","updated":"2010-10-12T14:24:27.413+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920225","id":"12920225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks, Knut and Lily. \r\nOk, good to know that there is an interrupt involved when mailjdbc fails.  Lily, also please note that Derby151Test is its present form will probably change when I start to actually throw Derby exceptions when interrupts are detected. So far, they are mostly only noted in InterruptStatus (thread local) and normal operation continues. The latest patch has started to throw exceptions for interrupts while waiting for locks, though, cf. mods in LockSet.java/ConcurrentLockSet.java, since this seemed the obvious place to throw anyway.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-12T14:51:52.990+0000","updated":"2010-10-12T14:51:52.990+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920248","id":"12920248","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Lily, I looked at derby.log: The stack trace you see first: \"ERROR 40XD1: Container was opened in read-only mode.\" seems to happen \r\nwhile Derby is opening the conglomerate in the normal fashion and finds for some reason that it (or the directory) is not writable. It is not obvious to me that\r\nthis has to do with the patch, but it is not impossible, I suppose, since the patch does touch RAFContainer(4), e.g. by reopening the container if the channel has been closed by interrupts. But this seems to be a normal open, not a reopen called from RAFContainer4 (which is not on the stack).\r\nCf. RAFContainer#run, action OPEN_CONTAINER_ACTION, ca line 1447.\r\n\r\nI'll see if I can run the test myself and reproduced the error.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-12T16:20:11.722+0000","updated":"2010-10-12T16:20:11.722+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920357","id":"12920357","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Attaching derby-4741-nio-container+log+waits+locks-2, which adds more interrupt recovery logic, mainly to LogToFile.java and LogAccessFile. With this version I have not yet been able to make crash the database (i.e. provoke a database level error) using the three run modes of InterruptedTest - default, i.e. write, read and lock, so we are gettting more resilient.\r\n\r\nOnly interrupted lock waits are added as new Derby exception cases yet, I'll start looking into where to throw more seriously now. Indeed, some existing cases where we did throw in LogToFile, don't throw in the current patch, we just take a note and retry.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-12T21:35:25.377+0000","updated":"2010-10-12T21:35:25.377+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920751","id":"12920751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Lily, I ran mailjdbc test with my latest patch on Windows Vista for about 20 hours; I saw deadlocks, but not the read-only container error.\r\nI did see several mysterious lines in derby.log, e.g.\r\n\r\n     \"not switching from an empty log file (870)\"\r\n\r\nsimilar to what you had in your derby.log. I have no experience with this test, so I don't know if this is normal for this test or a sign that something is wrong; I'll try to run the test without the patch and compare.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-13T20:24:35.925+0000","updated":"2010-10-13T20:24:35.925+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920769","id":"12920769","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Re mailjdbc: It seems \"not switching from an empty log file\" in derby.log is normal for this test, at least I see it on trunk without the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-13T21:16:06.136+0000","updated":"2010-10-13T21:16:06.136+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920790","id":"12920790","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Thanks Dag for spending time to look at mailjdbc. Yes, it is normal and I see it on trunk without the patch too. However, I haven't see the deadlock with the patch on my Windows 7 machine. I had been running 16 hours. It will be great for Derby if the deadlock is not normal. I will run more to see.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-13T22:41:52.927+0000","updated":"2010-10-13T22:41:52.927+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920830","id":"12920830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading another experimental patch, derby-4741-nio-container+log+waits+locks+throws.\r\n\r\nThe change now is \r\n- some further generalizing of recovery logic in RAFContainer4, the readPage logic was missing some stuff I had added for writePage\r\n- introduced InterruptTest#throwIf, which is a helper method to check & reset the thread's interrupt status and throw an SQLException (08000 for now) if set.\r\n- added throwIf next to Query timeout logic in BasicNoPutResultSetImpl#checkCancellationFlag\r\n- added throwIf before all returns in impl/jdbc/*.java in methods which call (directly or indirectly) handleException(t), typically this pattern:\r\n       :\r\n       InterruptTest#throwIf()\r\n       return;\r\n} catch (Throwable t) {\r\n      throw handleException(t);\r\n  \r\nThis will make sure Derby throws if it ever did see an interrupt during operation, which was intercepted for safety and postponed till a \"safe place\". This is a \"catch-all\", though, and I'll look for other  places closer to the\r\noriginating sites (container I/O, log I/O) so Derby could throw earlier. \r\n\r\nFor example, commit can now throw if we see an interrupt during writing to log, cf. call to throwIf in EmbedConnection#commit.\r\n\r\nCurrently all interrupts throw 08000 which is session level, and none yet set the thread's intr flag. I will go over all usages of 08000 and set the flag next if we agree that's the right thing to do. Note that Derby151Test fails now, but InterruptTest should work and report all interrupts Derby see (some interrupts happen while the test is in application code; this is called out in the test's results). Btw, InterruptTest is not yet a JUnit test..\r\n\r\nThe patch is getting a bit large and unwieldy now, but not to worry, the patch is just a proof of concept, I'll break it down into smaller pieces before any proposed commit. Rerunning regressions.\r\n\r\nI see Lily would prefer statement level error, rather than session level. I am sticking to session level for now since that's what the exisiting 08000 currently is. I'll go over the remaining *existing* usages of 08000 which I didn't already replace with \"InterruptStatus.setInterrupted\" + retry logic. If all are ok to replace, we could probably choose to change the exception to statement level rather than session level. If not, it might be confusing to have two kinds of SQLExceptions for interrupts, with different severity...\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-14T02:11:37.786+0000","updated":"2010-10-14T02:11:37.786+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920996","id":"12920996","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading the last patch again (derby-4741-nio-container+log+waits+locks+throws) - it had a small bug that broke LogSwitchFail.unit, fixed now ;-)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-14T16:00:45.315+0000","updated":"2010-10-14T16:00:45.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12920998","id":"12920998","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"A concern with additing the \"catch-all\" check is performance for fast API operations, like ResultSet#next, which usually only just fetches the next prefetched row (no I/O). I'll run some micro benchmarks to study if adding the interrupt check is too expensive in such a case.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-14T16:03:44.598+0000","updated":"2010-10-14T16:03:44.598+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921231","id":"12921231","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Thanks Dag for giving such details about each change. It definitely helps people like me to learn and understand more. The patch is getting big and complicated. However,  I run mailjdbc again the latest derby-4741-nio-container+log+waits+locks+throws, the test run into Error ERROR 40001: A lock could not be obtained due to a deadlock.  derby.log is attached for reference. Do we need InterruptException on synchronized (slaveRecoveryMonitor) in LogToFile.recover(...)?  Will change interrupt exception to statement level rather than session level require more code changes? Such as code in impl/store/raw/xact/* I was just thinking statement level is more user friendly to application users.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-15T05:08:47.441+0000","updated":"2010-10-15T05:08:47.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921418","id":"12921418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Lily,\r\n\r\nthanks again for looking at this :)\r\n\r\n> However, I run mailjdbc again the latest\r\n> derby-4741-nio-container+log+waits+locks+throws, the test run into\r\n> Error ERROR 40001: A lock could not be obtained due to a\r\n> deadlock. derby.log is attached for reference. \r\n\r\nYes, I saw that such lock errors too after about 18 hours of so. I am\r\nnot yet sure they have anything to do with the patch changes, but I\r\ncan't rule it out. I don't know the test app well enough. If you have\r\nany insight here which would indicate that locks should not occur\r\nunder normal operation, what would that be?  We could try to run the\r\npatch without the changes I made to ActiveLock, ConcurrentLockSet and\r\nLockSet, and see if the changes there have something to do with any\r\nchange of behaviour..\r\n\r\n> Do we need\r\n> InterruptException on synchronized (slaveRecoveryMonitor) in\r\n> LogToFile.recover(...)? \r\n\r\nI don't think I changed that part of the code. I see that an interrupt\r\nis just ignored there, so I think we can safely add a call to\r\n\"InterruptStatus.setInterrupted\" there as well, if that's what you\r\nmean. \r\n\r\nGenerally I have just been concentrating on \"normal operation\" yet, so\r\nfar I haven't yet looked into things like replication, backup,\r\nexport/import, or even LOB/CLOB streams yet. I suspect there may be\r\nissues with interrupts happening during I/O in those areas as well.\r\n\r\n> Will change interrupt exception to statement\r\n> level rather than session level require more code changes? Such as\r\n> code in impl/store/raw/xact/* \r\n\r\nI don't know that for sure, but I suspected it might, the cleanup on\r\nsession termination just seemed safer and in line with what we already did\r\nfor interrupt exceptions. More investigation needed.\r\n\r\n> I was just thinking statement level is more user friendly to\r\n> application users.\r\n\r\nYes, I see that point. If we decide that's the way we would ultimately\r\nlike to go, I think I will still defer that to a next increment (maybe\r\na new JIRA issue?) of this work just to keep things simpler for now.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-15T16:00:10.958+0000","updated":"2010-10-15T16:00:10.958+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921420","id":"12921420","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Running a micro benchmark to test the effect for adding InterruptStatus.throwIf to the APIs\r\nwere a bit inconclusive. With the latest patch, using the attached MicroAPITest.java (ca 6-7 runs), I saw a ca 2.5 & degradation of performance with just calls to ResultSet.next for a database that fits in memory.\r\n\r\nHowever, just adding the InterruptStatus.throwIf calls to the API *without* the rest of the patch seemed to have no significant effect, so perhaps there are other parts of the patch that had made the operation somewhat slower, I'll try to incrementally remove parts of the patch and see what I find.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-15T16:06:40.872+0000","updated":"2010-10-15T16:06:40.872+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921740","id":"12921740","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I've also tried the micro benchmark, but got somewhat different results. In 20 runs with a clean trunk and 20 runs with the derby-4741-nio-container+log+waits+locks+throws.diff patch in random order, clean trunk was on average 8.5% faster than the patched version (3.64 s/query vs 3.95 s/query).\r\n\r\nI ran the experiment with insane jars on OpenSolaris 2010.05 snv_134b and Java 1.6.0_18, and I had upped derby.storage.pageCacheSize to 12500.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-10-16T19:23:46.996+0000","updated":"2010-10-16T19:23:46.996+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921764","id":"12921764","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Thanks for the important finding. The result is hard on issues to keep Derby stand out from other Java database. I humbly believe Derby will keep on shining if performance can keep on improving. Do you have any suggestion in turn of fixing thread interrupts and keep performance no less than 3% slower than current clean trunk?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-16T21:35:55.917+0000","updated":"2010-10-16T21:35:55.917+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12921987","id":"12921987","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Oops... Clean trunk wasn't 8.5% faster than the patched version. It was 7.8% faster. What I should have said, was that the patched version was 8.5% slower than clean trunk.\r\n\r\nI ran the micro benchmark through a profiler, but I didn't see anything there to explain a ~8% degradation. I did see more time spent in ThreadLocal.get() (no surprise there...), but only enough to explain one or two percent, roughly what Dag saw. I'll try to dig a little more.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-10-18T07:11:28.320+0000","updated":"2010-10-18T07:11:28.320+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12922096","id":"12922096","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for doing more measurements, Knut! It seems that even in the best case, the movePostion operation is negatively impacted with 1-2% due to the ThreadLocal access, which is not desirable.\r\n\r\nKnut mentioned that ContextService is already based on a ThreadLocal. I checked around a bit and found that we might be able to get rid of the InterruptStatus thread local check in the API methods in this way:\r\n\r\nIf we were able to retrieve the lcc at the point where we detect the interrupts and save this fact in the lcc at that time, the cost of accessing a ThreadLocal variable would not be incurred unless AN INTERRUPT ACTUALLY HAPPENED.\r\n\r\nIn the API methods, lcc is already available, and checking a boolean flag in the lcc instead of calling InterruptStatus#throwIf (which accesses a thread local) would be much cheaper.  I see we already sometimes do dig out the lcc in store level code, e.g. in store.access.DiskHashtable, in this way:\r\n\r\n    LanguageConnectionContext lcc   = (LanguageConnectionContext)\r\n            ContextService.getContextOrNull(      // this call accesses a ThreadLocal\r\n                LanguageConnectionContext.CONTEXT_ID);\r\n\r\nI'll look into this approach a bit.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-18T15:05:01.263+0000","updated":"2010-10-18T15:06:21.851+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12922362","id":"12922362","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"The approach seems to work. This should take care of the performance worries for using InterruptStatus#throwIf in API methods.\r\n\r\nSometimes there is no lcc, e.g when creating a new database; we could then fall back on the dedicated thread local variable, cf. during EmbedConnection constructor's call to createDatabase.\r\n\r\nAnother note: undo is still vulnerable, e.g. an interrupt during rollback, usage of StorageRandomAccessFile in cf. Scan.java, cf.\r\n\r\n------------  BEGIN SHUTDOWN ERROR STACK -------------\r\n\r\nERROR XSLA3: Log Corrupted, has invalid data in the log stream.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:279)\r\n\tat org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:216)\r\n\tat org.apache.derby.impl.store.raw.log.FileLogger.undo(FileLogger.java:939)\r\n\tat org.apache.derby.impl.store.raw.xact.Xact.abort(Xact.java:949)\r\n\tat org.apache.derby.impl.store.raw.xact.XactContext.cleanupOnError(XactContext.java:119)\r\n\tat org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:333)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:419)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:337)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2277)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1325)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1683)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:305)\r\n\tat InterruptTest$WorkerThread.run(InterruptTest.java:263)\r\nCaused by: java.io.InterruptedIOException\r\n\tat java.io.RandomAccessFile.read(Native Method)\r\n\tat java.io.RandomAccessFile.readInt(RandomAccessFile.java:721)\r\n\tat java.io.RandomAccessFile.readLong(RandomAccessFile.java:758)\r\n\tat org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(Scan.java:394)\r\n\tat org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:204)\r\n\r\n(roll-back happens here due to the test trying to insert a duplicate after a commit has been interrupted)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-18T23:48:46.370+0000","updated":"2010-10-18T23:48:46.370+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12922370","id":"12922370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"And we are vulnerable during (re)boot:\r\n\r\njava.sql.SQLException: Failed to start database 'interrupttest' with class loader sun.misc.Launcher$AppClassLoader@2bbd86, see the next exception for details.\r\n       :\r\nCaused by: java.sql.SQLException: Failed to start database 'interrupttest' with class loader sun.misc.Launcher$AppClassLoader@2bbd86, see the next exception for details.\r\n       :\r\nCaused by: java.sql.SQLException: Java exception: ': java.io.InterruptedIOException'.\r\n       :\r\nCaused by: java.io.InterruptedIOException\r\n\tat java.io.RandomAccessFile.readBytes(Native Method)\r\n\tat java.io.RandomAccessFile.read(RandomAccessFile.java:322)\r\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:381)\r\n\tat java.io.RandomAccessFile.readFully(RandomAccessFile.java:361)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(LogToFile.java:2693)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.boot(LogToFile.java:3398)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2020)\r\n\tat org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:333)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:572)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)\r\n\tat org.apache.derby.impl.store.raw.data.BaseDataFileFactory.bootLogFactory(BaseDataFileFactory.java:1747)\r\n\tat org.apache.derby.impl.store.raw.data.BaseDataFileFactory.setRawStoreFactory(BaseDataFileFactory.java:1235)\r\n\tat org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:223)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2020)\r\n\tat org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:333)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:572)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)\r\n\tat org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2020)\r\n\tat org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:333)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:572)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)\r\n\tat org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:760)\r\n\tat org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:193)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2020)\r\n\tat org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:333)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1857)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1723)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1601)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1020)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2679)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-19T00:01:12.213+0000","updated":"2010-10-19T00:01:12.213+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12922716","id":"12922716","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"I feel pretty confident the main approach will improve things  by now, so I'll upload a final version of the experimental patch, and the start producing incremental patches for commit roughly in the following order:\r\n\r\na) hooks in the APIs to resurrect interrupt flags before we return to the user's app on the basis of info collected during operation, the new util class InterruptStatus, which is a collection of methods to save away and resurrect interrupt flags, and throw an interrupt SQLexception. I intend to *not* throw any exception if the API method ran to completion, just resurrect the flag.\r\nb) the modified RAFContainer4 stuff for reading and writing db cache pages safely with NIO.\r\nc) the modified DirRandomAccessFile4 stuff + log retries for safe operation of log writing\r\nd) stop execution if intr seen within a batch, when checking query timeout, and when seeing intr while waiting for locks\r\ne) make undo safe\r\nf) time permitting, make boot and recovery interrupt safe.\r\n\r\nPlease let me know if there any objections or suggestions to this plan! Whether all this gets ready for 10.7 is a possible issue, but hopefully we should not behave worse the before at any step.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-19T21:03:55.330+0000","updated":"2010-10-19T21:03:55.330+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12922766","id":"12922766","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"A final version of the experimental patch, derby-4741-all+lenient+resurrect uploaded.\r\nMain changes:\r\n  - use lcc to store interrupt status for a session thread. If not available fall back on a thread local.\r\n  - resurrect the interrupt flag before returning to user app always, if we throw or not (see next item)\r\n  - don't throw if an API operation ran to completion without trouble, even if we did see an interrupt flag\r\n\r\nThe ad hoc InterruptTest and JUnit Derby151Test should run OK on both Solaris and Windows now.\r\nThe internal behavior is somewhat different since the JRE on Solaris throws InterrupedIOException in more cases, cf. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4385444.\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-19T22:48:15.558+0000","updated":"2010-10-19T22:48:15.558+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12923238","id":"12923238","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Note to self: I have found a problem with the interrupt recovery of\r\nRAFContainer4. Its call to openContainer needs to be protected by the\r\nmonitor on FileContainer#allocCache, because opening a container\r\nevetually leads to a call on AllocationCache#reset. AllocCache javadoc\r\nstates that the the callers need to synchronize themselves since it is\r\nitself not MT safe. \r\n\r\nThreads inside RAFContainer4#{readPage, writePage} do not necessarily\r\nown this monitor when recovery is attempted.\r\n\r\nI did once see a race condition due to this.  In the race condition, a\r\nthread was trying to write to a new page and got a array out of bounds\r\nexception inside AllocationCache.validate (numExtents was suddenly back to 0)\r\nbecause another thread was doing interrupt recovery by calling\r\nRAFContainer4#recoverContainerAfterInterrupt ->\r\nopenContainer -> ... -> AllocationCache#reset (unprotected).\r\n\r\n[edit add]:\r\nSimply enveloping recoverContainerAfterInterrupt's call to openContainer in synchronized(allocCache) won't work: can lead to deadlock.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-20T23:44:51.878+0000","updated":"2010-10-20T23:50:46.946+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12923367","id":"12923367","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I ran MicroAPITest with derby-4741-all+lenient+resurrect.diff (20 runs with each configuration, insane jars, pageCacheSize=12500). Now I only see a 1% degradation with the patch (p-value=0.07, according to the student t calculator at http://www.bio.miami.edu/rob/Students_t.html), so that definitely looks like a good improvement from the previous patch. I also modified the test so that it reused existing test data instead of creating it on every run. Then I didn't see any degradation. In fact, the results with the patch were 0.5% better than trunk when I ran the test that way.\r\n\r\nI also saw something similar with the previous patch. I saw an 8% degradation with the unmodified test, but the degradation was only about 2% with the modified test. This is also consistent with the findings Dag posted in the comment dated 15/Oct/10 12:06 PM, where he saw that the full patch gave a 2.5% degradation, whereas if he only applied the parts of the patch that were actually exercised during the data collection phase of the test, he didn't see any degradation.\r\n\r\nI don't know why the changes in the test setup code alters the result this way. The part of the test where we collect results should exercise the exact same code path with the two variants of the test. This reminds me of the effects we saw in DERBY-4233, which were attributed to JIT at that time. I think the theory at that time was something like this: The just-in-time compiler collects statistics before it compiles the code and uses the statistics to optimize the generated native code. The more time we spend in the test setup code, the more the statistics will be biased towards the setup code. For this test, that could mean that the JIT-compiled native code is optimized for the insert code path, whereas we're really only interested in the select code path in the test. Furthermore, since the patch changes code on the insert code path, the collected statistics and the chosen optimizations may change, and that may ultimately affect how the select code is optimized, even if the select code path barely has been touched by the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-10-21T08:44:21.369+0000","updated":"2010-10-21T08:44:21.369+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12923457","id":"12923457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"I can confirm Knut's number for MicroAPITest .java in turn of 1-3% degradation or some case better with the derby-4741-all+lenient+resurrect.diff patch. Thanks for all the great work, Dag. A lot of customers will benefit from this.  Wow!!!\r\n\r\nIt seems like we will throw an error back to the caller indicate they are the one generating the interrupt and we will throw an error in the case of an interrupt during a lock wait with this new approach. Will you elaborate on that in turn of the new patch behavior please? I am still having trouble understand the data flow perspective and would like to see some write out in turn of what exact error I will see from Derby . \r\n\r\nThis is one of the comments you wrote to me. Sorry for getting back to you promptly.\r\n>> Do we need  InterruptException on synchronized (slaveRecoveryMonitor) in \r\n>> LogToFile.recover(...)? \r\n>I don't think I changed that part of the code. I see that an interrupt \r\n>is just ignored there, so I think we can safely add a call to \r\n>\"InterruptStatus.setInterrupted\" there as well, if that's what you \r\n>mean.\r\nYes, this is what I mean. And, I add it to my client space and run some tests. It seems not harming anything. I know you are concentrating on \"normal operation\" and it is *really* a lot of work. Will we add a note somewhere about the code not cover for this interrupt handling? Such as: backup, \r\nexport/import, LOB/CLOB streams and replication for during I/O in those areas as well.\r\n\r\nI run Suites.all on windows and it is looking better than ever!!!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-21T14:31:37.107+0000","updated":"2010-10-21T14:31:37.107+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12923678","id":"12923678","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hei Lily, thanks for your continued interest in this issue!\r\n\r\n> Will you elaborate on that in turn of the new patch behavior please?\r\n\r\nMy present thinking is that the goal should be:\r\n   a) the best user experience will be that for operations\r\n      (technically JDBC API calls), which detect an interrupt, but\r\n      manage to retry and continue the operation, and for which we do\r\n      not cut the operation short, because there is no natural\r\n      point at which to interrupt it, or we deem it to be so short in\r\n      duration that we might as well see it through, we:\r\n      - do not throw an exception\r\n      - restore the interruped status flag just prior to return from\r\n        the operation (JDBC API call)\r\n   b) for operations that we actually cut short due to the interrupt,\r\n      see current enumeration below, we\r\n      - throw SQLException 08000, session level (we might change this\r\n        severity later as discussed)\r\n      - also resurrect the interrupt status flag just prior to return\r\n        from the operation (JDBC API call)\r\n   c) for operations, which detect an interrupt, but\r\n      manage to retry and continue the operation, but eventually throw\r\n      an SQLException (not 08000, some other), we do as in a):\r\n      - restore the interruped status flag just prior to return from\r\n        the operation (JDBC API call)\r\n\r\n   d) Operations that we  may currently cut short if we see an interrupt\r\n      early enough:\r\n      - executeBatch (we check between each statement)\r\n      - executeQuery (we check in the present\r\n        BasicNoPutResultSetImpl#checkCancellationFlag in the same\r\n        location that we check for timeout currently)\r\n      - while waiting for a lock, cf. LockSet.java,\r\n        ConcurrentLockSet.java\r\n\r\nFurther suggestions for good places to check and throw are welcome :)\r\n\r\n> .. synchronized (slaveRecoveryMonitor): And, I add it to my client\r\n> space and run some tests. It seems not harming anything.\r\n\r\nGood, we'll add it then.\r\n\r\n> Will we add a note somewhere about the code not cover for this\r\n> interrupt handling? \r\n\r\nFor the time being, we can make notes in this JIRA issue, but\r\neventually I suspect we will want to make a release note to describe\r\nthe improvements, and what remains to be done. You are right that\r\nthere is a lot of work, it is also hard to test, unfortunately.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-21T22:48:09.354+0000","updated":"2010-10-21T22:48:09.354+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12923955","id":"12923955","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a first rev of a patch for part a): derby-4741-a-01-api-interruptstatus\r\nRegressions ran ok modulo a hang in BootLockTest.\r\n\r\nThis patch contains the new helper class InterruptStatus and inserts calls to\r\nrestoreIntrFlagIfSeen in before API methods' return and in the exception handling (TransactionResourceImpl#handleException).\r\n\r\nExecution of EmbedStatement#executeBatch check of interrupts and throws 08000 if seen between each statement in the batch.\r\n\r\nNote: Still, the machinery of InterruptStatus isn't used to save any interrupts, that follows in a later patch, so this patch doesn't change behavior. The focus here is on the correct placement of calls to\r\nrestoreIntrFlagIfSeen in the API.  Reviews appreciated!\r\n\r\n------------------------ Patch details:\r\n\r\n- iapi.util.InterruptStatus: new helper class for keeping track of detected and\r\n  postponed interrupts. See also its Javadoc.\r\n\r\n- LanguageConnectionContext\r\n  GenericLanguageConnectionContext: \r\n\r\n  Methods to set/reset threads interrupt status flag to allow us to clear the thread's actual flag temporarily, and to reset it when we return to the user application, possibly by throwing an interrupted SQLException (SQL state 08000) if we cut something short. It also contains methods to save and retrieve the stack frame at the point an interrupt was detected. This is used when we throw the interrupt exception. \r\n\r\n- TransactionResourceImpl: resurrect the thread's interrupt status flag on SQL error (called from handleException). Use lcc if available, else thread local variable.\r\n\r\n- EmbedBlob, for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n\r\n- EmbedResultSet: for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n\r\n- EmbedStatment: for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n \r\n  In executeBatch, use throwIf between each statement in the batch: if we saw an interrupt, stop execution of batch. Note that if we do throw, restoreIntrFlagIfSeen will be called in the finally block, but it is idempotent, so no harm is done. It is necessary in case we saw an interrupt in the last statement of the batch.\r\n\r\n- EmbedDatabaseMetaData: for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n\r\n- EmbedPreparedStatement: for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n\r\n- EmbedConnection.java: for methods that call handleException inside synchronized on connection: use InterruptStatus.restoreIntrFlagIfSeen(lcc) before return\r\n\r\n  For createDatabase, use InterruptStatus.restoreIntrFlagIfSeen() which inspects the thread local variable. This should catch I/O interrupts seen during the database creation phase.\r\n\r\n  Special handling in #close to make sure we access lcc while it is still available.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-22T18:25:59.170+0000","updated":"2010-10-22T18:28:11.816+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12924451","id":"12924451","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Hi Dag:\r\n     Thank you so much for the write out. All a, b, c, d points are very clear and straight forward. Personally, I like the fact we are checking interrupt at executeBatch, executeQuery, BasicNoPutResultSetImpl(same as timeout) and waiting for lock area. Thank you for add the synchronized (slaveRecoveryMonitor) and adding all the necessary release notes information.\r\n\r\n     I apply the derby-4741-a-01-api-interruptstatus. All the suites.all passed and timing for MicroAPITest is close to clean trunk. It also passed Derby151Test with interrupt check.  Mailjdbc is still having deadlock issue. However, like you said, it might or might not cause by the new change. I notice some of the interrupt code is in slight different places in Embed*.java with local initial null value. And, some of interrupt handling code are not in this patch than the previous patch. I am assuming those code are handling machinery of InterruptStatus that save interrupts and it will come in later patch.\r\n\r\n      I view this patch as it will benefit a lot of customers and love to help out if I can. Thank you so much for working so hard on this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-10-25T06:14:26.935+0000","updated":"2010-10-25T06:14:26.935+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12924571","id":"12924571","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Lily, thanks for test driving the patch :) I really appreciate your help looking at this work. Having another set of eyes on this is good, the change are a bit cross cutting and affect much existing code, so it's good to have someone double checking the changes. Two comments:\r\n\r\n- if the mailjdbc test still deadlocks, I doubt it can be due to this patch, since it doesn't really change any behavior, it just installs the machinery for the behavior changes to come in later patches, as you presumed.\r\n\r\n- the difference is EmbedBlob with local initial null is just some cruft from an experiment I did with trying to place restoreIntrFlagIfSeen in a finally block. This didn't work out since, error handling may close the connection and with it the lcc, so the check would happen too late. (The current method is to check before return and in the error handling code itself). I'll revert that change, thanks for noticing.\r\n\r\nMy main concern with this patch currently is to verify that I have found all the ways control can return to the user app after Derby code has had control, and possibly set the interrupt status flag. A case in point is the Blob methods that don't require a connection, e.g. EmbedBlob#getBytes if the lob is materialized, we call control.read: if we see an interrupt inside the read, the flag would get stored in a thread local variable, since there is no lcc, so I'll I need to add a call to no-args version of restoreIntrFlagIfSeen() there. EmbedClob needs analysis, too.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-25T14:23:57.284+0000","updated":"2010-10-25T14:45:39.971+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12925452","id":"12925452","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading derby-4741-a-02-api-interruptstatus, an improved version of\r\na-01.\r\n\r\nI went over the usages of restoreIntrFlagIfSeen in the API and\r\nreevaluated where it is possible to supply the lcc and where it is not\r\nsafe: the intention is that if we stored the interrupt status flag in\r\na lcc we should be recover it from there before returning to the user\r\napp and, similarly, if we stored the interrupt status flag in a thread\r\nlocal variable because an lcc was not available, we should recover it\r\nfrom there. It turns out it is not always obvious to determine where to\r\nlook in the API methods.\r\n\r\nAPI methods vary with repect to whether they:\r\n\r\n    a) synchronize on the connection or not, cf. possible bugs\r\n       see DERBY-4129, even when accessing store.\r\n\r\n    b) call setupContextStack or not (this is what lets us find the\r\n       lcc down in store using ContextService.getContextOrNull)\r\n\r\n    c) clean up when errors occur by calling handleInterrupt(t), cf my\r\n       comment on DERBY-4129, e.g. EmbedClob. The cleanup can lead to\r\n       a connection closing if severity is high, setting its lcc to\r\n       null.\r\n\r\n    d) even if an API method doesn't call setupContextStack, it may be\r\n       called indirectly from a context that does set it up, cf.\r\n       part of a trigger on an insert.\r\n    \r\nWhen a connection (or database) is being closed down, we need to be\r\ncareful so that we catch the lcc while it is still available. When\r\ncleaning up errors in TransactionResourceImpl#handleException we do\r\nnot directly know if an lcc is available or not.\r\n\r\nThe upshot of all this is that unless we are sure we have a valid lcc\r\n(i.e. we see statically that setupContextStack has been called), we\r\ninstead call restoreIntrFlagIfSeen *without* an lcc argument. The\r\nzero-arg variant calls getContextOrNull to see if a lcc is available\r\nfor the thread, falling back to the thread local if not. So, in\r\neffect, the lcc variant is an optimization, but it does cover the\r\nmethods for which performance could be an issue, I think.\r\n\r\nThe new patch covers LOB ands CLOB as well, and is ready for review.\r\n\r\nRegressions ran ok.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-27T17:00:09.274+0000","updated":"2010-10-27T17:00:09.274+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12925674","id":"12925674","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading version a-03, minor and clerical changes only relative to a-02.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-10-28T03:34:49.412+0000","updated":"2010-10-28T03:34:49.412+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12926841","id":"12926841","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"When running MicroAPITest against a-03 patch, it is 45-48 seconds vs clean trunk 27-28 second. I noticed it is not using lcc but the earlier slower approach. Are you seeing the same slow windows performance again a-03 patch. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-01T05:40:38.123+0000","updated":"2010-11-01T05:40:38.123+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12926998","id":"12926998","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for test driving it, Lily. The new patch does use the lcc if available, it just falls back on the TL approach if not, so the performance drop was unexpected to me. I'll have a look, thanks for noticing. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-01T14:54:54.294+0000","updated":"2010-11-01T14:54:54.294+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927266","id":"12927266","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Lily, did you with a sane or insane build? I see a large difference also (Solaris though) with sane (due to an expensive assert), but with insane is it very small (~<1%).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-02T03:02:53.868+0000","updated":"2010-11-02T03:02:53.868+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927284","id":"12927284","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Hi Dag: That is interesting. I was using sane build. Shouldn't sane build have similar performance as insane or they are usually having difference?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-02T03:18:55.964+0000","updated":"2010-11-02T03:18:55.964+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927345","id":"12927345","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The sane jars are not intended for production use, so I wouldn't worry too much about a performance loss that we only see with them. Unless it's getting so slow that it takes an unreasonably long time to run the regression tests with them, that is.\r\n\r\nI'm guessing that the extra performance loss seen with sane jars is caused by the assert in InterruptStatus.restoreIntrFlagIfSeen(LanguageConnectionContext), which makes us look up the lcc in the context stack. Twice, actually. Perhaps it would help a little to store the result from getContextOrNull() in a local variable so that we get away with a single call. Or perhaps it's the unconditional string concatenation for the message text that's costly. In any case, that assert is the only place I can see that the patch would have a different performance impact on sane and insane.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-11-02T09:53:03.858+0000","updated":"2010-11-02T09:53:03.858+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927441","id":"12927441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Hi Dag,\r\n\r\nI went through the a-03-api patch, and I couldn't spot anything that\r\nyou've missed.\r\n\r\nThere were quite a number of places to check the interrupt\r\nstatus. More than what I had expected. But I cannot think of a better\r\nplace to short-circuit it, so... Except perhaps in EmbedConnection. It\r\nlooks to me like most of the calls to restoreIntrFlagIfSeen() happen\r\nwithin try blocks right after calls to setupContextStack(). Did you\r\nconsider it as an option to move the restoreIntrFlagIfSeen() calls\r\ninto restoreContextStack(), which is already called in the finally\r\nclauses at those places? That may make the code more contained, but\r\nperhaps the LCC isn't easily available there?\r\n\r\nApart from that, I only have some minor comments to the code in the\r\nInterruptStatus class. Very minor, so feel free to ignore.\r\n\r\n- throwIf: Unnecessary return statement.\r\n\r\n- stackTrace: The initialValue() override does the same as the default\r\n  implementation. So by just using a vanilla ThreadLocal object, we'd\r\n  get the exact same behaviour, and one less class in derby.jar +\r\n  permgen. (If the footprint issue is important, the same might be\r\n  said for receivedInterruptDuringIO if we change its usage from a\r\n  TRUE/FALSE check to a null/non-null check. Actually, the presence of\r\n  a stack trace is probably a good enough indicator in itself.)\r\n\r\n- Instead of creating an exception, fetching its stack trace and\r\n  storing the trace, perhaps it would be easier just to store the\r\n  exception? Then throwIf() could throw the stored exception instead\r\n  of creating a new one and modifying its stack trace.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-11-02T14:45:23.692+0000","updated":"2010-11-02T14:45:23.692+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927445","id":"12927445","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Knut is right, that was the expensive assert I mentioned before (in sane builds). Since this is a micro benchmark that mainly measures the CPU neeeded to execute ResultSet.next when data is cached in memory, the effect of the assert shows up heavily. Running a profiling I saw the string concatenation there being dominant. No, I did not notice the regression test become slower, but if the turns out to be an issue, it is easy enough to comment out the asset. For now, I'll change the assert code to just call  getContextOrNull once.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-02T14:52:13.675+0000","updated":"2010-11-02T14:52:13.675+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927474","id":"12927474","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for looking at the patch, Knut!\r\n\r\n> Except perhaps in EmbedConnection. It looks to me like most of the calls to restoreIntrFlagIfSeen() happen within try blocks right after calls to setupContextStack(). Did you consider it as an option to move the restoreIntrFlagIfSeen() calls into restoreContextStack(), which is already called in the finally clauses at those places?\r\n\r\nI did try to put the call into the finally,although not into restoreContextStack. I found that didn't always work, since during error handling *before* we get to the finally block, calls to handleException(throwable) will depending on severity, potentially take down the connection (and database), causing us to lose the lcc.  Hence I had to move it back to just before normal return, and use the no-args variant of restoreIntrFlagIfSeen handling inside the error handling code (cf changes in TransactionResourceImpl#handleException).\r\n\r\n> - throwIf: Unnecessary return statement.\r\n\r\nAgreed, will fix that :)\r\n\r\n> - stackTrace: The initialValue() override does the same as the default implementation. So by just using a vanilla ThreadLocal object, we'd get the exact same behaviour, and one less class in derby.jar + permgen.\r\n\r\nAgreed.\r\n\r\n>  (If the footprint issue is important, the same might be said for receivedInterruptDuringIO if we change its usage from a TRUE/FALSE check to a null/non-null check. Actually, the presence of a stack trace is probably a good enough indicator in itself.)\r\n\r\nYes and yes. Originally I used the stacktrace just for debugging with sane, I think.\r\n\r\n> - Instead of creating an exception, fetching its stack trace and storing the trace, perhaps it would be easier just to store the exception? Then throwIf() could throw the stored exception instead of creating a new one and modifying its stack trace.\r\n\r\nThat's good simplication, yes.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-02T15:56:11.151+0000","updated":"2010-11-02T15:56:11.151+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927588","id":"12927588","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a revised patch, derby-4741-a-04-api-interruptstatus, which takes care of the comments. hopefully. Rerunning regressions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-02T20:54:32.244+0000","updated":"2010-11-02T20:54:32.244+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927660","id":"12927660","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Regressions ran ok. Will commit this version soon, if no misgivings emerge.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-02T22:57:59.430+0000","updated":"2010-11-02T22:57:59.430+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927797","id":"12927797","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for the changes and the explanations, Dag. I have no further comments to the a-04-api patch.\r\n\r\nOne observation: After looking at the changes in EmbedBlob.getBytes(long,int) and EmbedBlob.position(), I understand why some people advocate that all methods should have a single exit point. ;)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-11-03T09:10:21.326+0000","updated":"2010-11-03T09:10:21.326+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927866","id":"12927866","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"I test drive a-04-api patch as well. The sane MicroAPITest result is very good. I got result that is 5s - 7s. The insane result is similar to a-03-api which is around 45s--52s vs 27s-28s on clean trunk. However, like we discussed previous for MicroAPITest benchmark is only focus on CPU result and the slowdown is mostly on ASSERT. With so many things to take care of with 10.7 release. +1 to commit.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-03T14:41:23.877+0000","updated":"2010-11-03T14:41:23.877+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12927970","id":"12927970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed derby-4741-a-04-api-interruptstatus as svn 1030630.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-03T19:42:21.661+0000","updated":"2010-11-03T19:42:21.661+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12929885","id":"12929885","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading patch derby-4741-b-01-nio. This patch contains changes to\r\nFileContainer/RAFContainer/RAFContainer4 to allow page IO to recover\r\nfrom interrupts seen in RAFContainer4 (the NIO[1] version\r\nspecialization of RAFContainer). Additionally, some waits are changed\r\nto retry after interrupts (yes, there are more of those in other\r\nclasses, that's for a later patch, but since I was in there anyway..)\r\n\r\nThe main thrust of the patch is in RAFContainer4. Upon seeing\r\nexceptions from IO (readPage/writePage), a thread will determine if it\r\nis\r\n        a) the thread that caused the channel to beclome closed, or\r\n        b) it suffered an exceptions because another thread caused the\r\n           channel to beclome closed.\r\n\r\nIf a), the thread will recover by reopening the container before\r\nreattempting IO, cf. the method recoverContainerAfterInterrupt. If b)\r\nthe thread will yield, wait and retry until the container has been\r\nrecovered, or a minute has passed. After a minute, we give up and\r\nthrow FILE_IO_INTERRUPTED. I chose a minute somewhat arbitrarily, it\r\nis hopefully sufficient (?).\r\n\r\nThe recovery thread and other waiting threads normally synchronize the\r\noperations via variables protected by the channelCleanupMonitor\r\nmonitor (but see use of volatile and associated comments).\r\n\r\nThe retry logic happens in one of three places, in increasing\r\ncloseness to RAFContainer4:\r\n\r\n    a) if the thread owns the monitor on allocCache and it is not the\r\n       one that is doing recovery, it will back up to FileContainer\r\n       before retrying the IO, since it has to release the lock on\r\n       allocCache, because that monitor is needed by the thread doing\r\n       recovery. Cf. changes in FileContainer.  If the thread holds\r\n       allocCache, it goes into stealth mode in readPage/WritePage:\r\n       this means that the recovery thread doesn't see it. We can't\r\n       let a stealth mode thread grab channelCleanupMonitor, as this\r\n       could cause a dead-lock. In c) the recovery thread keeps track\r\n       of other threads, waking them up when recovery is done.\r\n\r\n    b) if the thread owns the monitor on \"this\", again the thread goes\r\n       into stealth mode. If it is not the one to clean up, it will\r\n       back up to RAFContainer#clean's loop, since it has to release\r\n       the lock on \"this\", because that monitor is also needed by the\r\n       thread doing recovery. This only ever happens for readPage (not\r\n       writePage), cf. call to getEmbryonicPage in WriteRAFHeader\r\n       called from RAFContainer#clean.\r\n\r\n    c) in other cases, the thread will call awaitRestoreChannel before\r\n       reattempting IO.\r\n\r\nThe logic of RAFContainer4#getEmbryonicPage has been folded into\r\nreadPage in order for it to be covered by the interrupt treatement.\r\n\r\nThe test Derby151Test has been removed, since it is no longer\r\nrelevant. A new test, InterruptResilienceTest, fails without the\r\npatch, but should work with the patch in place. It interrupts the\r\nsingle app thread before doing IO, which will trip NIO and cause\r\nrecovery. Even though we have only one app thread, the test still\r\nrevealed concurrency issues during the development of this patch,\r\nsince RawStoreThread will also do IO on the container.\r\n\r\nA note on the implementation: Sun Java NIO code (including the\r\nlatest 1.6) has a bug which are worked around by the patch in two\r\nplaces, cf. code comments:\r\n\r\n       - readFull/writeFull: if a thread has been interrupted,\r\n         occasionally it closes the channel but does not throw,\r\n         cf. http://bugs.sun.com/view_bug.do?bug_id=6979009\r\n       - readPage/WritePage: sometimes the interrupted thread throws\r\n         the wrong exception: AsynchronousCloseException instead of\r\n         the more specialized ClosedByInterruptException.\r\n\r\n[1] Note: DirRandomAccessFile4 also contain use of NIO, I'll address\r\nthat in a later patch.\r\n\r\nI will also be adding more tests. A problem for making tests for\r\ninterrupts is to get coverage without making tests unstable, so I'll\r\nwait until I have more holes plugged.\r\n\r\nRegressions worked earlier tonight in a slightly different version, rerunning now.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-09T01:56:13.208+0000","updated":"2010-11-11T15:42:22.339+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12930687","id":"12930687","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Hi Dag: Thank you so much for the continue effort to fix this issue. It will benefit a lot of customers and this is truly a hard bug/feature to fix. I am still trying to process the effect of FileContainer/RAFContainer/RAFContainer4. I don't quite understand it yet. The performance result for MicroAPITest is 5s-7s for insane build and 45s-47s for sane build. That's great. Regression can have failure on my windows environment: testPartialRowRTStats(Java exception: 'PermGen space: java.lang.OutOfMemoryError) or\r\n testReplicationt_Local_1_Indexing(java.sql.SQLException: DERBY SQL\r\n error: SQLCODE: -1, SQLSTATE: XJ041, SQLERRMC: Failed to create database 'c:\\de\r\nrby5\\trunk\\testall\\db_master\\wombat', see the next exception for details.::SQLST\r\nATE: XBM0JDirectory c:\\derby5\\trunk\\testall\\db_master\\C:\\derby5\\trunk\\testall\\db\r\n_master\\wombat already exists. I run Suites.all three times, they all have similar failures. I can not reproduce if I run the test individually. Will this patch affect memory consumption? Will the timing change on cf cause java.sql.SQLException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ041, SQLERRMC? I am not 100% sure. Or, they were just existing issues. For more multi thread purpose, I add to InterrupResilienceTest suite. If it is in the right direction, I can keep explore to make more other positive interrupt cases. Thanks Krisitan for the AbstractMTThread class.  I am so happy to work on this. Yeah!!!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-10T18:10:13.677+0000","updated":"2010-11-10T18:10:13.677+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12930704","id":"12930704","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks, Lily, for looking at the latest patch. I agree the code is a bit tricky, so there could be bugs.  Feel free to ask detailed questions, I'll try to answer.\r\n\r\n I did not see any issue with testPartialRowRTStats when I ran the regressions, nor would I expect this patch for increase perm gen space since it doesn't add new classes. But we have seen that perm gen space can be an issue when running regressions. I think I recently upped my pergen space setting for suitesAll to 192m. I have also seen failures in the replication tests, there are some instabilities left, but I don't think they are due to this patch. \r\n\r\nYou are right that the current test, InterruptResilienceTest, is pretty thin right now, but it does exercise the RAF recovery machinery with two concurrent threads (user thread and the raw store daemon).  \r\n\r\nI intend to make more tests; the trick is to make sure the tests actually exercise the code paths we want: just shooting interrupts at threads can land anywhere during execution, and Derby doesn't stand up to it in all places yet. I plan to use the SanityManager + a debug flag to simulate interrupt at selected places in the code. If  you have suggestions for good tests, please let's have them :) ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-10T18:44:46.323+0000","updated":"2010-11-10T18:44:46.323+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12930913","id":"12930913","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"For testing idea, SanityManager + a debug flag sound good. I am trying to picture how it can cover all the code we try to hit. I am assuming we want to hit code like RAFContainer4.readpage. The simple insert case to Blob and Clob data type can be hitting it like the InterruptResilienceTest does. Will BlobSetMethodTest or LobStreamTest do the trick? A far stretch will be utilizing CorruptRandomAccessFile. I am thinking out loud here. :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-11T03:52:44.358+0000","updated":"2010-11-11T03:56:43.208+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931129","id":"12931129","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I had a look at the b-01-nio patch, and it looked correct to me. The\r\nstealth mode part wasn't entirely obvious, but the comments were\r\nhelpful and the code appears to be doing the right thing.\r\n\r\nAs far as I can see, the code will behave the same way as before if no\r\ninterrupt is detected. So if there are problems with the code, they\r\nwill hopefully be limited to the case where the thread is\r\ninterrupted. There's an additional container-wide synchronization on\r\nevery page read/write, though, which may possibly have a negative\r\neffect on performance in multi-threaded environments. If that turns\r\nout to be an issue, would it be possible to change the code to only\r\ncheck restoreChannelInProgress after an exception has been thrown,\r\nsimilar to what we currently do in stealth mode?\r\n\r\nSome minor issues found in the patch:\r\n\r\n1) Thread.holdsLock() is a static method, but all calls to it are done\r\non Thread.currentThread().\r\n\r\n2) I think the checks for SQLState.INTERRUPT_DETECTED should use\r\ngetMessageId() instead of getSQLState(), since the SQLState interface,\r\ndespite its name, contains message ids and not SQLStates (although the\r\nmessage id and the SQLState happen to be the same for this error).\r\n\r\nAnd since INTERRUPT_DETECTED is only intended to be used internally,\r\nwould it make sense, instead of giving INTERRUPT_DETECTED a proper\r\nSQLState and also an entry in messages.xml (which will be picked up\r\nand translated unnecessarily later), to create a subclass of\r\nStandardException for this error? Something like what's done with\r\nNoSpaceOnPage, I mean. That could also make the catch blocks used to\r\nhandle this condition a little bit tidier.\r\n\r\n3) Javadoc for RAFContainer4.readPage() should explain how the offset\r\nparameter is supposed to be used (-1 for normal reads, actual offset\r\nfor embryonic pages)\r\n\r\n4) The variable \"whence\" in awaitRestoreChannel() does not seem to be\r\nused. Nor is its \"pageNumber\" parameter, I think.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-11-11T18:50:46.608+0000","updated":"2010-11-11T18:50:46.608+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931137","id":"12931137","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"And a note to others who consider reviewing the patch: I found that it was easier to see exactly what was being changed by running svn diff with the extra option \"--extensions=-bw\" to disregard whitespace changes in the parts of the code where an extra level of nesting was added.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-11-11T19:02:17.380+0000","updated":"2010-11-11T19:02:17.380+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931263","id":"12931263","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for the review, Knut. Uploading a new version of the patch,\r\nderby-4741-b-02-nio, details below, rerunning regressions.\r\n\r\n- In RAFContainer4, folded the cases for pageNumber == -1 (call from\r\n  getEmbryonicPage) with the case Thread.holdsLock(this). This allows\r\n  awaitRestoreChannel to throw the retry exception for all cases. I\r\n  did both static and dynamic analysis to establish invariant, and\r\n  added a sane check for it.\r\n\r\n> As far as I can see, the code will behave the same way as before if no\r\n> interrupt is detected. So if there are problems with the code, they\r\n> will hopefully be limited to the case where the thread is\r\n> interrupted. There's an additional container-wide synchronization on\r\n> every page read/write, though, which may possibly have a negative\r\n> effect on performance in multi-threaded environments. If that turns\r\n> out to be an issue, would it be possible to change the code to only\r\n> check restoreChannelInProgress after an exception has been thrown,\r\n> similar to what we currently do in stealth mode?\r\n\r\nYes, I believe we could do that, since it should do no harm to attempt\r\nthe IO even when recovery is in progress, because all calls to\r\ngetChannel are synchronized on \"this\" already, so either the thread\r\nsees the old channel (closed), or the new reopened channel. I didn't\r\nmake this change yet, though, since the monitor hold should\r\nshort-lived (one boolean check and an integer increment) compared to\r\nthe IO.\r\n\r\n- Thread.holdsLock(): done\r\n- Created a new subclass of StandardException:\r\n  InterruptDetectedException, good suggestion, indeed cleaner!\r\n- Javadoc for RAFContainer4.readPage: done\r\n- The variable \"whence\": removed\r\n- Removed some commented out debugging cruft\r\n- Tuned the number of iterations in InterruptDetectedException to make\r\n  sure we see a a concurrent thread (RawStoreDaemon) having to wait\r\n  for cleanup before proceeding, at least on my box. Cf. the debug\r\n  trace for derby.debug.true=RAF4Recovery, which I also added.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-11T23:22:00.260+0000","updated":"2010-11-11T23:22:00.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931526","id":"12931526","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Found that Derby uses interrupt to stop threads at shutdown[1]. The present logic in RAFContainer4 doesn't\r\ntake this into account, with the consequence that an application thread got stuck waiting for\r\na container recovery that never took place. We get an exception during execution of \r\n                       closeContainer();\r\n                        openContainer(currentIdentity);\r\nIf this exception is not due to an interrupt, we throw FILE_IO_INTERRUPTED. Unfortunately, in this case,\r\nthe present patch neglects to release any threads waiting for recovery to finish, so they are stuck waiting for \"restoreChannelInProgress\".\r\n\r\nSaw this during suitesAll.\r\n\r\n[1] BaseMonitor#shutdown -> notifyAllActiveThreads and in DatabaseContextImpl#cleanupOnError->notifyAllActiveThreads\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-12T21:07:18.244+0000","updated":"2010-11-12T21:22:12.700+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931535","id":"12931535","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"This might sound wired. I am so happy you got this. I woke up to a hanging test for Suites.All and now I know why. Thank you so much for posting this and looking into this. :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-12T21:39:52.931+0000","updated":"2010-11-12T21:39:52.931+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12931984","id":"12931984","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Add the following code in ClosedChannelException block in RAFContainer4.java->readPage and did not see any hang for Suites.All in Windows 7 enviornment:\r\n               if (pageNumber != -1L) {\r\n\r\n                    // Recovery is in progress, wait for another interrupted thread\r\n                    // to clean up.\r\n                    awaitRestoreChannel(e, stealthMode);\r\n                } else {\r\n                    // Called from this.getEmbryonicPage.\r\n\r\n                    // Retry handled in RAFContainer#clean. This is\r\n                    // necessary since recovery needs the monitor on \"this\"\r\n                    // held by clean when it calls getEmbryonicPage via\r\n                    // writeRAFHeader, so never call awaitRestoreChannel\r\n                    // here, since then might be stuck on\r\n                    // channelCleanupMonitor held by another thread\r\n                    // cleaning up, while still hold onto \"this\".\r\n\r\n                    if (stealthMode) {\r\n                        // don't touch threadsInPageIO\r\n                    } else {\r\n                        synchronized (channelCleanupMonitor) {\r\n                            threadsInPageIO--;\r\n                        }\r\n                    }\r\n                }\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-15T05:21:19.771+0000","updated":"2010-11-15T05:21:19.771+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12932148","id":"12932148","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading patch b-03 which adds logic to RAFContainer4 to handle\r\nproperly the fact that a container can't be reopened:\r\n\r\n    // In case the recovering thread can't successfully recover the container,\r\n    // it will throw, so other waiting threads need to give up as well.  This\r\n    // can happen at shutdown time when interrupts are used to stop threads.\r\n    private boolean giveUpIO = false;\r\n    private final Object giveUpIOm = new Object(); // its monitor\r\n\r\nWe make sure to notify any waiting threads when the recovering thread gives up and throws FILE_IO_INTERRUPTED. The waiting threads will next see giveUpIO == true, and give up as well.\r\n\r\nThis should make sure that threads not doing the recovery, will detect that recovery will not happen, and throw as well. SuitesAll finished successfully.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-15T19:01:14.648+0000","updated":"2010-11-15T19:08:21.377+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12932150","id":"12932150","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Lily, it seems you reintroduced some of the logic I folded into awaitRestoreChannel, but without throwing to get retry for the case pageNumber == 1 (throw INTERRUPT_DETECTED).  I don't think this is correct, not sure why this made a difference. Can you try the latest patch on Windows 7? :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-15T19:06:59.066+0000","updated":"2010-11-15T19:06:59.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12933589","id":"12933589","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"I have now run regressions with patch b-03 on Windows Vista SP2 without errors. Since the 10.7 branch has been cut, I intend to commit this patch soon, and move on the the next piece of the puzzle.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-18T22:47:06.981+0000","updated":"2010-11-18T22:47:06.981+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12933598","id":"12933598","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"For reviewers of b-03, it may be interesting note that running InterruptResilienceTest with the flag -Dderby.debug.true=RAF4Recovery\r\nwill likely give one or more instances of this trace in derby.log:\r\n\r\nDEBUG RAF4Recovery OUTPUT: derby.rawStoreDaemon thread needs to wait for container recovery: 0\r\n\r\nshowing that this part of the multi threading synchronization is being exercised: The user that was interrupted is doing recovery on the channel so the\r\nthread printing this (i.e. RawStoreDaemon) has to wait for recovery to complete to be able to move on.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-18T22:58:44.188+0000","updated":"2010-11-18T22:58:44.188+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12933924","id":"12933924","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Hi Dag:\r\n     Thank you so much for all the detail message. The code looks good to me. I don't see potential issue. When I run insane build, I got 5.8 second for MicroAPITest and 51.x second for sane build vs 5.07s(insane) and 47.xs(sane) build on clean trunk. It could be just Windows platform issue.  \r\n      +1 to check in to trunk.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2010-11-19T19:18:15.092+0000","updated":"2010-11-19T19:18:15.092+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12934082","id":"12934082","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"HI Lily! Thanks! I'll commit it soon after I have verified a debug trace for observing the effects of the giveUpIO logic.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-20T02:26:30.801+0000","updated":"2010-11-20T02:27:06.925+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12935169","id":"12935169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading b-04, which cleans up and adds some more debug tracing to RAFContainer4. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-24T01:56:34.494+0000","updated":"2010-11-24T01:56:34.494+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12935172","id":"12935172","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed b-04 as svn 1038440. Note: I changed the debug trace flag to \"RAF4\" to accommodate an exisiting trace not related to recovery.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-24T02:03:25.531+0000","updated":"2010-11-24T02:03:25.531+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12964612","id":"12964612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"This patch (derby-4741-c-01-nio) closes two corner cases I have\r\nobserved when stress testing the RAFContainer4 recovery mechanism. It\r\ndoes some other small cleanups. Regressions ran OK.\r\n\r\nRAFContainer:\r\n\r\nIf we receive an interrupt when the container is first being opened\r\n(i.e. during RAFContainer.run (OPEN_CONTAINER_ACTION) ->\r\ngetEmbryonicPage), recovery will fail because currentIdentity needed\r\nin RAFContainer4#recoverContainerAfterInterrupt hasn't yet been\r\nset. \r\n\r\nRAFContainer4:\r\n\r\nIf a stealthMode read is interrupted and is recovering the container,\r\nit erroneously increments threadsInPageIO just before exiting to retry\r\nIO. This leads to a break in the invariant that threadsInPageIO be 0\r\nwhen all threads are done, causing issue (hang) down the line.  \r\n\r\nIf, when we are reopening the container, the read being done during\r\nthat operation (getEmbryonicPage), that stealth mode read will also\r\nlead to a (recursive) recovery. We have to catch this case by adding a\r\n\"catch (InterruptDetectedException e)\" just after the call to\r\nopenContainer, not by testing the interrupt flag as presently done,\r\nsince the recovery inside the recursive call to\r\ngetEmbryonicPage/readPage will already have cleared the flag and done\r\nrecovery.\r\n\r\nWhen giving up reopening the container for some reason, we also forgot\r\nto decrement threadsInPageIO.\r\n\r\nTo guard against other hangs, I will make the while-true loops max out\r\nin all cases. But before I commit that change, it would be nice to see\r\nif this patch has any impact on DERBY-4920 (I suspect not). The reason\r\nI'd like to hold off with that is that since DERBY-4920 occurs during\r\nshutdown, that may mask the fact that recovery failed, cf. my comment\r\nhttps://issues.apache.org/jira/browse/DERBY-4920?focusedCommentId=12936016&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12936016\r\nSo, I'd rather wait with that till I get DERBY-4920  out of the way.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-29T00:46:16.092+0000","updated":"2010-11-29T00:50:31.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12964723","id":"12964723","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed derby-4741-c-01-nio as svn 1040086. Please let me know if you still see the hang of DERBY-4920 and, if possible, during execution which test it happens.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-11-29T12:32:23.288+0000","updated":"2010-11-29T12:32:23.288+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12968724","id":"12968724","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"Happened to look at parts of the new code, and have a few questions/comments on code in RAF4Container:\r\n o in writeFull the variables beforeOpen and beforeInterrupt are unused. Can they be removed?\r\n o the same issue in readFull.\r\n o would it make sense to make the monitor object channelCleanupMonitor final?\r\n o redundant call to Thread.currentThread when invoking holdsLock.\r\n o missing JavaDoc for recoverContainerAfterInterrupt\r\n\r\nA more theoretical question at the end.\r\nIs there a reason to explicitly define instance variables with the default value for the data type?\r\nI.e., int i = 0, boolean b = false.\r\nJust asking, as I find it annoying to step through these in the debugger :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2010-12-07T13:31:25.052+0000","updated":"2010-12-07T13:31:25.052+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969019","id":"12969019","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for looking at the new code, Kristian, I'll make a new patch to cater for your comments.\r\n\r\n> o in writeFull the variables beforeOpen and beforeInterrupt are unused. Can they be removed?\r\n>  o the same issue in readFull.\r\n\r\nAbsolutely, debugging cruft. Thanks for spotting those.\r\n\r\n>  o would it make sense to make the monitor object channelCleanupMonitor final?\r\n\r\nAbsolutely.\r\n\r\n>  o redundant call to Thread.currentThread when invoking holdsLock.\r\n\r\nThanks, thought I had cleaned out those, but there were two left!\r\n\r\n>  o missing JavaDoc for recoverContainerAfterInterrupt\r\n\r\nAdded Javadoc for recoverContainerAfterInterrupt and awaitRestoreChannel.\r\n\r\n> A more theoretical question at the end.  Is there a reason to\r\n> explicitly define instance variables with the default value for the\r\n> data type?  I.e., int i = 0, boolean b = false.\r\n\r\nNo. I tend to often use explicit initialization due to my paranoid\r\nstreak I guess. I see the data flow analysis barks if you use a local\r\nvariable uninitialized, although not for a class member, not clear to\r\nme why Java differentiates here.\r\n\r\npublic class Foo {\r\n    public boolean bb;\r\n\r\n    public static void main(String[] args) {\r\n        boolean b;\r\n\r\n        if (args.length > 0 && args[0].equals(\"foo\")) {\r\n            b = true;\r\n        }\r\n\r\n        if (b) { // compiler barks\r\n            System.err.println(\"b is true\"); \r\n        }\r\n\r\n        Foo f = new Foo();\r\n        if (f.bb) { // OK\r\n            System.err.println(\"bb is true\");\r\n        }\r\n\r\n    }\r\n}\r\n\r\nI guess I have tended to treat them the same. I'll try to improve ;-)\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-12-07T21:40:14.689+0000","updated":"2010-12-07T21:41:21.090+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969041","id":"12969041","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading derby-4741-kristians-01, running regressions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-12-07T22:15:49.208+0000","updated":"2010-12-07T22:15:49.208+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969252","id":"12969252","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"Thanks, Dag.\r\n\r\n> I guess I have tended to treat them the same. I'll try to improve ;-)\r\n\r\nNot sure there is something to improve here, I guess this is a question about personal preference.\r\nExplicit initialization of instance variables used to result in two assignments (first the default value for the type, and then the explicit value), which is kind of unnecessary if both assignments use the same value. I don't know if this is still the case.\r\n\r\nAnd I have become quite accustomed to use the \"Step over\" or \"Run to cursor\" in the debugger :)\r\nFinally, if the initial value isn't the default for the data type, then you have to assign the correct value anyway - either in the constructor or as an instance variable initializer (i.e. private int i = 3).\r\n\r\n\r\nThanks for working on the interrupt issue! I think it is of great value for Derby to be able to handle interrupts better. This is especially important when/if other software products used together with Derby use Thread.interrupt() internally.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2010-12-08T09:16:52.753+0000","updated":"2010-12-08T09:16:52.753+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969530","id":"12969530","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"While I am looking for the Heisenbug in DERBY-4920, I am considering the next increment of this patch from the\r\nprototype patch regarding the issues seen when interrupt hits the logging machinery (mostly not NIO, except for the case of DirRandomAccessFile#sync).\r\nNow, it turns out that the vulnerability here only applies for Solaris. Other platforms' \"non-NIO\" IO is not interruptible, so for those other platforms there is no need to do anything special. For Solaris, the behavior can be tweaked to be impervious to interrupts as well using the special switch: -XX:-UseVMInterruptibleIO on JVMs >= 1.5.0_12. This behavior will be default in 1.7 also on Solaris[1].\r\nSo the question becomes, would it be sufficient to advise users to run with this switch set, or should we make Derby tolerate\r\nthe interrupts on Solaris here also? \r\n\r\nI do think we should be able to run correctly with the default settings on all relevant platforms, but I would appricate your opinions.\r\n\r\n[1] http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4385444","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-12-08T22:24:45.880+0000","updated":"2010-12-08T22:25:47.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969576","id":"12969576","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed derby-4741-kristians-01 as svn 1043802 (suitesAll ran ok).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2010-12-09T00:36:22.325+0000","updated":"2010-12-09T00:36:22.325+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12969711","id":"12969711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"> So the question becomes, would it be sufficient to advise users to run with this switch set, or should we make Derby tolerate\r\n> the interrupts on Solaris here also?\r\n\r\nHow much code do you think will be needed to handle that case? Handling interrupts sent to the engine is somewhat of an edge case in itself. Since this particular problem only affects one platform, and that platform will start behaving the same way as the other platforms in the not so distant future, it sounds acceptable to just advise those who come across the problem to set the flag. Of course it would be nice if Derby was well-behaved by default on all platforms, but given the easy workaround and the expectation that the problem will soon go away by itself, I'd say that it's probably not worth putting a lot of work into and/or adding more complexity to already complex code.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2010-12-09T12:16:04.927+0000","updated":"2010-12-09T12:16:04.927+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12977533","id":"12977533","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for your thoughts on this, Knut.\r\n\r\nHere is another issue: The NIO Channel#force call is used to implement sync when we flush the Derby log, cf. this call: \r\n\r\nLogToFile#flush -> LogAccessFile#syncLogAccessFile -> StorageRandomAccessFile#sync -> getChannel().force(false)\r\n\r\nThe \"false\" here allows the skipping of flushing metadata, which makes this faster (at least on Solaris) than the non-NIO\r\nimplementation of StorageRandomAccessFile#sync, which uses getFD().sync().\r\n\r\nUnfortunately, an interrupt will make the getChannel().force call throw ClosedChannelException, and I can't see an easy way\r\nto recover from this, except assuming the log is corrupt and shutting down the database instance, so we can recover on reboot.\r\n\r\nIf we switch back to using \"getFD().sync()\", we would lose the performance optimization, but be resilient to interrupts.\r\n\r\nSo, unless somebody can see a way to finesse this problem, should be offer a knob to allow a user to trade this performance optimization for interrupt resilience?\r\n\r\nAside: we also use StorageRandomAccessFile#sync in many other places, but in those situations I find I am able to recover by closing the RAF, reopening and writing over again, since the data to be written is known, e.g. in LogToFile#initLogFile. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-04T23:38:53.069+0000","updated":"2011-01-04T23:38:53.069+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12977862","id":"12977862","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"I find that explicit file sync (i.e. not \"write sync\") is only used if:\r\n\r\na) NIO is not supported  (cf. WritableStorageFactory#supportsWriteSync), in which case we never use FileChannel#force\r\nb) derby.storage.fileSyncTransactionLog is set to true\r\nc) we are running on platforms/VMs that don't support opening a file with mask \"rws\" (write sync with metadata) and \"rwd\" (write sync without metadata), cf. check in LogToFile#openLogFileInWriteMode which calls checkJvmSyncError to determine this. The platforms mentioned are (e.g. early versions of 1.4.2 and 1.5 on Mac OS and FreeBSD).\r\n\r\nIf this holds, it seems to be we can just skip using the NIO version of RAF#sync for those platforms. Other platforms do not use the explicit file sync for the log, cf. the test in LogToFile#flush (snip):\r\n\r\n    if (isWriteSynced)\r\n    {\r\n        //LogAccessFile.flushDirtyBuffers() will allow only one write\r\n        //sync at a time, flush requests will get queued \r\n        logOut.flushDirtyBuffers();\r\n    }\r\n    else\r\n    {\r\n        if (!logNotSynced)\r\n        logOut.syncLogAccessFile();\r\n    }\r\n\r\nOn most platforms, isWriteSynced is true (cf above), meaning syncLogAccessFile is not used, so reverting to a interrupt safe, less performant non-NIO sync in syncLogAccessFile seems acceptable to me. Opinions?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-05T17:25:40.090+0000","updated":"2011-01-05T17:26:47.832+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12977944","id":"12977944","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I agree with the tradeoff you suggest concerning syncing the log file.  It seems to make the code easier and will not really affect most users running on modern platforms while still allowing those few to still work correctly on back releases.  This especially seems to make sense as I don't see us backporting this change so should only affect 10.8.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2011-01-05T20:03:07.641+0000","updated":"2011-01-05T20:03:07.641+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12980163","id":"12980163","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks, Mike. Logged and fixed DERBY-4963 to revert NIO version of RAF#sync.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-11T16:21:49.444+0000","updated":"2011-01-11T16:21:49.444+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12980189","id":"12980189","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed a followup patch as svn 1057733. Quoting the commit entry:\r\n\r\n> Followup to patch derby-4741-b-04-nio committed as svn 1038440:\r\n> changed the string internal exception string \"nospc.U\" to \"intrp.U\".\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-11T17:15:08.350+0000","updated":"2011-01-11T17:15:08.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12980831","id":"12980831","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a patch derby-4741-sleeps-waits-1 which adds handling of some cases of interrupted monitor wait calls and Thread.sleep calls which I found needed changes to make my preliminary tests work. Running regressions.\r\n\r\nThere are remaining places (i.e. usages for wait & sleep) in the code base which need to be inspected for modification.  I will be making one or more follow-up patches to handle those. With the current patch(*) this work is approaching a state where Derby embedded(**) is sufficiently robust against interrupts that I will move to buillding systematic as well as randomized tests, and plug remaining holes as we find them.\r\n\r\n(*) After commits of DERBY-4967 and DERBY-4968\r\n(**) the server code needs consideration too, as well as the client code and replication.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-12T17:56:23.143+0000","updated":"2011-01-14T21:30:37.118+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12980984","id":"12980984","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"suites.All passed.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-12T22:50:08.532+0000","updated":"2011-01-12T22:50:08.532+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12981932","id":"12981932","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Some details on where patch derby-4741-sleeps-waits-1 changes things.\r\n\r\nThe following locations where we earlier threw 08000 (CONN_INTERRUPT),\r\nwe now just note that an interrupt occurred:\r\n\r\n* GenericStatement#prepare:\r\n  - while waiting for another thread to complete the compilation of\r\n    the statement\r\n\r\n* LogToFile\r\n  #checkpointWithTran:\r\n  - while waiting for another thread to complete a checkpoint\r\n\r\n  #switchLogFile: \r\n  - while waiting for a semaphore needed to make sure the log switch\r\n    can complete \"without having to give up the semaphore to a backup\r\n    or another flusher\".\r\n\r\n  #flush:\r\n  - while waiting for the database to stop being frozen\r\n  - while waiting for another thread flushing\r\n\r\n  #syncFile\r\n  - while waiting a bit before retrying a failed sync call\r\n\r\n  #startLogBackup\r\n  - while waiting for a thread doing checkpointing before we start\r\n    backup of log as part of online-backup\r\n\r\nThe following locations previously silently swallowed the interrupt, we\r\nnow (also) note that an interrupt occurred:\r\n\r\n* LogToFile\r\n  #recover:\r\n  - in slave replication mode, while waiting for fail-over. This code\r\n    swallowed the interrupt\r\n\r\n  #getLogFileAtBeginning:\r\n  - in slave replication mode, while waiting for SlaveFactory to tell\r\n    the thread to do recovery. This code swallowed the interrupt\r\n\r\n* BasePage:\r\n  #setExclusive:\r\n  - while waiting for an exclusive latch\r\n  - while waiting for cleaner to finish\r\n  \r\n  #setExclusiveNoWait\r\n  - while waiting for cleaner to finish\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-14T21:29:14.145+0000","updated":"2011-01-14T21:38:08.961+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12982135","id":"12982135","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":" #syncFile \r\n  - while waiting a bit before retrying a failed sync call \r\nShould the comment change a little in turn of the \"does not matter...\"?\r\n\r\nI run suites.all against ibm 1.6 jvm along with the LockInterruptTest.java (derby-4967-locking-2.diff) change, test run clean. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2011-01-15T17:02:38.441+0000","updated":"2011-01-15T17:02:38.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12982189","id":"12982189","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for test running the two patches, Lily.  Good to know these run on the IBM VM as well!\r\nAs for the comment, agreed. I have removed it in my next version of this patch, because it long longer seems to carry important information: earlier practice was to always throw, so then the comment highlighted \"unusual\" treatment. Now we mostly do not throw, just make a note, so this is code is no longer unusual as I see it. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-16T00:06:45.443+0000","updated":"2011-01-16T00:06:45.443+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12983463","id":"12983463","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a second version of derby-4741-sleeps-waits, rerunning regressions.\r\n\r\nDetails on where patch derby-4741-sleeps-waits-2 adds things relative to version 1:\r\n\r\nThe following locations previously silently swallowed the interrupt, we now (also) note that an interrupt occurred:\r\n\r\n* LogAccessFile:\r\n\r\n  #flushDirtyBuffers:\r\n  - While waiting for another thread flushing\r\n\r\n  #syncLogAccessFile:\r\n  - While sleeping a bit before retrying after a failed sync\r\n\r\n  With the above, all the waits and sleeps in the package\r\n  org.apache.derby.impl.store.raw.log have been made safe.\r\n\r\nThe following locations where we earlier threw 08000 (CONN_INTERRUPT), we now just note that an interrupt occurred:\r\n\r\n* XactFactory:\r\n  \r\n  #blockBackup:\r\n  - While doing backup blocking operations, we wait for backup to\r\n    finish. \r\n\r\n  #blockBackupBlockingOperations:\r\n  - While waiting for all backup blocking operations to complete\r\n\r\n* BaseDataFileFactory:\r\n\r\n  #freezePersistentStore:\r\n  - While waiting for writes in progress to finishing before freezing.\r\n  \r\n  #writeInProgress:\r\n  - While waiting for db thaw before we can start writing\r\n\r\n* CachedPage:\r\n  #clean:\r\n  - Waiting for another thread cleaning it\r\n  - Waiting for state to become unlatched attempting to clean it\r\n\r\n* AsynchronousLogShipper:\r\n\r\n  #run:\r\n   - If interrupted during the shipping interval wait, shipping sooner doesn't hurt\r\n\r\n  #forceFlush:\r\n\r\n  - While waiting a bit after having flushed the master to ship log records to slave to free up buffer space\r\n  \r\n* ReplicationMessageReceive:\r\n\r\n  #isConnectedToMaster:\r\n  - While waiting for result from the ping thread (the \"pong\"). Since we may have been interrupted before the result is ready, we try again unless the connection is confirmed up.\r\n\r\n  #SlavePingThread#run:  \r\n  - While waiting for wakeup to do a ping.  I had to introduce an extra state variable here to decide whether after we receive an interrupt, a ping request has also been lodged.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-19T00:50:48.766+0000","updated":"2011-01-19T00:50:48.766+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12983697","id":"12983697","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Second revision of sleeps-waits looks good to me. A couple of questions:\r\n\r\nXactFactory.blockBackupBlockingOperations(): Remove RuntimeException from throws clause? The explanation added to the javadoc is probably enough for documentation purposes.\r\n\r\nRAFContainer4.java:\r\n\r\n    - Why the change from noteAndClearInterrupt() to setInterrupted()?\r\n\r\n    - Whitespace diff @@ -825,7 +819,7 @@ looks unintended\r\n\r\nReplicationMessageReceive.java: The while loops are only retried if the wait() calls are interrupted, and not if the wait() calls experience spurious wakeups. Any reason for that? (Probably still an improvement compared to the original code, which didn't retry the wait call in any event.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-01-19T13:11:02.120+0000","updated":"2011-01-19T13:11:02.120+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12983935","id":"12983935","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"> XactFactory.blockBackupBlockingOperations(): Remove RuntimeException from throws clause? The explanation added to the javadoc is probably enough for documentation purposes.\r\n\r\nI'm ok with that, I was torn on this.\r\n\r\n> RAFContainer4.java: Why the change from noteAndClearInterrupt() to setInterrupted()?\r\n\r\nJust simplification, since in these two locations we know that an interrupt actually did happen, there is no need to test for the flag as noteAndClearInterrupt does.\r\n\r\n>     - Whitespace diff @@ -825,7 +819,7 @@ looks unintended\r\n\r\nIndeed, thanks.\r\n\r\n> \r\n> ReplicationMessageReceive.java: The while loops are only retried if the wait() calls are interrupted, and not if the wait() calls experience spurious wakeups. Any reason for that? (Probably still an improvement compared to the original code, which didn't retry the wait call in any event.)\r\n\r\nYes, I agree the original code is deficient in this repect, I have the code changed to handle this as well.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-19T23:38:52.506+0000","updated":"2011-01-19T23:38:52.506+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12983937","id":"12983937","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading rev #3 of sleeps-waits, rerunning regressions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-19T23:47:22.649+0000","updated":"2011-01-19T23:47:22.649+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12984405","id":"12984405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed rev #3 as svn 1061516. This completes the cleanup of interrupt handling in Object#wait and Thread.sleep inside store.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-20T21:13:03.893+0000","updated":"2011-01-20T21:13:03.893+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12984852","id":"12984852","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"I think the latest check-in has caused the following tinderbox failure:\r\n\r\nderbyall/storeall/storeall.fail:unit/T_RawStoreFactory.unit\r\n\r\nsee: http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1061516-derbyall_diff.txt:\r\n\r\n********* Diff file derbyall/storeall/storeunit/T_RawStoreFactory.diff\r\n*** Start: T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-20 23:22:23 ***\r\n2 del\r\n< -- Unit Test T_RawStoreFactory finished\r\n2 add\r\n> ran out of time\r\n> Exit due to time bomb\r\nTest Failed.\r\n*** End:   T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-21 00:22:54 ***\r\n\r\nIt failed in the nightly runs with ibm 1.6 also (and 1.4.2 and 1.5).\r\nDo we need a separate jira?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2011-01-21T18:37:49.288+0000","updated":"2011-01-21T18:37:49.288+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12985033","id":"12985033","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading *-raf-stresstest-1, which adds a multi-threaded read/write test under an interrupt shower.\r\nThis exercises primarily the random access file recovery  (RAFContainer4#recoverContainerAfterInterrupt), but since the interrupt can arrive at any time during query execution, other parts of the code are also exposed. \r\n\r\nThe new test case is InterruptResilienceTest#testRAFReadWriteMultipleThreads.\r\n\r\nRunning regressions.\r\n\r\nThe patch is not for commit yet, since I worry that the test takes too long to be included in the regression suite. During development I had to let it run this long to expose all the corner cases I have seen, but adding 250 seconds may be too much. I could comment out the client/server suite, since it doesn't add much value: the interrupt all happen on the server side. That  would cut the time down to ca half. Also, the test may not be entirely reliable yet, since there are remaining parts of the code yet to vetted wrt interrupt handling, but it runs reliably in my environment. I will at least run it on some more platforms before I suggest any commit.\r\n\r\nPlease note that due to DERBY-4431, the IBM VMs will not yet be covered by these additional tests.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-22T01:58:43.114+0000","updated":"2011-01-22T01:58:43.114+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12985034","id":"12985034","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Myrna, I will look into it. Filed DERBY-4982 for this.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-22T01:59:44.738+0000","updated":"2011-01-22T02:15:10.207+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986212","id":"12986212","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Regrressions for *-raf-stresstest-1, and I verified that the modified InterruptResilienceTest works on Windows as well. For some reason it executed much more quickly under Windows, ca 50s (the reported 250 above was on Solaris). I'll see I can figure out why.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-25T04:30:36.596+0000","updated":"2011-01-25T04:30:36.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986347","id":"12986347","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Perhaps the difference is whether or not the OS will force changes to disk when doing synchronous writes?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-01-25T11:40:30.753+0000","updated":"2011-01-25T11:40:30.753+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986365","id":"12986365","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The use of the static field thisTest may have some consequences that are not entirely obvious:\r\n\r\nThe field is set when the test suite is created, so when the tests start running it will always point to the last test case that was created, not necessarily to the running test case. That is, it will always point to a client test case. Because of this, one may be led to believe that the test that calls thisTest.openDefaultConnection() always uses client connections. However, BaseJDBCTestCase.openDefaultConnection() calls TestConfiguration.getCurrent() to get the current test configuration, so the connection type should be chosen dynamically based on the active decorators. But this assumption is also not quite true. The decorators only affect the TestConfiguration for the main thread, so when running inside a stored procedure in a server thread, the decorators will have no effect, and an embedded connection will be opened even if the test case is actually running within a client/server decorator.\r\n\r\nI think the intention is to always use embedded connections inside the stored procedure, and that's also what the code does (so, as mentioned in an earlier comment, there's probably not much point in running this test in client/server mode?). But it takes some effort to convince oneself that that's what it actually does. Do you think it's possible to make it more explicit that the worker threads always use embedded connections?\r\n\r\nAnd some little nits:\r\n\r\n+            if (w.e != null) {\r\n+                fail(\"WorkerThread \" + i + \" saw exception \" + w.e);\r\n+            }\r\n\r\nUse the fail() method that takes an exception to preserve the stack trace?\r\n\r\n+        ResultSet rs = s.executeQuery(\"select count(*) from mtTab\");\r\n+        rs.next();\r\n+        assertEquals(\"too few rows inserted\",\r\n+                     rs.getLong(1), NO_OF_THREADS * NO_OF_MT_OPS);\r\n+        rs.close();\r\n\r\nHow do you know it must be too few and not too many? ;) JDBC.assertSingleValueResultSet() could simplify this code.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-01-25T12:42:49.985+0000","updated":"2011-01-25T12:42:49.985+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986601","id":"12986601","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for looking at this, Knut!\r\nYou are right, it got a bit convoluted. The intention is, as you suggest, to always embedded connections inside the stored procedure.\r\nI'll see if I can simplify this a bit! I\r\n\r\n always agonize about whether to include c/s tests or not when the changes are seemingly embedded/server-side only, maybe we should try to establish some criteria to help us decide when to, and when not to do that.\r\n\r\nThanks also for spotting the nits, I converted this from a stand-alone test outside JUnit, so it can be further simplied as you suggest.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-25T18:53:42.513+0000","updated":"2011-01-25T18:53:42.513+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986676","id":"12986676","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploaded *raf_stresstest-2 which supersedes #1. In addition to fixing Knut's nits,\r\nthe server side code now uses a thread's default test configuration directly, and I also added a comment explaining this. I think I will commit the patch with the long running time for now. I'd rather flush out any bugs here sooner rather than later. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-25T20:35:51.282+0000","updated":"2011-01-25T20:35:51.282+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986710","id":"12986710","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"> I think I will commit the patch with the long running time for now. I'd rather flush out any bugs here sooner rather than later.\r\n\r\nSounds good. +1\r\n\r\n> I always agonize about whether to include c/s tests or not when the changes are seemingly embedded/server-side only\r\n\r\nI don't have a general rule, but in this particular case it looks like we run the entire test inside a stored procedure in order to make sure that only embedded is tested. Sounds like a good indication that embedded only would suffice... :) We could probably simplify the test somewhat and remove the stored procedure indirection too if we made it embedded only.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-01-25T21:58:20.184+0000","updated":"2011-01-25T21:58:20.184+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12986809","id":"12986809","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a revised version #3 which makes use of derby.system.durability=testing to cut down on the\r\nrunning time on Solaris, I found it will still get to the corner cases.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-26T01:47:48.251+0000","updated":"2011-01-26T01:47:48.251+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12987348","id":"12987348","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading version #4 (derby-4741-raf-stresstest-4). This lets the test run with its own database since we use durability=test: just to be on the safe side, so other tests don't get impacted by the fact that the database is thus marked, cf. message in derby.log:\r\n\r\n\"WARNING: The database is booted with derby.system.durability=test. In this mode, it is possible that database may not be able to recover, committed transactions may be lost, database may be in an inconsistent state. Please use this mode only when these consequences are acceptable\" (sic: no final period)\r\n\r\nI has to add a class.forName to DriverManagerConnector#getConnectionByAttributes and a new public method BasicJDBCTestCase#openDefaultConnection(TestConfiguration). The latter makes it possible use the main thread's test configuration in the server threads, cf. \"thisConfig\" member in InterruptResilienceTest.\r\n\r\nI also added derby.infolog.append=true to SystemPropertyTestSetup, so the c/s run doesn't clobber the embedded run's derby.log.\r\n\r\nRerunning regressions.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-27T01:55:53.834+0000","updated":"2011-01-27T01:55:53.834+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12987620","id":"12987620","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Regressions ran ok, committed derby-4741-raf-stresstest-4 as svn 1064174.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-27T16:11:36.958+0000","updated":"2011-01-27T16:11:36.958+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12987853","id":"12987853","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a functional specification for this work to summarize what we have so far: \"interrupts-fs.html\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-01-28T00:29:31.707+0000","updated":"2011-01-28T00:29:31.707+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989336","id":"12989336","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a patch, *-testQueryInterrupt, which:\r\n\r\n* adds a new test case: InterruptResilienceTest#testLongQueryInterrupt\r\n\r\nwhich tests that a query will check for the interrupt flag and throw 08000 (CONN_INTERRUPT) at the same time is checks for query time-out.\r\n\r\n* adds a missing test in InterruptStatus#throwIf\r\n\r\nI also adjusted an existing test (for RAF recovery) to handle the case that we could see 08000 (CONN_INTERRUPT) when performing a query as part of that test, depending on when the interrupt happens.\r\n\r\nRegressions passed.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-01T19:07:28.302+0000","updated":"2011-02-01T19:07:28.302+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989385","id":"12989385","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a new version of the draft functional specification, version 0.2. Please have a look!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-01T21:18:31.712+0000","updated":"2011-02-01T21:18:31.712+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989410","id":"12989410","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading another patch *-testBatchInterrupt, which adds another fixture to InterruptResilienceTest: #testInterruptBatch, rerunning regressions.\r\n\r\nIt tests that an interrupt will stop a batch of statements by throwing just before we execute the next statement in the batch.\r\n\r\nNote that this patch includes all of *.testQueryInterrupt also for logistics reason (that patch is not yet committed), but I will post a slimmed down version of this as soon as that one is in.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-01T22:15:27.165+0000","updated":"2011-02-01T22:15:27.165+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989913","id":"12989913","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed patch derby-4741-testQueryInterrupt as svn 1066701.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-03T00:09:38.323+0000","updated":"2011-02-03T00:09:38.323+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989914","id":"12989914","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading version a slimmed-down version of *-testBatchInterrupt: derby-4741-testBatchInterrupt-b.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-03T00:17:55.554+0000","updated":"2011-02-03T00:17:55.554+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12989916","id":"12989916","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed derby-4741-testBatchInterrupt-b as svn 1066707.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-03T00:21:03.123+0000","updated":"2011-02-03T00:21:03.123+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12991441","id":"12991441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for writing up the functional spec, Dag. I found that it clearly explained the behaviour, and as far as I could see it matched what was actually implemented. It doesn't mention anything about how to handle the Solaris interruptible I/O issue on JVMs later than 1.6 (in which case there won't be an issue, right?), but that's probably intentional since 1.7 is still only available as early access?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-02-07T16:21:46.966+0000","updated":"2011-02-07T16:21:46.966+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12991678","id":"12991678","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Yes, you are right, Knut. I did omit reference to the 1.7 behavior on Solaris, but it might be good to include it in any case for completeness. After all Java 1.7 should be available before too long ;-) Thanks for reviewing the specification.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-07T22:51:26.746+0000","updated":"2011-02-07T22:51:26.746+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12992159","id":"12992159","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Hi Dag,\r\n\r\nThanks for the functional spec. I am trying to wrap my mind around what application writers can expect. Is the following a fair summary?\r\n\r\n1) If the Thread is interrupted while running outside Derby (that is, not inside a JDBC call), then Derby does not field the interrupt. The Connection remains alive and Thread.isInterrupted() will not be touched by Derby.\r\n\r\n2) On the other hand, if the Thread is interrupted while running inside a Derby JDBC call...\r\n\r\na) The Connection may be killed and have to be restarted. If the Connection is killed, then Thread.isInterrupted() will be true. \r\n\r\nb) Alternatively, it is also possible that the interrupt will not kill the Connection. In this case, the state of Thread.isInterrupted() is unclear to me. I am having a hard time reconciling \"will be still be set...when exiting from the Derby API method\" with \"it is not deterministic whether the flag will remain set or be cleared on return\".\r\n\r\nThanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2011-02-08T20:29:34.606+0000","updated":"2011-02-08T20:29:34.606+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12992279","id":"12992279","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Thanks for reading the spec, Rick.\r\n\r\n1) Not true. If the flag is set at the time the Derby API call, Derby may throw. Derby can't know exactly when the thread was interrupted, it can only notice it by either a) seeing Java API methods return exceptions, or b) testing the flag explicitly. We do not test the flag on Derby API method entry. We heed (i.e. throw) interrupts in the specified situations enumerated in the spec.\r\n\r\n2b) The flag will remain set when exitting from in all cases. The note about deterministic only applies if the flag *is attemped cleared* by another thread while the Derby API call is still executing. If we ever saw an interrupt and had to clear it to make execution continue, e.g. for NIO, we set it again at Derby API method exit, whether we throw or not. This means that any attempt to clear it while Derby is executing could be lost, depending on exactly when the clearing attempt was made, hence \"non-deterministic\".\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-09T01:32:40.907+0000","updated":"2011-02-09T01:32:40.907+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12992498","id":"12992498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks, Dag. Some follow-on questions:\r\n\r\n1) Suppose my application has two threads T1 and T2, each with its own Connection. T1 is busy interacting with the user and is NOT stalled inside a JDBC call. T2 is running inside a JDBC call. Now T2 is interrupted. Can this kill T1's Connection?\r\n\r\n2) Does this give rise to any advice for application writers?\r\n\r\nThanks,\r\n-Rick","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2011-02-09T14:26:03.391+0000","updated":"2011-02-09T14:26:03.391+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12992811","id":"12992811","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Rick, \r\n1) The answer is no. Only T2 risk seeing 08000. Nor would T1 risk it if it were inside a JDBC call, since this thread is not being interrupted.\r\n2) Applications that expect to interrupt threads while they are executing JDBC calls should be prepared to receive a session level error with SQLState 08000, and so would need to reconnect in order to get more work done.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-10T00:36:21.886+0000","updated":"2011-02-10T00:36:21.886+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12993182","id":"12993182","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks, Dag. Here is another attempt to summarize the user-visible behavior after these improvements.\r\n\r\nIf an application experiences Thread interrupts, its designer should plan for the following behavior:\r\n\r\n1) If a Thread is interrupted inside a Derby JDBC call, then the Connection experiencing the interrupt MAY be terminated. If the Connection is terminated, the application will experience the following consequences:\r\n\r\na) The JDBC call will raise a 08000 (CONN_INTERRUPT) exception.\r\n\r\nb) Outstanding transactional work on that Connection will be rolled back and all of its locks will be released.\r\n\r\nc) The Connection will not execute any further JDBC calls.\r\n\r\nd) On return from the interrupted JDBC call, the Thread's isInterrupted() method will report \"true\".\r\n\r\n2) All other Connections will remain active. This includes other Connections which the interrupted Thread may be using.\r\n\r\n3) Application designers are advised to catch these 08000 exceptions, discard the dead Connection, and restart their transaction in a new Connection.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2011-02-10T19:29:23.022+0000","updated":"2011-02-10T19:29:23.022+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12993282","id":"12993282","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"> 1) If a Thread is interrupted inside a Derby JDBC call, then the Connection experiencing the interrupt MAY be terminated. If the Connection is terminated, the application will experience the following consequences:\r\n\r\nTo be even more precise: \"If a Thread is interrupted and the flag is not cleared before entering a Derby JDBC call *or* the thread is interrupted while inside a Derby JDBC call, then the Connection experiencing the interrupt MAY be terminated. If the Connection is terminated, the application will experience the following consequences:\"\r\n\r\n> a) The JDBC call will raise a 08000 (CONN_INTERRUPT) exception.\r\n\r\nYes\r\n\r\n> \r\n> b) Outstanding transactional work on that Connection will be rolled back and all of its locks will be released.\r\n\r\nYes\r\n\r\n> c) The Connection will not execute any further JDBC calls.\r\n\r\nYes\r\n\r\n> \r\n> d) On return from the interrupted JDBC call, the Thread's isInterrupted() method will report \"true\".\r\n\r\nYes. \r\n\r\nIf Derby does not throw, the Thread's isInterrupted() method will also report \"true\".\r\n\r\n> 2) All other Connections will remain active. This includes other Connections which the interrupted Thread may be using.\r\n\r\nYes, at least until such time as the thread, still having its interrupted flag set, tries to use another connection, in which case, this connection is also subject to termination.\r\n\r\n> \r\n> 3) Application designers are advised to catch these 08000 exceptions, discard the dead Connection, and restart their transaction in a new Connection. \r\n\r\n*And* clear the interrupted flag of the thread before proceeding with another Derby connection, preferably!\r\n\r\nThe \"MAY\" presently means: \r\n    if a query fetches rows from a base table *after* the interrupt has occurred, or\r\n    a new element in a batched statement is attempted executed *after* the interrupt has occurred, or\r\n    an interrupt is received *while* waiting for a lock.\r\n\r\nIn other cases, it is ignored.\r\n.\r\nNote the slight difference above, between *after* and *while*. I have clarified this in a new revision.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-11T00:38:18.338+0000","updated":"2011-02-11T00:38:18.338+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12993283","id":"12993283","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a new version of the func spec.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-11T00:44:13.517+0000","updated":"2011-02-11T00:44:13.517+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12993494","id":"12993494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks for the extra clarification, Dag. That will be useful for programmers who want to understand the code. I think we have a clear enough picture of the user experience that we can document this feature now. Thanks. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2011-02-11T14:01:56.660+0000","updated":"2011-02-11T14:01:56.660+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12994415","id":"12994415","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"triaged for 10.8.\r\n\r\nA lot of progress has been made on this issue, and it looks ready for 10.8.  Work is being done incrementally, probably soon should close this one based on checked in work, and log a new one to track possible work post 10.8.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2011-02-14T18:49:53.727+0000","updated":"2011-02-14T18:49:53.727+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12994578","id":"12994578","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading patch derby-4741-sleeps-waits-more. This patch contains the\r\nrest of the code locations containg calls to Object#wait and\r\nThread#sleep that I intend to make interrupt proof for this issue. It\r\nis not ready for commit, but please have a look. (I am still\r\nconsidering a few more, including occurences in BasicDaemon.java).\r\n\r\nAlso uploading the list of occurences I used as input:\r\nwait-0-usages.txt, wait-1-usages.txt, sleep-1-usages.txt, annotated as\r\nfollows: \"v\" fixed or not relevant (e.g. test code), \"-\" I will not\r\nchange (not embedded Derby, cf. functional specification) and \"?\"\r\nstill pondering what to do (BasicDaemon).\r\n\r\nRegressions ran ok, although it doesn't say much, since most of the\r\nchanges only apply when interrupts happen.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-15T00:03:08.604+0000","updated":"2011-02-15T00:03:08.604+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12996077","id":"12996077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading version 0.4 of the functional specification. Adds items to the list of unmodified behavior.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-17T21:07:24.872+0000","updated":"2011-02-17T21:07:24.872+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12996083","id":"12996083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Dev guide:\r\n\r\n> Do not use interrupt calls to notify threads that are accessing a\r\n> database, because Derby will catch the interrupt call and close the\r\n> connection to the database. Use wait and notify calls instead.\r\n\r\nThis advice stands still, I think. The modal verb \"will\" is slightly\r\ninaccurate here, it would be more correct to use \"could\" or\r\n\"might\". The functional specification spells this out in detail when\r\nthis can happen. \r\n\r\nInterrupts can now be used to stop long-running queries, batches and\r\nstatements that wait for database locks. In all cases, the connection\r\nwill be closed along with the exception seen (state 08000), cf the specification.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-17T21:13:04.656+0000","updated":"2011-02-17T21:13:04.656+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12996091","id":"12996091","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=chaase3","name":"chaase3","emailAddress":"camilla dot haase at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kim Haase","active":true},"body":"Thanks! Does \"long-running\" apply to all three nouns (\"queries, batches and statements that...\") or just the first?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=chaase3","name":"chaase3","emailAddress":"camilla dot haase at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kim Haase","active":true},"created":"2011-02-17T21:28:20.680+0000","updated":"2011-02-17T21:28:20.680+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998161","id":"12998161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed derby-4741-sleeps-waits-more as svn 1073595:\r\n\r\nCommit message:\r\nPatch derby-4741-sleeps-waits-more, which \"regularizes\" a few more\r\ninstances of interrrupt handling to follow the idiom established in\r\nthis issue's patches. \r\n\r\nThis leaves a few instances in BasicDaemon.java (as far as embedded\r\ncode is concerned), which will need more consideration. In any case,\r\ninterrupting the demon threads is less of a valid use case I believe,\r\ni.e. Derby's ability to tolerate that is less crucial that tolerating\r\ninterrupts to the user's connection threads.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-23T05:08:20.706+0000","updated":"2011-02-23T05:08:20.706+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998165","id":"12998165","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"(reposting my answer from email here, since it didnt seem to make it to the JIRA issue)\r\n\r\nKim> Does \"long-running\" apply to all three nouns (\"queries, batches and statements that...\") or just the first?\r\n\r\nGood question. All: I guess the definition of \"long\" here is relative to\r\nthe applications expectations. The third one (locks) is limited upward\r\nto the lock timeout for a single lock grab, but that may not be the\r\nwhole story since the statement may need further locks to complete. So\r\n\"longer than expected\" is perhaps more to the point..","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-23T05:11:49.144+0000","updated":"2011-02-23T05:11:49.144+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998246","id":"12998246","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The last commit (#1073595) seems to have introduced some dependency that breaks the build in the Tinderbox: http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/UpdateInfo/1073598-buildDetails.txt\r\n\r\nI am able to reproduce it if I explicitly point the jsr169compile.classpath property to Foundation + JSR-169 jars. I'm not sure exactly what's causing it, but it looks like the iapi.types package now is compiled via the compile_mbeans target. That target uses compile.classpath, which is set to jsr169compile.classpath in build.xml, whereas the target that normally compiles SqlXmlUtil requires some extra XML libraries on the compile classpath.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-02-23T08:47:18.041+0000","updated":"2011-02-23T08:47:18.041+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998471","id":"12998471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"I backed out a change to TopService.java until we understand how to make it build correctly in those circumstances.\r\nsvn 1073846. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-23T17:52:49.901+0000","updated":"2011-02-23T17:52:49.901+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998620","id":"12998620","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Uploading a patch which reintroduces the fix that was backed out with changes to the build. Essentially it moves the compilation of MBeans out till after the iapis have been built. Thanks to Knut for pinpointing the feact that compilation of MBeans depends on Monitor, but is in fact compiled before the iapi currently. Setting the sourcepath for javac to \"\" for mbeans-compile highlighted the issue, cf this comment: https://issues.apache.org/jira/browse/DERBY-4845?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=12998479#comment-12998479\r\n\r\nStill,exactly why this makes it compile with explicit setting of jsr169compile.classpath now, whereas it did not before, is still a bit unclear to me. It seems to work now, though. Running regressions.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-23T23:56:37.060+0000","updated":"2011-02-24T00:05:29.627+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12998923","id":"12998923","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"It is not totally clear to me why setting for the sourcepath and jsr169compile.classpath make the build work on all the platforms. More explanation will help people like me. :-\r\nSuites.all and derbyall run clean with derby-4741-fix-compilation.diff patch on my Windows 7. +1 for me to commit. Cheers and Thanks!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2011-02-24T16:31:19.055+0000","updated":"2011-02-24T16:31:19.055+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12999701","id":"12999701","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Hi Lily, it is not clear to me either ;-) The dependencies in our\r\npresent compile is partly hard coded in the build.xml files, but that\r\nis not the whole story. It seems that if the compiler notices it lacks\r\na class, it can check for it in the source path and compile it outside\r\nthe normal order to fulfill the dependency. Setting the classpath to\r\n\"\" denies the compiler task this ability, forcing the hard coded\r\ndependencies to be the unique determinants of compilation order. Knut\r\ndid an experiment to do that for most compiles, but it quickly turned\r\nmessy as far as I understood.\r\n\r\nCf this quote from the javac task doc (http://www.jajakarta.org/ant/ant-1.6.1/docs/en/manual/CoreTasks/javac.html):\r\n\r\n\"If you wish to compile only files explicitly specified and disable\r\njavac's default searching mechanism then you can unset the sourcepath\r\nattribute:\r\n\r\n  <javac sourcepath=\"\" srcdir=\"${src}\"\r\n         destdir=\"${build}\" >\r\n    <include name=\"**/*.java\" />\r\n    <exclude name=\"**/Example.java\" />\r\n  </javac>\r\n\r\nThat way the javac will compile all java source files under \"${src}\"\r\ndirectory but skip the examples. The compiler will even produce errors\r\nif some of the non-example files refers to them. \"\r\n\r\nSo far so good. I can't explain why setting jsr169compile.classpath\r\nexplicitly made things break though. I just fiddled with the placement\r\nof the compilation of mbeans till it worked... :( But in general, it\r\nmatters under which javac tash a class is compiled in Derby, since we\r\nuse so many tweaks for classpath handling to enable seperate Java\r\nversions, jsr169, JDBC3, 4... I think it woul dbe good if we could\r\nmove to having the dependencies better understood and encoded in the\r\nbuild files, cf. Knut's experiment, so we can untangle all these\r\nintricate dependencies, and suffer less every time anything changes..\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-26T03:08:40.465+0000","updated":"2011-02-26T03:08:40.465+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/12999710","id":"12999710","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Committed 1074789 (derby-4741-fix-compilation). I don't plan more work on this feature now, resolving.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2011-02-26T03:43:53.538+0000","updated":"2011-02-26T03:43:53.538+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/13000021","id":"13000021","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"body":"Thank you so much, Dag. I couldn’t agree more. We should define the dependencies better and move toward to more fine rule in the build files and have easier life every time we need to change thing to make Derby better. A lot of things appear to be easy but take a lot of time to do once you get all the details. :-  The devil is always in the detail. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lilywei","name":"lilywei","emailAddress":"lilywei at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Lily Wei","active":true},"created":"2011-02-27T18:24:28.765+0000","updated":"2011-02-27T18:24:28.765+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12469090/comment/13685379","id":"13685379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"[bulk update] Close all resolved issues that haven't been updated for more than one year.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-06-17T09:19:51.767+0000","updated":"2013-06-17T09:19:51.767+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4741/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06do7:"}}