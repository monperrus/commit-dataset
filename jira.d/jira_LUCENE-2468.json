{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12464738","self":"https://issues.apache.org/jira/rest/api/latest/issue/12464738","key":"LUCENE-2468","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314799","id":"12314799","description":"Bugfixes of 2.9.2","name":"2.9.3","archived":false,"released":true,"releaseDate":"2010-06-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314798","id":"12314798","description":"Bugfixes for 3.0.1","name":"3.0.2","archived":false,"released":true,"releaseDate":"2010-06-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314822","id":"12314822","description":"Major release after 3.x","name":"3.1","archived":false,"released":true,"releaseDate":"2011-03-31"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2010-05-18 09:33:04.056","customfield_12312323":null,"customfield_12310420":"11351","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_938619434_*|*_5_*:*_2_*:*_139977925_*|*_4_*:*_1_*:*_271850605","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-06-02T16:03:49.970+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2468/watchers","watchCount":2,"isWatching":false},"created":"2010-05-18T00:56:22.006+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-06-18T08:04:07.430+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[],"timeoriginalestimate":null,"description":"A repoen on an NRT reader doesn't seem to share readers for those segments that are unchanged.\r\nhttp://search.lucidimagination.com/search/document/9f0335d480d2e637/nrt_and_caching_based_on_indexreader","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"25542","summary":"reopen on NRT reader should share readers w/ unchanged segments","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":28,"total":28,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868471","id":"12868471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Attached simple test case demonstrating the issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-05-18T00:58:12.223+0000","updated":"2010-05-18T00:58:12.223+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868571","id":"12868571","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=earwin","name":"earwin","emailAddress":"earwin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Earwin Burrfoot","active":true},"body":"Or, you do it so various caches are preserved across clone()","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=earwin","name":"earwin","emailAddress":"earwin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Earwin Burrfoot","active":true},"created":"2010-05-18T09:33:04.056+0000","updated":"2010-05-18T09:33:04.056+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868585","id":"12868585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Indeed, right now the newly returned NRT reader will always provide a\r\nshallow clone for any segments that have not changed vs the previous\r\nNRT reader.\r\n\r\nFieldCache is unaffected by this (it always keys on the \"core\"\r\nreaders, getFieldCacheKey, which is the same for shallow clones) --\r\nsuch shallow clones will share the same field cache entry.\r\n\r\nBut other caches (CachingWrapperFilter, CachingSpanFilter) don't use\r\nthis key, and so they'll now get multiple entries for the shallow\r\nclones.  So we need to fix that.\r\n\r\nHowever, when new deletions have arrived, a new shallow clone must be\r\ncreated.  In this case the FieldCache entries are shared.\r\n\r\nSo, should these other caches share an entry for that clone, or not?\r\nIt's tempting to do so -- all that's changed is new docs got deleted,\r\nand any time these filters are applied for searching, they are AND'd\r\nwith \"not deleted\".\r\n\r\nBut, this is technically shaky ground, since the new deletions will in\r\nfact mean some docs that previously passed the filter (bit was set)\r\nwill now have the bit un-set.\r\n\r\nI would lean towards letting the caches share the filter in these\r\ncases, and advertising in these classes javadocs that this will\r\nhappen.  Thoughts?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T09:55:23.563+0000","updated":"2010-05-18T09:55:23.563+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868604","id":"12868604","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=earwin","name":"earwin","emailAddress":"earwin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Earwin Burrfoot","active":true},"body":"Reusing fieldCacheKey is probably a good temporary solution? (possibly renaming it in the process to just cacheKey)\r\nNRT.reopen() is not the only case when we're getting shallow clones, IR.clone() explicitly does that, so with cacheKey we're getting all the bases covered.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=earwin","name":"earwin","emailAddress":"earwin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Earwin Burrfoot","active":true},"created":"2010-05-18T10:59:38.462+0000","updated":"2010-05-18T10:59:38.462+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868617","id":"12868617","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Sounds like a good solution for me. I just noticed in trunk that there is also explicit purge from FieldCache when possible. I think it would be great to enable to do this for other caches that are based on it (like the CachingWrapperFilter, but externally written ones as well).\r\n\r\nI was thinking of an expert API to allow to add a \"CacheEvictionListener\" or something similar, which will be called when this happens. What do you think?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T12:17:00.559+0000","updated":"2010-05-18T12:17:00.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868630","id":"12868630","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq, I would lean towards letting the caches share the filter in these cases, and advertising in these classes javadocs that this will happen. Thoughts?\r\n\r\nI think that's prob OK - users won't notice when using filters to search, but may get different behavior if they use it for other purposes.\r\n\r\nShay, as far as CachingWrapperFilter and CacheEvictionListener, it seems more powerful to just let apps create a new query type themselves?  That's the nice part of lucene's openness to user query types - start with the code for CachingWrapperFilter and hook up your own caching logic.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-05-18T12:48:31.997+0000","updated":"2010-05-18T12:48:31.997+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868647","id":"12868647","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"bq. Shay, as far as CachingWrapperFilter and CacheEvictionListener, it seems more powerful to just let apps create a new query type themselves? That's the nice part of lucene's openness to user query types - start with the code for CachingWrapperFilter and hook up your own caching logic.\r\n\r\nYea, but it would be great to know when an IndexReader has decided to actually close, so caches can be eagerly cleaned. Even if one will write a custom implementation, it would benefit it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T13:47:24.034+0000","updated":"2010-05-18T13:47:24.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868659","id":"12868659","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"I think that the solution suggested, to use the FieldCacheKey is not good enough, sadly. I am attaching a simpel test that shows that this does not work for cases when a query is passed to a searcher, without a filter, but that query, is, for example, a ConstantScoreQuery. I have simply taken the CachingWrapperFiler and changed it to use the getFieldCacheKey instead of using the IndexReader.\r\n\r\nThis is problematic, since a filter can be used somewhere in the query tree, and wrapped for caching. I am running against 3.0.1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T14:31:33.849+0000","updated":"2010-05-18T14:31:33.849+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868660","id":"12868660","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Renaming to cacheKey makes me a bit nervous.... since... this key is the same even when deletions change.  How about coreCacheKey?  The javadocs should make it clear that new deletions can show up yet have the identical (==) coreCacheKey.\r\n\r\nOK I'll take this approach.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T14:33:37.984+0000","updated":"2010-05-18T14:33:37.984+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868673","id":"12868673","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. This is problematic, since a filter can be used somewhere in the query tree, and wrapped for caching\r\n\r\nRight so the issue here is that ConstantScoreQuery's scorer does not check deleted docs when it runs -- it just relies entirely on what the filter said was set.\r\n\r\nBut I expect this is the exception not the rule.\r\n\r\nIe most uses of a filter will see to it that deleted docs are already removed.\r\n\r\nIt's as if, somehow, when a caller wants the scorer or DocIdSet, it should express whether it's OK that deleted docs are not removed... I think this'd be another boolean arg (mustContainDeletions or some such) to scorer and getDocIdSet.\r\n\r\nOr, for a less invasive change, we could that you tell ConstantScoreQuery that it must fully enforce deletions (if your app runs a query tree that has a path involving ConstantScoreQuery not AND'd with some other query that'd enforce deletions).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T15:03:08.425+0000","updated":"2010-05-18T15:03:08.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868680","id":"12868680","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Agreed, seems like ConstantScoreQuery is the only problematic one... .","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T15:25:55.914+0000","updated":"2010-05-18T15:25:55.914+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868800","id":"12868800","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Attached patch -- renames IR.getFieldCacheKey -> IR.getCoreCacheKey, fixes CachingWrapperFilter and CachingSpanFilter to, by default, disregard deletions when checking the cache.  But I added expert ctors to each to force deletions to be \"respected\" at a perf hit.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T19:30:42.129+0000","updated":"2010-05-18T19:30:42.129+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868816","id":"12868816","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Thanks for the work Michael!. Is this issue going to include the ConstantSoreQuery, or should I open a different issue for this?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T20:25:54.111+0000","updated":"2010-05-18T20:25:54.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868855","id":"12868855","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. Is this issue going to include the ConstantSoreQuery, or should I open a different issue for this?\r\n\r\nSorry -- what change is needed to ConstantScoreQuery?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T21:59:47.854+0000","updated":"2010-05-18T21:59:47.854+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868869","id":"12868869","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Check two comments above :), we discussed it. Basically, it does not work with your change and it using a cached filter.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-18T22:17:46.649+0000","updated":"2010-05-18T22:17:46.649+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868909","id":"12868909","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. Basically, it does not work with your change and it using a cached filter.\r\n\r\nI'm still confused :)  My patch has your test case (which uses ConstantScoreQuery).  I tweaked the test case a bit, eg to not rely on TermsFilter (which is in contrib).\r\n\r\nThe test failed when I first made the change (as expected).\r\n\r\nThen I modified CachingWrapperFilter to take the optional boolean \"enforceDeletions\".\r\n\r\nThen I changed the test to pass \"true\" for enforceDeletions, and the test now passes.\r\n\r\nI don't think any change is needed to ConstantScoreQuery?  (Ie, I took the \"less invasive\" option in my comment above).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-18T23:46:50.216+0000","updated":"2010-05-18T23:46:50.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868923","id":"12868923","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Ahh, now I see that, sorry I missed it. But, basically, enforcing deletions means that we are back to the original problem... . I think it would be quite confusing for users, to be honest. Out of the filters, the problematic ones are the ones that can be converted to queries. From what I can see, the FilteredQuery is ok, so, maybe the ConstantScore can be changed (if possible) to do that... .","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-19T00:10:47.539+0000","updated":"2010-05-19T00:10:47.539+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868941","id":"12868941","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Here is a go at making ConstantScoreQuery deletion aware. I named it differently, but it can replace ConstantScoreQuery with a flag making it deletion aware. What do you think?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-19T00:52:19.053+0000","updated":"2010-05-19T00:52:19.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12868959","id":"12868959","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Another quick question Mike, what do you think about the ability to know when a \"cache key\" is actually closed so it can be removed from a cache? Similar in concept to the eviction done from the field cache in trunk by readers, but open so other Reader#cacheKey based caches (which is the simplest way to do caching in Lucene) can use.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-19T02:07:52.186+0000","updated":"2010-05-19T02:07:52.186+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869233","id":"12869233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. Here is a go at making ConstantScoreQuery deletion aware. I named it differently, but it can replace ConstantScoreQuery with a flag making it deletion aware. What do you think?\r\n\r\nI don't think we need to fix ConstantScoreQuery to be deletions\r\naware?\r\n\r\nWith the perf fix we are doing here, the problem (not correctly\r\n\"seeing\" deletes on a reopened reader) is isolated to\r\nCachingWrapperFilter/CachingSpanFilter, right?\r\n\r\nWhy fix ConstantScoreQuery, when so many other Filter impls will\r\nproperly apply deletions?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-19T18:04:17.696+0000","updated":"2010-05-19T18:04:17.696+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869235","id":"12869235","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq.Another quick question Mike, what do you think about the ability to know when a \"cache key\" is actually closed so it can be removed from a cache? Similar in concept to the eviction done from the field cache in trunk by readers, but open so other Reader#cacheKey based caches (which is the simplest way to do caching in Lucene) can use.\r\n\r\nI think this would be a good change -- it would make eviction immediate instead of just when GC gets around to pruning the WeakHashMap.  Can you open a separate issue and maybe work out a patch?\r\n\r\nOr, the other alternative would be to have IR hold such caches, as a service, to \"things\" that need caching.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-19T18:07:22.006+0000","updated":"2010-05-19T18:07:22.006+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869253","id":"12869253","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"bq. With the perf fix we are doing here, the problem (not correctly\r\n\"seeing\" deletes on a reopened reader) is isolated to\r\nCachingWrapperFilter/CachingSpanFilter, right?\r\n\r\nYes, but, this means that ConstantScoreQuery should basically not be cached when using NRT (even with using IndexReader as key...), because of the excessive readers created. With the one that is deletion aware, you can cache it based on the cache key.\r\n\r\nbq. I think this would be a good change - it would make eviction immediate instead of just when GC gets around to pruning the WeakHashMap. Can you open a separate issue and maybe work out a patch?\r\n\r\nSure, I will do it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-19T18:31:41.419+0000","updated":"2010-05-19T18:31:41.419+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869276","id":"12869276","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. Yes, but, this means that ConstantScoreQuery should basically not be cached when using NRT (even with using IndexReader as key...), because of the excessive readers created. With the one that is deletion aware, you can cache it based on the cache key.\r\n\r\nOK, now (finally) I understand the problem!\r\n\r\nYou want to be able to cache the original filter and reuse it even when deletions have changed, but then dynamically apply the deletions so they are properly enforced (rather than discarding the cache entry).\r\n\r\nSo... why not do this in CachingWrapper/SpanFilter, but, instead of discarding the cache entry when deletions must be enforced, we dynamically apply the deletions?  (I think we could use FilteredDocIdSet).\r\n\r\nReally... we need a more generic solution here (but, it's a much bigger change), where somehow in creating the scorer per-segment we dynamically determine who/where the deletions are enforced.  A Filter need not care about deletions if it's AND'd w/ a query that already enforces the deletions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-19T19:19:52.683+0000","updated":"2010-05-19T19:19:52.683+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869369","id":"12869369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"bq. So... why not do this in CachingWrapper/SpanFilter, but, instead of discarding the cache entry when deletions must be enforced, we dynamically apply the deletions? (I think we could use FilteredDocIdSet).\r\n\r\nYea, that would work well. You will need to somehow still know when to enable or disable this based on the filter you use (it should basically only be enabled ones that are passed to constant score... .\r\n\r\nbq. Really... we need a more generic solution here (but, it's a much bigger change), where somehow in creating the scorer per-segment we dynamically determine who/where the deletions are enforced. A Filter need not care about deletions if it's AND'd w/ a query that already enforces the deletions.\r\n\r\nAgreed. As I see it, caching based on IndexReader is key in Lucene, and with NRT, it should feel the same way as it is without it. NRT should not change the way you build your system.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-19T21:47:42.561+0000","updated":"2010-05-19T21:47:42.561+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869562","id":"12869562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nbq. So... why not do this in CachingWrapper/SpanFilter, but, instead of discarding the cache entry when deletions must be enforced, we dynamically apply the deletions? (I think we could use FilteredDocIdSet).\r\n\r\nYea, that would work well. You will need to somehow still know when to enable or disable this based on the filter you use (it should basically only be enabled ones that are passed to constant score... {quote}\r\n\r\nOK I'll take that approach on next iter.\r\n\r\nBut: I think this may need to be enabled in other cases where the\r\nfilter is used (ie not only CSQ).  Sure, CSQ is the one example we\r\nhave today, where if you pass a Filter that ignores \"recent\" deletions\r\nyou'll be in trouble... but who knows what other uses of a Filter\r\nmight trip up on this intentional cache-incoherence we're introducing.\r\n\r\nbq. Agreed. As I see it, caching based on IndexReader is key in Lucene, and with NRT, it should feel the same way as it is without it. NRT should not change the way you build your system.\r\n\r\nWell... NRT and up-to-date deletions will always present a challenge.\r\n\r\nReally, this tradeoff we are making here, where a cached filter can be\r\nset to either 1) ignore new deletions, 2) discard its cache entry and\r\nfully regenerate itself, or 3) dynamically intersect the deletions, is\r\nsimilar to the discussions we've had about just how an NRT segment\r\nreader should enforce recent deletions.\r\n\r\nIe, ignoring option 1 (which of course gives the best perf), option 2,\r\nwhile making a reopen more costly, gets you the best search\r\nperformance (since only one bit set is checked during searches).\r\n\r\nOption 3 makes reopens much faster, but then search peformance takes a\r\nhit (since you're checking 2 bit sets).\r\n\r\nOption 2 is analogous to how Lucene now handles the per-segment\r\ndeleted docs bit vector (it's fully recreated on each reopen), while\r\noption 3 is analogous to how Zoie handles deletions (new deletions are\r\ndynamically applied to all search hits).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-20T11:05:07.829+0000","updated":"2010-05-20T11:05:07.829+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12869779","id":"12869779","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"body":"Hi Mike, \r\n\r\nFirst, I opened and attached a patch regarding the Cache eviction listeners to IndexReader: https://issues.apache.org/jira/browse/LUCENE-2474, tell me what you think.\r\n\r\nRegarding your last comment, I agree. Though, trying to streamline its usage in terms of having all built in components and possible extensions work well with it make sense. Thats what you suggest in with the filtered doc set, which is cool.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kimchy","name":"kimchy","emailAddress":"kimchy at mac dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shay Banon","active":true},"created":"2010-05-20T21:32:01.671+0000","updated":"2010-05-20T21:32:01.671+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12870205","id":"12870205","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK, I attached another go at this.\r\n\r\nI added a DeletesMode enum to CachingWrapperFilter: IGNORE (default)\r\nmeans just re-use the cache entry when the reader is reopened w/ new\r\ndeletions; RECACHE (fully recreate the cache entry); DYNAMIC (re-use\r\nthe cache entry, but use FilteredDocIdSet to dynamically re-filter it\r\nagainst the current deletions).\r\n\r\nI did the same for CachingSpanFilter, but I don't allow DYNAMIC for\r\nthat one -- I punted on it because it's kinda hairy (I'd have to copy\r\nthe List<PositionInfo> and remove entries corresponding to deleted\r\ndocs).  IGNORE and RECACHE are allowed.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-21T22:37:15.065+0000","updated":"2010-05-21T22:37:15.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464738/comment/12873417","id":"12873417","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"backport","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-05-30T12:32:59.331+0000","updated":"2010-05-30T12:32:59.331+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2468/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04qef:"}}