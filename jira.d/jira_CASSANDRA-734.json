{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12446409","self":"https://issues.apache.org/jira/rest/api/latest/issue/12446409","key":"CASSANDRA-734","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310865","id":"12310865","key":"CASSANDRA","name":"Cassandra","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310865&avatarId=12034","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310865&avatarId=12034","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310865&avatarId=12034","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310865&avatarId=12034"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11961","id":"11961","description":"Apache Cassandra related projects","name":"Cassandra"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314040","id":"12314040","description":"","name":"0.5","archived":false,"released":true,"releaseDate":"2010-01-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2010-01-23 04:38:21.865","customfield_12312322":null,"customfield_12312323":null,"customfield_12310222":"10002_*:*_1_*:*_219504371_*|*_1_*:*_1_*:*_257277_*|*_5_*:*_1_*:*_0","customfield_12310420":"19843","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-01-25T16:55:41.399+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-734/watchers","watchCount":0,"isWatching":false},"created":"2010-01-23T03:52:59.751+0000","customfield_10022":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12311124":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-01-25T16:55:41.397+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312978","id":"12312978","name":"Core"}],"timeoriginalestimate":null,"description":"Table.open's lock is used around the Map#put method call but not the #get. This makes it a source of spurious bugs. The attached patch synchronizes the entire Table.open method and removes the unused createLock static.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12431272","id":"12431272","filename":"734-nbhm.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-25T03:12:46.571+0000","size":2384,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12431272/734-nbhm.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12431190","id":"12431190","filename":"broken_lock_in_table_open.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-23T03:53:23.751+0000","size":1697,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12431190/broken_lock_in_table_open.patch"}],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"91551","summary":"Table.open has a broken lock in it","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"customfield_12311420":null,"customfield_12311421":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":13,"total":13,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804010","id":"12804010","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I don't think introducing full synchronized lock into a method called for basically every operation is a good idea.  We could use nonblockinghashmap for the container instead, which would take care of the get problem.  (we could just use NBHM with putIfAbsent if Table creation weren't something we want to avoid doing twice for the same keyspace in case of a race.)  what do Real Java Programmers do for \"singleton cache?\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-23T04:38:21.865+0000","updated":"2010-01-23T04:38:21.865+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804225","id":"12804225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"To start with, synchronization being slow is mostly a scary story left around from the bad old days of Java 1.3 and lower. http://www.ibm.com/developerworks/java/library/j-jtp04223.html\r\n\r\nSecond, any thing we build instead of using synchronized will be nearly exactly duplicating synchronized's behavior except broken and slower. There seems to be nothing that compiles down to just \"lock around this get and, if that's null, create this other thing and then put it in there\" in Java bytecode. The only other way to make this work is load all the tables at boot time. Which, of course, is a non-starter. However, synchronized does say \"all this work has to be done together\" which fixes our bug and has years of JVM hackers behind it making it as fast as possible. \r\n\r\nThird, we should be aiming as much for correctness as we can. A Cassandra node is eventually consistent, but its codebase is not. Fixing a bug that will, eventually, kick Twitter and Digg and Rackspace's ass now is better than holding off until a \"faster\" way can be found in some possible future where unicorns live and candy mountains are not just scary things in creepy guys basements.\r\n\r\nsynchronized does a bang up job of fixing this bug now and doing so in a way that is more performant than other \"correct\" ways.\r\n\r\nAfter this patch goes in, we should be re-evaluate all of these calls to Table.open(), though. I'm going to bet that in most cases it would make more sense for the client object to hold on to a reference to the Table if they need it and not let go every time like they do currently after the Table.open() call goes out of scope.\r\n\r\nEdited for a friggin' \"it's\" grammar problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-24T10:50:50.526+0000","updated":"2010-01-24T10:59:47.828+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804238","id":"12804238","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gdusbabek","name":"gdusbabek","emailAddress":"gdusbabek at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=gdusbabek&avatarId=10070","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gdusbabek&avatarId=10070","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gdusbabek&avatarId=10070","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gdusbabek&avatarId=10070"},"displayName":"Gary Dusbabek","active":true},"body":"> The only other way to make this work is load all the tables at boot time.\r\nSee CassandraDaemon.setup().\r\n\r\nWhy not this:\r\n1.  Create a synchronized initTables() method that is called from CD, that sets an initDone flag and blows up it is ever called again.\r\n2.  Take the locking  and synchronicity out of Table.open() (there really is no point as long as the backing collection is unmodifiable), and turn it into a purely 'getter'-type method.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gdusbabek","name":"gdusbabek","emailAddress":"gdusbabek at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=gdusbabek&avatarId=10070","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gdusbabek&avatarId=10070","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gdusbabek&avatarId=10070","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gdusbabek&avatarId=10070"},"displayName":"Gary Dusbabek","active":true},"created":"2010-01-24T12:54:40.144+0000","updated":"2010-01-24T12:54:40.144+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804279","id":"12804279","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"Sweet. I hadn't seen that call to  Table.getAllTableNames() in CD.setup(). If the laziness constraint can be relaxed, that's fine by me! I'll write up a patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-24T19:00:24.733+0000","updated":"2010-01-24T19:00:24.733+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804281","id":"12804281","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"> synchronization being slow is mostly a scary story left around from the bad old days of Java 1.3 and lower\r\n\r\nThat's true for _uncontested_ syncs but that is not what we have here.  The JVM isn't going to be able to optimize those away, and it's going to be several orders of magnitude slower than w/o the sync.\r\n\r\n> any thing we build instead of using synchronized will be nearly exactly duplicating synchronized's behavior except broken and slower\r\n\r\nNBHM is lock-free (which actually means it uses lower-level CAS which is much cheaper).\r\n\r\n> we should be aiming as much for correctness as we can\r\n\r\nI never said otherwise.  But let's do it without causing unnecessary performance regressions.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-24T19:11:44.090+0000","updated":"2010-01-24T19:21:56.145+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804282","id":"12804282","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"> Take the locking and synchronicity out of Table.open() \r\n\r\nwouldn't we just have to undo that for CASSANDRA-44?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-24T19:14:52.730+0000","updated":"2010-01-24T19:14:52.730+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804294","id":"12804294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"bq. NBHM is lock-free (which actually means it uses lower-level CAS which is much cheaper). \r\n\r\nHow does a NBHM solve the problem get-and-then-put-but-only-instantiate-the-object-at-all-if-get-is-null? I haven't seen any docs on get with conditional set and conditional instantiation.\r\n\r\n\r\nbq. wouldn't we just have to undo that for CASSANDRA-44?\r\n\r\nNot if we do the initTable work, and then later turn it in a NBHM. With initTable in place, and we go to update a Table, we would only have to do a put without the conditional instantiation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-24T20:17:24.933+0000","updated":"2010-01-24T20:19:46.775+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804296","id":"12804296","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"bq. Not if we do the initTable work, and then later turn it in a NBHM. With initTable in place, and we go to update a Table, we would only have to do a put without the conditional instantiation.\r\n\r\n(And it seems to me that if it's possible to construct a Table in more than one thread in our solution to CASSANDRA-44, we're very likely solving CASSANDRA-44 wrong.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-24T20:43:26.098+0000","updated":"2010-01-24T20:43:26.098+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804340","id":"12804340","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"> How does a NBHM solve the problem get-and-then-put-but-only-instantiate-the-object-at-all-if-get-is-null?\r\n\r\nIt doesn't: it solves the problem of doing get() on a thread-unsafe object while remaining high performance.  I'm saying, we can use Table.open in close to its current form by replacing the current HashMap w/ a NBHM, and continuing to use a synchronized block for if the get() is null.\r\n\r\n> Not if we do the initTable work, and then later turn it in a NBHM.\r\n\r\nTrue enough, but is that then really simpler than just fixing Table.open?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-25T01:15:28.732+0000","updated":"2010-01-25T01:16:10.844+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804351","id":"12804351","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"bq. It doesn't: it solves the problem of doing get() on a thread-unsafe object while remaining high performance. I'm saying, we can use Table.open in close to its current form by replacing the current HashMap w/ a NBHM, and continuing to use a synchronized block for if the get() is null. \r\n\r\nYou've forgotten about instantiating the Table twice. One thread notices that the get is null and in another thread the same happens before the first thread manages to do a put.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-25T02:54:59.228+0000","updated":"2010-01-25T02:54:59.228+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804353","id":"12804353","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"that's why you have to do the second check once you synchronize.  it's a double-checked locking variant, using NBHM to provide thread safety on the initial get() [like you would with volatile, in standard non-broken DCL]\r\n\r\npatch attached since i'm clearly not explaining this very well :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-25T03:12:46.590+0000","updated":"2010-01-25T03:12:46.590+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804376","id":"12804376","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"body":"Works for me. Must have missed the last of your sentence.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jmhodges","name":"jmhodges","emailAddress":"jeff at somethingsimilar dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Hodges","active":true},"created":"2010-01-25T04:49:19.394+0000","updated":"2010-01-25T04:49:19.394+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12446409/comment/12804595","id":"12804595","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"committed to 0.5 branch (for 0.5.1) and trunk","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-01-25T16:55:41.396+0000","updated":"2010-01-25T16:55:41.396+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-734/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0g0qv:"}}