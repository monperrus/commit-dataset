{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12333383","self":"https://issues.apache.org/jira/rest/api/latest/issue/12333383","key":"LUCENE-565","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310854","id":"12310854","description":"","name":"2.1","archived":false,"released":true,"releaseDate":"2007-02-17"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2006-05-09 09:24:34.0","customfield_12312323":null,"customfield_12310420":"13185","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_23170707022_*|*_6_*:*_1_*:*_0_*|*_5_*:*_2_*:*_1966938967_*|*_4_*:*_1_*:*_305412383","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2007-02-13T10:56:09.721+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-565/watchers","watchCount":7,"isWatching":false},"created":"2006-05-09T06:39:35.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"9.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[],"issuelinks":[{"id":"12313395","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12313395","type":{"id":"10020","name":"Cloners","inward":"is cloned by","outward":"is a clone of","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"},"inwardIssue":{"id":"12349945","key":"LUCENE-672","self":"https://issues.apache.org/jira/rest/api/2/issue/12349945","fields":{"summary":"new merge policy","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/2","id":"2","description":"A new feature of the product, which has yet to be developed.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png","name":"New Feature","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2007-02-27T18:10:33.370+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310232","id":"12310232","name":"core/index","description":"issues with indexing code"}],"timeoriginalestimate":null,"description":"Today, applications have to open/close an IndexWriter and open/close an\nIndexReader directly or indirectly (via IndexModifier) in order to handle a\nmix of inserts and deletes. This performs well when inserts and deletes\ncome in fairly large batches. However, the performance can degrade\ndramatically when inserts and deletes are interleaved in small batches.\nThis is because the ramDirectory is flushed to disk whenever an IndexWriter\nis closed, causing a lot of small segments to be created on disk, which\neventually need to be merged.\n\nWe would like to propose a small API change to eliminate this problem. We\nare aware that this kind change has come up in discusions before. See\nhttp://www.gossamer-threads.com/lists/lucene/java-dev/23049?search_string=indexwriter%20delete;#23049\n. The difference this time is that we have implemented the change and\ntested its performance, as described below.\n\nAPI Changes\n-----------\nWe propose adding a \"deleteDocuments(Term term)\" method to IndexWriter.\nUsing this method, inserts and deletes can be interleaved using the same\nIndexWriter.\n\nNote that, with this change it would be very easy to add another method to\nIndexWriter for updating documents, allowing applications to avoid a\nseparate delete and insert to update a document.\n\nAlso note that this change can co-exist with the existing APIs for deleting\ndocuments using an IndexReader. But if our proposal is accepted, we think\nthose APIs should probably be deprecated.\n\nCoding Changes\n--------------\nCoding changes are localized to IndexWriter. Internally, the new\ndeleteDocuments() method works by buffering the terms to be deleted.\nDeletes are deferred until the ramDirectory is flushed to disk, either\nbecause it becomes full or because the IndexWriter is closed. Using Java\nsynchronization, care is taken to ensure that an interleaved sequence of\ninserts and deletes for the same document are properly serialized.\n\nWe have attached a modified version of IndexWriter in Release 1.9.1 with\nthese changes. Only a few hundred lines of coding changes are needed. All\nchanges are commented by \"CHANGE\". We have also attached a modified version\nof an example from Chapter 2.2 of Lucene in Action.\n\nPerformance Results\n-------------------\nTo test the performance our proposed changes, we ran some experiments using\nthe TREC WT 10G dataset. The experiments were run on a dual 2.4 Ghz Intel\nXeon server running Linux. The disk storage was configured as RAID0 array\nwith 5 drives. Before indexes were built, the input documents were parsed\nto remove the HTML from them (i.e., only the text was indexed). This was\ndone to minimize the impact of parsing on performance. A simple\nWhitespaceAnalyzer was used during index build.\n\nWe experimented with three workloads:\n  - Insert only. 1.6M documents were inserted and the final\n    index size was 2.3GB.\n  - Insert/delete (big batches). The same documents were\n    inserted, but 25% were deleted. 1000 documents were\n    deleted for every 4000 inserted.\n  - Insert/delete (small batches). In this case, 5 documents\n    were deleted for every 20 inserted.\n\n                                current       current          new\nWorkload                      IndexWriter  IndexModifier   IndexWriter\n-----------------------------------------------------------------------\nInsert only                     116 min       119 min        116 min\nInsert/delete (big batches)       --          135 min        125 min\nInsert/delete (small batches)     --          338 min        134 min\n\nAs the experiments show, with the proposed changes, the performance\nimproved by 60% when inserts and deletes were interleaved in small batches.\n\n\nRegards,\nNing\n\n\nNing Li\nSearch Technologies\nIBM Almaden Research Center\n650 Harry Road\nSan Jose, CA 95120","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10120","value":"Patch Available","id":"10120"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"27480","summary":"Supporting deleteDocuments in IndexWriter (Code and Performance Results Provided)","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":59,"total":59,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12378557","id":"12378557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"Can you please attach diffs rather than complete files?  The diffs should not not contain CHANGE comments.  To generate diffs, check Lucene out of Subversion, make your changes, then, from the Lucene trunk, run something like 'svn diff > my.patch'.  New files should first be added with 'svn add' so that they're included in the diff.  Thanks!\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2006-05-09T09:24:34.000+0000","updated":"2006-05-09T09:24:34.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12378673","id":"12378673","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Here is the diff file of IndexWriter.java.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-05-10T00:52:39.000+0000","updated":"2006-05-10T00:52:39.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12419396","id":"12419396","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=otis","name":"otis","emailAddress":"otis at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=otis&avatarId=15859","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=otis&avatarId=15859","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=otis&avatarId=15859","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=otis&avatarId=15859"},"displayName":"Otis Gospodnetic","active":true},"body":"I took a look at the patch and it looks good to me (anyone else had a look)?\r\nUnfortunately, I couldn't get the patch to apply :(\r\n\r\n$ patch -F3 < IndexWriter.patch\r\n(Stripping trailing CRs from patch.)\r\npatching file IndexWriter.java\r\nHunk #1 succeeded at 58 with fuzz 1.\r\nHunk #2 succeeded at 112 (offset 2 lines).\r\nHunk #4 succeeded at 504 (offset 33 lines).\r\nHunk #6 succeeded at 605 with fuzz 2 (offset 57 lines).\r\nmissing header for unified diff at line 259 of patch\r\n(Stripping trailing CRs from patch.)\r\ncan't find file to patch at input line 259\r\nPerhaps you should have used the -p or --strip option?\r\nThe text leading up to this was:\r\n...\r\n...\r\n...\r\nFile to patch: IndexWriter.java\r\npatching file IndexWriter.java\r\nHunk #1 FAILED at 802.\r\nHunk #2 succeeded at 745 with fuzz 2 (offset -131 lines).\r\n1 out of 2 hunks FAILED -- saving rejects to file IndexWriter.java.rej\r\n\r\n\r\nWould it be possible for you to regenerate the patch against IndexWriter in HEAD?\r\n\r\nAlso, I noticed ^Ms in the patch, but I can take care of those easily (dos2unix).\r\n\r\nFinally, I noticed in 2-3 places that the simple logging via \"infoStream\" variable was removed, for example:\r\n-    if (infoStream != null) infoStream.print(\"merging segments\");\r\n\r\nPerhaps this was just an oversight?\r\n\r\nLooking forward to the new patch. Thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=otis","name":"otis","emailAddress":"otis at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=otis&avatarId=15859","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=otis&avatarId=15859","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=otis&avatarId=15859","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=otis&avatarId=15859"},"displayName":"Otis Gospodnetic","active":true},"created":"2006-07-06T10:25:15.000+0000","updated":"2006-07-06T10:25:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12419580","id":"12419580","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"For an overview of my changes, I'll repeat some of what I said in\r\nmy earlier e-mail (see http://www.gossamer-threads.com/lists/lucene/java-dev/35143),\r\nthen add more detail about specific coding changes.\r\n\r\nOverview\r\n--------\r\nToday, applications have to open/close an IndexWriter and\r\nopen/close an IndexReader directly or indirectly (via IndexModifier)\r\nin order to handle a mix of inserts and deletes. This performs well\r\nwhen inserts and deletes come in fairly large batches. However, the\r\nperformance can degrade dramatically when inserts and deletes are\r\ninterleaved in small batches. This is because the ramDirectory is\r\nflushed to disk whenever an IndexWriter is closed, causing a lot of\r\nsmall segments to be created on disk, which eventually need to be\r\nmerged.\r\n\r\nAPI Changes\r\n-----------\r\nWe propose adding a \"deleteDocuments(Term term)\" method to\r\nIndexWriter. Using this method, inserts and deletes can be\r\ninterleaved using the same IndexWriter.\r\n\r\nCoding Changes\r\n--------------\r\nCoding changes are localized to IndexWriter. Internally, the new\r\ndeleteDocuments() method works by buffering the terms to be deleted.\r\nDeletes are deferred until the ramDirectory is flushed to disk,\r\neither because it becomes full or because the IndexWriter is closed.\r\nUsing Java synchronization, care is taken to ensure that an\r\ninterleaved sequence of inserts and deletes for the same document\r\nare properly serialized. \r\n\r\nFor simplicity of explanation, let's assume the index resides in a\r\ndisk-based directory.\r\n\r\nChanges to the IndexWriter variables:\r\n  - segmentInfos used to store the info of all segments (on disk\r\n    or in ram). Now it only stores the info of segments on disk.\r\n  - ramSegmentInfos is a new variable which stores the info of just\r\n    ram segments.\r\n  - bufferedDeleteTerms is a new variable which buffers delete terms\r\n    before they are applied.\r\n  - maxBufferedDeleteTerms is similar to maxBufferedDocs. It controls\r\n    the max number of delete terms that can be buffered before they\r\n    must be flushed to disk.\r\n\r\nChanges to IndexWriter methods:\r\n  - addDocument()\r\n    The info of the new ram segment is added to ramSegmentInfos.\r\n  - deleteDocuments(), batchDeleteDocuments()\r\n    The terms are added to bufferedDeleteTerms. bufferedDeleteTerms\r\n    also records the current number of documents buffered in ram, so\r\n    the delete terms can be applied to ram segments as well as\r\n    the segments on disk.\r\n  - flushRamSegments()\r\n    Step 1: Apply buffered delete terms to all the segments on disk.\r\n    Step 2: Merge all the ram segments into one segment on disk.\r\n    Step 3: Apply buffered delete terms to the new segment appropriately,\r\n            so that a delete term is only applied to the documents\r\n            buffered before it, but not to those buffered after it.\r\n    Step 4: Clean up and commit the change to the index (both the new\r\n            segment and the .del files if it applies).\r\n  - maybeMergeSegments()\r\n    Before, a flush would be triggered only if enough documents were\r\n    buffered. Now a flush is triggered if enough documents are\r\n    buffered OR if enough delete terms are buffered.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-07-07T01:46:45.000+0000","updated":"2006-07-07T01:46:45.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12419605","id":"12419605","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=otis","name":"otis","emailAddress":"otis at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=otis&avatarId=15859","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=otis&avatarId=15859","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=otis&avatarId=15859","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=otis&avatarId=15859"},"displayName":"Otis Gospodnetic","active":true},"body":"Thanks for all the information about coding changes, that makes it easier to understand the diff.\r\nIdeally this will become comments in the new diff, which I can commit.\r\n\r\nYonik mentioned this in email.  It does sound like a better place for this might be in a higher level class.  IndexWriter would really not be just a writer/appender once delete functionality is added to it, even if it's the IndexReaders behind the scenes doing the work.  So if you are going to be redoing the patch, consider this.\r\n\r\nPerhaps IndexModifier methods should be deprecated and it should get a new/your API?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=otis","name":"otis","emailAddress":"otis at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=otis&avatarId=15859","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=otis&avatarId=15859","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=otis&avatarId=15859","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=otis&avatarId=15859"},"displayName":"Otis Gospodnetic","active":true},"created":"2006-07-07T04:31:58.000+0000","updated":"2006-07-07T04:31:58.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12419942","id":"12419942","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Hi Otis,\r\n\r\nI've attached two patch files:\r\n  - IndexWriter.July09.patch is an updated version of the old patch.\r\n  - NewIndexModifier.July09.patch makes minimal changes to IndexWriter and puts new functionalities in a new class called NewIndexModifier. I didn't name it IndexModifier because the two are unrelated and I don't want a diff of the two.\r\n\r\nAll unit test succeeded except the following one:\r\n    [junit] Testcase: testIndex(org.apache.lucene.index.TestIndexModifier):\tFAILED\r\n    [junit] expected:<3> but was:<4>\r\n    [junit] junit.framework.AssertionFailedError: expected:<3> but was:<4>\r\n    [junit] \tat org.apache.lucene.index.TestIndexModifier.testIndex(TestIndexModifier.java:67)\r\n\r\nHowever, the unit test has a problem, not the patch: IndexWriter's docCount() does not tell the actual number of documents in an index, only IndexReader's numDocs() does. For example, in a similar test below, where 10 documents are added, then 1 deleted, then 2 added, the last call to docCount() returns 12, not 11, with or without the patch.\r\n\r\n  public void testIndexSimple() throws IOException {\r\n    Directory ramDir = new RAMDirectory();\r\n    IndexModifier i = new IndexModifier(ramDir, new StandardAnalyzer(), true);\r\n    // add 10 documents initially\r\n    for (int count = 0; count < 10; count++) {\r\n       i.addDocument(getDoc());\r\n    }\r\n    i.flush();\r\n    i.optimize();\r\n    assertEquals(10, i.docCount());\r\n    i.deleteDocument(0);\r\n    i.flush();\r\n    assertEquals(9, i.docCount());\r\n    i.addDocument(getDoc());\r\n    i.addDocument(getDoc());\r\n    i.flush();\r\n    assertEquals(12, i.docCount());\r\n  }\r\n\r\nThe reason for the docCount() difference in the unit test (which does not affect the correctness of the patch) is that flushRamSegments() in the patch merges all and only the segments in ram and write to disk, whereas the original flushRamSegments() merges not only the segments in ram but *sometimes* also one segment from disk (see in that function the comment \"// add one FS segment?\").\r\n\r\nRegards,\r\nNing","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-07-10T10:38:37.000+0000","updated":"2006-07-10T10:38:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12422007","id":"12422007","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Hopefully, third time's a charm. :-)\r\n\r\nI rewrote IndexWriter in such a way that semantically it's the same as before, but it provides extension points so that delete-by-term, delete-by-query, and more functionalities can be easily supported in a subclass. NewIndexModifier is such a subclass that supports delete-by-term.\r\n\r\nHere is an overview of the changes:\r\n\r\nChanges to IndexWriter\r\nChanges to IndexWriter variables:\r\n  - segmentInfos used to store the info of all segments (on disk or in ram). Now it\r\n    only stores the info of segments on disk.\r\n  - ramSegmentInfos is a new variable which stores the info of just ram segments.\r\nChanges to IndexWriter methods:\r\n  - addDocument()\r\n    The info of the new ram segment is added to ramSegmentInfos.\r\n  - maybeMergeSegments()\r\n    toFlushRamSegments() is called at the beginning to decide whether a flush should take place.\r\n  - flushRamSegments()\r\n    doAfterFlushRamSegments() is called after all ram segments are merged and flushed to disk.\r\n\r\nNewIndexModifier\r\nNew variables:\r\n  - bufferedDeleteTerms is a new variable which buffers delete terms\r\n    before they are applied.\r\n  - maxBufferedDeleteTerms is similar to maxBufferedDocs. It controls\r\n    the max number of delete terms that can be buffered before they\r\n    must be flushed to disk.\r\nOverloaded/new methods:\r\n  - deleteDocuments(), batchDeleteDocuments()\r\n    The terms are added to bufferedDeleteTerms. bufferedDeleteTerms\r\n    also records the current number of documents buffered in ram,\r\n    so the delete terms can be applied to ram segments as well as\r\n    the segments on disk.\r\n  - toFlushRamSegments()\r\n    In IndexWriter, a flush would be triggered only if enough documents were\r\n    buffered. Now a flush is triggered if enough documents are\r\n    buffered OR if enough delete terms are buffered.\r\n  - doAfterlushRamSegments()\r\n    Step 1: Apply buffered delete terms to all the segments on disk.\r\n    Step 2: Apply buffered delete terms to the new segment appropriately,\r\n            so that a delete term is only applied to the documents\r\n            buffered before it, but not to those buffered after it.\r\n    Step 3: Clean up the buffered delete terms.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-07-19T00:32:20.000+0000","updated":"2006-07-19T00:32:20.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12428035","id":"12428035","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I tried out this patch (July18), and have a few comments...\r\n\r\nFirst, it is nice to be able to add/remove documents with no need to care for switching between readers and writers, and without worrying for performance issues as result of that switching. I did not test for performance yet.\r\n\r\nThis post is quite long, so here is an outline...\r\n(1) Compile error in test code\r\n(2) Failing tests - is this patch actually fixing a bug in current flushRamSegments()?\r\n(3) Additional tests I ran\r\n(4) Javadocs remarks\r\n(5) deleteDocument(int doc) not implemented\r\n(6) flush() not implemented\r\n(7) Method name - batchDeleteDocuments(Term[]) \r\n(8) Class name and placement + What's Next for this patch\r\n\r\n------------ (1) Compile error in test code \r\nThe new TestWriterDelete does not reflect recent name change from IndexWriter to NewIndexModifier. Easily fixed by renaming accordingly in that file.\r\n\r\n------------ (2) Failing tests - does this patch also fix a bug in current flushRamSegments()?\r\n\"ant test\" has one failure: TestIndexModifier.testIndex().\r\nThis is the same issue that Ning described above. However I think it exposes a bug in current flushRamSegments(): when an index with 1 segment on disk that has 2 documents, one of which is deleted, and 1 segment in memory, is closed, this method decides to merge - prematurely - the two segments into one. This wrong behavior (if I understand things correctly) is - by \"mistake\" - causing TestIndexModifier.testIndex() to pass in the current implementation of flushRamSegments(). But this comes with the cost of too many merges. If one is interleaving adds and deletes this bug would become costly. I will post a separate question on this to the dev forum, to discuss if this is indeed a bug.\r\n\r\n------------ (3) Additional tests I ran \r\nI wanted to verify that all existing functions (well, at least tested ones..) are working with the new class (NewIndexModifier). So I temporarily renamed the existing IndexWriter to IndexWriter0, and renamed NewIndexModifier to IndexWriter (now extending IndexWriter0). For compiling, now, also had to temporarily modify args from IndexWriter to IndexWriter0 in 3 classes - DocumentWriter, SegmentMerger, and also from NewIndexModifier to IndexWriter in the new TestWriteDelete. (Note again: these modifications are temporary, just for the sake of testing this new class as if it was the new IndexWriter, which it is not.) Now all the tests were using the new class instead of the original IndexWriter. \r\n\r\nAll tests passed, except for TestIndexModifier.testIndex() - this is the same failure as above - so, no problem detected in new class.\r\n\r\n------------ (4) Javadocs Remarks\r\nCurrent Javadocs for the new class focus on changes to the implementation. I think this description of implementation changes should be made regular Java comments (for developers), and instead should add a shorter javadoc that describes the API for users, and the implications on behavior as result of buffering deletes.\r\n\r\n------------ (5) deleteDocument(int doc) not implemented\r\nOriginal IndexModifier has a delete(int docs), the new class doesn't. At first this seems ok, since internal doc IDs are not accessible through index writer (unlike index reader). But IndexModifier also does not provide access to doc-ids. So why was delete-by-id enabled in IndexModifier? Perhaps there's a good reason for it, that I fail to see - if so, it should probably be added to the new class as well. Adding this is required if the new class would eventually replace the implementation of current index modifier.\r\n\r\n------------ (6) flush() not implemented\r\nOriginal IndexModifier has a flush(int docs) method, allowing to commit any pending changes. I think it would be nice to have this feature here as well, for forcing any pending changes (without caller having to modify the max-bufferred value). This would allow more control when using this class. Again, adding this is required if the new class would eventually replace the implementation of current index modifier.\r\n\r\n------------ (7) Method name - batchDeleteDocuments(Term[]) \r\nI would prefer it to be called deleteDocuments(Term[]), and let Java decide which method to call. Main reason is developers would expect that methods with similar semantics are named similarly, especially when using IDEs like Eclipse, where users type \"i.del\" and the IDE lets them select from all the methods that start with \"del\".\r\n\r\n------------ (8) Class name and placement + What's Next for this patch\r\nPerformance test should be added for this new class. Also, I did not code review the actual code changes to IndexWriter and the code of NewIndexModifier itself.\r\n\r\nIt seems to me that this class would be very useful for users, either as a new class or if it replaces the current implementation of IndexModifier. Latter would be possible only if the 2 missing methods mentioned above are added. In this case, the \"immediate delete\" behavior of current IndexModifier should be possible to achieve by users, by setting maxBefferedDeleteTerms to 1.\r\n\r\nOne disadvantage of this class vs. current IndexModifier is the ability to add access to further methods of IndexReader. With current IndexModifier this is very simple (though not always efficient) - just follow code template in existing methods, i.e. close writer/reader and open reader/writer as required. With the new class, exposing further methods of IndexReader would be more of a challenge. Perhaps having a multiReader on all segment readers can do. I am not sure to what extent this should be a consideration, so just bringing it up. \r\n\r\nSo, If this class replaces IndexModifier - fine. If not, how about calling it BufferredIndexWriter?\r\n\r\n- Doron","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-08-15T04:19:35.000+0000","updated":"2006-08-15T04:19:35.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12429780","id":"12429780","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"I tested just the IndexWriter from this code base, it does not seem to work.  NewIndexModifier does work.  I simply used IndexWriter to create several documents and then search for them.  Nothing came back even though it seems something was written to disk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-22T19:00:37.000+0000","updated":"2006-08-22T19:00:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12430128","id":"12430128","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> Yes I am including this patch as it is very useful for increasing\r\n> the efficiency of updates as you described.  I will be conducting\r\n> more tests and will post any results.  Yes a patch for IndexWriter\r\n> will be useful so that the entirety of this build will work.\r\n> Thanks!\r\n\r\nI've attached a patch that works with the current code. The\r\nimplementation of IndexWriter and NewIndexModifier is the same as\r\nthe last patch. I removed the \"singleDocSegmentsCount\" optimization\r\nfrom this patch since my IndexWriter checks singleDocSegmentsCount\r\nby simply calling ramSegmentInfos.size().\r\n\r\nThis patch had evolved with the help of many good discussions\r\n(thanks!) since it came out in May. Here is the current state of\r\nthe patch:\r\n  - This patch aims at enabling users to do inserts and general\r\n    deletes (delete-by-term, and later delete-by-query) without\r\n    switching between writers and readers.\r\n  - The goal is achieved by rewritting IndexWriter in such a way\r\n    that semantically it's the same as before, but it provides\r\n    extension points so that delete-by-term, delete-by-query, and\r\n    more functionalities can be easily supported in a subclass.\r\n  - NewIndexModifier extends IndexWriter and supports delete-by-term\r\n    by simply overriding two methods: toFlushRamSegment() which\r\n    decides if a flush should happen, and doAfterFlushRamSegments()\r\n    which does proper work after a flush is done.\r\n\r\nSuggestions are welcome! Especially those that may help it get\r\ncommitted. :-)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-08-23T22:42:08.000+0000","updated":"2006-08-23T22:42:08.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12430130","id":"12430130","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Doron, thank you very much for the review! I want to briefly comment\r\non one of your comments:\r\n\r\n> (5) deleteDocument(int doc) not implemented\r\n\r\nI deliberately left that one out. This is because document ids are\r\nchanging as documents are deleted and segments are merged. Users\r\ndon't know exactly when segments are merged thus ids are changed\r\nwhen using IndexModifier. Thus I don't think it should be supported\r\nin IndexModifier at all.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-08-23T22:43:58.000+0000","updated":"2006-08-23T22:43:58.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12430361","id":"12430361","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"This IndexWriter seems to work.  Thanks.  Great work!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-24T23:42:37.000+0000","updated":"2006-08-24T23:42:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12430679","id":"12430679","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I ran a performance test for interleaved adds and removes - and compared between IndexModifier and NewIndexModifier. \r\n\r\nFew setups were tested, with a few combinations of \"consecutive adds before a delete takes place\", maxBufferredDocs, and \"number of total test iterations\", where each iteration does the conseutive adds and then does the deletes.\r\n\r\nEach setup ran in this order - orig indexModifier, new one, orig, new one, and the best time out of the two runs was used.\r\n\r\nResults indicate that NewIndexModifier is far faster for most setups. \r\n\r\nAttached is the performance test, the performance results, and the log of the run. The performance test is written as a Junit test, and it fails in case the original IndexModfier is faster than the new one by more than 1 second (smaller than 1 sec difference is considered noise). \r\n\r\nTest was run on XP (SP1) with IBM JDK 1.5.\r\n\r\nTest was first failing with \"access denied\" errors due to what seems to be an XP issue. So in order to run this test on XP (and probably other Windows platforms) the patch from http://issues.apache.org/jira/browse/LUCENE-665 should be applied first.\r\n\r\nIt is interesting to notice that in addition to preformance gain, NewIndexModifier seems less sensitive to \"access denied\" XP problems, because it closes/reopens readers and writers less frequently, and indeed, at least in my runs, these errors had to be bypassed (by the \"retry\" patch) only for the current index-modifier. \r\n\r\n- Doron\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-08-26T01:21:29.000+0000","updated":"2006-08-26T01:21:29.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431342","id":"12431342","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"It seems this writer works, but then some mysterious happens to the index and the searcher can no longer read it.  I am using this in conjunction with Solr.  The index files look ok, however a search will return nothing.  I have seen this repeatedly over about 1 weeks time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-29T19:55:25.000+0000","updated":"2006-08-29T19:55:25.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431354","id":"12431354","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Is it that results that were returned are suddenly (say after updates) not returned anymore (indicating something bad happened to existing index)?\r\n\r\nOr is it that the search does not reflect recent changes? \r\n\r\nI don't remember how often Solr closes and re-opens the writer/modifier...  with this patch a delete does not immediately cause a \"flush to disk\" - so flushes are controlled by closing the NewIndexModifier (and re-opening, since there no flush() method) and by the limits for max-bufferred-docs and max-bufferred-deletes. If this seems relevant to your case, what limits are in effect?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-08-29T20:20:37.000+0000","updated":"2006-08-29T20:20:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431400","id":"12431400","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"I started to flush the deletes after making them, which opens a new NewIndexModifier afterwards.  I still see the same thing.  I am starting off by deleting all documents by matching on a Term that all of them have.  Commit (reopen), then perform a batch addDocuments.  Then when a search is executed nothing is returned, and after an optimize the index goes down to 1K.  Seems like some peculiarity in NewIndexModifier.  Seems like the new documents are deleted even after they are added.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-29T22:48:22.000+0000","updated":"2006-08-29T22:48:22.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431419","id":"12431419","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Just to make sure on the scenario - are you - \r\n(1) using NewIndexModifier at all, or \r\n(2) just letting Solr use this IndexWriter (with the code changes introduced to ebable NewIndexModifier) instead of the Lucene's svn-head (or cetrain release) IndexModifier. \r\n\r\nAs is, Solr would not use NewIndexModifier or IndexModifier at all. \r\n\r\nFor case (2) above the bufferred deletes logic is not in effect at all. \r\n \r\nI wonder if it possibe to re-create this with a simple Lucene stand-alone (test) program rather than with Solr - it would be easier to analyze.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-08-30T00:16:21.000+0000","updated":"2006-08-30T00:16:21.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431423","id":"12431423","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"Good points... I've actually used both NewIndexModifier and the parent.  I've tried writing a new UpdateHandler, and incorporating the new IndexWriter into DirectUpdateHandler2.  I will create a non-Solr reproduction of the issue.  I guess it has something to do with ths doc ids being reused and so the new documents that are added are also marked as deleted as the number of documents would match almost exactly after the rebuild.  I am not an expert in regards to that aspect of Lucene.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-30T00:19:55.000+0000","updated":"2006-08-30T00:19:55.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431475","id":"12431475","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"Having trouble reproducing this.  Probably something in the other code.  Thanks for the help and the patch, I feel more confident in it now.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-30T05:40:27.000+0000","updated":"2006-08-30T05:40:27.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12431757","id":"12431757","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"body":"I figured out the problem, the Solr DirectUpdateHandler2 expects to delete only a certain number of documents specifically the oldest first in some cases by using TermDocs and deleting by the doc id.  NewIndexModifier deletes at the level of the SegmentReader however.  Any good way to do this?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jasonhusong","name":"jasonhusong","emailAddress":"jasonhusong at yahoo dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Rutherglen","active":true},"created":"2006-08-31T00:24:24.000+0000","updated":"2006-08-31T00:24:24.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12432046","id":"12432046","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Updated performance test results - perf-test-res2.JPG - in avarage, the new code is  *9*  times faster!\r\n\r\nWhat have changed? - in previous test I forgot to set max-buffered-deletes. \r\n\r\nAfter fixing so, I removed the test cases with max-buffer of 5,000 and up, because they consumed too much memory, and added more practical (I think) cases of 2000 and 3000. \r\n\r\nHere is a textual summary of the data in the attached image:\r\n\r\nmax buf add/del         10          10       100      1000     2000      3000\r\niterations                       1          10        100       100      200          300\r\nadds/iteration             10          10         10          10       10              10\r\ndels/iteration                 5            5           5            5        5                  5\r\norig time (sec)           0.13      0.86        9.57      8.88    22.74      44.01\r\nnew  time (sec)          0.20      0.95       1.74      1.30    2.16          3.08\r\nImprovement (sec)    -0.07    -0.09      7.83      7.58    20.58      40.94\r\nImprovement  (%)     -55%     -11%      82%      85%      90%      93%\r\n\r\nNote: for the first two cases new code is slower by 11% and 55%, but this is a very short test case, - the absolute difference here is less than 100ms, comparing to the other cases, where the difference is measured in seconds and 10's of seconds.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-09-01T05:11:43.000+0000","updated":"2006-09-01T05:11:43.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12432155","id":"12432155","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"> the new code is *9* times faster! \r\n\r\nThat's a bit apples-and-oranges :-)  I don't think people use IndexModifier when they need performance... they buffer things and do them in batches.\r\n\r\nIMO, performance of *existing* code using IndexWriter is more important, and what I would be interested in.  Say indexing 10000 documents to a RamDirectory with default settings (no deletes at all).  I haven't had a chance to review the new code, so I don't know if it's something to worry about or not.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-09-01T14:57:55.000+0000","updated":"2006-09-01T14:57:55.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12432164","id":"12432164","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"I believe this patch probably also changes the merge behavior.\r\nI think we need to discuss what exactly the new merge behavior is, if it's OK, what we think the index invariants should be (no more than x segments of y size, etc), and I'd like to see some code to test those invariants.\r\n\r\nKeep in mind the difficulty of getting the last IndexWriter patch correct (and that was a very minor patch to keep track of the number of buffered docs!)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-09-01T15:34:11.000+0000","updated":"2006-09-01T15:34:11.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12432216","id":"12432216","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"I agree - I also suspected it might change the merge behavior (and also had reflections from the repeated trials to have that simple Indexwriter buffered-docs patch correct...:-). \r\n\r\nGuess I just wanted to get a feeling if there is interest to include this patch before I delve into it too much - and the perf test was meant to see for my self if it really helps. I was a bit surprised that it speeds 9 times in an interleaving add/delete scenario. Guess this by itself now justifies delving into this patch, analyzing merge behavior as you suggest - will do - I think idealy should try this patch not to modify the merge behavior.\r\n\r\nAbout the test - l was trying to test what I thought is a realistic use scenario (max-buf, etc.) - I have a fixed version of the perf test that is easier to modify for different scenarios - can upload it here if there is interest.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2006-09-01T19:49:21.000+0000","updated":"2006-09-01T19:49:21.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12433463","id":"12433463","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"This patch features the new more robust merge policy. Reference on the new policy is at http://www.gossamer-threads.com/lists/lucene/java-dev/35147\r\n  - The patch passes all the tests except that one in TestIndexModifier (see an earlier comment on this issue).\r\n  - Since the test itself has a problem, it is fixed (one line change) and the patch passes the fixed test.\r\n  - A new test call TestIndexWriterMergePolicy is included which shows the robustness of the new merge policy.\r\n\r\n\r\nThe following is a detailed description of the new merge policy and its properties.\r\n\r\n Overview of merge policy:\r\n\r\n A flush is triggered either by close() or by the number of ram segments\r\n reaching maxBufferedDocs. After a disk segment is created by the flush,\r\n further merges may be triggered.\r\n\r\n LowerBound and upperBound set the limits on the doc count of a segment\r\n which may be merged. Initially, lowerBound is set to 0 and upperBound\r\n to maxBufferedDocs. Starting from the rightmost* segment whose doc count\r\n > lowerBound and <= upperBound, count the number of consecutive segments\r\n whose doc count <= upperBound.\r\n\r\n Case 1: number of worthy segments < mergeFactor, no merge, done.\r\n Case 2: number of worthy segments == mergeFactor, merge these segments.\r\n         If the doc count of the merged segment <= upperBound, done.\r\n         Otherwise, set lowerBound to upperBound, and multiply upperBound\r\n         by mergeFactor, go through the process again.\r\n Case 3: number of worthy segments > mergeFactor (in the case mergeFactor\r\n         M changes), merge the leftmost* M segments. If the doc count of\r\n         the merged segment <= upperBound, consider the merged segment for\r\n         further merges on this same level. Merge the now leftmost* M\r\n         segments, and so on, until number of worthy segments < mergeFactor.\r\n         If the doc count of all the merged segments <= upperBound, done.\r\n         Otherwise, set lowerBound to upperBound, and multiply upperBound\r\n         by mergeFactor, go through the process again.\r\n Note that case 2 can be considerd as a special case of case 3.\r\n\r\n This merge policy guarantees two invariants if M does not change and\r\n segment doc count is not reaching maxMergeDocs:\r\n B for maxBufferedDocs, f(n) defined as ceil(log_M(ceil(n/B)))\r\n      1: If i (left*) and i+1 (right*) are two consecutive segments of doc\r\n         counts x and y, then f(x) >= f(y).\r\n      2: The number of committed segments on the same level (f(n)) <= M.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-09-08T17:55:36.000+0000","updated":"2006-09-08T17:55:36.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12434041","id":"12434041","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Thanks for separating out the new merge policy Ning!  I'm reviewing the patch now...\r\nAssuming everything looks good (it does so far), I'm inclined to commit it.  I'm just giving a heads up to other lucene developers as this is a change in behavior to core lucene.\r\n\r\nI think the new merge policy is a positive change because:\r\n - flushing all ram segments separately from disk segments allows more efficient implementations of combination reader/writers (like buffered deletes) because docids won't change from the flush alone (a merge is needed to change ids)\r\n- flushing all buffered docs together leaves more optimization possibilities... something other than single-doc segments could be used to buffer in-mem docs in the future.\r\n- increases indexing performance in the presence of deleted documents or partially full segments (merges are minimized while the number of segments are maximized).\r\n - fixes worst-case behavior that can cause the number of segments to grow too large (way more than mergefactor)\r\n\r\nAre there any concerns?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-09-12T02:27:45.000+0000","updated":"2006-09-12T02:27:45.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12434751","id":"12434751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"I also did a quick indexing performance test w/ Solr:\r\n\r\nmaxBufferedDocs=100, mergeFactor=4, did 100K random overwriting adds in batches of 75 (75 docs added, dups deleted).\r\nIt was 12% faster with this new merge policy.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-09-14T17:50:06.000+0000","updated":"2006-09-14T17:50:06.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12436585","id":"12436585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"This is to update the delete-support patch after the commit of the new merge policy.\r\n  - Very few changes to IndexWriter.\r\n  - The patch passes all tests.\r\n  - A new test call TestNewIndexModifierDelete is added to show different scenarios when using delete methods in NewIndexModifier.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ninglili","name":"ninglili","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-09-21T17:15:15.000+0000","updated":"2006-09-21T17:15:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12447657","id":"12447657","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli%40us.ibm.com","name":"ningli@us.ibm.com","emailAddress":"ningli at us dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"\r\n   [[ Old comment, sent by email on Thu, 6 Jul 2006 07:53:35 -0700 ]]\r\n\r\nHi Otis,\r\n\r\nI will regenerate the patch and add more comments. :-)\r\n\r\nRegards,\r\nNing\r\n\r\n\r\n\r\n\r\n                                                                           \r\n             \"Otis Gospodnetic                                             \r\n             (JIRA)\"                                                       \r\n             <jira@apache.org>                                          To \r\n                                       ningli@almaden.ibm.com              \r\n             07/05/2006 11:25                                           cc \r\n             PM                                                            \r\n                                                                   Subject \r\n                                       [jira] Commented: (LUCENE-565)      \r\n                                       Supporting deleteDocuments in       \r\n                                       IndexWriter (Code and Performance   \r\n                                       Results Provided)                   \r\n                                                                           \r\n                                                                           \r\n                                                                           \r\n                                                                           \r\n                                                                           \r\n                                                                           \r\n\r\n\r\n\r\n\r\n    [\r\nhttp://issues.apache.org/jira/browse/LUCENE-565?page=comments#action_12419396\r\n ]\r\n\r\nOtis Gospodnetic commented on LUCENE-565:\r\n-----------------------------------------\r\n\r\nI took a look at the patch and it looks good to me (anyone else had a\r\nlook)?\r\nUnfortunately, I couldn't get the patch to apply :(\r\n\r\n$ patch -F3 < IndexWriter.patch\r\n(Stripping trailing CRs from patch.)\r\npatching file IndexWriter.java\r\nHunk #1 succeeded at 58 with fuzz 1.\r\nHunk #2 succeeded at 112 (offset 2 lines).\r\nHunk #4 succeeded at 504 (offset 33 lines).\r\nHunk #6 succeeded at 605 with fuzz 2 (offset 57 lines).\r\nmissing header for unified diff at line 259 of patch\r\n(Stripping trailing CRs from patch.)\r\ncan't find file to patch at input line 259\r\nPerhaps you should have used the -p or --strip option?\r\nThe text leading up to this was:\r\n...\r\n...\r\n...\r\nFile to patch: IndexWriter.java\r\npatching file IndexWriter.java\r\nHunk #1 FAILED at 802.\r\nHunk #2 succeeded at 745 with fuzz 2 (offset -131 lines).\r\n1 out of 2 hunks FAILED -- saving rejects to file IndexWriter.java.rej\r\n\r\n\r\nWould it be possible for you to regenerate the patch against IndexWriter in\r\nHEAD?\r\n\r\nAlso, I noticed ^Ms in the patch, but I can take care of those easily\r\n(dos2unix).\r\n\r\nFinally, I noticed in 2-3 places that the simple logging via \"infoStream\"\r\nvariable was removed, for example:\r\n-    if (infoStream != null) infoStream.print(\"merging segments\");\r\n\r\nPerhaps this was just an oversight?\r\n\r\nLooking forward to the new patch. Thanks!\r\n\r\nProvided)\r\n---------------------------------------------------------------------------------\r\n\r\n\r\na\r\nIndexWriter\r\nhttp://www.gossamer-threads.com/lists/lucene/java-dev/23049?search_string=indexwriter%20delete;#23049\r\n\r\nto\r\ndeleting\r\nversion\r\nusing\r\nbatches.\r\n\r\n--\r\nThis message is automatically generated by JIRA.\r\n-\r\nIf you think it was sent incorrectly contact one of the administrators:\r\n   http://issues.apache.org/jira/secure/Administrators.jspa\r\n-\r\nFor more information on JIRA, see:\r\n   http://www.atlassian.com/software/jira\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli%40us.ibm.com","name":"ningli@us.ibm.com","emailAddress":"ningli at us dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-11-07T06:22:40.000+0000","updated":"2006-11-07T06:22:40.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12452039","id":"12452039","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"With the recent commits to IndexWriter, this patch no longer applies cleanly. The 5 votes for this issue encourages\r\nme to submit yet another patch. :-) But before I do that, I'd like to briefly describe the design again and welcome all\r\nsuggestions that help improve it and help get it committed. :-)\r\n\r\nWith the new merge policy committed, the change to IndexWriter is minimal: three zero-or-one-line functions are\r\nadded and used.\r\n  1 timeToFlushRam(): return true if number of ram segments >= maxBufferedDocs and used in maybeFlushRamSegments()\r\n  2 anythingToFlushRam(): return true if number of ram segments > 0 and used in flushRamSegments()\r\n  3 doAfterFlushRamSegments(): do nothing and called in mergeSegments() if the merge is on ram segments\r\n\r\nThe new IndexModifier is a subclass of IndexWriter and only overwrites the three functions described above.\r\n  1 timeToFlushRam(): return true if number of ram segments >= maxBufferedDocs OR if number of buffered\r\n     deletes >= maxBufferedDeletes\r\n  2 anythingToFlushRam(): return true if number of ram segments > 0 OR if number of buffered deletes > 0\r\n  3 doAfterFlushRamSegments(): properly flush buffered deletes\r\n\r\nThe new IndexModifier supports all APIs from the current IndexModifier except one: deleteDocument(int doc).\r\nI had commented on this before:  \"I deliberately left that one out. This is because document ids are changing\r\nas documents are deleted and segments are merged. Users don't know exactly when segments are merged\r\nthus ids are changed when using IndexModifier.\"\r\n\r\nThis behaviour is true for both the new IndexModifier and the current IndexModifier. If this is preventing this\r\npatch from getting accepted, I'm willing to add this, but I will detail this in the Java doc so users of this function\r\nare aware of this behaviour.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-11-22T20:28:50.000+0000","updated":"2006-11-22T20:28:50.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12456887","id":"12456887","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"body":"What are the reasons to not add the NewIndexModifier to Lucene? This issue has already 6 votes, so it seems to be very popular amongst users (there is only one issue that has more votes). I can say that I'm using it for a couple of months already, it works flawlessly and made my life a lot easier ;-) \r\n\r\nI think the main objections were that too many changes to IndexWriter were made in the earliest versions of this patch, but with the new merge policy committed, most of the new code is in the new class NewIndexModifier whereas the changes to IndexWriter are minimal. \r\n\r\nSo I would like to encourage committer(s) to take another look, I think this would be a nice feature for the next Lucene release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"created":"2006-12-08T15:50:04.000+0000","updated":"2006-12-08T15:50:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457582","id":"12457582","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Lack of committer time... I've been busy enough that I've shied away from complexity and gravitated toward issues that I can handle in a single bite.  I'm on PTO until the end of the year, so I expect my time to be more compressed.\r\n\r\nTo minimize the number of reader open/closes on large persistent segments, I think the ability to apply deletes only before a merge is important.  That might add a 4th method: doBeforeMerge()\r\n\r\nIt would be nice to not have to continually open and close readers on segments that aren't involved in a merge.  Is there a way to do this?\r\n\r\nNing, please do produce another patch to the latest trunk (but you might want to wait until after LUCENE-702 is sorted out.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-12T05:20:41.000+0000","updated":"2006-12-12T05:20:41.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457758","id":"12457758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"> It would be nice to not have to continually open and close readers on segments\r\n>  that aren't involved in a merge. Is there a way to do this? \r\n\r\nHmmm, and what about segments that are involved in a merge?\r\nI assume it's a different reader that is used for deleting docs than used for merging, but it doesn't have to be...\r\n\r\nIf SegmentInfos had a cached reader, that seems like it would solve both problems.\r\nI haven't thought about it enough to figure out how doable it is though.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-12T15:10:01.000+0000","updated":"2006-12-12T15:10:01.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457764","id":"12457764","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"> If SegmentInfos had a cached reader, that seems like it would solve both problems.\r\n> I haven't thought about it enough to figure out how doable it is though.\r\n\r\nGood idea!  I think this could also be used by reopen (LUCENE-743 ) to re-use readers.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-12-12T15:17:53.000+0000","updated":"2006-12-12T15:17:53.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457789","id":"12457789","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"> Good idea! I think this could also be used by reopen (LUCENE-743 ) to re-use readers.\r\n\r\nYes, although  reopen() needs more support than what would be needed for this though (namely reference counting).\r\nOne thing to probably watch out for is to avoid making the single-doc ram segments more expensive.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-12T16:44:55.000+0000","updated":"2006-12-12T16:44:55.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457833","id":"12457833","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"On 12/12/06, Ning Li <ning.li.li@gmail.com> wrote:\r\n> > To minimize the number of reader open/closes on large persistent segments, I think the ability to apply deletes only before a merge is important.  That might add a 4th method: doBeforeMerge()\r\n> \r\n> I'm not sure I get this. Buffered deletes are only applied(flushed)\r\n> during ram flush. No buffered deletes are applied in the merges of\r\n> on-disk segments.\r\n\r\nWhat is important is to be able to apply deletes before any ids change.\r\nYou could do it after every new lowest-level segment is written to the index (the flush), *or* you could choose to do it before a merge of the lowest level on-disk segments.  If none of the lowest level segments have deletes, you could even defer the deletes until after all the lowest-level segments have been merged.  This makes the deletes more efficient since it goes from O(mergeFactor * log(maxBufferedDocs)) to O(log(mergeFactor*maxBufferedDocs))\r\n\r\nIf we can't reuse IndexReaders, this becomes more important.\r\n\r\nOne could perhaps choose to defer deletes until a segment with deleted docs is involved in a merge.\r\n \r\n> > It would be nice to not have to continually open and close readers on segments that aren't involved in a merge.  Is there a way to do this?\r\n> > If SegmentInfos had a cached reader, that seems like it would solve both problems.\r\n> > I haven't thought about it enough to figure out how doable it is though.\r\n> \r\n> This is a good idea! One concern, however, is that caching readers\r\n> will cause a larger memory footprint. Is it acceptable?\r\n\r\nAs I said, I haven't had time to think about it at all, but at the lowest level of reuse, it wouldn't increase the footprint at all in the event that deletes are deferred until a merge:\r\n\r\nThe specific scenario I'm thinking of is instead of\r\n  doAfterFlushRamSegments()\r\n    open readers\r\n    delete docs\r\n    close readers\r\n  segmentMerger()\r\n    open readers\r\n    merge segments\r\n    close readers\r\n\r\nIt would be:\r\n  doAfterFlushRamSegments()\r\n    open readers\r\n    delete docs\r\n  segmentMerger()\r\n    merge segments\r\n    close readers\r\n\r\nThis cutting out an additional open-close cycle.\r\nYou are right that other forms of reader caching could increase the footprint, but it's nice to have the option of trading some memory for performance.\r\n\r\nYet another strategy a subclass of IndexWriter could choose is to only apply deletes to segments actually involved in a merge.  Then the bigger segments in the index wouldn't continually have an reader opened and closed on them.... it could all be deferred until a close, or until there are too many deletes buffered.\r\n\r\nOf course NewIndexModifier doesn't have to impliment all these options to start with, but it would be nice if the extension hooks in IndexWriter could support them.\r\n\r\nWhew, this is why I was slow to get involved in this again :-)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-12T18:36:02.000+0000","updated":"2006-12-12T18:36:02.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457865","id":"12457865","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> *or* you could choose to do it before a merge of the lowest level on-disk\r\n> segments.  If none of the lowest level segments have deletes, you could\r\n> even defer the deletes until after all the lowest-level segments have been\r\n> merged.  This makes the deletes more efficient since it goes from\r\n> O(mergeFactor * log(maxBufferedDocs)) to O(log(mergeFactor*maxBufferedDocs))\r\n\r\nI don't think I like this semantics, though. With the semantics in the patch,\r\nan update can be easily supported. With this semantics, an insert is flushed\r\nyet a delete before the insert may or may not have been flushed.\r\n\r\n> You are right that other forms of reader caching could increase the footprint,\r\n> but it's nice to have the option of trading some memory for performance.\r\n\r\nAgree. It'd be nice to cache all readers... :-)\r\n\r\nThanks again for your comments. Enjoy your PTO!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-12T20:30:55.000+0000","updated":"2006-12-12T20:30:55.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12457885","id":"12457885","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Hmmm, I see your point... If deletes are deferred, a different reader could go and open the index and see the additions but not the deletions.\r\n\r\nCan the same thing happen with your patch (with a smaller window), or are deletes applied between writing the new segment and writing the new segments file that references it?  (hard to tell from current diff in isolation)\r\n\r\nAnyway, it's less of a problem if opening a new reader is coordinated with the writing.  That still does leave the crash scenario though.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-12T21:29:38.000+0000","updated":"2006-12-12T21:29:38.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12458158","id":"12458158","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> Can the same thing happen with your patch (with a smaller window), or are deletes applied between writing the new segment and writing the new segments file that references it?  (hard to tell from current diff in isolation)\r\n\r\nNo, it does not happen with the patch, no matter what the window size is.\r\nThis is because results of flushing ram - both inserts and deletes - are committed in the same transaction.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-13T15:34:00.000+0000","updated":"2006-12-13T15:34:00.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12458170","id":"12458170","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"> both inserts and deletes - are committed in the same transaction.\r\n\r\nOK, cool.  I agree that's the ideal default behavior.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-13T16:01:22.000+0000","updated":"2006-12-13T16:01:22.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12458174","id":"12458174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Minor question... in the places that you use Vector, is there a reason you aren't using ArrayList?\r\nAnd in methods that pass a Vector, that could be changed to a List .","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-12-13T16:07:15.000+0000","updated":"2006-12-13T16:07:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12458205","id":"12458205","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> Minor question... in the places that you use Vector, is there a reason you aren't using ArrayList? \r\n> And in methods that pass a Vector, that could be changed to a List . \r\n\r\nArrayList and List can be used, respectively.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-13T17:34:49.000+0000","updated":"2006-12-13T17:34:49.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12459482","id":"12459482","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=paul.elschot%40xs4all.nl","name":"paul.elschot@xs4all.nl","emailAddress":"paul dot j dot elschot at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=paul.elschot%40xs4all.nl&avatarId=23180","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paul.elschot%40xs4all.nl&avatarId=23180"},"displayName":"Paul Elschot","active":true},"body":"I'd like to give this a try over the upcoming holidays.\r\nWould it be possible to post a single patch?\r\nA single patch can be made by locally svn add'ing all new files\r\nand then doing an svn diff on all files involved from the top directory.\r\n\r\nRegards,\r\nPaul Elschot\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=paul.elschot%40xs4all.nl","name":"paul.elschot@xs4all.nl","emailAddress":"paul dot j dot elschot at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=paul.elschot%40xs4all.nl&avatarId=23180","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paul.elschot%40xs4all.nl&avatarId=23180"},"displayName":"Paul Elschot","active":true},"created":"2006-12-18T22:18:48.000+0000","updated":"2006-12-18T22:18:48.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12459490","id":"12459490","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Many versions of the patch were submitted as new code was committed to IndexWriter.java. For each version, all changes made were included in a single patch file.\r\n\r\nI removed all but the latest version of the patch. Even this one is outdated by the commit of LUCENE-701 (lock-less commits). I was waiting for the commit of LUCENE-702 before submitting another patch. LUCENE-702 was committed this morning. So I'll submit an up-to-date patch over the holidays.\r\n\r\nOn 12/18/06, Paul Elschot (JIRA) <jira@apache.org> wrote:\r\n> I'd like to give this a try over the upcoming holidays. \r\n\r\nThat's great! We can discuss/compare the designs then. Or, we can discuss/compare the designs before submitting new patches.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-18T22:59:31.000+0000","updated":"2006-12-18T22:59:31.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12459506","id":"12459506","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"Here is the design overview. Minor changes were made because of lock-less commits.\r\n\r\nIn the current IndexWriter, newly added documents are buffered in ram in the form of one-doc segments.\r\nWhen a flush is triggered, all ram documents are merged into a single segment and written to disk.\r\nFurther merges of disk segments may be triggered.\r\n\r\nNewIndexModifier extends IndexWriter and supports document deletion in addition to document addition.\r\nNewIndexModifier not only buffers newly added documents in ram, but also buffers deletes in ram.\r\nThe following describes what happens when a flush is triggered:\r\n\r\n  1 merge ram documents into one segment and written to disk\r\n    do not commit - segmentInfos is updated in memory, but not written to disk\r\n\r\n  2 for each disk segment to which a delete may apply\r\n      open reader\r\n      delete docs*, write new .delN file (* Care is taken to ensure that an interleaved sequence of\r\n        inserts and deletes for the same document are properly serialized.)\r\n      close reader, but do not commit - segmentInfos is updated in memory, but not written to disk\r\n\r\n  3 commit - write new segments_N to disk\r\n\r\nFurther merges for disk segments work the same as before.\r\n\r\n\r\nAs an option, we can cache readers to minimize the number of reader opens/closes. In other words,\r\nwe can trade memory for better performance. The design would be modified as follows:\r\n\r\n  1 same as above\r\n\r\n  2 for each disk segment to which a delete may apply\r\n      open reader and cache it if not already opened/cached\r\n      delete docs*, write new .delN file\r\n\r\n  3 commit - write new segments_N to disk\r\n\r\nThe logic for disk segment merge changes accordingly: open reader if not already opened/cached;\r\nafter a merge is complete, close readers for the segments that have been merged.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-19T00:47:40.000+0000","updated":"2006-12-19T00:47:40.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12466189","id":"12466189","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkassis","name":"jkassis","emailAddress":"jkassis-apache at jkassis dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeremy F. Kassis","active":true},"body":"Happy New Year everyone. I'm personally very excited about this improvement to Lucene. It really begins to open Lucene up to service highly mutable data, important for the application I'm developing. Following the thread, it looks like quite a few people have favorably reviewed the patch. Perhaps it's time for a blessing and commit? ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkassis","name":"jkassis","emailAddress":"jkassis-apache at jkassis dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeremy F. Kassis","active":true},"created":"2007-01-20T00:33:06.671+0000","updated":"2007-01-20T00:33:06.671+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12467733","id":"12467733","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"The patch is updated because of the code committed to IndexWriter since the last patch. The high-level design is the same as before. See comments on 18/Dec/06.\r\n\r\nCare has been taken to make sure if writer/modifier tries to commit but hits disk full that writer/modifier remains consistent and usable. A test case is added to TestNewIndexModifierDelete to test this.\r\n\r\nAll tests pass.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2007-01-26T03:26:49.321+0000","updated":"2007-01-26T03:26:49.321+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468012","id":"12468012","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nThanks for redoing the patch Ning!  I like the added test case for\r\ndisk full.\r\n\r\nI've reviewed this and it looks great.  I fixed a few small typos and\r\nwhitespace issues (looks like a line-wrapper had jumped in at some\r\npoint) and attached NewIndexModifier.Jan2007.take2.patch\r\n\r\nI think this is the only issue holding up a Lucene 2.1 release (so\r\nfar?).  Yonik (or anyone) do you have any objections / questions about\r\nthis patch?  It's basically unchanged from before, just modified to\r\naccommodate recent fixes to IndexWriter.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-01-27T12:06:56.962+0000","updated":"2007-01-27T12:06:56.962+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468371","id":"12468371","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"I just reviewed this, and it looks good to me.\r\nI like how you managed to enable parallel analysis in updateDocument() too.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2007-01-29T19:03:39.711+0000","updated":"2007-01-29T19:03:39.711+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468617","id":"12468617","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"body":"I tried the new patch out and everything looks good to me. One comment though: The public method NewIndexModifier.flush() just calls the public method flushRamSegments(). It might be confusing to have two public methods that do exactly the same?\r\n\r\nBesides this minor question I'm all for committing this patch. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"created":"2007-01-30T13:57:02.020+0000","updated":"2007-01-30T13:57:02.020+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468640","id":"12468640","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"The flush() was added to better match the current IndexModifier, based\r\non feedback (bullet 6) above:\r\n\r\n    https://issues.apache.org/jira/browse/LUCENE-565#action_12428035\r\n\r\nActually, back when that feedback was given, flushRamSegments() was\r\nstill private.  I agree it's awkward now to have two separate methods\r\nthat do the same thing.\r\n\r\nBut, I prefer \"flush\" over \"flushRamSegments\" because flush() is more\r\ngeneric so it reveals less about how the IndexWriter makes use of its\r\nRAM and leaves freedom in the future to have more interesting use of\r\nRAM (like KinoSearch as one example).\r\n\r\nSo I think the right fix would be to add a public IndexWriter.flush()\r\nthat just calls flushRamSegments, and then make flushRamSegments\r\nprivate again, then remove the flush() method from NewIndexModifier?\r\n(The public flushRamSegments() has not yet been released so making it\r\nprivate again before we release 2.1 is OK).\r\n\r\nAny objections to this approach?  I will re-work the last patch &\r\nattach it.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-01-30T15:17:38.630+0000","updated":"2007-01-30T15:17:38.630+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468687","id":"12468687","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"body":"Thanks for the explanation, Mike. I'd prefer flush() too and the changes you suggest look good to me!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"created":"2007-01-30T16:59:38.754+0000","updated":"2007-01-30T16:59:38.754+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12468714","id":"12468714","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I've attached NewIndexModifier.Jan2007.take3.patch with that approach.\r\n\r\nI plan on committing this in the next day or two if there are no more questions/feedback....\r\n\r\nThank you Ning for this great addition, and for persisting through this long process!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-01-30T17:55:31.683+0000","updated":"2007-01-30T17:55:31.683+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12469408","id":"12469408","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I just committed this.\r\n\r\nThank you Ning.  Keep the patches coming!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-01T10:58:01.984+0000","updated":"2007-02-01T10:58:01.984+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12471844","id":"12471844","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Reopening based on recent discussions on java-dev:\r\n\r\n    http://www.gossamer-threads.com/lists/lucene/java-dev/45099","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-09T22:05:57.313+0000","updated":"2007-02-09T22:05:57.313+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12471980","id":"12471980","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I moved NewIndexModifier's methods into IndexWriter and did some\r\nsmall refactoring, tightening up protections, fixed javadocs,\r\nindentation, etc.  NewIndexModifier is now removed.\r\n\r\nI like this solution much better!\r\n\r\nI also increased the default number of deleted terms before a flush is\r\ntriggered from 10 to 1000.  These buffered terms use very little\r\nmemory so I think it makes sense to have a larger default?\r\n\r\nSo, this adds these public methods to IndexWriter:\r\n\r\n  public void updateDocument(Term term, Document doc, Analyzer analyzer)\r\n  public void updateDocument(Term term, Document doc)\r\n  public synchronized void deleteDocuments(Term[] terms)\r\n  public synchronized void deleteDocuments(Term term)\r\n  public void setMaxBufferedDeleteTerms(int maxBufferedDeleteTerms)\r\n  public int getMaxBufferedDeleteTerms()\r\n\r\nAnd this public field:\r\n\r\n  public final static int DEFAULT_MAX_BUFFERED_DELETE_TERMS = 10;\r\n\r\n\r\nOn the extensions points, we had previously added these 4:\r\n\r\n  protected void doAfterFlushRamSegments(boolean flushedRamSegments)\r\n  protected boolean timeToFlushRam()\r\n  protected boolean anythingToFlushRam()\r\n  protected boolean onlyRamDocsToFlush()\r\n\r\nI would propose that instead we add only the first one above, but\r\nrename it to \"doAfterFlush()\".  This is basically a callback that a\r\nsubclass could use to do its own thing after a flush but before a\r\ncommit.\r\n\r\nBut then I don't think we should add any of the others.  The\r\n\"timeToFlushRam()\" callback isn't really needed now that we have a\r\npublic \"flush()\" method.  And the other two are very specific to how\r\nIndexWriter implements RAM buffering/flushing and so unless/until we\r\ncan think of a use case that needs these I'm inclined to not include\r\nthem?\r\n\r\nYonik, is there something in Solr that would need these last 2\r\ncallbacks?\r\n\r\nI've attached the patch (LUCENE-565.Feb2007.patch) with these\r\nchanges!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-10T10:07:44.233+0000","updated":"2007-02-10T10:07:44.233+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12472499","id":"12472499","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK I moved NewIndexModifier's methods into IndexWriter and did some\r\nsmall refactoring, tightening up protections, \r\n\r\n> I would propose that instead we add only the first one above, but rename it to \"doAfterFlush()\". \r\n\r\nYes, that sounds fine.\r\n\r\nThe problem is that we wouldn't be able to take advantage of the hook because of the \"tightening up protections\".  Access to the segments is key.\r\n\r\n+  private SegmentInfos segmentInfos = new SegmentInfos();       // the segments\r\n+  private SegmentInfos ramSegmentInfos = new SegmentInfos();    // the segments in ramDirectory\r\n+  final private SegmentInfo buildSingleDocSegment(Document doc, Analyzer analyzer)\r\n\r\nSo instead of changing these to private, how about package protected?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2007-02-13T01:53:24.230+0000","updated":"2007-02-13T01:53:24.230+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12472610","id":"12472610","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK, got it.  I will change those 3 to package protection and then commit.  Thanks Yonik.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-13T10:26:11.395+0000","updated":"2007-02-13T10:26:11.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12333383/comment/12476258","id":"12476258","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Closing all issues that were resolved for 2.1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-27T18:10:33.369+0000","updated":"2007-02-27T18:10:33.369+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-565/votes","votes":8,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i052d3:"}}