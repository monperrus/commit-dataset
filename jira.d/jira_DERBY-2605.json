{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12368561","self":"https://issues.apache.org/jira/rest/api/latest/issue/12368561","key":"DERBY-2605","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-05-03 15:40:13.852","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23124","customfield_12310222":"1_*:*_1_*:*_1280486604_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2007-05-18T10:31:40.319+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2605/watchers","watchCount":0,"isWatching":false},"created":"2007-05-03T14:50:13.715+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12316359","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12316359","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"28326","key":"DERBY-64","self":"https://issues.apache.org/jira/rest/api/2/issue/28326","fields":{"summary":"Create a table with a query","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12316609","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12316609","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12372511","key":"DERBY-2879","self":"https://issues.apache.org/jira/rest/api/2/issue/12372511","fields":{"summary":"CREATE TABLE AS <subquery> does not maintain the collation for character types.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.png","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-07-13T19:23:49.279+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"The work on DERBY-64 seems to have opened up a wormhole by which you can create user tables with BOOLEAN columns. The following script shows how to do this:\n\ndrop table foo;\n\ncreate table foo\nas select systemalias from sys.sysaliases with no data;\nrename column foo.systemalias to boolcol;\nalter table foo\n  alter column boolcol null;\n\nselect c.columndatatype\nfrom sys.syscolumns c, sys.systables t\nwhere t.tableid=c.referenceid\nand t.tablename='FOO';\n\ninsert into foo( boolcol )\nvalues\n( 0 ),\n( 1 ),\n( cast (null as int) )\n;\n\nselect * from foo;\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37938","summary":"You can create BOOLEAN columns in 10.3","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":9,"total":9,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12493402","id":"12493402","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Last week I sent an email to derby-dev about the ability to create a decimal column with precision greater than 31:\r\n\r\n  http://article.gmane.org/gmane.comp.apache.db.derby.devel/40881\r\n\r\nI wonder if that issue and this one are related?  Ex. Should the CREATE TABLE AS functionality be performing checks on the column types that it creates?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-03T15:40:13.852+0000","updated":"2007-05-03T15:40:13.852+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12493533","id":"12493533","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"That sounds like a reasonable approach to me. It may turn out that the checks are in the parser right now. What you're proposing may have to happen at bind() time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-05-03T21:41:41.890+0000","updated":"2007-05-03T21:41:41.890+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12495384","id":"12495384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"body":"Attached is a patch that addresses the ability to create columns where the data type of the column is currently for internal use or otherwise not exposed to the user.\r\n\r\nI added an isInternalTypeId method to TypeId and defined the following types as being for internal use:\r\n\r\nBOOLEAN\r\nNATIONAL CHAR\r\nNATIONAL LONGVARCHAR\r\nNATIONAL VARCHAR\r\nREF\r\nTINYINT\r\nUSERDEFINED\r\nNCLOB\r\n\r\nCreateTableNode was updated to use this method to check the data type of each column.\r\nA new message was added.\r\nA new test was added.\r\n\r\nThis patch does not address the situation with the VALUES statement desribed by Army.  I am wondering if the VALUES statement should even be allowed to create rows with invalid decimal precision.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"created":"2007-05-13T17:35:50.682+0000","updated":"2007-05-13T17:35:50.682+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12495454","id":"12495454","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sv204098","name":"sv204098","emailAddress":"vyassaurabh1 at rediffmai dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Saurabh Vyas","active":true},"body":"Hi James, your patch adds NATIONAL <CHAR> types also where as these are not supported by derby (see DERBY-2258).\r\nIs their any specific reason for that?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sv204098","name":"sv204098","emailAddress":"vyassaurabh1 at rediffmai dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Saurabh Vyas","active":true},"created":"2007-05-14T03:31:46.499+0000","updated":"2007-05-14T03:31:46.499+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12495663","id":"12495663","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Hi James,\r\n\r\nThank you for your willingness to pick this up!  I think it'd be great to fix this issue before the 10.3 release, to minimize impact on potential users.\r\n\r\nThat said, I took a quick look at this issue on Friday and managed a small, incomplete patch that tried to solve this problem in a slightly different way.  I never got around to commenting or posting because other things came up.\r\n\r\nI'm posting the *incomplete* patch that I threw together here.  Note that right now the code just prints out an error \"OOPS\" instead of throwing an exception, and it doesn't have any test cases.  It also does not catch all of the types that your patch catches--though it should be possible to extend it in that way.  In any event, I thought I'd post it as an alternate approach (\"food for thought\") in case it's useful.\r\n\r\nThe notable thing about d2605_inc_v1.patch is that it addresses the DECIMAL error that I mentioned on derby-dev.  It also avoids the need to add a new variable to TypeId...although that's probably not a big deal.\r\n\r\n> I am wondering if the VALUES statement should even be allowed to create rows\r\n> with invalid decimal precision.\r\n\r\nI was wondering that, too.  And I'm not sure what the answer is.  But for what it's worth, it looks we can actually catch this particular scenario at bind time *if* the assumption is that the only way to create such a value is via a literal.  That seems like a valid assumption to me, but I haven't investigated fully and thus I could be wrong.\r\n\r\nFeel free to use or ignore the incomplete code as you see fit :)  Either way, thanks again for choosing to work on this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-14T15:45:48.487+0000","updated":"2007-05-14T15:45:48.487+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12495850","id":"12495850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"body":"A B,\r\n\r\nI think I prefer your approach.  I am updating my patch.\r\n\r\nI have however found a couple of interesting things with the precision/scale/maximum width check.\r\n\r\n1) Given table foo (x double precision), the check fails for:  create table bar(y) as select 2.0 * x from foo with no data\r\n     because dtd.getScale() returns 1 and typeId.getMaximumScale() returns 0.  The datat ype of column y is double precision.\r\n\r\n2) The check fails for:   create table bar as select javaclassname from sys.sysaliases with no data\r\n    because dtd.getMaximumWidth() returns 2147483647 and typeId.getMaximumMaximumWidth() returns 32700.\r\n    The data type of javaclassname is LONG VARCHAR.  I would expect the maximum length to be 32700.  Integer.MAX_VALUE is specified\r\n    as the maximum length of this column in SYSALIASESRowFactory.java.  I do not know if this is a bug or was intentional but the resulting\r\n    maximum length certainly exceeds the documented value for a LONG VARCHAR.\r\n\r\nI am doing some more investigation.  I should be able to upload an updated patch in a couple of days.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"created":"2007-05-15T03:39:55.350+0000","updated":"2007-05-15T03:39:55.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12496022","id":"12496022","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> I have however found a couple of interesting things with the precision/scale/maximum width check. \r\n\r\nThank you for pointing these out! I forgot to mention that I didn't do any extensive testing of the incomplete patch that I posted.\r\n\r\n> 1) Given table foo (x double precision), the check fails for: <snip query>\r\n\r\nGood catch.  I think that in this case there is an implicit scale/precision \"check\" because of the multiplication operation.  For example, the following currently works (even though precision is > 31):\r\n\r\nij> values 12345678901234567890123456789012345678901234;\r\n\r\nbut if we make that part of another Derby operation--say multiplication--it fails:\r\n\r\nij> values 12345678901234567890123456789012345678901234 * 1.0;\r\nERROR 22003: The resulting value is outside the range for the data type DECIMAL/NUMERIC(31,1).\r\n\r\nThe failure occurs as part of normal Derby processing for arithmetic operation.  So I wonder if we only have to worry about cases where we have a standalone constant?  If that's true then we could add a check for ConstantNode to the logic in CreateTableNode.  Something like:\r\n\r\n    DataTypeDescriptor dtd =\r\n        (rc.getExpression() instanceof ConstantNode)\r\n            ? rc.getExpressionType()\r\n            : null;\r\n\r\n    if ((dtd != null) && !dtd.isUserCreatableType())\r\n        <error>\r\n\r\nI haven't tested that approach, but I wonder if it might solve the 1st problem that you discovered.\r\n\r\n> 2) The check fails for: create table bar as select javaclassname from sys.sysaliases with no data\r\n>    because dtd.getMaximumWidth() returns 2147483647. [...]  The data type of javaclassname is\r\n>    LONG VARCHAR.  I would expect the maximum length to be 32700.\r\n\r\nHmm, I would expect a max length of 32700, as well.\r\n\r\n> I do not know if this is a bug or was intentional but the resulting maximum length certainly\r\n> exceeds the documented value for a LONG VARCHAR. \r\n\r\nSounds like a bug to me, though I do not know the history of this system table.  There are two other system tables that have LONG VARCHAR columns: SYSTRIGGERS and SYSSTATEMENTS.  The latter (SYSSTATEMENTS) uses TypeId.LONGVARCHAR_MAXWIDTH as the max width for the column, which I think is correct (that value is 32700).  SYSTRIGGERS uses Integer.MAX_VALUE just like SYSALIASES, but I do not think that's correct.\r\n\r\n> I am doing some more investigation. I should be able to upload an updated patch in a couple of days.\r\n\r\nI appreciate your time with this.  If you'd like to post an incremental patch which just addresses the type problem (ex. BOOLEAN) for now, I think that would be fine.  You could then look into the scale/precision problem as a follow-up patch, if that makes things easier.  Or you can just post a single patch--whichever you prefer.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-15T15:33:18.153+0000","updated":"2007-05-15T15:33:18.153+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12496175","id":"12496175","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"body":"Attached is a new version of a patch for consideration.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=james.f.adams","name":"james.f.adams","emailAddress":"derby at xemaps dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James F. Adams","active":true},"created":"2007-05-16T02:40:28.409+0000","updated":"2007-05-16T02:40:28.409+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12368561/comment/12496724","id":"12496724","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you for the updated patch, James.  It looks good to me.  I ran derbyall and suites.All on SUSE Linux with no new failures, so I went ahead and committed d2605_v2.patch with svn commit #  539164:\r\n\r\n  URL: http://svn.apache.org/viewvc?view=rev&rev=539164\r\n\r\nI can't tell from the comments if there is another patch coming or not, so I'm not marking this issue as \"resolved\" yet.  If you are done, please feel free to resolve it on your own...\r\n\r\nThanks again for addressing this issue!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-17T23:25:59.588+0000","updated":"2007-05-17T23:25:59.588+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2605/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06uvz:"}}