{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12370925","self":"https://issues.apache.org/jira/rest/api/latest/issue/12370925","key":"DERBY-2763","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-06-08 05:07:31.005","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23228","customfield_12310222":"1_*:*_1_*:*_836312095_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_399009","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2007-06-15T06:08:58.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2763/watchers","watchCount":0,"isWatching":false},"created":"2007-06-05T13:50:25.905+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"16.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2007-06-19T12:52:54.268+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11690","id":"11690","name":"Network Client"}],"timeoriginalestimate":null,"description":"Currently the Embedded and Network Client would differ \nin behaviour when the following series of steps is \nfollowed.\n\na) Create an empty Blob\nb) get an InputStream using Blob.getBinaryStream()\nc) write data into this Blob\n   c.1) Get an OutputStream\n   c.2) Use OutputStream.write(byte [] b) to write\n        into this Blob.\nd) Now read from the InputStream obtained in step b)\n   and print the number of bytes read as output.\n\nThe output of step d) differs in the client and in the Embedded side.\n\n\nIn the Client\n-------------\n\nThe number of bytes read would always be -1.\n\nIn the Embedded\n---------------\n\nThe number of bytes would be the number of bytes we\nreflected.\n\nThe above behaviour in the NetworkClient is because\nthe length of the Blob is read once and stored in the \nconstructor of the locator Stream returned (in the \nattribute maxPos).\n\nThis instead should be read each time we use the streams.\n\nA similar issue exists for Clobs also.\n\nI will raise a seperate JIRA issue for this.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"39921","summary":"In the Network Client InputStreams and Readers returned from LOB's should be sensitive to underlying LOB data changes.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":41,"total":41,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12501561","id":"12501561","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Attaching a reproducible for this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-05T13:53:07.858+0000","updated":"2007-06-05T13:53:07.858+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12502651","id":"12502651","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"Does this need to be fixed in 10.3? Or can it be marked as another difference between client and server (DERBY-310)?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2007-06-08T05:07:31.005+0000","updated":"2007-06-08T05:07:31.005+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12502666","id":"12502666","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I am looking into this issue and will revert back with a solution to this issue before I leave for home today evening.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-08T05:26:23.999+0000","updated":"2007-06-08T05:26:23.999+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12502677","id":"12502677","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"It seems to me that we have quite a few alternative behaviors:\r\n\r\n1. Streams still see the old data.\r\n2. Streams sees the changes that have been made to the part of the Lob\r\n    that has not yet been read.\r\n3. Streams throw an exception saying that it is invalid since Lob has\r\n    been updated.\r\n4. Change just maxPos and leave the rest as it is (incl. buffering)\r\n5. Do nothing\r\n\r\nThe spec does not seem to say anything about this.\r\n\r\n1. is not possible without very much work and overhead.\r\n2. is some work, but will make it similar to embedded.\r\n3. should not be much work, acceptable solution, but different from\r\n    embedded.  However, it would not be much work to make embedded\r\n    behave the same way.\r\n4.-5. even less, need to say that behavior is unpredictable.\r\n\r\nIn case we pick 2., I think I prefer the same solution as Anurag has\r\ndone for embedded.  It introduces a few more classes, but it isolates\r\nthe mechanism needed here (separation of concerns), and it does not\r\nreimplement mechanisms already provided by Java.  Getting buffering\r\nright may also be a bit tricky, and if there already is a working\r\nmechanism, I do not think we need to change that.\r\n\r\nA similar situation exists for streams from Clobs(DERBY-2764 also).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-08T05:49:32.484+0000","updated":"2007-06-08T05:49:32.484+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12502847","id":"12502847","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Hi Narayanan,\r\n\r\nThanks for the crisp descrition of the possible solutions. I have a couple immediate reactions:\r\n\r\nA) It would be good if the embedded and network behavior agreed.\r\n\r\nB) I don't  understand what it means to read out of a blob with one hand while you are writing into it with the other.\r\n\r\nIt's worth pointing out that the same issues arise if you are writing to the Blob using Blob.setBytes() at the same time as you are siphoning out bytes using the InputStream returned by Blob.getBinaryStream(). \r\n\r\nIssue (B) troubles me. What does it mean to read the InputStream up to position X, then insert a block of bytes which straddle that position (i.e., from X-A to X+B)? Quite likely, the inserted bytes have some meaning as a complete block. What does it mean to read only the trailing portion of that block?\r\n\r\nMy gut feeling is that we should raise an exception if someone tries to write into a Blob which still has an open InputStream on it. I think this should be the behavior for both the embedded and network clients.\r\n\r\nDo we have real customer demand for some use-case supported by the current embedded behavior? If not, I would recommend raising an exception now. We can relax this in the future if there's real demand for a real use-case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-08T15:36:45.227+0000","updated":"2007-06-08T15:36:45.227+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12502997","id":"12502997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the comments Rick\r\n\r\n>Issue (B) troubles me. What does it mean to read the InputStream up to position X, \r\n>then insert a block of bytes which straddle that position (i.e., from X-A to X+B)? \r\n>Quite likely, the inserted bytes have some meaning as a complete block. \r\n>What does it mean to read only the trailing portion of that block? \r\n\r\nI think this is an excellent point\r\n\r\nAs an analogy\r\n\r\nFor example if the Clob were used to store address data and it were\r\nmodified using setString, what is the point of reading from an\r\nInputStream from this Clob which would have given the old address\r\ninitially and after the updates starts giving the new address.\r\n\r\n>My gut feeling is that we should raise an exception if someone tries\r\n>to write into a Blob which still has an open InputStream on it. \r\n>I think this should be the behavior for both the embedded and \r\n>network clients. \r\n\r\nI think we could allow updates to happen but throw an exception \r\nupon subsequent reads from the InputStreams after this modification \r\nhas happened. This would not tie the writes to the LOB to the reads\r\nfrom the LOB. I agree that invalidation is a form of linking the two but\r\nthe user could just re-create the stream and proceed with the reads\r\nagain.\r\n\r\nAs in the above(address) analogy why would you proceed to read the old\r\ndata(address) when the old data(address) is no longer valid? \r\n\r\nPls do mention if you think this is not the correct approach.\r\n\r\nThanks again for the comments Rick !!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-09T03:31:01.012+0000","updated":"2007-06-09T03:31:01.012+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503083","id":"12503083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"This patch address this issue using Approach 2 namely\r\n\r\nStreams sees the changes that have been made to the part of the Lob\r\nthat has not yet been read. \r\n\r\nI have attached a .txt file that explains the changes in detail\r\n\r\nI ran BlobClob4BlobTest on this patch and saw no failues.\r\n\r\nThe patch still needs more tests to test for the case of the underlying\r\nLOB being invalidated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-09T14:37:09.924+0000","updated":"2007-06-09T14:37:09.924+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503085","id":"12503085","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"This patch address this issue using Approach 3 namely \r\n\r\nStreams throw an exception saying that it is invalid since Lob has\r\nbeen updated. \r\n\r\nThe changes made in this patch are very similar to the changes made\r\nin Approach 2 except that instead of re-creating the streams we throw\r\nan IOException.\r\n\r\nFor now the error string is hard-coded in the IOException. I will change\r\nthis and also write additional tests once this approach is accepted.\r\n\r\nI ran BlobClob4BlobTest and did not see any failures.\r\n\r\nI have not yet run junit All on this patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-09T14:52:58.212+0000","updated":"2007-06-09T14:52:58.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503086","id":"12503086","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"This patch addresses the issue using Approach 4.\r\n\r\nChange just maxPos and leave the rest as it is (incl. buffering) \r\n\r\nThe maxPos attribute in the locator classes was being initialized\r\nduring stream creation with the length of stream and was then\r\nbeing permanently used as the length of the Lob.\r\n\r\nI have changed this so that the length of the Lob is fetched in the\r\ncases where it is not mentioned during stream creation.\r\n\r\nI have not yet run junit All on this patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-09T15:01:45.855+0000","updated":"2007-06-09T15:01:45.855+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503087","id":"12503087","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Please note that\r\n\r\nThe patches Approach_2,3,4.diff are not for commit. \r\n\r\nI have tried out all the approaches and have posted them so that\r\nit would help people in getting a practical view of these approaches.\r\n\r\nMy inclination among the various approaches is towards 2) and 3)\r\n\r\n2) But I consider the point mentioned by Rick as going against this\r\n\r\n3) or the solution suggested by Rick whichever is OK with the community.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-09T15:08:50.573+0000","updated":"2007-06-09T15:08:50.573+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503348","id":"12503348","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"body":"> Rick Hillegas commented on DERBY-2763:\r\n> --------------------------------------\r\n> \r\n> Hi Narayanan,\r\n> \r\n> Thanks for the crisp descrition of the possible solutions. I have a\r\n> couple immediate reactions:\r\n> \r\n> A) It would be good if the embedded and network behavior agreed.\r\n\r\nI agree.  I think that is more important than the actual behavior\r\nhere.\r\n\r\n> \r\n> B) I don't understand what it means to read out of a blob with one\r\n>    hand while you are writing into it with the other.\r\n> \r\n> It's worth pointing out that the same issues arise if you are\r\n> writing to the Blob using Blob.setBytes() at the same time as you\r\n> are siphoning out bytes using the InputStream returned by\r\n> Blob.getBinaryStream().\r\n> \r\n> Issue (B) troubles me. What does it mean to read the InputStream up\r\n> to position X, then insert a block of bytes which straddle that\r\n> position (i.e., from X-A to X+B)? Quite likely, the inserted bytes\r\n> have some meaning as a complete block. What does it mean to read\r\n> only the trailing portion of that block?\r\n\r\nA Blob or Clob may well be structured data where segments may be\r\nupdated independently.  Hence, it may make sense to read and update\r\nLobs a segment at a time.  However, I agree that it is not very likely\r\nthat one update in the middle of where one is reading.\r\n\r\n> \r\n> My gut feeling is that we should raise an exception if someone tries\r\n> to write into a Blob which still has an open InputStream on it. I\r\n> think this should be the behavior for both the embedded and network\r\n> clients.\r\n> \r\n> Do we have real customer demand for some use-case supported by the\r\n> current embedded behavior? If not, I would recommend raising an\r\n> exception now. We can relax this in the future if there's real\r\n> demand for a real use-case.\r\n\r\nOn use-case I can think of: Read first segment, make update to that,\r\ncontinue to read second segment, and so on.  This will not be possible\r\nif we raise an exception as you suggest.  (You can get around it\r\naround this by closing the stream and creating a new one, but you will\r\nthen get the overhead of repositioning.)  In this use-case, it does\r\nnot matter whether one is able to see one's own updates or not, since\r\none will never be reading segments that have been updated. Hence, any\r\nbehavior, except raising an exception, would support this use-case. I\r\nthink the advantage of the way Anurag has implemented it on the\r\nembedded is that it is a well defined behavior that is easy to explain\r\nto users.  I think a clean behavior is to be preferred over an\r\nunpredictable behavior if it does not require much extra work.\r\n\r\nI agree that it is better to make a strict behavior now and relax it\r\nlater if needed, than risking to have to restrict the behavior in\r\nlater versions.  I guess the main risk is that future JDBC specs would\r\nrequire a specific behavior.  However, it is likely that different\r\nvendors have different behavior today and that the only thing they\r\nwill agree on is to say that the behavior is unpredictable.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"created":"2007-06-11T09:23:59.501+0000","updated":"2007-06-11T09:23:59.501+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503446","id":"12503446","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"I think that Øystein describes a useful scenario: efficiently looping through a lob and modifying it one segment at a time. If we go with (2), then the user guides should explain that our implementation supports this scenario and the user guides should warn the customer that other use-cases may produce unpredictable results. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-11T15:50:08.070+0000","updated":"2007-06-11T15:50:08.070+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503845","id":"12503845","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Since update sensitive LOB discussion has mostly happened on this issue\r\nand proposals for the solution and sample implementations have been\r\ngeneralized to LOB's I am changing this issue from Blob specific to dealing\r\nwith LOB streams in general. I will mark 2764 as duplicate.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-12T12:32:17.929+0000","updated":"2007-06-12T12:32:17.929+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503848","id":"12503848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I concur with the support voiced for Approach 2 since it is being supported\r\nby a very valid use case and seems a very logical approach at this\r\njuncture.\r\n\r\nI highly appreciate the guidance offered and thank Rick and Oystein\r\nfor their invaluable inputs in this patch.\r\n\r\nAttached here is the patch that is a extension of the already attached\r\nApproach_2.txt\r\n\r\nIn this patch I have enabled\r\n\r\njdbcapi/BlobUpdaetableStreamTest\r\njdbcapi/ClobupdateableReaderTest\r\n\r\nfor the Network Client.\r\n\r\nI have added tests for the case when a stream\r\nis taken from a empty Clob or a empty Blob\r\n(con.createClob or con.createBlob) to\r\n\r\njdbc4/BlobTest\r\njdbc4/ClobTest\r\n\r\nPls find a detailed explanation for this approach in my\r\nprevious attachment Approach_2.txt\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-12T12:42:12.741+0000","updated":"2007-06-12T12:42:12.741+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503850","id":"12503850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I have run jdbcapi/BlobClob4BlobTest and the tests I have modified \r\nuptil now successfully on UpdateSensitiveStreamsForClient_v1.diff.\r\nI have started a junit all run and shall revert back with the results.\r\nI request for UpdateSensitiveStreamsForClient_v1.diff to be considered\r\nfor reviews and comments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-12T12:44:46.248+0000","updated":"2007-06-12T12:44:46.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503877","id":"12503877","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I ran junit All on this patch and observed no failures. If everything is OK I request for this patch to be considered for a commit too.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-12T15:10:39.974+0000","updated":"2007-06-12T15:10:39.974+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503899","id":"12503899","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks for the patch, Narayanan. I am reading it now. Here is an initial reaction:\r\n\r\nIt seems to me that the input stream's position is an offset from the start of the LOB. When the stream is recreated, the current position (offset from the start of the LOB) does not change. So it seems to me that Øystein's use-case is supported if the rewritten chunks do not change size. So, I am puzzled. To support that use case, is there any need to recreate the streams? It appears to me that the recreation of the streams supports some other use-case, in which the writer is writing bytes further on in the LOB, and not in the porition that has already been read.\r\n\r\nDo we have a use-case in mind for this scenario? It would be nice to be able to argue to ourselves that we are building something that solves a customer problem here.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-12T16:11:56.113+0000","updated":"2007-06-12T16:11:56.113+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503925","id":"12503925","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":">It seems to me that the input stream's position is an offset from the start of the LOB. \r\n\r\nBy InputStreams I guess the UpdateSensitiveStreams (UpdateSensitiveLOBInputStream, \r\nUpdateSensitiveClobLocatorReader) are meant.\r\n\r\n>It appears to me that the recreation of the streams supports some other use-case, \r\n>in which the writer is writing bytes further on in the LOB, and not in\r\n>the porition that has already been read. \r\n\r\nThese streams internally wrap inside a Buffered Streams\r\n\r\nUpdateSensitiveLOBInputStream - Has a BlobLocatorInputStream or a ClobLocatorInputStream\r\n                                                               inside a BufferedInputStream\r\n\r\nUpdateSensitiveClobLocatorReader - Has a BlobLocatorReader inside a BufferedReader.\r\n\r\nThe Buffered streams pre-fetch larger data than we request(4k = 4096 bytes).\r\n\r\nSo if a request for 1000 bytes is made initially from the InputStream the BufferedInputStream would fetch\r\n4096 bytes. \r\n\r\nNow if the user decides to update from the 2000 position or byte onwards, a subsequent read,\r\nunless re-creation of the streams that are wrapped inside the Buffered streams is done, will return already\r\npre-feched data. \r\n\r\nSo upto 4096 bytes you would get the pre-fetched or old data and from 4096 onwards you would get the new\r\ndata. This would be inconsistent.\r\n\r\nSo while re-creating the streams they would then re-create with the original position and the reading would\r\nresume with the updated data. If we remove the BufferedStreams the process of reads becomes very slow.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-12T16:56:44.214+0000","updated":"2007-06-12T16:56:44.214+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503939","id":"12503939","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks for the quick response, Narayanan. I think I can see how this patch reduces the possibility of the inconsistency which you describe. However, I think that there are race conditions in this patch which could still give rise to that inconsistency--because the read() methods handshake with the writers on entry and not on exit.\r\n\r\nInconsistencies of some sort can always arise if the contents of the LOB change between the time that reading starts and the time that reading ends. I think that's true with or without this patch. This patch may change the kind of inconsistencies that can occur and this patch may reduce the possibility of certain inconsistencies. Whether those inconsistencies are acceptable depends on what the application is doing and what it expects.\r\n\r\nWhat I'm struggling to understand is this: why are the inconsistencies allowed by this patch better than the inconsistencies allowed if we don't do anything? What are the supported use-cases which we want to document? If I understood those use-cases, then I could reason about whether this patch actually delivers the intended benefit.\r\n\r\nThanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-12T17:34:10.719+0000","updated":"2007-06-12T17:34:10.719+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12503964","id":"12503964","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"The regressiion tests pass cleanly for me after applying this patch. I have some additional comments:\r\n\r\nGeneral:\r\n\r\n1) As noted earlier, there are race conditions in the read() methods because they check the update count on the way in and the LOB contents could change before the read() methods exit. Is this OK?\r\n\r\n2) I think that calling sqlLength() in order to check for committed transactions is a little tricky. I think it would be better if Lob exposed a method, say isValid() which has the required semantics. Under the covers, Lob.isValid() can call sqlLength() for the time being.\r\n\r\nUpdateSensitiveLOBLocatorInputStream\r\n\r\n3) I think this class should be abstract. Methods to be implemented by subclasses should be abstract too.\r\n\r\n4) Here is an issue for the documentation noted in my earlier comment today: Øystein's use case is supported only if a rewritten chunk is exactly the same length as the chunk it is replacing.\r\n\r\n\r\nBlobLocatorOutputStream\r\nClobLocatorWriter\r\nClobLocatorOutputStream\r\n\r\n5) Why is incrementUpdateCount() called in these streams? Shouldn't the update count be incremented by the Blob and Clob methods which do the actual writing?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-12T18:46:45.448+0000","updated":"2007-06-12T18:46:45.448+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504122","id":"12504122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=anurag","name":"anurag","emailAddress":"anurag dot shekhar at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Anurag Shekhar","active":true},"body":">Inconsistencies of some sort can always arise if the contents of \r\n>the LOB change between the time that reading starts and the \r\n>time that reading ends. I think that's true with or without this \r\n>patch. This patch may change the kind of inconsistencies that\r\n>can occur and this patch may reduce the possibility of certain \r\n>inconsistencies. Whether those inconsistencies are acceptable\r\n>depends on what the application is doing and what it expects. \r\n\r\nI think you are talking about the case where a write is in progress \r\nand at the same read is called and read gets partially updated data. \r\nThis particular scenario is taken care by LOBStreamControl please \r\nnote this class is central repository of all lob classes (for both \r\nnetwork client and embedded driver). LOBStreamControl \r\nsynchronizes all read and write methods so a read will never\r\npickup data which is still being written. \r\n\r\nBut I do agree there may be another race condition when there \r\nis a modification after checking for obsoleteness and before read.\r\nBut I am not sure we really need to handle this case as in this \r\ncase data will be same if the reader thread was scheduled before \r\nthe writer thread.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=anurag","name":"anurag","emailAddress":"anurag dot shekhar at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Anurag Shekhar","active":true},"created":"2007-06-13T05:45:52.915+0000","updated":"2007-06-13T05:45:52.915+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504136","id":"12504136","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I'm not familiar with all the details in this discussion, but here are my two cents:\r\n\r\nI think it would be perfectly fine if we said that when reading a stream returned by [BC]lob.get*Stream(), one may or may not see one's own updates made to that LOB after the call to get*Stream(). I guess a portable application couldn't rely on any particular behaviour anyway, and it would have to call get*Stream() after the update to get a fresh stream if it needed to see the updated value. If we define the behaviour this way, those applications that need the updated value pay the extra cost themselves, whereas those that don't care about this (that is, most applications) wouldn't have to pay for the extra complexity, emptying of buffers etc.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2007-06-13T06:39:23.071+0000","updated":"2007-06-13T06:39:23.071+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504138","id":"12504138","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=anurag","name":"anurag","emailAddress":"anurag dot shekhar at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Anurag Shekhar","active":true},"body":"> 4) Here is an issue for the documentation noted in my \r\n>earlier comment today: Øystein's use case is supported \r\n>only if a rewritten chunk is exactly the same length as \r\n>the chunk it is replacing. \r\n\r\nBlob.setBytes or OutputStream.write always overwrites the \r\nbytes of same length.Even in case of Clob, setString or \r\nWriter.write will replace chars of same length.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=anurag","name":"anurag","emailAddress":"anurag dot shekhar at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Anurag Shekhar","active":true},"created":"2007-06-13T06:44:52.442+0000","updated":"2007-06-13T06:44:52.442+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504141","id":"12504141","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the reviews, comments and the test Runs Rick.\r\n\r\n>1) As noted earlier, there are race conditions in the read() methods \r\n>   because they check the update count on the way in and the LOB \r\n>   contents could change before the read() methods exit. Is this OK?\r\n\r\n    I read the comments from Anurag just now... \r\n\r\n    A small addition to that.\r\n\r\n    Writes and reads to LOB's are basically stored procedure calls with\r\n    the locator information passed as parameter. So during the case\r\n    pointed out when a read and a write simultaneously happen the calls\r\n    would be propogated un-affected by the presence of each other till\r\n    the LOBStreamControl class which then synchronizes the calls. So this\r\n    issue would be avoided here.\r\n  \r\n\r\n>2) I think that calling sqlLength() in order to check for committed transactions \r\n>   is a little tricky. I think it would be better if Lob exposed a method, \r\n>   say isValid() which has the required semantics. Under the covers, \r\n>   Lob.isValid() can call sqlLength() for the time being.\r\n\r\n    I initially thought of adding this in the checkValidity()\r\n    method of am/Blob and am/Clob. I then decided against this\r\n    because these methods were being called in the methods that\r\n    result in a Stored Procedure call themselves. For example\r\n    checkValidity is called in readBytes. If the locator associated \r\n    with this is valid then it will result in 2 round trips to the\r\n    server instead of two. One for the SqlLength() call and the\r\n    other for the BLOBSETBYTES stored procedure call. The initial\r\n    round-trip would not be necessary for this method since during\r\n    the call to BLOBSETBYTES itself we would find out that the\r\n    locator in invalid.\r\n\r\n    But your solution of keeping the locator valid check in one\r\n    place (Lob) is correct because if in the future we decide to\r\n    not use this we can change it at this place alone.\r\n\r\n    I will do this in the follow-up\r\n \r\n    UpdateSensitiveLOBLocatorInputStream\r\n\r\n> 3) I think this class should be abstract. Methods to be implemented by subclasses \r\n     should be abstract too.\r\n     \r\n     I agree. I found this while doing the mock review runs I do on my patches\r\n     to find silly mistakes. I am sorry, I missed implementing this. I will do\r\n     this in a follow-up.\r\n\r\n> 4) Here is an issue for the documentation noted in my earlier comment today: Øystein's use case is \r\n>    supported only if a rewritten chunk is exactly the same length as the chunk it is replacing.\r\n\r\n     I guess the release note needed flag needs to be enabled and a\r\n     release note written. Will Do!\r\n\r\n\r\n>BlobLocatorOutputStream\r\n>ClobLocatorWriter\r\n>ClobLocatorOutputStream\r\n\r\n>5) Why is incrementUpdateCount() called in these streams? Shouldn't the update count be \r\n>   incremented by the Blob and Clob methods which do the actual writing?\r\n\r\n   readCharacters, writeCharacters, writeBytes on the Locator streams forward their calls to\r\n   the framework that calls the stored procedures with the locator value obtained\r\n   from the Lob. The only way to reach the update count being the Lob reference\r\n   that is maintained within these streams.\r\n\r\n   So when a user takes a OutputStream from a Lob and does not write\r\n   into it the InputStreams can continue reading un-hindered. When a\r\n   write into the OutputStreams or the Writer happens then we need to\r\n   do increment the updateCount.\r\n\r\n   Hence I decided to increment the updateCount by calling the incrementUpdateCount\r\n   method using Lob reference mainted in the streams.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-13T06:56:02.910+0000","updated":"2007-06-13T06:56:02.910+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504189","id":"12504189","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"body":"Rick Hillegas (JIRA) wrote:\r\n> Thanks for the patch, Narayanan. I am reading it now. Here is an initial reaction:\r\n> \r\n> It seems to me that the input stream's position is an offset from\r\n> the start of the LOB. When the stream is recreated, the current\r\n> position (offset from the start of the LOB) does not change. So it\r\n> seems to me that Øystein's use-case is supported if the rewritten\r\n> chunks do not change size. So, I am puzzled. To support that use\r\n> case, is there any need to recreate the streams? It appears to me\r\n> that the recreation of the streams supports some other use-case, in\r\n> which the writer is writing bytes further on in the LOB, and not in\r\n> the porition that has already been read.\r\n\r\nThe use-case I came up with, is an argument for not throwing an\r\nexception when the underlying LOB has been changed since the stream\r\nwas created.  It does no require any particular behavior with respect\r\nto whether the updates will be seen by the stream.\r\n\r\nMy arguments for choosing the implementation that Narayanan proposes is:\r\n\r\n  - This is the way it has been implemented in the embedded driver\r\n  - It gives a clean behavior that is very easy to explain and\r\n    understand: You will see all updates made so far.\r\n\r\nAn alternative is, as Knut Anders suggests, that we give no guarantees\r\nwith respect to what updates will be seen.  The given use-case will\r\nstill be supported.  I guess we can make that the official story also\r\nfor embedded driver, even if the implementation guarantees a specific\r\nbehavior.\r\n\r\n> Do we have a use-case in mind for this scenario? It would be nice to\r\n> be able to argue to ourselves that we are building something that\r\n> solves a customer problem here.\r\n\r\nI doubt that most users would care here.  It seems to me that if you\r\nneed to work with a LOB, and need to read something you have written\r\nearlier, an application could use other data structures that are more\r\nsuitable than Blob/Clob objects (e.g., a byte array or a local file).\r\nAlso, if you insists on using Blob/Clob objects for this purpose, you\r\nwill be able to see your updates if you open a new stream.\r\n\r\n(Maybe a bit far-fetched, but Blob/Clob objects give you a mechanism\r\nfor temporary storage of large objects on a server.  It will probably\r\nbe more efficient than storing them in a database table since the\r\ntemporary LOBs support direct access to specific positions within the\r\nLOB, something Store does not.)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"created":"2007-06-13T10:26:33.347+0000","updated":"2007-06-13T10:26:33.347+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504211","id":"12504211","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"body":"Rick Hillegas (JIRA) wrote:\r\n> Thanks for the quick response, Narayanan. I think I can see how this\r\n> patch reduces the possibility of the inconsistency which you\r\n> describe. However, I think that there are race conditions in this\r\n> patch which could still give rise to that inconsistency--because the\r\n> read() methods handshake with the writers on entry and not on exit.\r\n\r\nThanks, for raising the issue of race conditions, Rick.  We might not\r\nhave considered that carefully enough.  One thing to note here is that\r\nBlob/Clob objects are local to one transaction/connection.  I do not\r\nthink it is very common for two threads to share the same connection,\r\nbut we need to consider what would happen in such cases.  \r\n\r\nIn the client driver, Blob and Clob operations synchronize on the\r\nconnection, associated streams do not.  (This has not changed from\r\n10.2).  However, in 10.3 reads and writes will lead to calls to stored\r\nprocedures, which synchronize on the connection.  Hence, only one\r\nthread will read or write LOB fragments at a time.  However, for large\r\ndata transfers (> max VARCHAR size), reads and writes will not be\r\natomic.  Readers may see parts of what is written by a single API\r\ncall.  I am not sure how big a problem this is, but I think we should\r\nconsider also synchronizing on the connection in streams.\r\n\r\n> What I'm struggling to understand is this: why are the\r\n> inconsistencies allowed by this patch better than the\r\n> inconsistencies allowed if we don't do anything? \r\n\r\nThe major difference is that the inconsistencies that Narayanan is\r\nadressing in this issue will also appear in single-threaded\r\nenvironments.  That is a greater concern since multithreaded access in\r\nthe same transaction is not very likely.  \r\n\r\nIt is also quite separate issues since the multi-threaded issue should\r\nbe solved by synchronizing on the connection, while that will not\r\nhelp here.  (We must also make sure that the implementation does not\r\nintroduce new multi-threaded issues.)\r\n\r\n> What are the supported use-cases which we want to document? If I\r\n> understood those use-cases, then I could reason about whether this\r\n> patch actually delivers the intended benefit.\r\n\r\nI feel that the best would be if did not have to document any\r\nuse-cases at all because the behavior is so well-defined that the\r\nprogrammer by himself could imply how to behave. \r\nNarayanan's proposal will make it possible to say: \"A read operation\r\non a stream will see all previous updates to a Blob/Clob object\", and\r\nI think most people would understand what that implies.\r\n\r\nIn my view, the major benefit of this patch is that you get a\r\nwell-defined behavior.  Whether that is enough value to justify the\r\npatch, I am not 100% sure of.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"created":"2007-06-13T12:24:34.579+0000","updated":"2007-06-13T12:24:34.579+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504298","id":"12504298","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the reviews and comments on the earlier patch Rick.\r\n\r\nIn the attached patch I have\r\n\r\nI have made UpdateSensitiveLOBLocatorInputStream  abstract.\r\n\r\nAdded a method to Lob that checks for locator validity.\r\nI have moved the calls to this method to the UpdateSensitive\r\nstreams.\r\n\r\nI ran BlobClob4BlobTest, jdbc4/BlobTest, jdbc4/ClobTest and the \r\nUpdateable streams test that I have enabled in the patch and saw\r\nno failures.\r\n\r\nI am running junit All now.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-13T15:55:09.451+0000","updated":"2007-06-13T15:55:09.451+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504327","id":"12504327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks Anurag, Knut, Narayanan, and Øystein for the additional clarification. Is this a fair statement of the customer-visible behavior:\r\n\r\n\"A thread will always see the writes which it has made to the LOB. It is not defined whether a thread will see writes made by other threads to the LOB.\"\r\n\r\nWhatever the contract turns out to be, we should describe it in the user guides. A release note is not sufficient.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-13T16:59:22.167+0000","updated":"2007-06-13T16:59:22.167+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504343","id":"12504343","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks for the additional modifications, Narayanan.\r\n\r\n>>5) Why is incrementUpdateCount() called in these streams? Shouldn't the update count be\r\n>> incremented by the Blob and Clob methods which do the actual writing?\r\n>\r\n>   readCharacters, writeCharacters, writeBytes on the Locator streams forward their calls to\r\n>   the framework that calls the stored procedures with the locator value obtained\r\n>   from the Lob. The only way to reach the update count being the Lob reference\r\n>   >\\that is maintained within these streams.\r\n>\r\n> ...\r\n\r\nI think I'm missing something. BlobLocatorOutputStream.writeBytes() does the following:\r\n\r\n            connection.locatorProcedureCall()\r\n                .blobSetBytes(blob.locator_, currentPos, b.length, b);\r\n\r\n            ...\r\n\r\n            blob.incrementUpdateCount();\r\n\r\nWhy can't BlobLocatorOutputStream.writeBytes()  do something like the following, instead:\r\n\r\n            blob.setBytesX( currentPos, b, 0, b.length );\r\n\r\nBlob.setBytesX() already increments the update count and there is no need for BlobLocatorOutputStream to do this. I think that the bumping of the update count should be encapsulated in the Lob and incrementUpdateCount() should be a private method.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-13T17:29:25.139+0000","updated":"2007-06-13T17:29:25.139+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504549","id":"12504549","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the comments Rick\r\n\r\nI had run tests on v2 and saw no failures.\r\n\r\nI will do the modification you have suggested and post a patch\r\nagain.\r\n\r\nThanks once again for the detailed reviews and comments.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-14T05:49:26.772+0000","updated":"2007-06-14T05:49:26.772+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504567","id":"12504567","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the comments Rick.\r\n\r\nI have addressed the issue as pointed out by you\r\nand have also implemented you suggestion.\r\n\r\nI am running junit All now and shall revert\r\nback with the results.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-14T07:10:39.171+0000","updated":"2007-06-14T07:10:39.171+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504700","id":"12504700","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I have run junit All and observed no failures. I request for this patch to be considered for a commit.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-14T12:50:12.315+0000","updated":"2007-06-14T12:50:12.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504710","id":"12504710","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"body":"Patch looks good.  A few comments/questions:\r\n\r\n- When you recreate the stream, are you getting the right length?  It\r\n  seems to me that if something has been read (the position has\r\n  changed from when creating the previous stream), the remaining\r\n  length should be smaller than what it was initially.\r\n\r\n- When using setBytesX, I recommend using the return value to\r\n  determine the number of bytes written since I do not think setBytesX\r\n  guarantees that everything is written (even if it always will).  I\r\n  guess you then would need a loop to make sure everything is written.\r\n\r\n- The use of -1 for unset maxPos complicates stuff a bit.  Would it\r\n  not be possible to set maxPos to the end of the Blob/Clob instead if\r\n  it was not specified?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=oysteing","name":"oysteing","emailAddress":"oystein dot grovlen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Øystein Grøvlen","active":true},"created":"2007-06-14T13:03:58.344+0000","updated":"2007-06-14T13:03:58.344+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504767","id":"12504767","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"- When you recreate the stream, are you getting the right length?  It\r\n>  seems to me that if something has been read (the position has\r\n>  changed from when creating the previous stream), the remaining\r\n>  length should be smaller than what it was initially.\r\n\r\nYou are correct. In the cases where the subset of the stream is requested\r\n(using getCharacterStream(long, long), getBinaryStream(long, long) the \r\nlength has to be re-calculated as length-currentPos+1.\r\n\r\n>- When using setBytesX, I recommend using the return value to\r\n>  determine the number of bytes written since I do not think setBytesX\r\n>  guarantees that everything is written (even if it always will).  I\r\n>  guess you then would need a loop to make sure everything is written.\r\n\r\nsetBytesX internally calls the framework method blobSetBytes that has\r\na while loop that ensures that all the bytes are sent. Adding a loop\r\nis redundant because it will never be called.\r\n\r\n>- The use of -1 for unset maxPos complicates stuff a bit.  Would it\r\n>  not be possible to set maxPos to the end of the Blob/Clob instead if\r\n>  it was not specified?\r\n\r\nThe end of the Blob/Clob is variable. It can keep increasing with writes\r\nand decreasing with truncates. Hence it would really not be possible to\r\nfind out if it was really a value set to represent a subset of the stream\r\nor the end of the stream.\r\n\r\nI have fixed the length issue in the patch attached. I have run\r\n\r\n1) jdbcapi/BlobClob4BlobTest\r\n2) jdbc4/BlobTest\r\n3) jdbc4/ClobTest\r\n4) jdbcapi/ClobUpdateableReaderTest\r\n5) jdbcapi/BlobUpdateableStreamTest\r\n\r\nwithout any failures.\r\n\r\nI request for this patch to be considered for a commit.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-14T15:06:20.968+0000","updated":"2007-06-14T15:06:20.968+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504796","id":"12504796","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks for all the great work, Narayanan. Looks like my concerns have been addressed. I am running the tests now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-14T16:07:13.898+0000","updated":"2007-06-14T16:07:13.898+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12504894","id":"12504894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Committed at revision 547382.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2007-06-14T20:00:14.459+0000","updated":"2007-06-14T20:00:14.459+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12505030","id":"12505030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for the commit Rick !\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-15T04:30:27.316+0000","updated":"2007-06-15T04:30:27.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12505055","id":"12505055","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"All patches submitted and committed!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-15T06:08:57.979+0000","updated":"2007-06-15T06:08:57.979+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12505916","id":"12505916","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Noticed that the changes for this issue are causing some javadoc warnings:\r\n\r\n[javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveBlobLocatorInputStream.java:53: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveBlobLocatorInputStream.java:74: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveClobLocatorInputStream.java:53: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveClobLocatorReader.java:72: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveClobLocatorReader.java:72: warning - @param argument \"r\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveClobLocatorReader.java:110: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveClobLocatorReader.java:110: warning - @param argument \"r\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveLOBLocatorInputStream.java:87: warning - @param argument \"connection\" is not a parameter name.\r\n      [javadoc] java\\client\\org\\apache\\derby\\client\\am\\UpdateSensitiveLOBLocatorInputStream.java:123: warning - @param argument \"connection\" is not a parameter name.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-06-18T18:37:01.628+0000","updated":"2007-06-18T18:37:01.628+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12506051","id":"12506051","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"Thank you for catching this. I will raise a seperate JIRA for this and \r\nsubmit a patch.\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-19T05:38:28.177+0000","updated":"2007-06-19T05:38:28.177+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12370925/comment/12506147","id":"12506147","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"body":"I have addressed the javadoc issues pointed out here in https://issues.apache.org/jira/browse/DERBY-2846.\r\n\r\nThanx again for pointing this out.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=narayanan","name":"narayanan","emailAddress":"v dot narayanan at sun dot com-disabled","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"V.Narayanan","active":true},"created":"2007-06-19T12:52:54.114+0000","updated":"2007-06-19T12:52:54.114+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2763/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0774n:"}}