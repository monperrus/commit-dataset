{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12701934","self":"https://issues.apache.org/jira/rest/api/latest/issue/12701934","key":"CASSANDRA-6875","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310865","id":"12310865","key":"CASSANDRA","name":"Cassandra","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310865&avatarId=12034","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310865&avatarId=12034","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310865&avatarId=12034","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310865&avatarId=12034"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11961","id":"11961","description":"Apache Cassandra related projects","name":"Cassandra"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326830","id":"12326830","name":"2.0.9","archived":false,"released":true,"releaseDate":"2014-06-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326658","id":"12326658","name":"2.1 rc1","archived":false,"released":true,"releaseDate":"2014-06-02"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2014-03-17 17:52:50.817","customfield_12312322":null,"customfield_12312323":null,"customfield_12310222":"3_*:*_1_*:*_1732244535_*|*_10002_*:*_2_*:*_2587164770_*|*_1_*:*_1_*:*_1570885314_*|*_5_*:*_2_*:*_420765447_*|*_4_*:*_1_*:*_7401","customfield_12310420":"380274","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2014-05-29T18:29:44.359+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-6875/watchers","watchCount":9,"isWatching":false},"created":"2014-03-17T17:25:16.949+0000","customfield_10022":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12311124":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12406734","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12406734","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"inwardIssue":{"id":"12738176","key":"CASSANDRA-7854","self":"https://issues.apache.org/jira/rest/api/2/issue/12738176","fields":{"summary":"Unable to select partition keys directly using IN keyword (no replacement for multi row multiget in thrift)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-01-29T09:41:10.647+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313742","id":"12313742","name":"API","description":"CQL or Thrift issues"}],"timeoriginalestimate":null,"description":"In the spirit of CASSANDRA-4851 and to bring CQL to parity with Thrift, it is important to support reading several distinct CQL rows from a given partition using a distinct set of \"coordinates\" for these rows within the partition.\r\n\r\nCASSANDRA-4851 introduced a range scan over the multi-dimensional space of clustering keys. We also need to support a \"multi-get\" of CQL rows, potentially using the \"IN\" keyword to define a set of clustering keys to fetch at once.\r\n\r\n(reusing the same example\\:)\r\n\r\nConsider the following table:\r\n{code}\r\nCREATE TABLE test (\r\n  k int,\r\n  c1 int,\r\n  c2 int,\r\n  PRIMARY KEY (k, c1, c2)\r\n);\r\n{code}\r\nwith the following data:\r\n{code}\r\n k | c1 | c2\r\n---+----+----\r\n 0 |  0 |  0\r\n 0 |  0 |  1\r\n 0 |  1 |  0\r\n 0 |  1 |  1\r\n{code}\r\n\r\nWe can fetch a single row or a range of rows, but not a set of them:\r\n\r\n{code}\r\n> SELECT * FROM test WHERE k = 0 AND (c1, c2) IN ((0, 0), (1,1)) ;\r\nBad Request: line 1:54 missing EOF at ','\r\n{code}\r\n\r\nSupporting this syntax would return:\r\n{code}\r\n k | c1 | c2\r\n---+----+----\r\n 0 |  0 |  0\r\n 0 |  1 |  1\r\n{code}\r\n\r\nBeing able to fetch these two CQL rows in a single read is important to maintain partition-level isolation.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12646927","id":"12646927","filename":"6875-part2.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-27T16:13:30.234+0000","size":6132,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12646927/6875-part2.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12647345","id":"12647345","filename":"6875-part2-v2.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-29T10:45:11.859+0000","size":7293,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12647345/6875-part2-v2.txt"}],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"380557","summary":"CQL3: select multiple CQL rows in a single partition using IN","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nff","name":"nff","emailAddress":"n dot favrefelix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nff&avatarId=15634","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nff&avatarId=15634","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nff&avatarId=15634","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nff&avatarId=15634"},"displayName":"Nicolas Favre-Felix","active":true},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nff","name":"nff","emailAddress":"n dot favrefelix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=nff&avatarId=15634","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nff&avatarId=15634","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nff&avatarId=15634","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nff&avatarId=15634"},"displayName":"Nicolas Favre-Felix","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"customfield_12311420":null,"customfield_12311421":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":28,"total":28,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13938104","id":"13938104","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"That's a relatively nature extension of CASSANDRA-4851 and we can definitively support that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-03-17T17:52:50.817+0000","updated":"2014-03-17T17:52:50.817+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13955776","id":"13955776","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=brandon.williams","name":"brandon.williams","emailAddress":"driftx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=brandon.williams&avatarId=10054","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=brandon.williams&avatarId=10054","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=brandon.williams&avatarId=10054","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=brandon.williams&avatarId=10054"},"displayName":"Brandon Williams","active":true},"body":"Since CASSANDRA-4851 was in 2.0, let's do this one in 2.0 as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=brandon.williams","name":"brandon.williams","emailAddress":"driftx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=brandon.williams&avatarId=10054","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=brandon.williams&avatarId=10054","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=brandon.williams&avatarId=10054","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=brandon.williams&avatarId=10054"},"displayName":"Brandon Williams","active":true},"created":"2014-03-31T21:59:34.739+0000","updated":"2014-03-31T21:59:34.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13973391","id":"13973391","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"Regarding prepared statements, I assume we want to support all of the following:\r\n* {{... WHERE (c1, c2) IN ?}}\r\n* {{... WHERE (c1, c2) IN (?, ?, ...)}}\r\n* {{... WHERE (c1, c2) IN ((?, ?), (?, ?), ...)}}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-04-17T20:50:26.803+0000","updated":"2014-04-17T20:50:46.048+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13980438","id":"13980438","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"A first version of the patch is available as a branch here: https://github.com/thobbs/cassandra/tree/CASSANDRA-6875-2.0.\r\n\r\nNote that the first commit just splits up {{SelectStatement.RawStatement.prepare()}} into smaller functions, so you'll get a more useful diff this way: https://github.com/thobbs/cassandra/compare/3808c2b35993fed50554f13a73b2444afb598715...CASSANDRA-6875-2.0\r\n\r\nAfter review, I'll make a 2.1 version of the changes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-04-24T22:57:26.792+0000","updated":"2014-04-24T22:57:26.792+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13983930","id":"13983930","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=brandon.williams","name":"brandon.williams","emailAddress":"driftx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=brandon.williams&avatarId=10054","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=brandon.williams&avatarId=10054","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=brandon.williams&avatarId=10054","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=brandon.williams&avatarId=10054"},"displayName":"Brandon Williams","active":true},"body":"Moving this back to 'bug', [~mfiguiere], because anything that thrift can do that CQL can't is a bug.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=brandon.williams","name":"brandon.williams","emailAddress":"driftx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=brandon.williams&avatarId=10054","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=brandon.williams&avatarId=10054","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=brandon.williams&avatarId=10054","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=brandon.williams&avatarId=10054"},"displayName":"Brandon Williams","active":true},"created":"2014-04-29T03:04:36.398+0000","updated":"2014-04-29T03:04:36.398+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13984098","id":"13984098","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mfiguiere","name":"mfiguiere","emailAddress":"michael dot figuiere at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mfiguiere&avatarId=22155","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mfiguiere&avatarId=22155","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mfiguiere&avatarId=22155","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mfiguiere&avatarId=22155"},"displayName":"Michaël Figuière","active":true},"body":"All right. Makes sense.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mfiguiere","name":"mfiguiere","emailAddress":"michael dot figuiere at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mfiguiere&avatarId=22155","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mfiguiere&avatarId=22155","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mfiguiere&avatarId=22155","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mfiguiere&avatarId=22155"},"displayName":"Michaël Figuière","active":true},"created":"2014-04-29T07:40:53.530+0000","updated":"2014-04-29T07:40:53.530+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13985587","id":"13985587","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"The overall principle looks good, but I feel this could use some more comments and/or made a little more clear. Mainly, the {{isMultiColumn}} path in {{SelectStatement.buildBound}} looks weird at face value: we're inside a loop that populates a {{ColumnNameBuilder}}, but the {{isMultiColumn}} path completely ignores both the iterated object and the builder. This work because it relies on the fact that when there is a multi-column restriction then it's the only one restriction (which is duplicated in the {{SelectStatement.columnRestrictions}} array), and that the value from such restriction is not a single column value but rather a fully built composite serialized value (which is not self evident from the method naming in particular).  But it's hard to piece it all that together when you look at {{buildBound}} currently.  Some comments would help, but I'd prefer going even further and move the {{isMultiColumn}} path outside of the loop (by looking up first if the first restriction in {{columnRestrictions}} is a multi-column one or not) since it has no reason to be in the loop. In fact, I'd go a tad further by making SelectStatement abstract and have 2 subClass, one for single-column restrictions with a {{SingleColumnRelation[] columnRestrictions}} array field as we have now, and one for multi-column that has just one non-array {{MultiColumnRestriction columnsRestriction}} field. After all, both cases exclude one another in the current implementation.\r\n\r\nSomewhat related, I'm slightly afraid that the parts about multi-column restrictions returning fully serialized composites (through Tuples.Value.get()) will not play nice with the 2.1 code, where we don't manipulate composites as opaque ByteBuffers anymore (concretely, Tuples will serialize the composite, but SelectStatement will have to deserialize it back right away to get a Composite, which will be both ugly and inefficient).  So to avoid having to change everything on merge, I think it would be cleaner to make Tuples.Value return a list of (individual column) values instead of just one, and let SelectStatement build back the full composite name using a ColumnNameBuilder.  Especially if you make the per-column and multi-column paths a tad more separated as suggested above, I suspect it might clarify things a bit.  \r\n\r\nOther than that, a bunch of more minor comments and nits:\r\n* The {{SelectStatement.RawStatement.prepare()}} re-org patch breaks proper indentation at places (for instance, the indentation of parameters to 'new ColumnSpecification' in the first branch of udpateSingleColumnRestriction, though there is a few other places). Would be nice to fix those.\r\n* Can't we use {{QueryProcessor.instance.getPrepared}} instead of creating a only-for-test {{QueryProcessor.staticGetPrepared}}? Or at the very least leave such shortcuts in the tests where it belongs.\r\n* In Tuples.Literal.prepare, I'd prefer good ol'fashion indexed loop to iterate over 2 lists (feels clearer, and saves the allocator creation as a bonus).\r\n* In Tuples.Raw.makeInReceiver should probably be called makeReceiver (it's not related to \"IN\"). I'd also drop the spaces in the string generated (if only for consistency with the string generated in INRaw). As a side node, Raw.makeReceiver uses indexed iteration while INRaw.makeInReceiver don't, can't we make both consistent style wise for OCD sakes?\r\n* Why make methods of CQLStatement abstract (it's an interface)?  Also, I'd rather add the QueryOptions parameter to the existing executeInternal and default to QueryOptions.DEFAULT when calling it, rather than having 2 methods. Though tbh, my preference would be to move the tests to dtest and leave those somewhat unrelated changes to another ticket, see below.\r\n* SingleColumnRelation.previousInTuple is now unused but not removed.\r\n* We could save one list allocation (instead of both toCreate and toUpdate) in SelectStatement.updateRestrictionsForRelation (for EQ and IN, we know it can only be a create, and for slices we can lookup with getExisting).\r\n* In Restriction, the {{values}} method is already at top-level, no reason to re-declare it for EQ.\r\n* It bothers me to start adding unit tests for CQL queries when all of our CQL tests are currently in dtest. I'd *much* rather keep it all in the dtests to avoid the confusion on where is what tested.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-04-30T14:52:39.076+0000","updated":"2014-04-30T14:52:39.076+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986178","id":"13986178","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"bq. It bothers me to start adding unit tests for CQL queries when all of our CQL tests are currently in dtest. I'd much rather keep it all in the dtests to avoid the confusion on where is what tested.\r\n\r\nI went with unit tests for a couple of reasons.  The main one is that we can't use prepared statements with the dtests right now (as far as I can tell).  The other is that it's a lot faster to work with unit tests than dtests here, and a distributed setup isn't really required for any of these tests.  We should definitely have a discussion about where and how to test in general (maybe in a dev ML thread), but my feeling is that dtests are good for:\r\n* Testing end-to-end\r\n* Tests that require more than one node\r\n\r\nOtherwise, if it's reasonable to do in a unit test, I don't see why we wouldn't do it there.  FWIW, if we could use prepared statements in the dtests, I would also add some of the prepared statement test cases from the unit tests there.\r\n\r\nAll of your other suggestions sound good, thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-04-30T22:40:33.415+0000","updated":"2014-04-30T22:40:33.415+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986466","id":"13986466","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"bq. we can't use prepared statements with the dtests right now (as far as I can tell)\r\n\r\nWe can, see cql_prepared_test.py (arguably our number of tests for prepared statement is deeply lacking, but it's possible to have some).\r\n\r\nOn the more general question of where tests should go, we could have a debate I suppose (but definitively not here), but frankly, I don't think there is very many downside to having the tests in the dtests and since we have tons of them there already, I'd much rather not waste precious time at changing for the sake of change. But quickly, the reasons why I think dtests are really not that bad here:\r\n# it doesn't get a whole lot more end-to-end than the CQL tests imo.\r\n# dtests feels to me a lot more readable and easier to work with. Mainly because for that kind of tests python is just more comfortable/quick to get things done.\r\n# there *is* a few of the CQL dtests where we do want a distributed setup, like CAS tests. Of course we could left those in dtests and move the rest in the unit test suite, but keeping all CQL tests at the same place just feels simpler (you don't duplicate all those small utility functions that you invariably need to make tests easier).\r\n# I work with unit tests and dtests daily, and it honestly is not at all my experience that working with unit tests is a \"lot faster\". Quite the contrary in fact. I'm willing to admit that one may be more comfortable with one suite or the other, but I'll fight to the death the concept that \"unit test are a *lot* faster to work with\" as an absolute truth.\r\n\r\nI'll note the CQL dtests are not perfect. They could use being reorganized a bit, and we can speed them up dramatically by not spinning up a cluster on every test. That said, fixing those issue is likely simpler than migrating all the existing tests back to the unit tests.\r\n\r\nAll this said, to focus back on this issue, I'd rather keep CQL tests to dtests for now (even if we do start a debate on changing that fact on dev list), but I won't block the issue if that's not the case. That remark was in the category \"minor comments\".","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-01T09:35:45.840+0000","updated":"2014-05-01T09:35:45.840+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986584","id":"13986584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=enigmacurry","name":"enigmacurry","emailAddress":"ryan at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=enigmacurry&avatarId=17535","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=enigmacurry&avatarId=17535","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=enigmacurry&avatarId=17535","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=enigmacurry&avatarId=17535"},"displayName":"Ryan McGuire","active":true},"body":"bq. We can, see cql_prepared_test.py (arguably our number of tests for prepared statement is deeply lacking, but it's possible to have some).\r\n\r\n[~slebresne] Is that test possibly uncommitted? I actually don't have that test in my repo.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=enigmacurry","name":"enigmacurry","emailAddress":"ryan at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=enigmacurry&avatarId=17535","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=enigmacurry&avatarId=17535","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=enigmacurry&avatarId=17535","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=enigmacurry&avatarId=17535"},"displayName":"Ryan McGuire","active":true},"created":"2014-05-01T13:48:18.790+0000","updated":"2014-05-01T13:48:18.790+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986597","id":"13986597","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Ahah, it is uncommitted. Well I just did commit it for info. It's just one uninteresting test though, not sure why I never committed it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-01T13:57:40.954+0000","updated":"2014-05-01T13:57:40.954+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986770","id":"13986770","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"bq. We can, see cql_prepared_test.py (arguably our number of tests for prepared statement is deeply lacking, but it's possible to have some).\r\n\r\nAh, thanks, good to know.\r\n\r\nbq. I'll fight to the death the concept that \"unit test are a lot faster to work with\" as an absolute truth.\r\n\r\nDon't worry, I'm not going to challenge you to a duel :).  It's not an absolute truth, but it's easy to do things like run a unit test with the debugger on, which makes a big difference in some cases.\r\n\r\nbq. fixing those issue is likely simpler than migrating all the existing tests back to the unit tests.\r\n\r\nI'm definitely not suggesting moving any existing dtests to unit tests.  I'm just proposing that we allow some mix of unit tests and dtests for newly written tests.\r\n\r\nbq.  we could have a debate I suppose (but definitively not here)\r\n\r\nDo you mind if I start a dev ML thread?  It would be good to get input from other devs and QA.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-01T17:04:08.124+0000","updated":"2014-05-01T17:04:08.124+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986810","id":"13986810","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"bq. Do you mind if I start a dev ML thread?\r\n\r\nAbsolutely not.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-01T17:48:25.827+0000","updated":"2014-05-01T17:48:25.827+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13986889","id":"13986889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"After thinking more closely about splitting up SelectStatement into two subclasses for single-column and multi-column restrictions, I'm not 100% convinced that's the best path.\r\n\r\nFor example, suppose you have a query like {{SELECT * FROM foo WHERE key=0 AND c1 > 0 AND (c1, c2) < (2, 3)}}.  We could a) require it to be written like {{(c1) > (0) AND (c1, c2) < (2, 3)}}, or b) accept that syntax and correctly reduce the expressions to a single multi-column slice restriction.  I'm not sure that option (b) would be clearer than keeping the restrictions separate.\r\n\r\nI can also imagine us supporting something like {{SELECT ... WHERE key=0 AND c1=0 AND (c2, c3) > (1, 2)}} in the future.  Of course, we could also require this to be written differently ({{(c1, c2, c3) > (0, 1, 2) AND (c1) <= (0)}} or reduce it to a single multi-column slice restriction.  I'm just pointing out that this may become less clear than simply improving the bounds-building code (which I agree is needed).\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-01T19:15:57.966+0000","updated":"2014-05-01T19:15:57.966+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13987526","id":"13987526","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I don't disagree, the split I'm suggesting is not absolutely future proof, and we'll need to find something better in the long run. But that don't change the fact that storing multi-column restriction in an array when we only use one is misleading and error prone as of this patch imo. I mainly meant the splitting as a way to support what we do support today more cleanly, but I do absolutely think SelectStatement will require much serious refactoring sooner than later. There's CASSANDRA-4762 too that we will want to get at some point (which, it's worth mentioning, is made slightly less urgent by this ticket because it covers some of the same cases, though it's not fully equivalent) that will complicate matters here.\r\n\r\nSo anyway, I'm all for a third option that is both clean and future proof, but I'm coming short here right now. Or rather, I see ways to get there, but they require more refactoring than is reasonable for a 2.0 target. So I went with the suggestion that felt cleaner, if not too future proof :). But if you prefer not do the class splitting, I can live with that as long as we maybe split buildBound and add some comments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-02T09:17:55.934+0000","updated":"2014-05-02T09:17:55.934+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13992153","id":"13992153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"It turns out that the tuple notation allows for non-contiguous slices when {{CLUSTERING ORDER}} specifies some reversed comparators.  For example, with current 2.0:\r\n\r\n{noformat}\r\ncqlsh:ks> create table foo (a int, b int, c int, PRIMARY KEY (a, b, c)) WITH CLUSTERING ORDER BY (b DESC, c ASC);\r\ncqlsh:ks> INSERT INTO foo (a, b, c) VALUES (0, 2, 0);\r\ncqlsh:ks> INSERT INTO foo (a, b, c) VALUES (0, 1, 0);\r\ncqlsh:ks> INSERT INTO foo (a, b, c) VALUES (0, 1, 1);\r\ncqlsh:ks> INSERT INTO foo (a, b, c) VALUES (0, 0, 0);\r\ncqlsh:ks> SELECT * FROM foo WHERE a=0;\r\n\r\n a | b | c\r\n---+---+---\r\n 0 | 2 | 0\r\n 0 | 1 | 0\r\n 0 | 1 | 1\r\n 0 | 0 | 0\r\n\r\n(4 rows)\r\n\r\ncqlsh:ks> SELECT * FROM foo WHERE a=0 AND (b, c) > (1, 0);\r\n\r\n a | b | c\r\n---+---+---\r\n 0 | 2 | 0\r\n\r\n(1 rows)\r\n{noformat}\r\nThe correct query response would be two rows: {{(0, 2, 0) and (0, 1, 1)}}, which requires two slices.  We could of course build bounds for two slices, but I think this exposes a deeper problem: how does a user get everything in the partition after {{(0, 1, 0)}}?  It is not possible to express this with tuple notation alone.  You need to be able to do {{WHERE a=0 AND ((b=1 AND c > 0) OR b < 1)}}.\r\n\r\nThe scope of this ticket doesn't really include fixing that, so I can maintain the current behavior here.  We will eventually need to add support for disjunctions, though.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-07T19:46:46.757+0000","updated":"2014-05-07T19:46:46.757+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13993078","id":"13993078","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"Okay, most of your concerns should be addressed on the [same branch|https://github.com/thobbs/cassandra/compare/3808c2b35993fed50554f13a73b2444afb598715...CASSANDRA-6875-2.0].\r\n\r\nAs I mentioned, I've kept the same behavior for slices over mixed-asc/desc comparators; I'll wait for your response to decide what to do about that.\r\n\r\nTuples.Value no longer returns serialized values, so {{buildBounds}} takes care of that work.  It seemed cleanest to just split out different functions for building the different types of multi-column bounds instead of fitting it all into one loop.\r\n\r\nI did try moving MultiColumnRestrictions into a separate attribute in SelectStatement, but that didn't seem to make things much clearer.  The column names that the restriction applies to would need to be separately tracked.  When processing restrictions, you would have to refer back to that list and check it or update it.  I think the current behavior is reasonably clear if you think of it like this: SelectStatement.columnRestrictions tracks restrictions on each column; in the case of multi-column restrictions, some columns may share a single restriction object.\r\n\r\nOnce ASF mail is working again, I'll start that thread about tests on the dev ML.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-08T20:35:13.439+0000","updated":"2014-05-08T20:35:13.439+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13996581","id":"13996581","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I haven't looked at that last version yet (but will try to shortly), but something occured to me. The patch currently use CompositeType for tuple markers (and thus tuple values must be serialized following CompositeType). We shouldn't do that. CompositeType is a type that is never used by the native protocol so 1) it will appear like a \"custom type\" to drivers and 2) the composite encoding is inconsistent with the rest of the encodings and in particular the end-of-component that said encoding contains is completely useless. This is basically the same problem than CASSANDRA-7209, we shouldn't commit to such inadequate encoding.\r\n\r\nAnother way to put it is that this patch introduces the concept of tuple values in the native protocol, but we don't have such type. So maybe the right way to go would be to introduce such tuple type first (which would really just be some form of anymous user type) and use that. Of course, adding such type is even more out of scope for 2.0 than this ticket already is. So i think we may want to introduce such tuple type in 2.1 but I suppose we could still commit this to 2.0 but with the right encoding (there is no reason not to reuse the one for user type from CASSANDRA-7209) and just some simple TupleType (that won't have more support in 2.0 that what this issue does; it will be exposed to drivers as a custom type for 2.0 but I don't think there is anything we can do about that one).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-13T16:36:52.299+0000","updated":"2014-05-13T16:36:52.299+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/13999757","id":"13999757","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I've created CASSANDRA-7248 for the more general support of tuple types discussed above. I'll note that imo the correct course of action would be to postpone this to 2.1 and base it on top of that CASSANDRA-7248. This would make it much easier on the client drivers anyway since they'll have support for the TupleType in the v3 protocol, while if we commit this to 2.0 they won't and will have to special case for it. Also, the changes here are far from trivial so it would also make sense in term of \"not introducing risky new features\" in a minor release.\r\n\r\nThough if we absolutely insist on getting this in 2.0, we can just extract the TupleTyple AbstractType from the CASSANDRA-7248 patch and use that here.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-16T11:52:20.065+0000","updated":"2014-05-16T11:52:20.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14004088","id":"14004088","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"I've backported TupleType from 7248 and pushed my changes to the same branch.  (I merged in cassandra-2.0, so let me know if you'd like a rebase or anything.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-20T22:49:58.880+0000","updated":"2014-05-20T22:49:58.880+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14004951","id":"14004951","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"bq. As I mentioned, I've kept the same behavior for slices over mixed-asc/desc comparators; I'll wait for your response to decide what to do about that.\r\n\r\nThat's definitively a problem and we should fix it. I've created CASSANDRA-7281 for that.  As far as this patch goes, as long as it preserve correct behavior for all-ASC or all-DESC (which I believe it does), we can leave the rest to CASSANDRA-7281.\r\n\r\nThe patch lgtm with 2 minor nits (and you will have to rebase it before commit btw):\r\n* In buildBound, I believe we can as well check restriction[ 0], saving the iterator creation.\r\n* There's an unecessary import in QueryProcessor (of VisibleForTesting)\r\n\r\nThat said, I'm still a bit uncomfortable pushing this in 2.0 given where we are of the 2.0 cycle. But if I'm the only one feeling this way, I suppose I can shut up (and so +1 minus that caveat).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-21T17:25:26.773+0000","updated":"2014-05-21T17:25:26.773+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14006356","id":"14006356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"Thanks! Committed with the nits fixed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-22T19:22:10.013+0000","updated":"2014-05-22T19:22:10.013+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14006950","id":"14006950","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"[~thobbs] Can you bump the CQL version in QueryProcessor and update the CQL doc accordingly too?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-23T07:36:59.905+0000","updated":"2014-05-23T07:36:59.905+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14007313","id":"14007313","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"[~slebresne] done.  Thanks for catching that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-23T16:22:58.588+0000","updated":"2014-05-23T16:22:58.588+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14009075","id":"14009075","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wtmitchell3","name":"wtmitchell3","emailAddress":"wtmitchell3 at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bill Mitchell","active":true},"body":"To try this out, I cobbled up a test case by accessing the TupleType directly on the client side, as this feature is not yet supported in the Java driver.  My approach was to serialize my two ordering column values, then use TupleType.buildValue() to concatenate them into a single ByteBuffer, build a List of all these, then use serialize on a ListType<ByteBuffer> instance to get a single ByteBuffer representing the entire list, and bind that using setBytesUnsafe().  I'm not totally sure of all this, but it seems reasonable.  \r\n\r\nMy SELECT statement syntax followed the first of the three Tyler suggested: ... WHERE (c1, c2) IN ?, as this allows the statement to be prepared only once, irrespective of the number of compound keys provided.  \r\n\r\nWhat I saw was the following traceback on the server:\r\n14/05/26 14:33:09 ERROR messages.ErrorMessage: Unexpected exception during request\r\njava.util.NoSuchElementException\r\n\tat java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:396)\r\n\tat java.util.LinkedHashMap$ValueIterator.next(LinkedHashMap.java:409)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.buildMultiColumnInBound(SelectStatement.java:941)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.buildBound(SelectStatement.java:814)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.getRequestedBound(SelectStatement.java:977)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.makeFilter(SelectStatement.java:444)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.getSliceCommands(SelectStatement.java:340)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:210)\r\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:61)\r\n\tat org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:158)\r\n\tat org.apache.cassandra.cql3.QueryProcessor.processPrepared(QueryProcessor.java:309)\r\n\tat org.apache.cassandra.transport.messages.ExecuteMessage.execute(ExecuteMessage.java:132)\r\n\tat org.apache.cassandra.transport.Message$Dispatcher.messageReceived(Message.java:304)\r\n\r\nStepping through the code, it appears to have analyzed my statement correctly.  In BuildMultiColumnInBound, splitInValues contains 1426 tuples, which is the number I intended to pass.  The names parameter identifies two columns, createdate and emailcrypt.  The loop executes twice, but on the third iteration there are no more elements in names, thus the exception. \r\n\r\nMoving the construction of the iterator within the loop fixed my Exception.  The code still looks suspect, though, as it calculates a bound b based on whether the first column is reversed, then uses bound, not b, in the following statement.  I've not researched which would be correct, as this appears closely related to the fix Sylvain just developed for CASSANDRA-7105.  In my test case, where the columns were declared as DESC, the code as fixed below did return all the expected rows. \r\n\r\n{code}\r\n        TreeSet<ByteBuffer> inValues = new TreeSet<>(isReversed ? cfDef.cfm.comparator.reverseComparator : cfDef.cfm.comparator);\r\n        for (List<ByteBuffer> components : splitInValues)\r\n        {\r\n            ColumnNameBuilder nameBuilder = builder.copy();\r\n            for (ByteBuffer component : components)\r\n                nameBuilder.add(component);\r\n\r\n            Iterator<CFDefinition.Name> iter = names.iterator();\r\n            Bound b = isReversed == isReversedType(iter.next()) ? bound : Bound.reverse(bound);\r\n            inValues.add((bound == Bound.END && nameBuilder.remainingCount() > 0) ? nameBuilder.buildAsEndOfRange() : nameBuilder.build());\r\n        }\r\n        return new ArrayList<>(inValues);\r\n{code}  \r\n\r\nP.S. I changed my test configuration to declare the ordering columns as ASC instead of DESC and reran the tests.  There was no failure with the code as changed.  So apparently the comparison of bound == and not b == works fine, which should mean that both iter and b can be dropped.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=wtmitchell3","name":"wtmitchell3","emailAddress":"wtmitchell3 at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bill Mitchell","active":true},"created":"2014-05-26T20:38:27.924+0000","updated":"2014-05-27T02:16:39.274+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14009846","id":"14009846","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"Good analysis, [~wtmitchell3].  We shouldn't need to adjust the bound for the comparator at all for IN queries (and the iterator was obviously being used incorrectly anyway).  6875-part2.txt fixes that and adds some unit test coverage for IN queries on reversed comparators and IN queries with more items than the number of components in the comparator..","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-27T16:13:30.239+0000","updated":"2014-05-27T16:13:30.239+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14012270","id":"14012270","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Mostly looks good, but for the same reasons than in CASSANDRA-7105, we shouldn't test {{bound == END}} but rather {{eocBound == END}}. Attaching a part2-v2 that simply change that and adds one test that exercise the problem. +1 from me with that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2014-05-29T10:45:11.866+0000","updated":"2014-05-29T10:45:11.866+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12701934/comment/14012665","id":"14012665","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"body":"Thanks, committed the v2 patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thobbs","name":"thobbs","emailAddress":"tyler at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thobbs&avatarId=17039","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thobbs&avatarId=17039","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thobbs&avatarId=17039","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thobbs&avatarId=17039"},"displayName":"Tyler Hobbs","active":true},"created":"2014-05-29T18:29:44.403+0000","updated":"2014-05-29T18:29:44.403+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-6875/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1tirz:"}}