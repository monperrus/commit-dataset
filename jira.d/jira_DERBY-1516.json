{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12346058","self":"https://issues.apache.org/jira/rest/api/latest/issue/12346058","key":"DERBY-1516","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2006-07-30 21:29:16.0","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22550","customfield_12310222":"1_*:*_1_*:*_2234364000_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_21430527132","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2006-08-11T16:49:22.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1516/watchers","watchCount":1,"isWatching":false},"created":"2006-07-16T20:09:58.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12312971","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12312971","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"32841","key":"DERBY-310","self":"https://issues.apache.org/jira/rest/api/2/issue/32841","fields":{"summary":"Document and/or change Derby client code to match behavior with Embedded driver where possible.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12313117","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12313117","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12347932","key":"DERBY-1691","self":"https://issues.apache.org/jira/rest/api/2/issue/12347932","fields":{"summary":"jdbcapi/blobclob4BLOB.java fails under DerbyNet framework with JCC 2.6","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12312938","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12312938","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12346951","key":"DERBY-1615","self":"https://issues.apache.org/jira/rest/api/2/issue/12346951","fields":{"summary":"Rewrite the Clob implementation in the client driver","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-21T18:08:42.131+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11407","id":"11407","name":"JDBC"}],"timeoriginalestimate":null,"description":"org.apache.derby.client.am.Clob.getSubString(pos, length) and org.apache.derby.client.am.Blob.getBytes(pos, length) check the length for less than zero. \n\n            if ((pos <= 0) || (length < 0)) {\n                throw new SqlException(agent_.logWriter_, \"Invalid position \" + pos + \" or length \" + length);\n\nBut org.apache.derby.impl.jdbc.EmbedClob(pos, length) and org.apache.derby.impl.jdbc.EmbedBlob(pos, length) check the length for less than or equal to zero.\n\n       if (length <= 0)\n            throw Util.generateCsSQLException(\n                SQLState.BLOB_NONPOSITIVE_LENGTH, new Integer(length));\n\nThe specification does not disallow length of zero, so zero length should be allowed. I believe that the implementation in org.apache.derby.client.am is correct, and the implementation in org.apache.derby.impl.jdbc is incorrect. \n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37173","summary":"Inconsistent behavior for getBytes and getSubString for embedded versus network","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":29,"total":29,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12421470","id":"12421470","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"The attached patch is against Derby 10.1. A similar patch should work for the current code base.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-07-16T20:11:43.000+0000","updated":"2006-07-16T20:11:43.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424307","id":"12424307","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"This patch applies to the trunk. I've updated the tests and canon for this change as well. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-07-29T18:59:32.000+0000","updated":"2006-07-29T18:59:32.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424444","id":"12424444","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Craig for the patch and thanks for volunteering for 10.2.  You bring us up to 43 contributors.  I hope we make 50  #:)\r\n\r\n The code change looks good.\r\n\r\nFor the test \r\n  - I  think  it would be good  to test both 0 and -1 length.\r\n  - I think we need a  full derbyall run with the patch in case other tests are affected.   I noticed with DerbyNetClient framework the blobclob4BLOB test fails with \r\n\r\n753 del\r\n< EXPECTED SQLSTATE(XJ071): Zero or negative length argument '-76' passed in a BLOB or CLOB method.\r\n753a753,754\r\n> EXPECTED SQLSTATE(XJ071): Negative length argument '-76' passed in a BLOB or CLOB method.\r\n> EXPECTED SQLSTATE(XJ071): Negative length argument '-1' passed in a BLOB or CLOB method.\r\nTest Failed.\r\n*** End:   blobclob4BLOB jdk1.4.2_07 DerbyNetClient 2006-07-30 14:14:40 ***\r\n\r\nI think the output is expected but the master needs to be updated, which is a necessary pain with our diff based harness.\r\n\r\nI see the following  masters for blobclob4BLOB\r\n./blobclob4BLOB.out\r\n./DerbyNet/blobclob4BLOB.out\r\n./DerbyNetClient/blobclob4BLOB.out\r\n\r\nFor DerbyNet some folks don't test with that framework.  If you don't please just make a not when you submit the patch that there is a master there that may need to be updated.  Also please assign yourself if you are working actively on this issue.  It is always confusing when there are patches on unassigned issues because it is not really clear whether the patch author intends to pursue the fix furthur.\r\n\r\nThanks\r\n\r\nKathey\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-07-30T21:29:16.000+0000","updated":"2006-07-30T21:29:16.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424448","id":"12424448","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Hi Kathey,\r\n\r\nThanks for the feedback on the patch. A few notes:\r\n\r\n1. I've added myself to the derby-developers list so I can assign the issue to myself.\r\n2. The differences in the master blobclob4BLOB.out files shows the inconsistency of the behaviors quite nicely.\r\n3. I can update the master blobclob4BLOB.out files once we agree what we should test. What I understand from you is that you would like to see lengths of 0, -1, and -76 tested, and the master files updated. But the tests in question clobTest6 and blobTest6 are negative tests that look for exceptions. It's not clear to me that the test for 0 (which works for the network case) should be tested here.\r\n4. I noticed an unusual comment in clobTest6:\r\n            // 0 or negative position value\r\n                        if (isDerbyNet)\r\n                                System.out.println(\" negative tests for clob.getSubstring won't run  for network server  until 5243 is fixed\");\r\nCan you translate this? What's a 5243? \r\n\r\nThanks,\r\n\r\nCraig\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-07-30T22:31:10.000+0000","updated":"2006-07-30T22:31:10.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424599","id":"12424599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"I've updated the patch with changes to the master/DerbyNetClient/blobclob4BLOB.out canon.\r\n\r\nI did not update master/DerbyNet/blobclob4BLOB.out canon because this canon seems out of date wrt the code. If this is incorrect, please let me know.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-07-31T18:34:43.000+0000","updated":"2006-07-31T18:34:43.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424636","id":"12424636","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Craig for updating the masters.  \r\n\r\nI thiink it is really neat how specifying the patch of the same name grays out the old patches but they are still available, seems like a great way to keep our reworked patches organized. \r\n\r\n- I still think it would be good to add some 0 length test cases before we enable it to make sure behaviour is consistent between the two drivers.   Linking to derby-dev discussion \r\n \r\nhttp://www.nabble.com/Re%3A--jira--Commented%3A-%28DERBY-1516%29-Inconsistent-behavior-for-getBytes-and-getSubString-for-embedded-versus-network-p5577797.html\r\n\r\nI am not sure if the two drivers are consistent in this regard or what the behavior is.\r\n\r\nKathey\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-07-31T20:15:56.000+0000","updated":"2006-07-31T20:15:56.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424673","id":"12424673","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Including the discussion from the alias referenced immediately above:\r\n\r\n>> One interesting test with 0 length is the case for getSubString(1,0) \r\n>> for a zero length lob. \r\n>> Should it throw an exception or return a zero length string? \r\n\r\n>The API working doesn't give much help to resolve this; the wording for the exception in JDK 1.6 is \r\n\r\n> Throws: \r\n>    SQLException - if there is an error accessing the CLOB value \r\n\r\n> which I guess is equivalent to YMMV... A case for Lance? \r\n\r\n> Even if this case is allowed, should it make a difference if position is > (length+1), e.g. getSubString(2,0) for an empty CLOB? \r\n\r\nLance has not replied to a request to update the wording, and I think time is running out on this to be added to the specification in progress.\r\n\r\nThe jdbc spec has followed the java.lang.String spec pretty closely, modulo 1-origin vs. 0-origin indexing. The String spec allows accessing substrings of a 0-length string, as follows:\r\n\r\npublic String substring(int beginIndex,\r\n                        int endIndex)\r\nReturns a new string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex...\r\nIndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.\r\n\r\nFor a zero-length String:\r\n1. endIndex must be 0 or else endIndex would be larger than the length of the String;\r\n2. beginIndex must be 0 or else beginIndex would be larger than endIndex.\r\n\r\nTranslating this to jdbc, for a zero-length Clob:\r\n1. position must be 1;\r\n2. length must be 0.\r\n\r\nI agree we should add positive test cases to extract a zero-length substring from a Clob and Blob. \r\n\r\nI propose adding to clobTest2 and blobTest2 a test like: \r\nblobclob4BLOB.printInterval(clob, 1, 0, 7, i, clobLength) // zero length\r\nblobclob4BLOB.printInterval(blob, 1, 0, 7, i, blobLength) // zero length\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-07-31T21:54:39.000+0000","updated":"2006-07-31T21:54:39.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424850","id":"12424850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"The new positive cases sound fine to me. \r\n\r\n If I understand all you wrote, you are saying that getSubstring(pos,0) where pos > the length of the clob  should throw an exception for now while spec clarification is underway.  Is that correct?  If so,  that sounds good to me as it is always *much* easier to change an exception case to work in the future if need be.  What we want to avoid is a situation where something works and then we have to throw an exception later  to be compliant.  Can you add negative cases for this to make sure we are throwing an appropriate exception?  Then I think all the needed zero length cases will be covered.\r\n\r\n\r\nThanks\r\n\r\nKathey\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-08-01T12:51:31.000+0000","updated":"2006-08-01T12:51:31.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12424887","id":"12424887","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Thanks for the feedback. I'll make some positive and negative test cases and update the patch.\r\n\r\nYes, I'm suggesting that we follow the java.lang.String specification and allow for zero-length getSubString only if the position is legal. This is so there's no special if (length == 0) { // ignore position for 0-length ...}. It actually simplifies development.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-01T14:54:13.000+0000","updated":"2006-08-01T14:54:13.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12425340","id":"12425340","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"There is different behavior between embedded and network in other areas as well as the one I'm looking at here. I'd like to see what people think about this as well. It's hard to add test cases for zero-length requests without rationalizing the current behavior.\r\n\r\n1. Both embedded and network do not return an error but truncate the result when going past the end of the Clob. That is, ask a Clob with length 25 for 50 characters starting at position 1 and get 26 characters and no exception.\r\n\r\nProposal: Leave this behavior; we would need to add a new message, since the current message \"SQLSTATE(XJ076): The position argument '5,910' exceeds the size of the BLOB/CLOB\" cannot be used to describe running off the end of the Clob. I'd like to see this changed in future, to match the java.lang.String behavior, but this is a compatibility issue (existing applications might depend on this behavior).\r\n\r\n2. Different behavior for zero-length Clobs:\r\nEmbedded Clob with zero length: throws an exception trying to get any non-zero length substring\r\nNetwork Clob with zero length throws an exception only if the position is not == 1.\r\n\r\nProposal: Change Network to throw an exception on any request to get a non-zero length substring.\r\n\r\nCraig","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-02T18:48:45.000+0000","updated":"2006-08-02T18:48:45.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12425440","id":"12425440","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"This patch solves the discrepancy between the treatment of getBytes and getSubString where the requested length is zero. This makes up 2 lines of the patch, in the first 10 lines of EmbedBlob and EmbedClob. Most of the rest of the patch is testing.\r\n\r\nI've updated embedded and network Lobs to consistently check validity of position requested. The position must be between 1 and the last position of the Lob. I've added positive test cases for retrieving zero length byte[ ] and zero length Strings from position 1 and the last position of Blob and Clobs. \r\n\r\nI've added negative test cases for retrieving zero length byte[ ] and String from position 0 and one past the end of the Blob and Clob.\r\n\r\nI've changed the message regarding invalid length so that zero length is not mentioned as an error.\r\n\r\nI've removed the code to disable tests that was put in because of issues 5243 and 5914. There is no longer any difference between the behavior of embedded and network drivers due to these issues. The canons for blobTest2, clobTest2, blobTest6, and clobTest6 are now the same for embedded and network.\r\n\r\nI just had to reformat some of the test code which had random placement of beginning and ending braces, indentations, and try/catch formatting, and greater than 80 character lines. I removed commented-out code that represented the previous versions of clobTest2 and blobTest2.\r\n\r\nI preserved the treatment of requests that started within the Lob but ran off the end. These cases still return a shorter result than requested, returning the last element of the Lob as the last element of the result. So there should be no backward compatibility issues. All the existing code will still work with this patch. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-03T05:49:12.000+0000","updated":"2006-08-03T05:49:12.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12425568","id":"12425568","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"If you are modelling this on the java.lang.String modulo indexing, it\r\nseems to me that this is slightly wrong:\r\n\r\n\"The position must be between 1 and the last position of the Lob\".\r\n\r\nI think it should be \r\n\r\n\"The position must be between 1 and the last position + 1 of the Lob\",\r\ncf. this example which does not throw exceptions. In the substring of\r\nt2, the position is *one past* the final position of the string, final\r\nposition being 0.\r\n\r\n                String t1 = \"\";\r\n                String t2 = \"a\";\r\n                \r\n                String t3;\r\n                \r\n                try {\r\n                        System.out.println(\"t1.substring(0,0) = '\" +\r\n                                                           t1.substring(0,0) +  \"'\");\r\n                } catch (IndexOutOfBoundsException e) {\r\n                        System.out.println(\"t1.substring(0,0) throws\");\r\n                }\r\n\r\n                try {\r\n                        System.out.println(\"t2.substring(1,1) = '\" +\r\n                                                           t2.substring(1,1) +  \"'\");\r\n                } catch (IndexOutOfBoundsException e) {\r\n                        System.out.println(\"t2.substring(1,1) throws\");\r\n                }\r\n    }\r\n\r\nthat is, you can always request an empty string from the position\r\n*immediately after* the last byte, but not further out. This would\r\nremove the asymmetry you have in the code, too:\r\n\r\n                if (this.length() == 0) {\r\n                    if (pos > 1) {\r\n                    throw new SqlException(agent_.logWriter_, \r\n                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), \r\n                        new Long(pos));\r\n                    }\r\n                } else { // this.length() > 0\r\n                    if (pos > this.length()) {\r\n                    throw new SqlException(agent_.logWriter_, \r\n                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), \r\n                        new Long(pos));                    \r\n                    }\r\n                }\r\nwould reduce to:\r\n\r\n                if (pos > this.length() + 1) {\r\n                    throw new SqlException(agent_.logWriter_, \r\n                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), \r\n                        new Long(pos));\r\n                }\r\n\r\nI also think this is the symmetry one would want for programming\r\nconvenience, like you have mentioned. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2006-08-03T17:07:02.000+0000","updated":"2006-08-03T17:07:02.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12425588","id":"12425588","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Hi Dag,\r\n\r\nYou know, I read this a hundred times and did not read it as allowing t2.substring(1,1), since clearly 1 is beyond the length of the String.\r\n\r\nsubstring(int beginIndex, int endIndex)\r\nThrows:\r\nIndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.\r\n\r\nBut you are right and I'll change the implementation to support this. Much cleaner indeed.\r\n\r\nI will reimplement the test for the case of pos one beyond the length of the Lob, which would now be legal. It would always return a zero-length result.\r\n\r\nThanks,\r\n\r\nCraig","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-03T18:51:04.000+0000","updated":"2006-08-03T18:51:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12425635","id":"12425635","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"This patch incorporates all of the comments (thank you, Kathey and Dag) and therefore the logic is simpler for detecting invalid positions.\r\n\r\nThe canons for blobclob4BLOB have been changed to reflect that a request for bytes or a substring starting at position (length + 1) is now valid and the result will be of zero length, regardless of the length requested. This will not break existing applications except possibly regression testing applications that depend on Derby throwing an exception for this case. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-03T23:25:35.000+0000","updated":"2006-08-03T23:25:35.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426397","id":"12426397","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"I have run derby-all with these changes, and no errors were reported.\r\n\r\nAny other comments before I check this in?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T03:13:06.000+0000","updated":"2006-08-08T03:13:06.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426525","id":"12426525","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Craig for the change,  adding the test cases, and making sure client and embedded have the same behavior.   My only comment is that  it would be  be good to first check in the reformatting changes for the test  and keep just the substantive code changes in issue commit..   I know the current situation with DERBY-1363 is pretty intolerable, but it is better to keep code formatting changes, when necessary, separate from the actual code changes.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2006-08-08T10:25:40.000+0000","updated":"2006-08-08T10:25:40.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426621","id":"12426621","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Since this has been a tricky area to get correct, it seems that adding Javadoc comments to the methods your are modifying in the Derby implementations of Clob & Blob would add great value. Otherwise a few months from now someone may change the code again thinking it is wrong (especially since the code no longer matches the javadoc).\r\n\r\nIn Derby's JDBC implementation notes this comment exists for getSubString\r\n\r\nhttp://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29\r\n\r\nIf the pos (position) argument is greater than the length of the CLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function.\r\n\r\nDoes that need to be corrected, do we have an issue because the new code will not match SQL SUBSTR?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2006-08-08T16:13:42.000+0000","updated":"2006-08-08T16:13:42.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426642","id":"12426642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"I've updated the Derby workspace as of this morning.\r\n\r\nI've removed the formatting changes from blobclob4BLOB.java. They would have been duplicated by the changes anticipated by DERBY-1363.\r\n\r\nTests pass. Check in at will.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T17:11:59.000+0000","updated":"2006-08-08T17:11:59.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426647","id":"12426647","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Dan observes:\r\n\r\n> Since this has been a tricky area to get correct, it seems that adding Javadoc comments to the methods your are modifying in the Derby implementations of Clob & Blob would add great value. Otherwise a few months from now someone may change the code again thinking it is wrong (especially since the code no longer matches the javadoc). \r\n\r\nCould you please be a bit more specific, so I can do this in one pass? Which parts of the code do you want to be better commented; e.g. just the parts I modified, or the entire method?\r\n\r\n> In Derby's JDBC implementation notes this comment exists for getSubString \r\n\r\n> http://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29 \r\n\r\n> If the pos (position) argument is greater than the length of the CLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function. \r\n\r\n> Does that need to be corrected, do we have an issue because the new code will not match SQL SUBSTR?\r\n\r\nYes, that needs to be corrected, and I propose:\r\nIf the pos (position) argument is greater than the length + 1 of the CLOB then an exception is thrown. This matches the semantics of the java.lang.String.subString(int beginIndex, int endIndex) method. \r\n\r\nA similar change is needed for Blob.getBytes\r\nIf the pos (position) argument is greater than the length of the BLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function.\r\n\r\nI propose:\r\nIf the pos (position) argument is greater than the length + 1 of the BLOB then an exception is thrown. This matches the semantics of the java.lang.System.arraycopy method.\r\n\r\nI don't think that matching SQL semantics is as important as matching java language semantics. After all, this API is a java language API.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T17:30:15.000+0000","updated":"2006-08-08T17:30:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426674","id":"12426674","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Here's a proposed javadoc comment for EmbedClob.getSubString:\r\n\r\n   * Valid pos values require that 0 < pos < clob.length + 1.\r\n   * Valid length values require that 0 <= length <= clob.length.\r\n\r\nIf this looks ok, I can update the javadoc for the other implementation classes.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T18:44:32.000+0000","updated":"2006-08-08T18:44:32.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426676","id":"12426676","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Whoops, there is no maximum restriction on length. Update the comment to:\r\n\r\n * Valid length values require that 0 <= length.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T18:51:06.000+0000","updated":"2006-08-08T18:51:06.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426687","id":"12426687","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"I mean comments clarifying the length & position arguments passed in and the valid ranges etc. Though while you were in there you could see if the description was correct, e.g. EmbedClob.getSubString() says:\r\n\r\nNOTE: return the empty string if pos is too large\r\n\r\nwhich I don't think is true before or after your changes.\r\n\r\nI think there's a strong case for matching the SQL semantics rather than the Java semantics. One data point is that the value offsets are 1-based\r\nmatching SQL, not 0-based matching String. This is the offset into a class that represents a SQL value, not a Java value.\r\n\r\nThe other data point is the new range for the position argument looks very strange:\r\n\r\nIf the pos (position) argument is greater than the length + 1 of the BLOB then an exception is thrown.\r\n\r\nWhy length +1, why not > length?\r\n\r\nAlso that JDBC document already has clarified the behvaiour, why is it changing?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2006-08-08T19:35:04.000+0000","updated":"2006-08-08T19:35:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426707","id":"12426707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Hi Dan,\r\n\r\nThanks for your comments.\r\n\r\n> I mean comments clarifying the length & position arguments passed in and the valid ranges etc. Though while you were in there you could see if the description was correct, e.g. EmbedClob.getSubString() says: \r\n\r\n> NOTE: return the empty string if pos is too large \r\n\r\n> which I don't think is true before or after your changes. \r\n\r\nI think I understand your comments and will try to update the comments to reflect reality.\r\n\r\n> Why length +1, why not > length? \r\n\r\nIf 0 < pos <= length, then there is no way to get any bytes (even zero bytes) from a 0-length blob. And I don't believe that this is the intent. Nor is it consistent with what other vendors have implemented. \r\n\r\nThere is no loss of functionality in the \"length + 1\" behavior. If your position is length + 1, then you can only get zero-length results from it. And this is exactly the case of a zero-length Lob.\r\n\r\nThe title of this issue is \"inconsistent behavior for embedded versus network\". So something's gotta give. And after looking at it in detail, I'm convinced that the right behavior is to be consistent with regard to getBytes and getSubString; with regard to zero-length and non-zero-length Lobs; and with regard to embedded versus network. And this patch does it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-08T20:44:22.000+0000","updated":"2006-08-08T20:44:22.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426714","id":"12426714","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"thanks Craig, that's good reasoning, and the type of useful information I would like to see in the javadoc for these methods (using character for Clob and bytes for Blob though). I think that's much clearer than trying to equate to the behvaiour of String.substring.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2006-08-08T20:58:20.000+0000","updated":"2006-08-08T20:58:20.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12426790","id":"12426790","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"I've updated the javadoc for the getBytes in EmbedBlob; and getSubString in EmbedClob. I've created javadoc for the methods getBytes in Blob; and getSubString in Clob. I've corrected the comments within the implementation of the methods.\r\n\r\nNo other code changes were made compared to the last patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-09T01:38:59.000+0000","updated":"2006-08-09T01:38:59.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12427062","id":"12427062","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"body":"I'm working on comitting this patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"created":"2006-08-10T00:26:10.000+0000","updated":"2006-08-10T00:26:10.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12427263","id":"12427263","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"body":"Hi, Craig. I merged your patch into my sandbox and ran derbyall, and I'm sorry to say I had a test failure.  \r\n\r\nderbynetmats/DerbyNet/jdbcapi/blobclob4BLOB is the test, I think you just didn't run this under the DerbyNet framework (which is the IBM JDBC driver).  Here are the diffs.  If you think these look good I can go ahead and update the master file.  However, I am concerned about the \"open result set\" error at the end of the diff...\r\n\r\n********* Diff file derbyall/derbynetmats/DerbyNet/jdbcapi/blobclob4BLOB.diff\r\n*** Start: blobclob4BLOB jdk1.5.0_06 DerbyNet derbynetmats:jdbcapi 2006-08-09 18:04:28 ***\r\n90d89\r\n< CLOB getSubString 1 > 0\r\n92,93d90\r\n< CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 > 0\r\n< CLOB getSubString 1 > 0\r\n95 del\r\n< CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 > 0\r\n95a92,93\r\n> 1(7) (len 0)\r\n> 1(8) (len 0)\r\n107a106,107\r\n> 2(7) (len 0)\r\n> 2(8) (len 0)\r\n119a120,121\r\n> 3(7) (len 0)\r\n> 3(8) (len 0)\r\n132a135,136\r\n> 4(7) (len 0)\r\n> 4(8) (len 0)\r\n144a149,150\r\n> 5(7) (len 0)\r\n> 5(8) (len 0)\r\n154 del\r\n< 6(7)\r\n154a160,162\r\n> 6(7) (len 0)\r\n> 6(8) (len 0)\r\n> 6(9)\r\n166d173\r\n< CLOB getSubString 1 > 0\r\n168,169d174\r\n< CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 > 0\r\n< CLOB getSubString 1 > 0\r\n171 del\r\n< CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 > 0\r\n171a176,177\r\n> 7(7) (len 0)\r\n> 7(8) (len 0)\r\n183 del\r\n< 8(7)\r\n183a189,191\r\n> 8(7) (len 0)\r\n> 8(8) (len 0)\r\n> 8(9)\r\n194 del\r\n< 9(7)\r\n194a202,204\r\n> 9(7) (len 0)\r\n> 9(8) (len 0)\r\n> 9(9)\r\n456a467\r\n> java.lang.StringIndexOutOfBoundsException: String index out of range: -1\r\n460 del\r\n<  negative tests for clob.getSubstring won't run  for network server  until 5243 is fixed\r\n460a471,475\r\n> EXPECTED SQLSTATE(null): Invalid position 0 or length 5\r\n> EXPECTED SQLSTATE(null): Invalid position 1 or length -76\r\n> EXPECTED SQLSTATE(null): Invalid position 1 or length -1\r\n> EXPECTED SQLSTATE(null): Invalid position 0 or length 0\r\n> FAIL -- unexpected exception:java.lang.StringIndexOutOfBoundsException: String index out of range: -1\r\n577 del\r\n< Known JCC Bug 5914\r\n577a592\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n579 del\r\n< Known JCC Bug 5914\r\n579a594\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n581 del\r\n< Known JCC Bug 5914\r\n581a596\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n583 del\r\n< Known JCC Bug 5914\r\n583a598\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n585 del\r\n< Known JCC Bug 5914\r\n586 del\r\n< testing Blob.getBytes() with pos 1 > 0\r\n586a600\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n588,589d601\r\n< FAIL testing Blob.getBytes() with pos 1 > 0\r\n< testing Blob.getBytes() with pos 1 > 0\r\n591 del\r\n< FAIL testing Blob.getBytes() with pos 1 > 0\r\n591a603,604\r\n> 1(7)\r\n> 1(8)\r\n593 del\r\n< Known JCC Bug 5914\r\n593a606\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n595 del\r\n< Known JCC Bug 5914\r\n595a608\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n597 del\r\n< Known JCC Bug 5914\r\n597a610\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n599 del\r\n< Known JCC Bug 5914\r\n599a612\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n601 del\r\n< Known JCC Bug 5914\r\n601a614\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n603a617,618\r\n> 2(7)\r\n> 2(8)\r\n605 del\r\n< Known JCC Bug 5914\r\n605a620\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n607 del\r\n< Known JCC Bug 5914\r\n607a622\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n609 del\r\n< Known JCC Bug 5914\r\n609a624\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n611 del\r\n< Known JCC Bug 5914\r\n611a626\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n613 del\r\n< Known JCC Bug 5914\r\n613a628\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n615a631,632\r\n> 3(7)\r\n> 3(8)\r\n617 del\r\n< Known JCC Bug 5914\r\n617a634\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n619 del\r\n< Known JCC Bug 5914\r\n619a636\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n621 del\r\n< Known JCC Bug 5914\r\n621a638\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n623 del\r\n< Known JCC Bug 5914\r\n623a640\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n625 del\r\n< Known JCC Bug 5914\r\n625a642\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n628a646,647\r\n> 4(7)\r\n> 4(8)\r\n630 del\r\n< Known JCC Bug 5914\r\n630a649\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n632 del\r\n< Known JCC Bug 5914\r\n632a651\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n634 del\r\n< Known JCC Bug 5914\r\n634a653\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n636 del\r\n< Known JCC Bug 5914\r\n636a655\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n638 del\r\n< Known JCC Bug 5914\r\n638a657\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n640a660,661\r\n> 5(7)\r\n> 5(8)\r\n650a672,673\r\n> 6(8)\r\n> 6(9)\r\n653 del\r\n< Known JCC Bug 5914\r\n653a676\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n655 del\r\n< Known JCC Bug 5914\r\n655a678\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n657 del\r\n< Known JCC Bug 5914\r\n657a680\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n659 del\r\n< Known JCC Bug 5914\r\n659a682\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n661 del\r\n< Known JCC Bug 5914\r\n662 del\r\n< testing Blob.getBytes() with pos 1 > 0\r\n662a684\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n664,665d685\r\n< FAIL testing Blob.getBytes() with pos 1 > 0\r\n< testing Blob.getBytes() with pos 1 > 0\r\n667 del\r\n< FAIL testing Blob.getBytes() with pos 1 > 0\r\n667a687,688\r\n> 7(7) \r\n> 7(8) \r\n669 del\r\n< Known JCC Bug 5914\r\n669a690\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n671 del\r\n< Known JCC Bug 5914\r\n671a692\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n673 del\r\n< Known JCC Bug 5914\r\n673a694\r\n> FAIL: Caught exception java.lang.NegativeArraySizeException\r\n679a701,702\r\n> 8(8) \r\n> 8(9) \r\n690a714,715\r\n> 9(8) \r\n> 9(9) \r\n741a767\r\n> java.lang.NegativeArraySizeException\r\n755 del\r\n< EXPECTED SQLSTATE(null): Search pattern cannot be null.\r\n756 del\r\n< EXPECTED SQLSTATE(null): Search pattern cannot be null.\r\n757 del\r\n< blobTest6 finished\r\n757a781,783\r\n> EXPECTED SQLSTATE(null): Invalid position 1 or length -1\r\n> EXPECTED SQLSTATE(null): Invalid position 0 or length 0\r\n> FAIL -- unexpected exception:java.lang.NegativeArraySizeException\r\n761 del\r\n< Row Count 0 Null Row 0\r\n762 del\r\n< Row Count 9 Null Row 1\r\n763 del\r\n< Row Count 9 Null Row 1\r\n764 del\r\n< blobTest8Trigger finished\r\n764a787,789\r\n> FAIL -- unexpected exception ****************\r\n> SQLSTATE(X0X95): Operation 'CREATE TRIGGER' cannot be performed on object 'TESTBLOB' because there is an open ResultSet dependent on that object.\r\n> com.ibm.db2.jcc.c.SqlException: Operation 'CREATE TRIGGER' cannot be performed on object 'TESTBLOB' because there is an open ResultSet dependent on that object.\r\nTest Failed.\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"created":"2006-08-10T16:26:13.000+0000","updated":"2006-08-10T16:26:13.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12427294","id":"12427294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"body":"Hi David,\r\n\r\nFrom my comments 31-Jul-2006:\r\n\r\n> I did not update master/DerbyNet/blobclob4BLOB.out canon because this canon seems out of date wrt the code. If this is incorrect, please let me know. \r\n\r\nI recommend checking in the new DerbyNet canon for the blobclob4BLOB output. The differences in the DerbyNet canon are expected due to the additional tests that I wrote. The \"unexpected exception\" in DerbyNet is expected in this scenario due to the blobTest6 stimulating the DerbyNet driver to throw an exception that is not a SQLException. Once the driver is fixed to properly handle boundary errors (length < 0; pos > lob.length + 1; etc.), this unexpected exception will go away.\r\n\r\nThere is a general issue in many of the tests that I looked at, that result sets, statements, and connections are not closed in a finally block but are in the main line code. So \"unexpected exceptions\" in general will cause subsequent tests to behave unpredictably. But it's not specific to this issue.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=clr","name":"clr","emailAddress":"craig dot russell at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Craig L Russell","active":true},"created":"2006-08-10T18:06:52.000+0000","updated":"2006-08-10T18:06:52.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12346058/comment/12427555","id":"12427555","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"body":"Sending        java/client/org/apache/derby/client/am/Blob.java\r\nSending        java/client/org/apache/derby/client/am/Clob.java\r\nSending        java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java\r\nSending        java/engine/org/apache/derby/impl/jdbc/EmbedClob.java\r\nSending        java/engine/org/apache/derby/loc/messages_en.properties\r\nSending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out\r\nSending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out\r\nSending        java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out\r\nSending        java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java\r\nTransmitting file data .........\r\nCommitted revision 430825.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davidvc","name":"davidvc","emailAddress":"david at vancouvering dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Van Couvering","active":true},"created":"2006-08-11T16:49:22.000+0000","updated":"2006-08-11T16:49:22.000+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1516/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06q5z:"}}