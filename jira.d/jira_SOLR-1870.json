{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12461475","self":"https://issues.apache.org/jira/rest/api/latest/issue/12461475","key":"SOLR-1870","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310230","id":"12310230","key":"SOLR","name":"Solr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310230&avatarId=22151","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310230&avatarId=22151","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310230&avatarId=22151","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310230&avatarId=22151"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315096","id":"12315096","description":"Bug fix release for users of 1.4","name":"1.4.1","archived":false,"released":true,"releaseDate":"2010-06-25"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314371","id":"12314371","description":"Major release after 1.4.1","name":"3.1","archived":false,"released":true,"releaseDate":"2011-03-31"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314992","id":"12314992","description":"Alpha release of 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2010-05-19 21:33:48.132","customfield_12312323":null,"customfield_12310420":"5600","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_5794185844_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-06-14T01:24:09.823+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/SOLR-1870/watchers","watchCount":2,"isWatching":false},"created":"2010-04-07T23:54:23.979+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313351","id":"12313351","description":"","name":"1.4","archived":false,"released":true,"releaseDate":"2009-11-10"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-07-08T19:55:55.764+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12311580","id":"12311580","name":"clients - java","description":"Solr clients written in Java"},{"self":"https://issues.apache.org/jira/rest/api/2/component/12310673","id":"12310673","name":"update","description":"Indexing and updating the search collection"}],"timeoriginalestimate":null,"description":"When the field type of a field in a SolrInputDocument is a Collection based on the Set interface, the JavaBinUpdate request fails. It works when sending the document data over XML.\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"19352","summary":"Binary Update Request (javabin) fails when the field type of a multivalued SolrInputDocument field is a Set (or any type that is identified as an instance of iterable) ","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranganp","name":"ranganp","emailAddress":"rprasanna at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasanna Ranganathan","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ranganp","name":"ranganp","emailAddress":"rprasanna at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Prasanna Ranganathan","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":17,"total":17,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12869357","id":"12869357","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"Moving Prasanna's original stack trace and verbose details into comment and reformatting...\r\n\r\n{quote}\r\n\r\nI encountered this error when updating my indexer to write documents in the binary format. I initially got a ClassCastException and after digging into it found the likely cause for it.\r\n\r\nThe following piece of code added to 'public void simple() throws IOException' method in TestUpdateRequestCodec.java illustrates the error.\r\n\r\n{code}\r\ndoc = new SolrInputDocument(); \r\nCollection<String> foobar = new HashSet<String>();\r\nfoobar.add(\"baz1\");\r\nfoobar.add(\"baz2\");    \r\ndoc.addField(\"foobar\",foobar);\r\nupdateRequest.add(doc);\r\n{code}\r\n\r\n The test fails for any Collection derived from the Set interface but will work if the Collection is a List / Array or other types. The stack trace is as follows:\r\n\r\n{noformat}\r\n\r\n java.lang.ClassCastException: java.lang.String\r\n\tat org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec$2.readIterator(JavaBinUpdateRequestCodec.java:121)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:210)\r\n\tat org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec$2.readNamedList(JavaBinUpdateRequestCodec.java:107)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:175)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readArray(JavaBinCodec.java:405)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:171)\r\n\tat org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec$2.readIterator(JavaBinUpdateRequestCodec.java:119)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:210)\r\n\tat org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec$2.readNamedList(JavaBinUpdateRequestCodec.java:107)\r\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:175)\r\n\tat org.apache.solr.common.util.JavaBinCodec.unmarshal(JavaBinCodec.java:101)\r\n\tat org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.unmarshal(JavaBinUpdateRequestCodec.java:126)\r\n\tat org.apache.solr.client.solrj.request.TestUpdateRequestCodec.simple(TestUpdateRequestCodec.java:82)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n\tat org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99)\r\n\tat org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81)\r\n\tat org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)\r\n\tat org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75)\r\n\tat org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45)\r\n\tat org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:66)\r\n\tat org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35)\r\n\tat org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)\r\n\tat org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)\r\n\tat org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)\r\n\tat com.intellij.rt.junit4.Junit4ClassSuite.run(Junit4ClassSuite.java:99)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\r\n{noformat}\r\n\r\n The error most likely is in the way javabin codec encodes Sets. In the public boolean writeKnownType(Object val) method in JavaBinCodec.java, a Set is recognized as an instance of iterable and the writeIterator method is called. \r\n\r\n I briefly looked at the writeIterator and readIterator methods and was unable to pinpoint the error. I also looked at the javabin encoded byte stream (not exactly a good way to debug..) and it did not look like it was right. \r\n\r\n{quote}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-05-19T21:33:48.132+0000","updated":"2010-05-19T21:33:48.132+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12869358","id":"12869358","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"patch based on Prasanna's comment which illustrates the bug ... still investigating.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-05-19T21:34:37.044+0000","updated":"2010-05-19T21:34:37.044+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12869372","id":"12869372","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"Tracing through this code, i don't think the bug is happening when the stream is being *written* ... writeIterator is fairly straightforward.\r\n\r\nWhat makes no sense to me is that in JavaBinUpdateRequestCodec, the unmarshall function declares an anonymous subclass of JavaBinCodec where the readIterator has a hardcoded assumption that every object it encounters in an \"ITERATOR\" sequence will be a List<NamedList> which it can then convert into a SolrInputDocument.\r\n\r\nbased on the stack trace, these seems like an abuse of the codec format -- it knows that at the \"top level\" there will be an Iterator of docs, so it overwrites that method in this way, ignorant of the possibility that there might be other purposes for an Iterator in the stream (like a Set of values for a field)\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-05-19T21:58:32.540+0000","updated":"2010-05-19T21:58:32.540+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12869400","id":"12869400","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"Based largely on *guessing* what it was that this Update codec was trying to do, i created this patch -- it's based on the theory that the \"outermost\" Iterator is expected to be the stream of documents, and any other Iterator should be parsed in the same way as the superclass.  It uses a simple boolean to keep track of whether or not the \"first\" (ie: outermost) Iterator has been encountered yet (which is only feasible because it's an anonymous inner class used for only one stream)\r\n\r\nThis patch causes all tests to pass -- but that doesn't necessarily convince me that it's correct -- i would definitely appreciate it if someone who has actually *looked* at the update codec code prior to today would review this.\r\n\r\n(Note: i did have to modify the document equality assertions to understand that since we will never have a Set in an unmarshaled doc it needs to convert the corrisponding Collection to a set in order for assertEquals to do a non-ordered comparison)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-05-19T23:09:32.191+0000","updated":"2010-05-19T23:09:32.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12871001","id":"12871001","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"body":"bq. \"top level\" there will be an Iterator of docs, so it overwrites that method in this way, ignorant of the possibility that there might be other purposes for an Iterator in the stream (like a Set of values for a field)\r\n\r\nIterator was created as a special type in javabin codec so that items can be streamed. Any collection should have been written as a List of specific size. When unmarshalled , the items always come out as a List unless we override the readIterator.\r\n.I guess that  a better fix would be to write Collection as List I shall give a patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"created":"2010-05-25T05:34:33.909+0000","updated":"2010-05-25T05:34:33.909+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12871006","id":"12871006","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"body":"fixing JavabinCodec to write collection as array","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"created":"2010-05-25T05:45:05.835+0000","updated":"2010-05-25T05:45:05.835+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12871231","id":"12871231","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"bq. Iterator was created as a special type in javabin codec so that items can be streamed. Any collection should have been written as a List of specific size.\r\n\r\nI'm confused ... if Iterator support was only ever ment to be \"special\" for streaming items, then why did writeKnownType have support for Iterator?  and why did JavaBinUpdateRequestCodec override the default behavior of readIterator to treat it special?\r\n\r\nAs far as your patch goes: instead of adding a new \"if (val instanceof Collection)\" test to writeKnownType, shouldn't you replace the existing \"instanceof List\" with \"instanceof Collection\" ?\r\n\r\nI'm still not understanding all of this, but it also seems like *both* patches would be a good idea -- your change ensures that all Collections are serialized as an Array, but it still leaves open the possibility of a bug if someone tries to use the codec to stream something which is *not* a Collection but is Iterable.  perhaps that was not originally ment ot be supported, but is there any harm in it?  is the special case behavior for Iterators for streaming used in a way besides the \"top level\" docs iterator that i mentioned?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-05-25T16:19:50.387+0000","updated":"2010-05-25T16:19:50.387+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12874919","id":"12874919","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"Noble: the newly updated SOLR-1870-test.patch demonstrates the concern i have for your fix: if the JavaBinCodec has support for Iterator and Iterable, but the JavaBinUpdateRequestCodec makes assumptions about Iterators only being used for streaming docs, then if people add Field values containing Custom objects that implement Iterable but are not actually Collection then the JavaBinUpdateRequestCodec will marshal them correctly, but it will have a ClassCastException when unmarshaling them -- ditto for people who want to add lazy Iterators as field values.\r\n\r\nI don't disagree that making JavaBinCodec support Collection is a good idea in general, but it doesn't fix the root problem -- i think we need both changes.\r\n\r\nThe latest SOLR-1870.patch incorporates both my suggested fix for JavaBinUpdateRequestCodec, as well as your change to JavaBinCodec (with my suggested tweak of replacing List with Collection in the if tree), and all of the tests i've previously posted (ie: SOLR-1870-test.patch is for illustrative purposes only, it's not needed)\r\n\r\nwhat do you think?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-06-03T02:38:45.775+0000","updated":"2010-06-03T02:38:45.775+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12874920","id":"12874920","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"we should try to get this into 1.4.1 if we can get consensus on the fix.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-06-03T02:39:40.803+0000","updated":"2010-06-03T02:39:40.803+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12874957","id":"12874957","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"body":"Hoss , the fix is good. Treating all collections as type ARR instead of just collection. \r\nMoreover we do not need to support Iterable.\r\n+1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"created":"2010-06-03T05:18:09.458+0000","updated":"2010-06-03T05:19:30.493+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12875104","id":"12875104","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"concerning the \"seenOuterMostDocIterator\", \r\nIs it the case that there can be only one DocList in the update request?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-03T13:34:08.981+0000","updated":"2010-06-03T13:34:08.981+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12875202","id":"12875202","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"bq. concerning the \"seenOuterMostDocIterator\", Is it the case that there can be only one DocList in the update request? \r\n\r\nMy reading of JavaBinUpdateRequestCodec is yes, there is only one list.  the marshal method takes in an updateRequest, and then writes all the documents in that updateRequest as a single Iterator to the output stream using a custom javaBinCodec that treats the doclist special -- but it doesn't change anything about any other iteratros or iterables that may be field values in the DocList, so JavaBinCodec.marshal happily writes then out successfully.\r\n\r\nI'll i've done is update JavaBinUpdateRequestCodec.unmarshal so it only applies it's special logic to this one special top-level iterator -- and will now delegate to JavaBinCodec.unmarshal for any other Iterators or Iterables.\r\n\r\nEven if the same InputStream/OutputStream is reused for multiple updateRequest objects using multiple marshal/unmarshal calls (something i don't think is supported in the calling code, the \"seenOuterMostDocIterator\" is an instance variable inside the unmarshal method, so it will be reset for each call.\r\n\r\nbq. Hoss , the fix is good. Treating all collections as type ARR instead of just collection.\r\nbq. Moreover we do not need to support Iterable.\r\nbq. +1\r\n\r\nI'm confused -- it seems like you are in favor of my patch, but you also say we do not need to support Iterable  ... Iterable (and Iterator) are already supported by the marshalling method w/o any errors or warnings, i didn't add that, all i did was make sure Iterable (and Iterator) would be supported on the unmarshalling side as well.\r\n\r\nIf it was never intended for the JavaBinCodec to support Iterator/Iterable except in the special case \"streaming\" situations like what JavaBinUpdateRequestCodec does then that's fine, but in that case we should change JavaBinCodec so it errors during marshalling -- the client shouldn't be able to successfully serialize some data if the server is then going to complain that it's an incorrect format.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-06-03T17:28:51.299+0000","updated":"2010-06-03T17:28:51.299+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12875723","id":"12875723","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"body":"bq.I'm confused - it seems like you are in favor of my patch, but you also say we do not need to support Iterable ...\r\n\r\nOh I misread our patch and  thought you removed support for Iterable . \r\n\r\nIn the encoded form there is only iterator/arr. So client does not send any unsupported type.  for instance Set is an unsupported type in the encoded form but is supported by the library (It is lossy encoding) \r\n\r\nanyway your patch  is fine. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"created":"2010-06-04T19:35:46.433+0000","updated":"2010-06-04T19:36:19.036+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12877818","id":"12877818","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markrmiller%40gmail.com","name":"markrmiller@gmail.com","emailAddress":"markrmiller at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markrmiller%40gmail.com&avatarId=17267","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markrmiller%40gmail.com&avatarId=17267","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markrmiller%40gmail.com&avatarId=17267","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markrmiller%40gmail.com&avatarId=17267"},"displayName":"Mark Miller","active":true},"body":"This is marked 1.4.1 - someone want to finish it off?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markrmiller%40gmail.com","name":"markrmiller@gmail.com","emailAddress":"markrmiller at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markrmiller%40gmail.com&avatarId=17267","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markrmiller%40gmail.com&avatarId=17267","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markrmiller%40gmail.com&avatarId=17267","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markrmiller%40gmail.com&avatarId=17267"},"displayName":"Mark Miller","active":true},"created":"2010-06-11T14:15:59.047+0000","updated":"2010-06-11T14:15:59.047+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12878289","id":"12878289","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"body":"The latest patch by Hoss can be committed. I can do it if Hoss does not wish to add anything more","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=noble.paul","name":"noble.paul","emailAddress":"noble dot paul at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=noble.paul&avatarId=18547","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=noble.paul&avatarId=18547","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=noble.paul&avatarId=18547","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=noble.paul&avatarId=18547"},"displayName":"Noble Paul","active":true},"created":"2010-06-12T17:26:52.922+0000","updated":"2010-06-12T17:26:52.922+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12878337","id":"12878337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"I just reviewed this - seems fine to me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-13T01:42:12.264+0000","updated":"2010-06-13T01:42:12.264+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12461475/comment/12878457","id":"12878457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"Committed revision 954336.  ... trunk\r\n\r\nCommitted revision 954338.  ... 3x branch\r\n\r\nCommitted revision 954340.   ... 1.4 branch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2010-06-14T01:24:09.797+0000","updated":"2010-06-14T01:24:09.797+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/SOLR-1870/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i03o6v:"}}