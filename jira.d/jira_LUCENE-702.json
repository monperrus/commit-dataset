{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12354184","self":"https://issues.apache.org/jira/rest/api/latest/issue/12354184","key":"LUCENE-702","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310854","id":"12310854","description":"","name":"2.1","archived":false,"released":true,"releaseDate":"2007-02-17"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2006-11-01 17:19:18.0","customfield_12312323":null,"customfield_12310420":"13050","customfield_12312320":null,"customfield_12310222":"3_*:*_1_*:*_500638000_*|*_1_*:*_1_*:*_3966065000_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_6139007691","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2006-12-18T16:53:48.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-702/watchers","watchCount":1,"isWatching":false},"created":"2006-10-28T00:08:45.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310854","id":"12310854","description":"","name":"2.1","archived":false,"released":true,"releaseDate":"2007-02-17"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2007-02-27T18:10:35.689+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310232","id":"12310232","name":"core/index","description":"issues with indexing code"}],"timeoriginalestimate":null,"description":"This is a spinoff of LUCENE-555\n\nIf the disk fills up during this call then the committed segments file can reference segments that were not written.  Then the whole index becomes unusable.\n\nDoes anyone know of any other cases where disk full could corrupt the index?\n\nI think disk full should worse lose the documents that were \"in flight\" at the time.  It shouldn't corrupt the index.","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10120","value":"Patch Available","id":"10120"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"27346","summary":"Disk full during addIndexes(Directory[]) can corrupt index","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":11,"total":11,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12446307","id":"12446307","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"A possible solution to this issue is to check, when writing segment infos to \"segments\" in directory d,\r\nwhether dir of a segment info is d, and only write if it is. Suggestions?\r\n\r\nThe following is my comment on this issue from the mailing list documenting how Lucene could\r\nproduce an inconsistent index if addIndexes(Directory[]) does not run to its completion.\r\n\r\n\"This makes me notice a bug in current addIndexes(Directory[]). In current addIndexes(Directory[]),\r\nsegment infos in S are added to T's \"segmentInfos\" upfront. Then segments in S are merged to T\r\nseveral at a time. Every merge is committed with T's \"segmentInfos\". So if a reader is opened on T\r\nwhile addIndexes(Directory[]) is going on, it could see an inconsistent index.\"\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-11-01T17:19:18.000+0000","updated":"2006-11-01T17:19:18.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12446376","id":"12446376","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nThat seems like a reasonable approach?  At least the index would be\r\nconsistent (ie, loadable).\r\n\r\nThough, if you hit disk full part way through, then some of your\r\nindexes were added and some where not.  How do you \"recover\" after you\r\nfree up your disk space?  If you just re-add all indexes then you have\r\nduplicates in the index.\r\n\r\nIs it possible instead to not reference (in the written segments info\r\nfile) those segments that were carried over from the input\r\nreaders/directories?  This would make the operation transactional, so\r\nthat if we crashed part way through, then the index rolls back to\r\nwhere it was before the addIndexes call.  And user could free up disk\r\nspace and try again, without creating dups.\r\n\r\n(One problem with this is that the orphan'd segments that had been\r\nwritten would not actually get deleted automatically; lockless commits\r\nwould fix that though because it recomputes on instantiating a reader\r\nwhich files are unreferenced and then deletes them).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-11-01T21:00:16.000+0000","updated":"2006-11-01T21:00:16.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12447968","id":"12447968","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I think we should try to make all of the addIndexes calls (and more\r\ngenerally any call to Lucene) \"transactional\".  Meaning, if the call\r\nis aborted (machine crashes, disk full, jvm killed, neutrino hits CPU,\r\netc.) then your index just \"rolls back\" to where it was at the start\r\nof the call.  Ie, it is consistent and none of the incoming documents\r\nwere added.\r\n\r\nThis way your index is fine after the crash, and, you can fix the\r\ncause of the crash and re-run the addIndexes call and you won't get\r\nduplicate documents.\r\n\r\nTo achieve this, each of the three addIndexes methods would need to 1)\r\nnot commit a new segments file until the end, and 2) not delete any\r\nsegments referenced by the initial segments file (segmentInfos) until\r\nthe end.\r\n\r\nWe have three methods now for addIndexes:\r\n\r\n  * For addIndexes(IndexReader[]): this method is I think already\r\n    transactional.  We create a merger, add all readers to it, do the\r\n    merge, and only at the end commit the new segments file & remove\r\n    old segments.\r\n\r\n  * For addIndexes(Directory[]): this method can currently corrupt the\r\n    index if aborted.  However, because all merging is done only on\r\n    the newly added segments, I think the fix is simply to not commit\r\n    the new segments file until the end?\r\n\r\n  * For addIndexesNoOptimize(Directory[]): this method can also\r\n    currently corrupt the index if aborted.  To fix this I think we\r\n    need to not only prevent committing a new segments file until the\r\n    end, but also to prevent deletion of any segments in the original\r\n    segments file.  This is because it's able (I think?) to merge\r\n    both old and new segments in its step 3.  This would normally\r\n    result in deleting those old segments that were merged.\r\n\r\n    Note that this will increase the temporary disk usage used during\r\n    the call, because old segments must remain on disk even if they\r\n    have been merged, but I think this is the right tradeoff\r\n    (transactional vs temporary disk usage)?\r\n\r\nAlso note that we would need the fixes from lockless LUCENE-701 to\r\nproperly delete orphan'd segments after an abort.  Without the\r\nIndexFileDeleter I think they would stick around indefinitely.\r\n\r\nDoes this approach sound reasonable/right?  Any feedback?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-11-07T23:19:58.000+0000","updated":"2006-11-07T23:19:58.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12448006","id":"12448006","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> I think we should try to make all of the addIndexes calls (and more\r\n> generally any call to Lucene) \"transactional\".\r\n\r\nAgree. A transactional semantics would be better.\r\n\r\nThe approach you described for three addIndexes looks good.\r\n\r\naddIndexes(IndexReader[]) is transactional but has two commits: one\r\nwhen existing segments are merged at the beginning, the other at the\r\nend when all segment/readers are merged.\r\n\r\naddIndexes(Directory[]) can be fixed to have a similar behaviour:\r\nfirst commit when existing segments are merged at the beginning, then\r\nat the end when all old/new segments are merged.\r\n\r\naddIndexesNoOptimize(Directory[]), on the other hand, does not merge\r\nexisting segments at the beginning. So when fixed, it will only have\r\none commit at the end which captures all the changes.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-11-08T01:55:12.000+0000","updated":"2006-11-08T01:55:12.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457414","id":"12457414","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nI've attached a patch with changes as described below.  I will commit\r\nin a few days if no one objects!\r\n\r\nAll unit tests pass.\r\n\r\nThis patch fixes addIndexes to 1) not corrupt the index on exception,\r\n2) be transactional (either all or nothing was actually added), and 3)\r\nto leave the writer instance in an consistent state (meaning, on an\r\nexception, the segmentInfos state is restored to its starting point,\r\nso that it matches what's actually in the index, and any unreferenced,\r\npresumably partially written, files in the index are removed).\r\n\r\nI've also fixed IndexWriter.mergeSegments() and IndexReader.commit()\r\nto keep the instance \"consistent\" on exception as well (ie, even when\r\nnot being called from addIndexes).  Meaning, on an exception, any\r\nchanges to segmentInfos state are rolled back, any opened readers (in\r\nthe merger) are closed, and non-committed files are removed.\r\n\r\nI've added two unit tests (one for IndexWriter.addIndexes* and one for\r\nIndexReader.close) that expose these various cases as failures in the\r\ncurrent Lucene sources, which then pass with this patch.\r\n\r\nThese unit tests use a new handy MockRAMDirectory that can simulate\r\ndisk full, inject random IOExceptions, measures peak disk usage, etc.\r\n \r\nHere is the summary of the approach:\r\n\r\n  * Added private methods startTransaction(), rollbackTransaction()\r\n    and commitTransaction() to IndexWriter.  During a transaction\r\n    (inTransaction = true), I block changes to the index that alter\r\n    how it was at the start of the transaction: we don't write any new\r\n    segments_N files (but, do update the segmentInfos in memory, and\r\n    do write / merge new segment files); we are not allowed to delete\r\n    any segment files that were in the index at the start (added\r\n    \"protectedSegments\" to track this during a transaction).\r\n\r\n  * For the addIndexes methods, I first call startTransaction(), then\r\n    do the actual work in a try block, and in a finally block then\r\n    call either commitTransaction() or rollbackTransaction().\r\n\r\n  * Fixed mergeSegments to respect whether it's in a transaction (and\r\n    not commit/delete).  Also, fixed this method so that if it's not\r\n    in a transaction (ie, being called by optimize or\r\n    maybeMergeSegments) it still (in a try/finally) leaves\r\n    segmentInfos \"consistent\" on hitting an exception, and removes any\r\n    partial files that had been written.\r\n\r\n  * Fixed IndexReader.commit with similar rollback logic to reset\r\n    internal state if commit has failed.\r\n\r\nIt is actually possible to get an IOException from\r\naddIndexes(Directory[]) yet see that all docs were in fact added. This\r\nhappens when the disk full is hit in building the CFS file on the\r\nfinal optimize.  In this case, the index is consistent, but that\r\nsegment will remain in non-CFS format and will show all docs as added.\r\n\r\nVarious other small changes:\r\n\r\n  * Changed RAMDirectory, and its createOutput method, to be\r\n    non-final.  Also changed private -> protected for some of its\r\n    instance variables.\r\n\r\n  * Created MockRAMDirectory subclass.\r\n\r\n  * Moved the RAMDirectory.getRecomputedSizeInBytes() into\r\n    MockRAMDirectory.\r\n\r\n  * Changed IndexFileDeleter to use a HashSet (instead of Vector) to\r\n    track pending files since with these changes the same file can be\r\n    added to the pending set many times.\r\n\r\n  * Added some javadocs around temporary disk usage by these methods\r\n    (this came up on java-user recently).  Also included a check in\r\n    one of the unit tests to assert this.\r\n\r\n  * In SegmentInfos, separately track (in memory only) which\r\n    generation we will use for writing vs which generation was last\r\n    successfully read.  These are almost always the same, but can\r\n    differ when a commit failed while writing the next segments_N\r\n    file.\r\n\r\n  * Changed package protected IndexFileDeleter.commitPendingFiles() to\r\n    actually delete the files (previously you also had to separately\r\n    call deleteFiles).\r\n\r\n  * Added SegmentInfos.getNextSegmentFileName()\r\n\r\n  * Added SegmentInfos.clone() to also copy the contents of the vector\r\n    (ie, each SegmentInfo).\r\n\r\n  * Added SegmentInfo.reset(), which is used to \"copy back\" a previous\r\n    clone of a SegmentInfo (IndexReader uses this to rollback).\r\n\r\n  * Added package protected SegmentReader.getSegmentName()\r\n\r\n  * Fixed a small bug in IndexFileDeleter that was failing to remove\r\n    un-referenced CFS file on a segment that wasn't successfully\r\n    converted to a CFS file (and added case to TestIndexFileDelter to\r\n    expose the bug first).\r\n\r\n  * Fixed a few minor typos.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-12-11T17:09:45.000+0000","updated":"2006-12-11T17:09:45.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457520","id":"12457520","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"It looks good. My two cents:\r\n\r\n1 In the two rollbacks in mergeSegments (where inTransaction is false), the segmentInfos' generation is not always rolled back. So something like this could happen: two consecutive successful commits write segments_3 and segments_5, respectively. Nothing is broken, but it'd be nice to roll back completely (even for the IndexWriter instance) when a commit fails.\r\n\r\n2 Code serving two purposes are (and has been) mixed in mergeSegments: one to merge segments and create compound file if necessary, the other to commit or roll back when inTransaction is false. It'd be nice if the two could be separated: optimize and maybeMergeSegments call mergeSegmentsAndCommit, which creates a transaction, calls mergeSegments and commits or rolls back; mergeSegments doesn't deal with commit or rollback. However, currently the non-CFS version is committed first even if useCompoundFile is true. Until that's changed, mergeSegments probably has to continue serving both purposes.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-12T00:25:04.000+0000","updated":"2006-12-12T00:25:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457691","id":"12457691","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Thanks for the review Ning!\r\n\r\n> 1 In the two rollbacks in mergeSegments (where inTransaction is\r\n> false), the segmentInfos' generation is not always rolled back. So\r\n> something like this could happen: two consecutive successful commits\r\n> write segments_3 and segments_5, respectively. Nothing is broken,\r\n> but it'd be nice to roll back completely (even for the IndexWriter\r\n> instance) when a commit fails.\r\n\r\nThis is actually intentional: I don't want to write to the same\r\nsegments_N filename, ever, on the possibility that a reader may be\r\nreading it.  Admittedly, this should be quite rare (filling up disk\r\nand then experiencing contention, only on Windows), but still I wanted\r\nto keep \"write once\" even in this case.\r\n\r\n> 2 Code serving two purposes are (and has been) mixed in\r\n> mergeSegments: one to merge segments and create compound file if\r\n> necessary, the other to commit or roll back when inTransaction is\r\n> false. It'd be nice if the two could be separated: optimize and\r\n> maybeMergeSegments call mergeSegmentsAndCommit, which creates a\r\n> transaction, calls mergeSegments and commits or rolls back;\r\n> mergeSegments doesn't deal with commit or rollback. However,\r\n> currently the non-CFS version is committed first even if\r\n> useCompoundFile is true. Until that's changed, mergeSegments\r\n> probably has to continue serving both purposes.\r\n\r\nI agree, mergeSegments is doing two different things now: merging\r\nsegments, and, committing this change (in 2 steps, for the CFS case)\r\ninto the index (if not in a transaction).\r\n\r\nI had in fact tried putting a transaction up at the\r\noptimize/maybeMergeSegments level, and it worked, but there was one\r\nsevere drawback: the max temp free space required would be [up to] 2X\r\nthe starting size of the segments-to-be-merged because the original\r\nsegments would be there (1X), the newly merged separate segment files\r\nwould be there (another 1X) and the just-created CFS segment file\r\nwould also be there (another 1X).\r\n\r\nWhereas the max temp space required now is 1X the starting size of\r\nsegments-to-be-merged.\r\n\r\nSo I think this (doing 2 commits with the current source before my\r\npatch) is intentional, to keep the temp free space required at 1X.\r\n\r\nIt's also [relatively] OK to commit that first time, at least\r\nfunctionally: the index is consistent and has all docs.  The only\r\ndownside is that if you hit disk full or other exception when creating\r\nthe CFS file then your index has one segment not in compound format (I\r\nwill call this out in the javadocs).\r\n\r\nOK I've added a unit-test that explicitly tests max temp space\r\nrequired by just optimize and asserts that it's at most 1X starting\r\nindex size.  Will attach a patch shortly!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-12-12T12:51:03.000+0000","updated":"2006-12-12T12:51:03.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457692","id":"12457692","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I attached a new patch with changes to only javadocs & unit tests:\r\n\r\n  * Fixed the disk full unit test to use \"richer\" documents so indexes\r\n    shrink less on merging/optimizing (ie make the test case \"harder\"\r\n    to satisfy the disk usage check).\r\n\r\n  * Added new test case for temp disk usage of optimize.  Verified\r\n    that it fails if we put a transaction around mergeSegments call in\r\n    optimize (as described above).\r\n\r\n  * Fixed javadocs for addIndexes(*): we actually require up to 2X the\r\n    total input size of all indices.  Fixed unit test to assert this.\r\n\r\n  * Fixed javadocs in IndexWriter's optimize, addIndexes(*),\r\n    addDocument to describe disk usage and index state after an\r\n    IOException is thrown.\r\n\r\n  * Improved how MockRAMDirectory tracks/enforces max usage.\r\n\r\n  * Other small fixes to unit test.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-12-12T12:52:56.000+0000","updated":"2006-12-12T12:52:56.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457858","id":"12457858","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"body":"> This is actually intentional: I don't want to write to the same\r\n> segments_N filename, ever, on the possibility that a reader may be\r\n> reading it.  Admittedly, this should be quite rare (filling up disk\r\n> and then experiencing contention, only on Windows), but still I wanted\r\n> to keep \"write once\" even in this case.\r\n\r\nIn IndexWriter, the rollbackTransaction call in commitTransaction could\r\ncause write to the same segment_N filename, right?\r\n\r\nThe \"write once\" semantics is not kept for segment names or .delN. This\r\nis ok because no reader will read the old versions.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ningli","name":"ningli","emailAddress":"ning dot li dot li at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ning Li","active":true},"created":"2006-12-12T20:00:48.000+0000","updated":"2006-12-12T20:00:48.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12457896","id":"12457896","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"> In IndexWriter, the rollbackTransaction call in commitTransaction could\r\n> cause write to the same segment_N filename, right?\r\n\r\nGood catch -- you are correct!  OK, I fixed rollbackTransaction to do\r\nthe same in-place rollback of the segmentInfos that I do in\r\nmergeSegments (patch attached).  This means if another attempt is made\r\nto commit, using this same IndexWriter instance after it had received\r\nan exception, it will write to a new segments_N file.\r\n\r\n> The \"write once\" semantics is not kept for segment names or\r\n> .delN. This is ok because no reader will read the old versions.\r\n\r\nRight, I think these cases are less important because readers would never try to\r\nopen those partially written files (since no segments_N references them).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2006-12-12T21:55:38.000+0000","updated":"2006-12-12T21:55:38.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12354184/comment/12476270","id":"12476270","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Closing all issues that were resolved for 2.1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-27T18:10:35.683+0000","updated":"2007-02-27T18:10:35.683+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-702/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i051jb:"}}