{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12353613","self":"https://issues.apache.org/jira/rest/api/latest/issue/12353613","key":"LUCENE-690","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310854","id":"12310854","description":"","name":"2.1","archived":false,"released":true,"releaseDate":"2007-02-17"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2006-10-19 17:29:29.0","customfield_12312323":null,"customfield_12310420":"13062","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_36070000_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_11286162351","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2006-10-20T03:07:53.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-690/watchers","watchCount":1,"isWatching":false},"created":"2006-10-19T17:06:43.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12310854","id":"12310854","description":"","name":"2.1","archived":false,"released":true,"releaseDate":"2007-02-17"}],"issuelinks":[{"id":"12313879","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12313879","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"outwardIssue":{"id":"12352674","key":"SOLR-52","self":"https://issues.apache.org/jira/rest/api/2/issue/12352674","fields":{"summary":"Lazy Field loading","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2007-02-27T18:10:35.349+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310236","id":"12310236","name":"core/store","description":"issues with store code (e.g. Directory)"}],"timeoriginalestimate":null,"description":"Hypothetical problem: IndexInput.clone() of an active IndexInput could result in a corrupt copy.\nLazyField clones the FieldsReader.fieldsStream, which could be in use via IndexReader.document()","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10120","value":"Patch Available","id":"10120"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"27358","summary":"LazyField use of IndexInput not thread safe","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":15,"total":15,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443587","id":"12443587","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Not sure why this is different then anywhere else IndexInput.clone() is used, can you provide more details?  Isn't the whole point of cloning to make it thread safe (which is why it is stored in the ThreadLocal)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T17:29:29.000+0000","updated":"2006-10-19T17:29:29.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443595","id":"12443595","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"It seems to me like if you clone an object in an unknown state, you get another object in an unknown state unless it's clone() is able to explicitly put it back into a known state.\r\n\r\nLet's take TermDocs as an example of why it's use is OK:\r\nSegmentTermDocs() *always* makes a clone of the SegmentReader's freqStream, and the SegmentReader itself never directly uses the freqStream (and hence freqStream is used for nothing other than cloneing).  \r\nThis analysis only takes into account SegmentTermDocs and SegmentReader... if there is another class that directly uses SegmentReader.freqStream, then all bets are off again.\r\n\r\nI don't know if all other clones() of IndexInput are safe, but it does seem like LazyField's use is unsafe.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-19T17:44:08.000+0000","updated":"2006-10-19T17:44:08.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443600","id":"12443600","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Defnitely an issue for a closed IndexInput, but that has been discussed elsewhere and there isn't really anything satisfying to say there other than it is undeclared what will happen (although my tests on local Directories indicate that it is \"safe\" in a simple environment).\r\n\r\nOtherwise,  my understanding is that the seek() call before reading should put it into a known state, but I am guessing your not so sure on that point.  So the question is seek() sufficient to put an IndexInput into a known safe state, right?\r\n\r\nIf it doesn't, what would you suggest for a fix?  I suppose maybe you could clone it as you create the LazyField (which would put it in right at the correct position and there would be no need to seek, right)  This would save a little time at the tradeoff of memory, right?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T18:12:37.000+0000","updated":"2006-10-19T18:12:37.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443611","id":"12443611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Comment from Hoss, which I think should be on the issue:\r\n\r\n: Otherwise, my understanding is that the seek() call before reading\r\n: should put it into a known state, but I am guessing your not so sure on\r\n: that point.  So the question is seek() sufficient to put an IndexInput\r\n: into a known safe state, right?\r\n\r\nisn't it more subtle then that? ... IndexInput.clone() states that the\r\nclone will be \"positioned at the same point as the stream they were cloned\r\nfrom\" ... that implies that the clone will be in a consistent usable state\r\neven with the client calling seek on the clone() .... is that\r\ninvarient currently met by BufferedIndexInput in a multithreaded case?\r\n\r\n\r\n\r\n\r\n-Hoss\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T18:59:36.000+0000","updated":"2006-10-19T18:59:36.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443621","id":"12443621","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Possibly reading wrong, but it seems like that invariant is not met by BufferedIndexInput, right?\r\n\r\nIf clone was called while the IndexInput was in the refill() operation before readInternal() was called but after the buffer was allocated (i.e. line 64) and then clone finished it would copy an empty buffer on line 103, right?  This would be bad, b/c I don't see that it could recover from an empty buffer there when it thinks it has data.\r\n\r\nSo, I guess that would argue that it is not safe and that we should aggressively clone (b/c we know it is in a good state) or that we should synchronize, right? \r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T19:21:00.000+0000","updated":"2006-10-19T19:21:00.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443625","id":"12443625","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":": If clone was called while the IndexInput was in the refill() operation before readInternal() was called but after the buffer was allocated (i.e. line 64) and then clone finished it would copy an empty buffer on line 103, right?\r\n\r\nCorrect.  BufferedIndexInput also has multiple \"pointers\", and in the absense of synchronization, you can't guarantee the order that things will be flushed back to memory.\r\n\r\n: So, I guess that would argue that it is not safe and that we should aggressively clone (b/c we know it is in a good state) or that we should synchronize, right?\r\n\r\nRight, you either never use what you are cloning, or you synchronize.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-19T19:25:14.000+0000","updated":"2006-10-19T19:25:14.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443628","id":"12443628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"On 10/19/06, Ning Li <ning.li.li@gmail.com> wrote:\r\n> What makes, for example, FSIndexInput and its clones, thread-safe is\r\n> the following.\r\n> That is, the method is synchronized on the file object.\r\n> \r\n>   protected void readInternal(byte[] b, int offset, int len)\r\n>        throws IOException {\r\n>     synchronized (file) {\r\n\r\nI don't think that's sufficient in part because the IndexInput's state is manipulated outside that sync block.  The sync block is to protect the file only, not the IndexInput, which isn't thread-safe (by design).\r\n\r\nLook at BufferedIndexInput.seek() and BufferedIndexInput.refill()\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-19T19:32:29.000+0000","updated":"2006-10-19T19:32:29.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443629","id":"12443629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Do you have a preference on aggressive cloning vs. synching?  cloning is easier to implement, but then the Field is no longer as lazy as it could be, on the other hand synching on the fieldsStream in LazyField and doc() could be pretty expensive, too, right?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T19:49:14.000+0000","updated":"2006-10-19T19:49:14.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443638","id":"12443638","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Here's one possible patch... not sure if it's the best approach or not.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-19T20:18:00.000+0000","updated":"2006-10-19T20:18:00.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443640","id":"12443640","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"> Do you have a preference on aggressive cloning vs. synching?\r\n\r\nNot too much... synching was presumably avoided for better concurrency.  If we wanted to sync in LazyField, it would currently need to be on the SegmentReader object, since that's the monitor protecting the fieldStream.\r\n\r\nCould also perhaps lazily create the \"cloneable stream\"  the first time a lazy field is created, since we are currently in a synchronized context when that happens.\r\n\r\nA different route would be to convert normal document() loading to also use thread-local fieldStreams for better concurrency.  It would mean a thread-local lookup per document though, and I'm not sure what the expense of that would be.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-19T20:27:01.000+0000","updated":"2006-10-19T20:27:01.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443642","id":"12443642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Patch seems reasonable, and your idea of waiting till we have a lazy field before cloning seems reasonable, as my guess is, at least for now, that Lazy Fields are not in widespread use just yet.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2006-10-19T20:35:47.000+0000","updated":"2006-10-19T20:35:47.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443650","id":"12443650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=paul.elschot%40xs4all.nl","name":"paul.elschot@xs4all.nl","emailAddress":"paul dot j dot elschot at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=paul.elschot%40xs4all.nl&avatarId=23180","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paul.elschot%40xs4all.nl&avatarId=23180"},"displayName":"Paul Elschot","active":true},"body":"I have not followed this, but some time ago I've had a problem with cloning and BufferedIndexInput, see LUCENE-430.\r\nSearching jira for BufferedIndexInput gives 5 hits currently.\r\n\r\nRegards,\r\nPaul Elschot","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=paul.elschot%40xs4all.nl","name":"paul.elschot@xs4all.nl","emailAddress":"paul dot j dot elschot at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=paul.elschot%40xs4all.nl&avatarId=23180","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paul.elschot%40xs4all.nl&avatarId=23180","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paul.elschot%40xs4all.nl&avatarId=23180"},"displayName":"Paul Elschot","active":true},"created":"2006-10-19T21:18:42.000+0000","updated":"2006-10-19T21:18:42.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443682","id":"12443682","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK, I committed this fix for now.\r\nFor BufferedIndexInput, the buffer is allocated lazily, so the extra clone doesn't use much space.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-20T03:07:53.000+0000","updated":"2006-10-20T03:07:53.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12443702","id":"12443702","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK, this problem is no longer hypothetical!\r\nI was able to produce a test that failed quickly most of the time w/o the patch.\r\nI've just committed it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2006-10-20T05:10:35.000+0000","updated":"2006-10-20T05:10:35.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12353613/comment/12476268","id":"12476268","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Closing all issues that were resolved for 2.1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-02-27T18:10:35.348+0000","updated":"2007-02-27T18:10:35.348+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-690/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i051lz:"}}