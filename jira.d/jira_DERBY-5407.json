{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12522741","self":"https://issues.apache.org/jira/rest/api/latest/issue/12522741","key":"DERBY-5407","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315434","id":"12315434","description":"Head of 10.6 branch as of 2014-01-13","name":"10.6.2.4","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12315902","id":"12315902","description":"Head of 10.7 branch as of 2010-11-29","name":"10.7.1.4","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323456","id":"12323456","description":"Third release on the 10.8 branch","name":"10.8.3.0","archived":false,"released":true,"releaseDate":"2012-11-16"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323562","id":"12323562","description":"Head of 10.9 branch after releasing 10.9.1.0","name":"10.9.2.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12321550","id":"12321550","description":"First release on the 10.10 branch","name":"10.10.1.1","archived":false,"released":true,"releaseDate":"2013-04-15"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2012-07-03 03:33:33.911","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"24823","customfield_12310222":"1_*:*_1_*:*_27405596658_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2012-07-25T18:30:35.006+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5407/watchers","watchCount":5,"isWatching":false},"created":"2011-09-12T13:50:38.566+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":["derby_backport_reject_10_5"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316362","id":"12316362","description":"First release on the 10.8 branch","name":"10.8.1.2","archived":false,"released":true,"releaseDate":"2011-04-29"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12354969","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12354969","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12598238","key":"DERBY-5852","self":"https://issues.apache.org/jira/rest/api/2/issue/12598238","fields":{"summary":"dblook fails with client if derby.jar is not in classpath with java.sql.SQLException: Error marshalling or unmarshalling a user defined type","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-06-14T17:22:18.408+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11414","id":"11414","name":"Tools"}],"timeoriginalestimate":null,"description":"In private correspondence, Mani Afschar Yazdi reports that dblook omits the length specification for VARCHAR FOR BIT DATA columns when run across the network. Embedded dblook runs fine. I can reproduce this problem as follows:\r\n\r\n1) Bring up a server (here I am using port 8246).\r\n\r\n2) Create a database with the following ij script:\r\n\r\nconnect 'jdbc:derby://localhost:8246/memory:db;create=true';\r\n\r\ncreate table t( a varchar( 20 ) for bit data );\r\n\r\n3) Now run dblook across the network:\r\n\r\njava -org.apache.derby.tools.dblook -d \"jdbc:derby://localhost:8246/memory:db\"\r\n\r\nThis produces the following DDL for the table:\r\n\r\nCREATE TABLE \"APP\".\"T\" (\"A\" VARCHAR () FOR BIT DATA);\r\n\r\nA similar experiment using an embedded database produces usable DDL which includes a length specification for the VARCHAR FOR BIT DATA column.\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10363","value":"Embedded/Client difference","id":"10363"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10421","value":"Seen in production","id":"10421"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"35459","summary":"When run across the network, dblook produces unusable DDL for VARCHAR FOR BIT DATA columns.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10424","value":"Repro attached","id":"10424"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":17,"total":17,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13405585","id":"13405585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I debugged the code and found that to extract column types, we use following query in DB_Table.doTables\r\ngetColumnTypeStmt = \r\n\tconn.prepareStatement(\"SELECT COLUMNDATATYPE, COLUMNDEFAULT FROM SYS.SYSCOLUMNS \" +\r\n\t\"WHERE REFERENCEID = ? AND COLUMNNAME = ?\");\r\n\r\nBut for a network server configuration, we do not return the column length whereas it works fine in embedded mode.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-03T03:33:33.911+0000","updated":"2012-07-03T03:33:33.911+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13410469","id":"13410469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"dblook uses following sql to determine the column types and default\r\nSELECT COLUMNDATATYPE, COLUMNDEFAULT FROM SYS.SYSCOLUMNS WHERE REFERENCEID = ? AND COLUMNNAME = ?\"\r\n\r\nI used similar sql directly in ij(bypassing dblook) and saw the same errorneous results for network server configuration. Embedded returns the length for VARCHAR FOR BIT DATA but network server doesn't. I am debugging currently to find the reason behind the difference in behavior.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-10T16:12:40.897+0000","updated":"2012-07-10T16:12:40.897+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13410513","id":"13410513","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"With my testing so far, the problem with missing length does not happen for varchar datatype in network server. So, if a table has 2 columns, as follows\r\ncreate table t2( a1 varchar( 30 ) for bit data, a2 varchar(25) ); \r\nthen, following query in ij returns VARCHAR(25) for column a2, but it returns VARCHAR () FOR BIT DATA for column a1.\r\n SELECT COLUMNDATATYPE FROM SYS.SYSCOLUMNS;\r\n\r\nAlso, if I take the network server database to embedded, following query in ij returns correct information for both columns a1 and a2, ie  VARCHAR(25) for column a2 and VARCHAR (30) FOR BIT DATA for column a1.\r\n SELECT COLUMNDATATYPE FROM SYS.SYSCOLUMNS\r\n\r\nSo, it looks like there is nothing wrong with the information stored in the underlying database. Could it be something to do with DRDA? I will debug this further but wanted to share what I have found so far in case if it rings a bell to someone.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-10T16:45:21.416+0000","updated":"2012-07-10T16:45:21.416+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13410584","id":"13410584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"One thing to note is that ColumnDataType is a UDT. http://db.apache.org/derby/docs/10.9/ref/rrefsistabs22441.html\r\n\r\nI would think though that you would still get the same toString()  representation for the object on the client side and if this works ok for varchar it should also be resonable for varchar for bit data.\r\n\r\nWorst case, you could normalize the behavior by  casting the result to long varchar in the query, per the release note at:\r\nhttps://issues.apache.org/jira/browse/DERBY-4688\r\n\r\nDoing so for all dblook queries that access UDT's would mean that dblook might be usable from client without having derby.jar in the classpath  which would  be a nice thing, but I am very curious why the client side object has a different toString output. It seems like there is a bug there.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2012-07-10T17:33:41.744+0000","updated":"2012-07-10T17:33:41.744+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13410603","id":"13410603","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Hi Mamta,\r\n\r\nThanks for looking at this issue. The column datatype is a TypeDescriptorImpl. My first suspicion would be that this object is not serializing itself properly across the network. I think that different logic is used to (de)serialize datatypes to the catalogs and into the byte arrays which are sent across the network. The network serialization relies on the writeExternal() and readExternal()  methods of java.io.Serializable. The metadata serialization is trickier. If you want to pursue this theory, a next step would be to try (de)serializing a TypeDescriptorImpl to a byte array. See for instance DDMWriter.writeUDT() and DRDAConnThread.readUDT(). Hope this helps.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2012-07-10T17:41:46.691+0000","updated":"2012-07-10T17:41:46.691+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13410686","id":"13410686","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"linking DERBY-5852 for dblook failing with client if derby.jar is not in the classpath. The suggested  solution for that issue,  casting column to long varchar, would likely fix this dblook issue as well, but if you take that approach,  a separate issue should be filed for the marshalling issue with the existing query.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2012-07-10T18:39:46.582+0000","updated":"2012-07-10T18:39:46.582+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13415463","id":"13415463","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I have added a new test fixture testColumnDatatypesOfAllDataTypesInSystemCatalogs to SystemCatalogTest.java This new fixture creates a table with all the datatypes and check syscolumns.columndatatype to make sure that we get the correct datatype back for those columns in both network server and embedded modes. As expected, because of DERBY-5407, the datatypes returned for VARCHAR FOR BIT DATA is not the same for the 2 modes. Additionally, CAHR FOR BIT DATA also does not match for the 2 modes. Once we fix the underlying issue, we should be able to check in this test with the fix for the issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-16T18:05:05.412+0000","updated":"2012-07-16T18:05:05.412+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13415510","id":"13415510","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I did further debugging of this issue and I found that we are sending the correct information over the wire for the network server.\r\nThis is where we write the column data on the server side\r\nThread [DRDAConnThread_11] (Suspended)\t\r\n\tTypeDescriptorImpl.writeExternal(ObjectOutput) line: 549\t\r\n\tObjectOutputStream.writeExternalData(Externalizable) line: 1449\t\r\n\tObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean) line: 1418\t\r\n\tObjectOutputStream.writeObject0(Object, boolean) line: 1178\t\r\n\tObjectOutputStream.writeObject(Object) line: 347\t\r\n\tDDMWriter.writeUDT(Object, int) line: 1181\t\r\n\tDRDAConnThread.writeFdocaVal(int, Object, int, int, int, boolean, DRDAStatement, boolean) line: 8072\t\r\n\tDRDAConnThread.writeFDODTA(DRDAStatement) line: 7256\t\r\n\tDRDAConnThread.writeQRYDTA(DRDAStatement) line: 6990\t\r\n\tDRDAConnThread.processCommands() line: 910\t\r\n\tDRDAConnThread.run() line: 295\t\r\n\r\nAnd this is where we read the column data on the client side\r\nThread [main] (Suspended)\t\r\n\tBaseTypeIdImpl.getTypeFormatId() line: 258\t\r\n\tBaseTypeIdImpl.toParsableString(TypeDescriptor) line: 178\t\r\n\tTypeDescriptorImpl.getSQLstring() line: 441\t\r\n\tTypeDescriptorImpl.toString() line: 446\t\r\n\tNetCursor(Cursor).getString(int) line: 1061\t\r\n\tNetResultSet40(ResultSet).getString(int) line: 1069\t\r\n\tJDBCDisplayUtil.DisplayRow(PrintWriter, ResultSet, ResultSetMetaData, int, Vector, Connection, int, int[], int[]) line: 693\t\r\n\tJDBCDisplayUtil.indent_DisplayResults(PrintWriter, List, Connection, int, int[], int[]) line: 385\t\r\n\tJDBCDisplayUtil.indent_DisplayResults(PrintWriter, ResultSet, Connection, int, int[], int[]) line: 338\t\r\n\tJDBCDisplayUtil.indent_DisplayResults(PrintWriter, Statement, Connection, int, int[], int[]) line: 241\t\r\n\tJDBCDisplayUtil.DisplayResults(PrintWriter, Statement, Connection) line: 229\t\r\n\tutilMain.displayResult(LocalizedOutput, ijResult, Connection) line: 454\t\r\n\tutilMain.doCatch(String) line: 528\t\r\n\tutilMain.runScriptGuts() line: 369\t\r\n\tutilMain.go(LocalizedInput[], LocalizedOutput) line: 245\t\r\n\tMain.go(LocalizedInput, LocalizedOutput) line: 229\t\r\n\tMain.mainCore(String[], Main) line: 184\t\r\n\tMain.main(String[]) line: 75\t\r\n\tij.main(String[]) line: 59\t\r\n\r\nI think I should know in a day or two as to what is happening.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-16T18:47:39.798+0000","updated":"2012-07-16T18:47:39.798+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13416837","id":"13416837","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Attaching a patch which has a fix for the issue and a new junit test fixture.\r\n\r\nAfter debugging the issue, I have found that the serialization of object on the wire from the network server end happens\r\ncorrectly. The same serialized data is received by the client but when we try to instantiate the TypeDescriptor based\r\non this serialized data, we get confused between \"VARCHAR () FOR BIT DATA\" and \"VARCHAR FOR BIT DATA\".\r\n\r\nFollowing is a brief explanation of the current logic and problem area.\r\n\r\nLet's say, there is a database with following table\r\ncreate table t2( a1 varchar( 30 ) for bit data, a2 varchar(25) ); \r\n\r\nWhen query below is run on top of the trunk in network server mode against the databse above, we get following results\r\nselect columndatatype from sys.systables, sys.syscolumns where tablename='T2' and tableid=referenceid;\r\nCOLUMNDATATYPE\r\n---------------\r\nVARCHAR () FOR&\r\nVARCHAR(25)\r\n\r\nNotice the length of the column \"A1\" is missing in syscolumns.COLUMNDATATYPE\r\n\r\n\r\nsyscolumns.columndatatype is a UDT. On the server side, the TypeDescriptor associated with it gets initialized as shown below\r\n          case StoredFormatIds.VARBIT_TYPE_ID_IMPL:\r\n              schemaName = null;\r\n              unqualifiedName = TypeId.VARBIT_NAME;\r\n              JDBCTypeId = Types.VARBINARY;\r\n              break;\r\nNote, that unqualifiedName has gotten \"VARCHAR () FOR BIT DATA\" assigned to it. Later on in the server code, we associate\r\ncolumn width 30 with this TypeDescriptor for our specific example. So, the TypeDescriptor has the correct information which will then be sent on the wire to the client.\r\n\r\nFollowing stack trace shows were we write this \"VARCHAR () FOR BIT DATA\" onto the wire.\r\nThread [DRDAConnThread_2] (Suspended (breakpoint at line 323 in BaseTypeIdImpl))\t\r\n\tBaseTypeIdImpl.writeExternal(ObjectOutput) line: 323\t\r\n\tObjectOutputStream.writeExternalData(Externalizable) line: 1449\t\r\n\tObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean) line: 1418\t\r\n\tObjectOutputStream.writeObject0(Object, boolean) line: 1178\t\r\n\tObjectOutputStream.writeObject(Object) line: 347\t\r\n\tTypeDescriptorImpl.writeExternal(ObjectOutput) line: 549\t\r\n\tObjectOutputStream.writeExternalData(Externalizable) line: 1449\t\r\n\tObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean) line: 1418\t\r\n\tObjectOutputStream.writeObject0(Object, boolean) line: 1178\t\r\n\tObjectOutputStream.writeObject(Object) line: 347\t\r\n\tDDMWriter.writeUDT(Object, int) line: 1181\t\r\n\tDRDAConnThread.writeFdocaVal(int, Object, int, int, int, boolean, DRDAStatement, boolean) line: 8053\t\r\n\tDRDAConnThread.writeFDODTA(DRDAStatement) line: 7236\t\r\n\tDRDAConnThread.writeQRYDTA(DRDAStatement) line: 6970\t\r\n\tDRDAConnThread.processCommands() line: 894\t\r\n\tDRDAConnThread.run() line: 288\t\r\nSubsequently, we also write the width 30 for the VARCHAR () FOR BIT DATA on the wire for our example case.\r\n\r\nClient goes through the deserialization of the UDT and during deserialization, it finds VARCHAR () FOR BIT DATA and the width \r\n30 for it. So far, client is reading what server has sent and things are in sync. We use this information to construct a\r\nTypeDescriptor. This happens through BaseTypeIdImpl.getTypeFormatId(). Here, we look at the string representation of the type descriptor that we received on the wire and choose the appropriate format id based on that string. The problem is in this BaseTypeIdImpl.getTypeFormatId() code, because the code looks for VARCHAR FOR BIT DATA rather than VARCHAR () FOR BIT DATA \r\n(notice the missing parentheses) as shown below.\r\n            else if ( \"VARCHAR FOR BIT DATA\".equals( unqualifiedName ) ) { return StoredFormatIds.VARBIT_TYPE_ID_IMPL; }\r\nSince VARCHAR FOR BIT DATA and VARCHAR () FOR BIT DATA do not match, we do not use format id VARBIT_TYPE_ID_IMPL\r\nLater, we go through the following switch statement based on format id in BaseTypeIdlImpl.toParsableString(TypeDescriptor)\r\n        switch (getTypeFormatId())\r\n        {\r\n          case StoredFormatIds.BIT_TYPE_ID_IMPL:\r\n          case StoredFormatIds.VARBIT_TYPE_ID_IMPL:\r\n\t\t\t  int rparen = retval.indexOf(')');\r\n\t\t\t  String lead = retval.substring(0, rparen);\r\n\t\t\t  retval = lead + td.getMaximumWidth() + retval.substring(rparen);\r\n\t\t\t  break;\r\n\r\n          case StoredFormatIds.CHAR_TYPE_ID_IMPL:\r\n          case StoredFormatIds.VARCHAR_TYPE_ID_IMPL:\r\n          case StoredFormatIds.BLOB_TYPE_ID_IMPL:\r\n          case StoredFormatIds.CLOB_TYPE_ID_IMPL:\r\n                retval += \"(\" + td.getMaximumWidth() + \")\";\r\n                break;\r\n\r\n          case StoredFormatIds.DECIMAL_TYPE_ID_IMPL:\r\n                retval += \"(\" + td.getPrecision() + \",\" + td.getScale() + \")\";\r\n                break;\r\n        }\r\nIn the switch statement above, we are supposed to stuff in the width of the varchar for bit data into the parentheses\r\nie VARCHAR () FOR BIT DATA should get converted into VARCHAR (30) FOR BIT DATA for our specific example but we don't do it because of getTypeFormatd() code above..\r\n\r\nTo solve this, I have found that if I change code in BaseTypeIdImpl.getTypeFormatId() to look for VARCHAR () FOR BIT DATA, as \r\nfollows\r\n            else if ( \"VARCHAR () FOR BIT DATA\".equals( unqualifiedName ) ) { return StoredFormatIds.VARBIT_TYPE_ID_IMPL; }\r\nthe problem gets fixed. I have not yet run derbyall and junit suite to see if that change can cause any problems. \r\n\r\nIf there might be dependencies on the original \"VARCHAR FOR BIT DATA\" check, then we can add additional check for \r\nVARCHAR () FOR BIT DATA along with existing check for \"VARCHAR FOR BIT DATA\" as shown below\r\n            else if ( \"VARCHAR FOR BIT DATA\".equals( unqualifiedName ) ) { return StoredFormatIds.VARBIT_TYPE_ID_IMPL; }\r\n            else if ( \"VARCHAR () FOR BIT DATA\".equals( unqualifiedName ) ) { return StoredFormatIds.VARBIT_TYPE_ID_IMPL; }\r\nWe will need to do similar thing for CHAR FOR BIT DATA. This will fix the jira issue and it will also not break any dependencies\r\nthat might exist on \"VARCHAR FOR BIT DATA\" check.\r\n\r\nThe test that I have attached to the jira runs fine with my suggested changes. Next, I will run derbyall and junit suite.\r\nPlease let me know if there is any feedback on the suggested fix.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-18T03:10:55.677+0000","updated":"2012-07-18T03:10:55.677+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13416938","id":"13416938","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Maybe BaseTypeIdImpl.getTypeFormatId() could use the constants in TypeId (like TypeId.VARBIT_NAME)? That might make it more robust against typos like the ones that caused this bug.\r\n\r\nI would think that it's OK to remove the tests for \"VARCHAR FOR BIT DATA\" and \"CHAR FOR BIT DATA\", as they're likely just typos. But I don't see much harm in keeping them just in case. Perhaps move those two checks to the end of the method, and add a comment saying that they're most likely not needed?\r\n\r\nIt's great that you added test cases for all the data types. According to the code coverage results for BaseTypeIdImpl.getTypeFormatId(), none of the types were covered by existing tests, so it's good to get all of them tested.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-07-18T08:26:21.673+0000","updated":"2012-07-18T08:26:21.673+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13417088","id":"13417088","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Thanks, Mamta. This looks like the right fix to me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2012-07-18T13:47:09.257+0000","updated":"2012-07-18T13:47:09.257+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13417265","id":"13417265","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"fix looks good to me.  Is this bug a regression, if so any idea what version/change caused it?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-07-18T17:16:11.634+0000","updated":"2012-07-18T17:16:11.634+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13417274","id":"13417274","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"My guess would be 10.6 with DERBY-4491, but should be verified.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2012-07-18T17:23:38.113+0000","updated":"2012-07-18T17:25:43.253+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13417291","id":"13417291","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"The code which Mamta fixed was added in revision 899733 by derby-4491-01-ad-networkTransport .diff. My guess would be 10.6.1 too.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2012-07-18T17:35:30.046+0000","updated":"2012-07-18T17:35:30.046+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13420761","id":"13420761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I have committed the changes to top fo the trunk. Will migrate it to earlier releases(sounds like upto 10.6 but I will verify while migrating it.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-23T16:32:40.817+0000","updated":"2012-07-23T16:32:40.817+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13422483","id":"13422483","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"The fix has been backported all the way upto 10.6. The sample test works fine on 10.5 and hence we do not need to do any backporting to 10.5","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-25T18:30:35.056+0000","updated":"2012-07-25T18:30:35.056+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522741/comment/13422505","id":"13422505","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Actually, I backported the test to 10.5 codeline with following commit comments\r\n**************************\r\nDERBY-5407 When run across the network, dblook produces unusable DDL for VARCHAR FOR BIT DATA columns.\r\n\r\nBackporting only the test from 10.6 to 10.5. The bug doesn't exist in 10.5 but there is no test code coverage for SYSCOLUMNS.COLUMNDATATYPE in 10.5 and hence putting the test in 10.5\r\n**************************\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2012-07-25T18:58:29.481+0000","updated":"2012-07-25T18:58:29.481+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5407/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06fl3:"}}