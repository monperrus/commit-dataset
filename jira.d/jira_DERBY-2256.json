{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12360835","self":"https://issues.apache.org/jira/rest/api/latest/issue/12360835","key":"DERBY-2256","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-01-19 06:06:26.409","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22969","customfield_12310222":"1_*:*_1_*:*_5935776398_*|*_6_*:*_3_*:*_1153334629_*|*_5_*:*_1_*:*_6048012070_*|*_4_*:*_2_*:*_73735","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2007-06-20T01:32:47.036+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2256/watchers","watchCount":0,"isWatching":false},"created":"2007-01-19T00:19:30.204+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/10920","id":"10920","description":"initial source drop","name":"10.0.2.0","archived":false,"released":true,"releaseDate":"2004-08-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/10991","id":"10991","description":"snapshot","name":"10.0.2.1","archived":false,"released":true,"releaseDate":"2004-12-06"},{"self":"https://issues.apache.org/jira/rest/api/2/version/10992","id":"10992","name":"10.0.2.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/10993","id":"10993","description":"","name":"10.1.1.0","archived":false,"released":true,"releaseDate":"2005-08-03"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12310615","id":"12310615","description":"","name":"10.1.2.1","archived":false,"released":true,"releaseDate":"2005-11-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12311953","id":"12311953","description":"","name":"10.1.3.1","archived":false,"released":true,"releaseDate":"2006-06-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12311972","id":"12311972","description":"","name":"10.1.3.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313478","id":"12313478","description":"Head of 10.1 branch. Maintenance version bump for sps update ","name":"10.1.3.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312027","id":"12312027","description":"","name":"10.2.2.0","archived":false,"released":true,"releaseDate":"2006-12-19"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312251","id":"12312251","description":"Head of 10.2 branch","name":"10.2.2.1","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12314829","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12314829","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"12354628","key":"DERBY-2034","self":"https://issues.apache.org/jira/rest/api/2/issue/12354628","fields":{"summary":"Tracking of bugs that lead to incorrect results being stored or returned to the client","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/5","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/trivial.png","name":"Trivial","id":"5"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}},{"id":"12362134","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12362134","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12624466","key":"DERBY-6017","self":"https://issues.apache.org/jira/rest/api/2/issue/12624466","fields":{"summary":"IN lists with mixed types may return wrong results","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2012-12-19T11:10:59.412+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"While trying out some code changes for DERBY-47 I was running a few test cases and happened to notice that there are a couple of cases in which Derby behaves incorrectly (that or my understanding of what should be happening here is way off).\n\nFirst and most simply: the following query should return zero rows (unless I'm missing something?), but it returns one:\n\nij> create table t1 (i int);\n0 rows inserted/updated/deleted\nij> insert into t1 values 1, 2, 3, 4, 5;\n5 rows inserted/updated/deleted\n\n-- Correct returns zero rows.\nij> select * from t1 where i in (4.23);\nI\n-----------\n\n0 rows selected\n\n-- But this one returns 1 row...\nij> select * from t1 where i in (2.8, 4.23);\nI\n-----------\n4\n\n1 row selected\n\nSecondly, if the IN-list contains a non-constant value then Derby can incorrectly return rows that do not match the IN predicate.  I think this is because some internal casting is happening when it shouldn't?\n\nij> create table t1 (i int);\n0 rows inserted/updated/deleted\nij> insert into t1 values 1, 2, 3, 4, 5;\n5 rows inserted/updated/deleted\n\n-- Following values clause returns \"2.80\", as expected.\nij> values cast (2.8 as decimal(4, 2));\n1\n-------\n2.80\n\n1 row selected\n\n-- But if we use it in an IN-list it gets cast to \"2\" and thus returns a match.\n-- We get 2 rows when we should get NONE.\nij> select * from t1 where i in (cast (2.8 as decimal(4, 2)), 4.23);\nI\n-----------\n2\n4\n\n2 rows selected\n\nI confirmed that we see these results on trunk, 10.2, 10.1, and even as far back as svn #201660 for 10.0.  I also ran the above statements on DB2 v8 as a sanity check to confirm that NO results were returned there.\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37978","summary":"Wrong Results: Use of decimal values in an IN-list with INTEGER left operand can lead to extra rows.","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10101","value":"Release Note Needed","id":"10101"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":14,"total":14,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12465963","id":"12465963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yipng","name":"yipng","emailAddress":"yipng168 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yip Ng","active":true},"body":"Another error cases:\r\n\r\n-- ok\r\nij> select * from t1 where i in (4, 4.23);\r\nI\r\n-----------\r\n4\r\n\r\n-- wrong\r\nij> select * from t1 where i in (4.23, 4);\r\nI\r\n-----------\r\n\r\n0 rows selected\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yipng","name":"yipng","emailAddress":"yipng168 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yip Ng","active":true},"created":"2007-01-19T06:06:26.409+0000","updated":"2007-01-19T06:06:26.409+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12466094","id":"12466094","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"There is code in InListOperatorNode.java that creates a BETWEEN clause from an IN-list if the size of the IN list is greater than 1 and all values are constants:\r\n\r\n\tif (rightOperandList.size() == 1)\r\n\t{\r\n\t\t// just use an equality predicate\r\n\t}\r\n\telse if ((leftOperand instanceof ColumnReference) &&\r\n\t\t rightOperandList.containsAllConstantNodes())\r\n\t{\r\n\t\t// convert to BETWEEN.\r\n\t}\r\n\r\nAs Bryan Pendleton pointed out on derby-dev, it looks like that could have something to do with why\r\n\r\n  select * from t1 where i in (2.8, 4.23);\r\n\r\nreturns a row (\"4\" is between 2.8 and 4.23).  It also explains why\r\n\r\n  select * from t1 where i in (4.23);\r\n\r\ncorrectly returns zero rows (it is simply treated as an equality predicate).\r\n\r\nIt's not clear to me how (or if) that explains the other error case posted by Yip above (thanks Yip!), but maybe it's related?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-01-19T16:18:50.796+0000","updated":"2007-01-19T16:18:50.796+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12466114","id":"12466114","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yipng","name":"yipng","emailAddress":"yipng168 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yip Ng","active":true},"body":"I think Derby will transform this statement's IN predicate\r\n\r\ni in (2.8, 4.23); \r\n\r\nto the following:\r\n\r\ni in (2.8, 4.23) AND i >= 2.8 AND i <= 4.23\r\n\r\nThe original IN predicate should still be there.  So, I think perhaps the problem might have to do with row qualification in regard to integer comparison with the transformed query.    \r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yipng","name":"yipng","emailAddress":"yipng168 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yip Ng","active":true},"created":"2007-01-19T18:18:26.471+0000","updated":"2007-01-19T18:18:26.471+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12466118","id":"12466118","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Yip's most recent comment agrees with what Mike wrote on derby-dev:\r\n\r\n  http://thread.gmane.org/gmane.comp.apache.db.derby.devel/35489/focus=35559\r\n\r\nTo quote Mike: \"My guess would be that [...] some problem is applying the real qualifiers to integer comparisons, where for some reason that compare is different for transformed query.\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-01-19T18:30:43.478+0000","updated":"2007-01-19T18:30:43.478+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12482938","id":"12482938","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"It looks like the various incorrect results reported in this Jira are all caused by one of two different but related problems.\r\n\r\nProblem I) Compile-time comparisons.\r\n\r\nThe first problem exists in the preprocessing code of InListOperatorNode, where an IN list comprised exclusively of constant literals undergoes three potential transformations:\r\n\r\n  0. First, if the list has a single value in it, it will be replaced by\r\n     an equality predicate, and that's it.  So an IN list such as\r\n     \"... i in (3)\" will become \"i = 3\".\r\n  1. Else, the list will be sorted in ascending order.\r\n  2. Then, in the special case where the minimum and maximum values are\r\n     the same, the IN list will be replaced with a simple equality\r\n     predicate.  So an IN list such as \" ... i in (2, 2, 2)\" will actually\r\n     turn into an equality of the form \"i = 2\".\r\n\r\nThe problem here is that the code to sort the list, and also the code to find the min/max values, always does comparisons using the type of the left operand, as can be seen from the following comment in the code:\r\n\r\n    /* When sorting or choosing min/max in the list, if types\r\n     * are not an exact match, we use the left operand's type\r\n     * as the \"judge\", assuming that they are compatible, as\r\n     * also the case with DB2.\r\n     */\r\n\r\nBut it turns out that this is *not* always the correct thing to do--and despite what the comment says, this does not appear to be what DB2 does, either (all of the queries referenced in this Jira issue return the correct results on DB2 v8).\r\n\r\nTo see why this is wrong, let's assume we have a table T1 with an integer column \"I\" whose rows are simply:\r\n\r\n    I\r\n    ----\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n\r\nNow let's take the following query:\r\n\r\n  select * from t1 where i in (4.23, 4);\r\n\r\nIn this case \"i\" is the left operand, so the left operand's type is INTEGER.  Derby will then bubble-sort the IN list values using INTEGER as the \"judge\" type for comparisons.  When doing integer comparisons with decimal values, Derby will compare with a _truncated_ version of the decimal(s), which means that we will effectively end up with something like:\r\n\r\n  if (trunc(4.23) > 4)\r\n    <swap \"4.23\" with \"4\">\r\n\r\nwhich becomes:\r\n\r\n  if (4 > 4)\r\n    <swap \"4.23\" with \"4>\r\n\r\nSince 4 is not greater than 4, the \"if\" condition will return false and thus we will not swap the values; we'll just leave them as they are and consider them \"sorted\"--which is wrong.\r\n\r\nIf we keep going, we will then check to see if the mininum value is equal to the maximum value, and if so we'll rewrite the IN list as an equality predicate.  That said, the code assumes that the values have been correctly sorted, in which case the minimum value should simply be the first value in the list.  So Derby will at this point think that the minimum value is \"4.23\" (which is wrong).\r\n\r\nSo in pseudo-code we'll have:\r\n\r\n  if (minVal == maxVal)\r\n    <transform to equality>\r\n\r\nwhich becomes\r\n\r\n  if (trunc(4.23) == 4)\r\n    <transform to equality>\r\n\r\nwhich becomes\r\n\r\n  if (4 == 4)\r\n    <transform to equality>\r\n\r\nAs a result, we transform the IN list into a simple equality of the form \"i = <minValue>\".  But because of the incorrect sort we still think that our minimum value is \"4.23\", so the query that we ultimately end up executing is:\r\n\r\n  select * from t1 where i = 4.23\r\n\r\nThus the query returns no rows when it should have returned one.  Notice that if the IN list values are reversed, i.e.:\r\n\r\n  select * from t1 where i in (4, 4.23);\r\n\r\nthen all of the same (incorrect) logic will apply, except that the minimum value will be \"4\" instead of \"4.23\" (because \"4\" appears first in the list).  Thus the query gets rewritten to:\r\n\r\n  select * from t1 where i = 4\r\n\r\nwhich returns the expected row (somewhat by accident).  So this explains the behavior posted by Yip in an earlier comment.\r\n\r\nProblem II) Execution-time comparisons.\r\n\r\nEven if the incorrect logic described above is fixed, we will still have cases where certain queries return the wrong results.  The reason is that the execution-time logic for IN lists has the same problem as the compilation-time logic: namely, Derby does all of the IN-list comparisons using the left operand's type, which is wrong.  The relevant code can be found in the DataType.in() method, where we start with the following comment:\r\n\r\n    /* Do a binary search if the list is ordered until the \r\n     * range of values to search is 3 or less.\r\n     *\r\n     * NOTE: We've ensured that the IN list and the left all have\r\n     * the same precedence at compile time.  If we don't enforce \r\n     * the same precendence then we could get the wrong result\r\n     * when doing a binary search.\r\n     */\r\n\r\nIronically enough, this comment makes reference to the problem at hand here: if we don't enforce the correct precedence when comparing values, we can get wrong results.  The problem is that the \"NOTE\" in this comment is WRONG--despite what it says, we actually did *NOT* ensure that the IN list and the left operand had the same precedence at compile time.  Even if we assume that the preprocessing logic is correct, it doesn't actually *change* the types of any of the IN-list values--so when we get to execution, the values *can* in fact have different type precedences.  Because of this broken assumption, the rest of the code in DataType.in() fails in certain cases.\r\n\r\nAs an example we can use the same T1 mentioned above, but this time let our query be the following:\r\n\r\n  select * from t1 where i in (2.8, 4.23)\r\n\r\nNotice that the IN-list values are already in sorted order and that, when truncated, \"2.8\" does NOT equal \"4.23\"--so the incorrect preprocessing described above will (accidentally) do the correct thing.  But now when we get to execution, we're going to search the IN list values for each of the values in T1(i).  Since the left operand is INTEGER, all comparisons will be integer-based comparisons, meaning that they will use truncated versions of the decimal values.  So we'll see something like:\r\n\r\n  Search for \"1\":\r\n\r\n    (1 == trunc(2.8))  --> (1 == 2) --> false (no match)\r\n    (1 == trunc(4.23)) --> (1 == 4) --> false (no match)\r\n\r\n  Search for \"2\":\r\n\r\n    (2 == trunc(2.8))  --> (2 == 2) --> true (MATCH -- which is WRONG)\r\n\r\n  Search for \"3\":\r\n\r\n    (3 == trunc(2.8))  --> (3 == 2) --> false (no match)\r\n    (3 == trunc(4.23)) --> (3 == 4) --> false (no match)\r\n\r\n  Search for \"4\":\r\n\r\n    (4 == trunc(2.8))  --> (4 == 2) --> false (no match)\r\n    (4 == trunc(4.23)) --> (4 == 4) --> true (MATCH -- which is WRONG)\r\n\r\n  Search for \"5\":\r\n\r\n    (5 == trunc(2.8))  --> (5 == 2) --> false (no match)\r\n    (5 == trunc(4.23)) --> (5 == 4) --> false (no match)\r\n\r\nThus the query will return two rows when in fact it should return NONE.\r\n\r\nOne final note here: when this issue was first created, the above query actually only returned 1 row, not two.  That was because Derby used to create an additional BETWEEN predicate for the IN-list, and that predicate eliminated the row for \"i == 2\" (because 2 is not between 2.8 and 4.23).  But the changes for DERBY-47 replaced the BETWEEN optimization with a multi-probe approach, thus further exposing (but not causing) the execution-time bug described here.  This is further backed up by the fact that even before DERBY-47 the following query returned two rows, as well:\r\n\r\nij> select * from t1 where i in (cast (2.8 as decimal(4, 2)), 4.23);\r\nI\r\n-----------\r\n2\r\n4\r\n\r\n2 rows selected  \r\n\r\nThe reason is that the explict CAST disabled the BETWEEN optimization, thereby leading to the same situation as just outlined.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-03-21T22:32:35.712+0000","updated":"2007-03-21T22:32:35.712+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12482959","id":"12482959","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Posting d2256_v1.patch, which is a first attempt at a patch for this issue.  The general idea is to always make sure that IN-list comparisons are done with the \"dominant\" type when two values have different type precedences.  More specifically:\r\n\r\n  - When determining the \"judge\" type in InListOperatorNode.preprocess(), iterate through\r\n    all of the values to find out what the dominant type is, and then use that as the\r\n    \"judge\" for sorting.  Prior to these changes we just used the type of the left operand\r\n    as judge, but that was not correct (as mentioned in my previous comment).\r\n\r\n    The obvious downside to this approach is that we may have to iterate through a potentially\r\n    large list of IN values in order to determine the dominant type.  I thought about leaving\r\n    InListOpNode.preprocess() alone and adding new logic to ValueNodeList.sortInAscendingOrder()\r\n    to account for different precedences, but it seemed to me like that wouldn't really save\r\n    us anything and it is not as \"clean\" as the InListOpNode.preprocess() changes.\r\n\r\n    Of course I am open to suggestions if anyone disagrees here.\r\n\r\n  - At execution time (i.e. in DataType.in()), add logic to ensure that all search\r\n    comparisons are done using the dominant type of the values being compared.\r\n\r\n    An alternative here would have been to explicitly _cast_ the IN-list values to\r\n    the dominant type during preprocessing, in which case we would have satisfied\r\n    the original assumption in DataType.in() and thus no changes to that file would\r\n    have been necessary.  But in the end I think it is quite a bit more costly to\r\n    add CAST nodes to every IN value at compile time than it is to just do a\r\n    precedence check at execution-time (which is what d2256_v1.patch does).\r\n\r\n    Again, I am willing to change this approach if anyone feels strongly about it.\r\n\r\n  - Added the test cases referenced in this Jira to the lang/inbetween.sql test.\r\n\r\nI ran derbyall and suites.All on Red Hat Linux with ibm142 and saw no new failures. I think the changes are fairly contained and my hope is that the comments are sufficient, so if anyone is available for a review, that'd be great... ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-03-21T23:20:55.111+0000","updated":"2007-03-21T23:20:55.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12484306","id":"12484306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Hi Army, the comments and explanation are great and they make a lot of sense.\r\n\r\n   select * from t1 where i in (4.23, 4); \r\n\r\nDid you consider having this query return an error? If the user provides a\r\nfloating point value for an integer column, wouldn't they prefer to have an\r\nerror message, rather than have the database quietly return zero rows?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2007-03-27T05:01:59.407+0000","updated":"2007-03-27T05:01:59.407+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12484514","id":"12484514","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> Did you consider having this query return an error? If the user provides a\r\n> floating point value for an integer column, wouldn't they prefer to have an\r\n> error message, rather than have the database quietly return zero rows?\r\n\r\nWell first I should point out that \"quietly return[ing] zero rows\" is not the correct behavior in the example you gave.  That's what Derby currently does (before the patch for this issue) but that is not correct.  The correct behavior is to return a single row matching the \"4\".\r\n\r\nGiven that, the question becomes \"Did you consider having this query return an error?\"  And this is a great question--thank you for bringing it up.\r\n\r\nThe short answer is No, I didn't consider throwing an error--but that was just because it didn't occur to me ;)  The longer and more relevant answer is that, after looking at the SQL 2003 spec for IN lists, my own reading is that we should not throw an error in the example that you mentioned.  Here's why...(feel free to skip if you're not interested):\r\n\r\n----\r\n\r\nFrom SQL 2003 spec, 8.4 <in predicate> grammar shows:\r\n\r\n  <in predicate> ::= <row value predicand> <in predicate part 2>\r\n  <in predicate part 2> ::= [ NOT ] IN <in predicate value>\r\n  <in value list> ::= <row value expression> [ { <comma> <row value expression> }... ]\r\n  <in predicate value> ::=\r\n       <table subquery>\r\n       | <left paren> <in value list> <right paren>\r\n\r\nNote that <in value list> in this grammar does not include parentheses. Now if we look at syntax Rule #2 in the same section, we see:\r\n\r\n<begin quote>\r\n\r\n  Let IVL be an <in value list>.\r\n\r\n    ( IVL )\r\n\r\n  is equivalent to the <table value constructor>:\r\n\r\n    ( VALUES IVL )\r\n\r\n<end quote>\r\n\r\nSo if our example query is:\r\n\r\n  select * from t1 where i in (4.23, 4);\r\n\r\nthen <in value list> is simply \"4.23, 4\", and thus\r\n\r\n    ( IVL )  ==> ( 4.23, 4 )\r\n\r\n  is equivalent to the <table value constructor>:\r\n\r\n    ( VALUES 4.23, 4 )\r\n\r\nThis particular VALUES clause is legal in Derby--i.e. we do not throw an error:\r\n\r\nij> values 4.23, 4;\r\n1\r\n---------------\r\n4.23\r\n4.00\r\n\r\n2 rows selected\r\n\r\nThe next question is whether or not Derby *should* throw an error here.  The specs for a VALUES clause are given in section 7.3 as \"<table value constructor>\" and include the following:\r\n\r\n Section 7.3, Syntax Rule #4:\r\n\r\n  The row type of TVC is determined by applying Subclause 9.3, \"Data types of results\r\n  of aggregations\", to the row types [of the values in the list].\r\n\r\nIf we go on to look at subclause 9.3 we see the following rule:\r\n\r\n Section 9.3, Syntax Rule #2:\r\n\r\n  All of the data types in DTS shall be comparable.\r\n\r\nIn our example we have an integer column and a decimal value, and those two types are indeed comparable with each other.  So we satisfy rule #2 and therefore should not throw an error here.\r\n\r\nThat said, we now go back to section 8.4 (IN predicate) and look at syntax rules #3 and #5, where we see the following:\r\n\r\n<begin quote>\r\n\r\n 3) Let RVC be the <row value predicand> and let IPV be the <in predicate value>.\r\n\r\n 5) The expression\r\n\r\n     RVC IN IPV\r\n\r\n    is equivalent to\r\n\r\n     RVC = ANY IPV\r\n\r\n<end quote>\r\n\r\nIn our example RVC is the column \"i\" and IPV is \"(4.23, 4)\".  So then we have:\r\n\r\n    i IN (4.23, 4)\r\n\r\n  is equivalent to\r\n\r\n    i = ANY (4.23, 4)\r\n\r\nThen if we use syntax rule #2 again, we end up with:\r\n\r\n    i = ANY (VALUES 4.23, 4)\r\n\r\nPutting that back into our original query we now have:\r\n\r\n   select * from t1 where i = any (values 4.23, 4);\r\n\r\nThis latter query executes without error in Derby and returns 1 row (even before the patch for this issue is applied):\r\n\r\nij> select * from t1 where i = any (values 4.23, 4);\r\nI\r\n-----------\r\n4\r\n\r\n1 row selected\r\n\r\nSince the type of the VALUES clause is decimal (section 9.3, rule #3), we are doing a comparison of an integer with a decimal.  Such a comparison should not throw an error and should only return true if the values are algebraically equal.  Thus the above query is correctly returning a single row--and that's what the equivalent IN list query should be doing, too.\r\n\r\n----\r\n\r\nPutting all of that together, my conclusion is that we should not throw an error if if the user specifies a decimal or floating point value for an integer column.  Whether or not the user would \"prefer\" an error I can't say, but standards-wise I think the correct thing is to compare using the dominant type and only return the rows that match.\r\n\r\nFeel free to comment if I've overlooked something or otherwise misread the spec.  Spec-reading is *not* one of my gifts...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-03-27T17:36:50.306+0000","updated":"2007-03-27T17:36:50.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12484671","id":"12484671","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"I'm sold!\r\n\r\nI see that while integer and decimal are compatible, there do exist other\r\ntypes which are not compatible. For example:\r\n\r\nij> values 4.23, 'hot dog', 4;\r\nERROR 42X61: Types 'DECIMAL' and 'CHAR' are not UNION compatible.\r\n\r\nAnd therefore, sure enough:\r\n\r\nij> select * from t1 where i in (4, 4.23, 'tomato');\r\nERROR 42818: Comparisons between 'INTEGER' and 'CHAR' are not supported.\r\n\r\nSo I believe I'm following along with your chain of reasoning and it seems sound to me.\r\n\r\nThanks for taking the time to clarify the underlying mechanisms.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2007-03-28T01:50:30.833+0000","updated":"2007-03-28T01:50:30.833+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12484931","id":"12484931","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you very much for the review and feedback, Bryan.  I committed d2256_v1.patch with svn # 523411:\r\n\r\n  URL: http://svn.apache.org/viewvc?view=rev&rev=523411\r\n\r\nMarking this issue as resolved...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-03-28T17:09:06.578+0000","updated":"2007-03-28T17:09:06.578+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12500255","id":"12500255","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Attaching a simple release note for this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-05-30T22:58:00.124+0000","updated":"2007-05-30T22:58:00.124+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12501746","id":"12501746","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Very slight tweak to the release note.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-06-05T23:49:22.685+0000","updated":"2007-06-05T23:49:22.685+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12501993","id":"12501993","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Fix is in trunk (10.3) and I haven't heard any objections to the release note, so closing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-06-06T17:09:18.594+0000","updated":"2007-06-06T17:09:18.594+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12360835/comment/12505548","id":"12505548","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"scrubbed releasenote","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2007-06-16T22:16:13.484+0000","updated":"2007-06-16T22:16:13.484+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2256/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06v4v:"}}