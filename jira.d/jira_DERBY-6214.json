{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12646245","self":"https://issues.apache.org/jira/rest/api/latest/issue/12646245","key":"DERBY-6214","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12310220":"2013-05-06 18:34:47.975","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"326603","customfield_12310222":null,"customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6214/watchers","watchCount":6,"isWatching":false},"created":"2013-05-06T16:59:52.604+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"10.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323456","id":"12323456","description":"Third release on the 10.8 branch","name":"10.8.3.0","archived":false,"released":true,"releaseDate":"2012-11-16"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12316344","id":"12316344","description":"First release on the 10.9 branch","name":"10.9.1.0","archived":false,"released":true,"releaseDate":"2012-06-25"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12369555","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12369555","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12649752","key":"DERBY-6232","self":"https://issues.apache.org/jira/rest/api/2/issue/12649752","fields":{"summary":"enhance ParameterMappingTest for setObject to test more than just insert","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12369664","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12369664","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12650228","key":"DERBY-6237","self":"https://issues.apache.org/jira/rest/api/2/issue/12650228","fields":{"summary":"PreparedStatement.execute() fails starting 10.2 when multiple rows are updated and PreparedStatement.setCharacterStream(int, Reader, int) is used","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12369868","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12369868","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12650819","key":"DERBY-6245","self":"https://issues.apache.org/jira/rest/api/2/issue/12650819","fields":{"summary":"PreparedStatement.setString fails in client server case when the String size is 10923 or larger and PreparedStatement updates more than one row","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2014-03-05T22:08:44.590+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"The issue is specific to the DerbyNet client driver, and doesn't seem to occur using embedded Derby.\r\n\r\n \"PreparedStatement.setObject(int, Object, Types.CLOB)\". It seems to be a problem updating a CLOB column with a parameterized value using the DerbyNet client driver, and if the update SQL ends up updating more than one row. I attached a simple test case that just uses JDBC to reproduce the error. The exception looks like this:\r\n\r\norg.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.\r\n    at org.apache.derby.client.am.Agent.endBatchedReadChain(Unknown Source)\r\n    at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source)\r\n    at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source)\r\n    at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source)\r\n    ...\r\nCaused by: org.apache.derby.client.am.SqlException: Error for batch element #0: An unexpected exception was thrown\r\n    at org.apache.derby.client.am.Statement.completeExecute(Unknown Source)\r\n    at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(Unknown Source)\r\n    at org.apache.derby.client.net.NetStatementReply.readExecute(Unknown Source)\r\n    at org.apache.derby.client.net.StatementReply.readExecute(Unknown Source)\r\n    at org.apache.derby.client.net.NetPreparedStatement.readExecute_(Unknown Source)\r\n    at org.apache.derby.client.am.PreparedStatement.readExecute(Unknown Source)\r\n    ... 4 more\r\nCaused by: org.apache.derby.client.am.SqlException: Error for batch element #0: Java exception: 'Stream has already been read and end-of-file reached and cannot be re-used.: java.io.EOFException'.\r\n    at org.apache.derby.client.am.SqlException.<init>(Unknown Source)\r\n    at org.apache.derby.client.am.SqlException.<init>(Unknown Source)\r\n    ... 10 more\r\n\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"326948","summary":"PreparedStatement.setObject(int, Object, Types.CLOB) fail with DerbyNet","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rqu","name":"rqu","emailAddress":"rong_qu at hotmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rong Qu","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10424","value":"Repro attached","id":"10424"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10427","value":"Workaround attached","id":"10427"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rqu","name":"rqu","emailAddress":"rong_qu at hotmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rong Qu","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":27,"total":27,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13649961","id":"13649961","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Here is a revised reproduction which separates out the setup sql from the java. \r\n\r\nCommented out in the java program is a workaround which is to use setString rather than setObject.\r\n\r\n // Work around. setString works.\r\n\t    //ps.setString(1,\"Modified CLOB value 2!!!!!!!!!!\"); //2005);\r\n\r\nTo run:\r\n\r\njava org.apace.derby.drda.NetworkServerControl start &\r\n\r\njava org.apache.derby.tools.ij Derby6214_setup.sql\r\n\r\n $java Derby6214\r\nException in thread \"main\" org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure.  The batch was sub\r\nmitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the\r\n exceptions for specific batched elements.\r\n        at org.apache.derby.client.am.Agent.endBatchedReadChain(Agent.java:270)\r\n        at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(PreparedStatement.java:2359)\r\n        at org.apache.derby.client.am.PreparedStatement.executeBatchX(PreparedStatement.java:2192)\r\n        at org.apache.derby.client.am.PreparedStatement.executeBatch(PreparedStatement.java:1651)\r\n        at Derby6214.main(Derby6214.java:29)\r\nCaused by: org.apache.derby.client.am.SqlException: Error for batch element #0: An unexpected exception was thrown\r\n        at org.apache.derby.client.am.Statement.completeExecute(Statement.java:1604)\r\n        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:322)\r\n        at org.apache.derby.client.net.NetStatementReply.readExecute(NetStatementReply.java:71)\r\n        at org.apache.derby.client.net.StatementReply.readExecute(StatementReply.java:55)\r\n        at org.apache.derby.client.net.NetPreparedStatement.readExecute_(NetPreparedStatement.java:185)\r\n        at org.apache.derby.client.am.PreparedStatement.readExecute(PreparedStatement.java:1810)\r\n        at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(PreparedStatement.java:2325)\r\n        ... 3 more\r\nCaused by: org.apache.derby.client.am.SqlException: Error for batch element #0: Java exception: 'Stream has already been\r\n read and end-of-file reached and cannot be re-used.: java.io.EOFException'.\r\n        at org.apache.derby.client.am.SqlException.<init>(SqlException.java:292)\r\n        at org.apache.derby.client.am.SqlException.<init>(SqlException.java:259)\r\n        ... 10 more\r\n~/repro/derby-6214 $\r\n\r\nThe full exception from the derby.log is:\r\n\r\n\r\n\r\nMon May 06 11:30:40 PDT 2013 Thread[DRDAConnThread_11,5,main] (XID = 168), (SESSIONID = 3), (DATABASE = ClobTest), (DRDAID = ????????.????-653020578103681136{2}), Failed Statement is: UPDATE Test3 SET C16 = ?, S05 = ?, I06 = ?, I07 = I07 + 1 WHERE S02 IN (?, ?) with 5 parameters begin parameter #1: CLOB(org.apache.derby.iapi.types.ReaderToUTF8Stream@de907da4) :end parameter begin parameter #2: GGGGGGGG :end parameter begin parameter #3: 4002 :end parameter begin parameter #4: AAAAA :end parameter begin parameter #5: EEEEE :end parameter \r\nERROR XSDA4: An unexpected exception was thrown\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:279)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.<init>(UpdateOperation.java:110)\r\n\tat org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:80)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8703)\r\n\tat org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(BasePage.java:1064)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(GenericConglomerateController.java:486)\r\n\tat org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(RowChangerImpl.java:523)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:568)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:263)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1692)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1347)\r\n\tat org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:706)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:4332)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:4149)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:1037)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)\r\nCaused by: java.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used.\r\n\tat org.apache.derby.iapi.types.ReaderToUTF8Stream.read(ReaderToUTF8Stream.java:254)\r\n\tat org.apache.derby.impl.store.raw.data.MemByteHolder.write(MemByteHolder.java:146)\r\n\tat org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(RememberBytesInputStream.java:135)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6238)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.logRow(StoredPage.java:4013)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(UpdateOperation.java:255)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.<init>(UpdateOperation.java:106)\r\n\t... 17 more\r\n============= begin nested exception, level (1) ===========\r\njava.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used.\r\n\tat org.apache.derby.iapi.types.ReaderToUTF8Stream.read(ReaderToUTF8Stream.java:254)\r\n\tat org.apache.derby.impl.store.raw.data.MemByteHolder.write(MemByteHolder.java:146)\r\n\tat org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(RememberBytesInputStream.java:135)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6238)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.logRow(StoredPage.java:4013)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(UpdateOperation.java:255)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.<init>(UpdateOperation.java:106)\r\n\tat org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:80)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8703)\r\n\tat org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(BasePage.java:1064)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(GenericConglomerateController.java:486)\r\n\tat org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(RowChangerImpl.java:523)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:568)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:263)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:438)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1692)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1347)\r\n\tat org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:706)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:4332)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:4149)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:1037)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)\r\n============= end nested exception, level (1) ===========\r\nCleanup action complete\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-05-06T18:34:47.975+0000","updated":"2013-05-06T18:34:47.975+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13649980","id":"13649980","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"wonder if the client somehow creates a clob out of the string, but that clob is not set up to be read twice.  In the test\r\ncase multiple rows will be updated by the query, each time using the value set with setObject.\r\n\r\nMight also be interesting to see if problem is in embedded if the string is much longer forcing a stream.  Something bigger than 32k.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-06T18:50:33.615+0000","updated":"2013-05-06T18:50:33.615+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13649997","id":"13649997","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"According to this reference chart 8.9.5, I was surprised to find that  setObject of a String to a Clob is not marked as something that should work.\r\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/jdbc/getstart/mapping.html\r\n\r\nWe do have a history of it working in some contexts so it seems to make sense to fix this case to work the same way, but makes sense to bring down the priority especially since there is a work around. I am done with the work I plan to do on this issue.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-05-06T19:05:38.874+0000","updated":"2013-05-06T19:05:38.874+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13652024","id":"13652024","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Actually even setString says it converts to VARCHAR or LONGVARCHAR\r\nhttp://docs.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int,%20java.lang.String)\r\n\r\nIs setString valid with a CLOB target?\r\nWhat is the correct (according to spec) way to set a value for a Clob, setCharacterStream?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-05-08T16:18:31.346+0000","updated":"2013-05-08T16:18:31.346+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13652084","id":"13652084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"any opinions if the following should be treated as part of the spec?  I was trying to find it in the java 7 or java 8 specs\r\nand so far have not been able to.  As a \"guide\" maybe it is not complete.\r\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/jdbc/getstart/mapping.html \r\n\r\nWith respect to clob I know that some conversions that at first were not allowed, were then added as it matured.  \r\n\r\nUnfortunately setClob() documentation itself has no mention of data conversions. \r\n\r\nsetClob() does have the following, but I interpret it in this situation as you should throw the exception if you have no CLOB support, not in the\r\ncase of not supporting a particular conversion:\r\nSQLFeatureNotSupportedException - if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type\r\n\r\nIt does seem like either Derby should throw a reasonable error if it does not support this setObject call or it should work.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-08T17:25:31.329+0000","updated":"2013-05-08T17:25:31.329+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13654384","id":"13654384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I don't think the getting started guide is part of the spec. However, chart 8.9.5 in the getting started guide looks very similar to Table B-5 in the JDBC 4.1 specification, except the latter shows mappings for more types (like NCLOB and SQLXML). Neither of the two tables say that a String object can be converted to a CLOB value by setObject(), so it seems such a conversion is an extension of the spec.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-05-10T11:30:51.276+0000","updated":"2013-05-10T11:30:51.276+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13662090","id":"13662090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I have been working on this jira for a little bit, specifically on the stand alone test case. I am attaching the test case as Derby6214_ver2.java. This test case is built on top of the test cases provided by Rong and Kathey. While working on the test, I found that we do not need to have batch processing to run into the problem so I have removed the batch add and execution part to make the test case simpler. The test creates the table(by first dropping the table if already exists) and loads data into it. (Change the url for the derby database as appropriate. Right now, the db location hard coded as c:/dellater/ClobTest).\r\n\r\nThe test can be used to test both embedded and client server. Additionally, it shows that the workaround of using setString instead of setObject in client server case does not work for a fairly large string. \r\n\r\n\r\nThe test takes three parameters\r\nThe first param\r\n   if \"client\" is passed then test case will be run in network server environment. For this, you first have to start the\r\n\tnetwork server before running the test.\r\n   if not \"client\" is passed then test case will be run in embedded derby.\r\nThe second parameter \r\n   if '1' is passed then test case will update only one row(this verifies that we work fine updating clob with just one row update)\r\n   if not '1', then test case will update two rows(this is one which runs into the bug)\r\nThe third parameter says to use the workaround of using setString instead of setObject\r\n   if '1' is passed then test case will use the workaround of using setString rather than setObject on the clob column\r\n\tusing a small string\r\n   if '2' is passed then test case will use the workaround of using setString rather than setObject on the clob column\r\n\tusing a very large string\r\n   if '3' is passed then test case will use setObject on the clob column using small string\r\n   if anything other than '1' or '2' or '3' is passed then test case will use setObject on the clob column using \r\n\ta very large string\r\n\r\nNow, here is the behavior for all these scenarios. I realize that this sounds pretty involved but it helps us establish what cases work and what cases break.\r\n\r\nEmbed test cases work for all different combinations as shown below\r\n1)Embed test case updating only one row and using setString with small string - works fine\r\n\tjava Derby6214_ver2 embed 1 1\r\n2)Embed test case updating only one row and using setString with very large string - works fine\r\n\tjava Derby6214_ver2 embed 1 2\r\n3)Embed test case updating only one row and using setObject with small string - works fine\r\n\tjava Derby6214_ver2 embed 1 3\r\n4)Embed test case updating only one row and using setObject with very large string - works fine\r\n\tjava Derby6214_ver2 embed 1 4\r\n5)Embed test case updating two rows and using setString with small string - works fine\r\n\tjava Derby6214_ver2 embed 2 1\r\n6)Embed test case updating two rows and using setString with very large string - works fine\r\n\tjava Derby6214_ver2 embed 2 2\r\n7)Embed test case updating two rows and using setObject with small string - works fine\r\n\tjava Derby6214_ver2 embed 2 3\r\n8)Embed test case updating two rows and using setObject with very large string - works fine\r\n\tjava Derby6214_ver2 embed 2 4\r\nIn short, all the variations work in the embedded case.\r\n\r\nMoving on to the client server case.\r\n1)Client server test case updating only one row and using setString with small string - works fine\r\n\tjava Derby6214_ver2 client 1 1\r\n2)Client server test case updating only one row and using setString with very large string - works fine\r\n\tjava Derby6214_ver2 client 1 2\r\n3)Client server test case updating only one row and using setObject with small string - works fine\r\n\tjava Derby6214_ver2 client 1 3\r\n4)Client server test case updating only one row and using setObject with very large string - works fine\r\n\tjava Derby6214_ver2 client 1 4\r\n5)Client server test case updating two rows and using setString with small string - works fine\r\n\tjava Derby6214_ver2 client 2 1\r\n6)Client server test case updating two rows and using setString with very large string - FAILS\r\n\tjava Derby6214_ver2 client 2 2\r\n7)Client server test case updating two rows and using setObject with small string - FAILS\r\n\tjava Derby6214_ver2 client 2 3\r\n7)Client server test case updating two rows and using setObject with very large string - FAILS\r\n\tjava Derby6214_ver2 client 2 4\r\n\r\nOnce the test is compiled, an eg of using the test for embedded updating just one row and using setString to update CLOB column with a small string would be as follows\r\njava Derby6214_ver2 embed 1 1\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-20T15:45:34.143+0000","updated":"2013-05-20T15:45:34.143+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13665395","id":"13665395","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I found that the String size has to be 10923 characters for the setString workaround to fail. eg\r\n        char[] c = new char[10922];//works\r\n        //fails with 10923 characters and more\r\n        //passes with 10922 characters and less\r\n        Arrays.fill(c, 'a'); \r\nThe attached repro from last comment does setString testing with 530000 characters and that fails but it looks like it doesn't have to be that large a string. It will fail even with 10923 characters.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-23T17:39:20.596+0000","updated":"2013-05-23T17:39:20.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13665534","id":"13665534","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I think the unique number of 10923 characters comes from the following code in the client side. Here we decide when to send the data as string vs stream\r\nThread [main] (Suspended (breakpoint at line 1366 in NetStatementRequest))\t\r\n\tNetResultSetRequest(NetStatementRequest).computeProtocolTypesAndLengths(Object[], ColumnMetaData, int[][], Hashtable) line: 1366\t\r\n\tNetResultSetRequest(NetStatementRequest).buildSQLDTAcommandData(int, ColumnMetaData, Object[]) line: 545\t\r\n\tNetResultSetRequest(NetStatementRequest).writeExecute(NetPreparedStatement, Section, ColumnMetaData, Object[], int, boolean, boolean) line: 162\t\r\n\tNetPreparedStatement.writeExecute_(Section, ColumnMetaData, Object[], int, boolean, boolean) line: 156\t\r\n\tClientPreparedStatement.writeExecute(Section, ColumnMetaData, Object[], int, boolean, boolean) line: 1832\t\r\n\tClientPreparedStatement.flowExecute(int) line: 2047\t\r\n\tClientPreparedStatement.executeX() line: 1620\t\r\n\tClientPreparedStatement.execute() line: 1605\t\r\n\tMamtaJDBC.main(String[]) line: 84\t\r\n\r\n                case Types.LONGVARCHAR:\r\n                    // Is this the right thing to do  // should this be 32700\r\n                    s = (String) inputRow[i];\r\n                    if (s == null || s.length() <= 32767 / 3) {\r\n                        lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NLONGMIX;\r\n                        lidAndLengths[i][1] = 32767;\r\n                    } else {\r\n                        // Flow the data as CLOB data if the data too large to for LONGVARCHAR\r\n                        ByteArrayInputStream bais = null;\r\n                        byte[] ba = null;\r\n                        try {\r\n                            ba = s.getBytes(\"UTF-8\");\r\n                            bais = new ByteArrayInputStream(ba);\r\n                            ClientClob c = new ClientClob(\r\n                                netAgent_, bais, \"UTF-8\", ba.length);\r\n\r\n                            // inputRow[i] = c;\r\n                            // Place the new Lob in the promototedParameter_ collection for\r\n                            // NetStatementRequest use\r\n                            promototedParameters_.put(i, c);\r\n\r\n                            lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NLOBCMIXED;\r\n                            lidAndLengths[i][1] = buildPlaceholderLength(c.length());\r\n                        } catch (UnsupportedEncodingException e) {\r\n                            throw new SqlException(netAgent_.logWriter_, \r\n                                new ClientMessageId(SQLState.UNSUPPORTED_ENCODING),\r\n                                \"byte array\", \"Clob\");\r\n                        }\r\n                    }\r\n                    break;\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-23T19:36:12.821+0000","updated":"2013-05-23T19:36:12.821+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13665586","id":"13665586","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"32k/3 makes sense.  I think 32k is a drda on byte size of strings passed along.  The worst case for UTF-8 on java strings is 3 bytes per java character in a strings.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-23T20:04:29.036+0000","updated":"2013-05-23T20:04:29.036+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13665597","id":"13665597","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"seems next would be good to understand what implementing object on the server side is being opened twice, and how it differs when running in embedded for clob case.  Seems from what you have posted above solving the Clob case probably solves the long setString() case also.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-23T20:07:13.769+0000","updated":"2013-05-23T20:07:13.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13666010","id":"13666010","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Little more info on the exception raised by client server test cases. The exception is thrown by the server side code in org.apache.derby.iapi.types.ReaderToUTF8Stream:read(byte b[], int off, int len). The exception thrown is ('Stream has already been read and end-of-file reached and cannot be re-used.: java.io.EOFException'.)\r\n\r\nPart of org.apache.derby.iapi.types.ReaderToUTF8Stream:read is copied below for reference\r\npublic int read(byte b[], int off, int len) throws IOException {\r\n        \r\n        // when stream has been read and eof reached, stream is closed\r\n        // and buffer is set to null ( see close() method)\r\n        // since stream cannot be re-used, check if stream is closed and \r\n        // if so throw an EOFException\r\n        if ( buffer == null ) \r\n            throw new EOFException(MessageService.getTextMessage\r\n                    (SQLState.STREAM_EOF));\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-24T05:37:27.834+0000","updated":"2013-05-24T05:37:27.834+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13666014","id":"13666014","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Also, I found that client server case creates ReaderToUTF8Stream objects but embedded case does not create them.\r\nIn case of network server, we come to following to create ReaderToUTF8Stream when client code executes the prepared statement (after setting the prepared statment parameter values)\r\nThread [DRDAConnThread_2] (Suspended (breakpoint at line 836 in EmbedPreparedStatement))\t\r\n\tEmbedPreparedStatement40(EmbedPreparedStatement).setCharacterStreamInternal(int, Reader, boolean, long) line: 836\t\r\n\tEmbedPreparedStatement40(EmbedPreparedStatement).setCharacterStream(int, Reader) line: 1815\t\r\n\tDRDAConnThread.setAsCharacterStream(DRDAStatement, int, EXTDTAReaderInputStream, boolean, String) line: 9453\t\r\n\tDRDAConnThread.readAndSetExtParam(int, DRDAStatement, int, int, boolean) line: 5328\t\r\n\tDRDAConnThread.readAndSetAllExtParams(DRDAStatement, boolean) line: 5257\t\r\n\tDRDAConnThread.parseEXCSQLSTTobjects(DRDAStatement) line: 4509\t\r\n\tDRDAConnThread.parseEXCSQLSTT() line: 4325\t\r\n\tDRDAConnThread.processCommands() line: 1064\t\r\n\tDRDAConnThread.run() line: 298\t\r\n\r\nBut in case of embedded, we do not create ReaderToUTF8Stream objects, instead following gets executed when the test program issues ps.setString(1,new String(c)) with large string\r\n\tSQLClob(SQLChar).setValue(String) line: 1496\t\r\n\tEmbedPreparedStatement40(EmbedPreparedStatement).setString(int, String) line: 538\t\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-24T05:43:06.757+0000","updated":"2013-05-24T05:43:06.757+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13666688","id":"13666688","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"so comparing embedded to client/server is likely not very useful in the setObject and setString case.  In embedded we have the actual string so there\r\nis no stream, so nothing to get closed after draining, so no problem.  In client/server we are going to send a stream over and we are not going to know\r\nif it is small or big so we probably can't just create an object in memory to \"back\" up the stream on the server side.\r\n\r\nI might suggest looking at embedded in one of the setStream cases with a stream larger than 32k, and see if it works for an update of more than one row.  If it\r\ndoes it might lead to existing mechanism to save off a stream so that it can be reopened.  I believe there are existing holder objects that will take a stream and\r\nbuffer it to disk if need be so that you can read it again.  \r\n\r\nOne thing I don't know is if it should be the job of server side client/server code that you are looking at to do this, of if it should be the job of sql execution engine\r\nto recognize an input clob/blob/stream can't be read twice and it should do this work in the case of an update that might require updating more than one row.\r\nI think we use to have generic embedded issues with blob/clob where it would instantiate them into memory in cases like this.  I thought those had been resolved,\r\nbut maybe this is a case that slipped through.    Should be clear if you follow the code for an embedded update of clob where user provides a stream.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-24T21:18:51.059+0000","updated":"2013-05-24T21:18:51.059+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13668401","id":"13668401","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Hi Mike, thanks for taking the time on this issue. I used setCharacterStream in embedded case while updating 2 rows and indeed got the same failure as client-server case. I modified the test case to have following\r\n        } else if (args[2].equals(\"5\")) {\r\n        \tSystem.out.println(\"setCharacterStream with very large string\");\r\n                   CharAlphabet a1 = CharAlphabet.singleChar('a');\r\n                   ps.setCharacterStream(1,\r\n                        new LoopingAlphabetReader(50000, a1), 50000);\r\n        }\r\nand got following exception\r\nCaused by: java.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used.\r\n        at org.apache.derby.iapi.types.ReaderToUTF8Stream.read(ReaderToUTF8Stream.java:258)\r\n        at org.apache.derby.impl.store.raw.data.MemByteHolder.write(MemByteHolder.java:146)\r\n        at org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(RememberBytesInputStream.java:135)\r\n        at org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6242)\r\n        at org.apache.derby.impl.store.raw.data.StoredPage.logRow(StoredPage.java:4017)\r\n        at org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(UpdateOperation.java:248)\r\n        at org.apache.derby.impl.store.raw.data.UpdateOperation.<init>(UpdateOperation.java:99)\r\n        at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:80)\r\n        at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8707)\r\n        at org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(BasePage.java:1064)\r\n        at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(GenericConglomerateController.java:486)\r\n        at org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(RowChangerImpl.java:523)\r\n        at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:568)\r\n        at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:263)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:453)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:334)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1346)\r\n        ... 3 more\r\n\r\nLike you mentioned, we should see if there are existing holder objects that will take a stream and buffer it to disk if need be so that you can read it again. I will look in the code to see if I can find something like that. Thanks","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-28T16:16:05.489+0000","updated":"2013-05-28T16:16:05.489+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13668498","id":"13668498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I am not sure where, but I believe at least in the clob/blob case we sometimes instantiate the object that is implemented as a stream.  I believe something in the\r\nexecution system should recognize when this is necessary.  \r\n\r\nMaybe try creating an index on a string column and using a stream to insert into the row.  Should need to read that stream twice once for base table and once for index.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-28T18:02:20.204+0000","updated":"2013-05-28T18:02:20.204+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13668602","id":"13668602","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"for the client/server setString case, is there any way for the server side to \"know\" that the source data started as a string rather than a stream.  Or does it know length?\r\nIf so it might make sense for the server side to convert it back into a string if we can'f easily fix the stream case.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-28T19:56:37.075+0000","updated":"2013-05-28T19:56:37.075+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13675638","id":"13675638","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I am looking at understanding the logic in case of network server for setString when a short string is passed and multiple rows are updated. This case works fine. I am investigating if when using setObject to set the value of a CLOB column with short string, if we can mimic the logic of setString and make setObject work for atleast short strings on CLOB column. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-05T06:44:53.894+0000","updated":"2013-06-05T06:44:53.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13676294","id":"13676294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"We have a following check in NetStatementRequest when dealing with setString\r\n                    s = (String) inputRow[i];\r\n                    if (s == null || s.length() <= 32767 / 3) {\r\n                        lidAndLengths[i][0] = DRDAConstants.DRDA_TYPE_NLONGMIX;\r\n                        lidAndLengths[i][1] = 32767;\r\n                    } else {\r\n                        // Flow the data as CLOB data if the data too large to for LONGVARCHAR\r\nin other words, we send the string as it is if it is less than or equal to 32767 / 3 but any larger string is send as CLOB data. I believe we can have a similar check for setObject using string on a CLOB datatype. If the string is less than or equal to 32767 / 3, we can choose to send it as string otherwise continue to do what we do today, which is to send it as stream. I am working on this change.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-05T20:15:02.373+0000","updated":"2013-06-05T20:15:02.373+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13678500","id":"13678500","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Attaching a patch where setObject will now behave same as setString when dealing with smaller strings(length 10922 characters and smaller) and modifying more than one row through the UPDATE sql. Basically setObject(int, Object, Types.CLOB) will check if it is dealing with String and if if it is small enough, then it will get on the wire to the server as String. For longer strings, we still will use a stream. The stream case still runs into exception when we update more than one row. Would appreciate any feedback. One thing to note in the patch is the code touched in CrossConverters is also used by ResultSet.updateXXX and ResultSet.getXXX calls. Those methods don't need this special handling of String and that is why a boolean parameter has been introduced to differentiate the call coming from PreparedStatement.setXXX vs the ResultSet.updateXXX and ResultSet.getXXX.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-07T22:09:59.212+0000","updated":"2013-06-11T20:00:23.057+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13679650","id":"13679650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Hi Mamta, This patch looks fine to me  for the targeted case you are fixing.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-06-10T17:23:15.322+0000","updated":"2013-06-10T17:23:15.322+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13680463","id":"13680463","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Kathey, thanks for looking at the patch. I ran derbyall and junit suite with it and those tests ran fine. I am planning on adding some junite tests for ResultSet.updateObject and ResultSet.getObject since the patch for PreparedStatement.getObject has changed code which is shared by these 2 methods. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-11T16:43:33.528+0000","updated":"2013-06-11T16:43:33.528+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13680603","id":"13680603","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"comments on patch and existing test.  I think at this point the goal for 6214 is to make setObject work as well as setString, and close out this issue with\r\nthe patch.  Then address large strings in another issue.  To this end:\r\n\r\n1) you should change comments in ParameterMappingTest that were written before the other issues were created.  For instance:\r\n    \"once DERBY-6214 is fixed, we can remove following check\".\r\n2) testDerby6214 is hard to understand what is going on.  Some comments about the i,j loop would help.  I also would at least rename i to something like numrows.\r\n    helperTest could use more comments also.  I think the various cases could benefit from some comments like \"test small string less that critical xxxx length\", \r\n    test large string greater than xxx length.  The magic numbers for length come from code path zzz.   would be good to define what large string is and why, maybe a constant with a comment..\r\n3) in CrossConverters.java:\r\n    o in comments for setObject i think originalSetObject is false in the case of setXXX calls that are not setObject, but that is not clear from the comments.\r\n    o there is more talk about magic number 32767/3, there should be one constant with a good name somewhere shared by all the code, and why it is important.\r\n    o it would be nice to fix up comments for setObject that you have added to. it should start with saying what the routine is doing.  Is the following correct?:\r\n\r\n// Convert from string source to target type.\r\n// In support of PS.setXXX, PS.updateXXX, and PS.getXXX \r\n\r\n    o you added the following with no comment as to why, I would prefer not to add an extra call level to this high traffic routine if possible.  Is it just to save some\r\n       typing to change all the callse in the following setObject routine?  If so I would just rather see the code change made.  all the overriding based on num arguments can \r\n       easily lead to bugs when making changes like this, other routine may start getting called that you don't expect.  :\r\n    final Object setObject(int targetType, Object source) throws SqlException {\r\n        return setObject(targetType, source, false);\r\n    }\r\n\r\n4) what problems result if you don't have the originalSetObject information?  It would be better if we did not have the special case if we can help it, just always send string in small string case.\r\n    It seems likely there are existing problems with updateXXX also.  maybe just is not right for getXXX, not sure.  I'd like to see if there is any way to fix this without adding a param/extra call to\r\nthis high traffic routine.\r\n\r\n\r\n     \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-06-11T20:02:26.485+0000","updated":"2013-06-11T20:02:26.485+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13681956","id":"13681956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Thanks for looking at the patch, Mike. I am attaching another patch which addresses most of your comments. The files touched by this patch are as follows\r\n$ svn stat -q\r\nM       java\\engine\\org\\apache\\derby\\iapi\\reference\\Limits.java\r\nM       java\\testing\\org\\apache\\derbyTesting\\functionTests\\tests\\jdbcapi\\ParameterMappingTest.java\r\nM       java\\client\\org\\apache\\derby\\client\\net\\NetStatementRequest.java\r\nM       java\\client\\org\\apache\\derby\\client\\am\\CrossConverters.java\r\nM       java\\client\\org\\apache\\derby\\client\\am\\ClientPreparedStatement.java\r\n\r\nThis patch makes PreparedStatement.setObject work same as PreparedStatement.setString for small strings(<=10922 characters in length). Additionally, I have modularized the tests from the previous patch and made changes to verify the updated data for that test. The changes to verify the updated data use ResultSet.getString and ResultSet.getObject thus verifying that those apis work fine with the changed made for PreparedStatement.setObject. In addition, I have added new tests for ResultSet.updateString and ResultSet.updateObject to make sure the changes for PreparedStatement.setObject has not broken these apis since they share the same code. I have added lot more comments into the code changes. I have also created a constant in java\\engine\\org\\apache\\derby\\iapi\\reference\\Limits.java for the length 10922 so in the code, we use that constant rather than the actual number. I think it is ok to add the constant in the Limits file since I have seen other client code using constants from that file.\r\n\r\nHere is the response to some of the questions in your comments\r\n********************************\r\n o you added the following with no comment as to why, I would prefer not to add an extra call level to this high traffic routine if possible. Is it just to save some\r\n       typing to change all the callse in the following setObject routine? If so I would just rather see the code change made. all the overriding based on num arguments can \r\n       easily lead to bugs when making changes like this, other routine may start getting called that you don't expect. :\r\n    final Object setObject(int targetType, Object source) throws SqlException {\r\n        return setObject(targetType, source, false);\r\n    }\r\n\r\nYes, the reason for the new method is so that we don't have to change all the callers of CrossConverts.setObject(targetType, source) to have to pass the new parameter which will be false for all except ClientPreparedStatement.setObjectX method. I do see your point about this causing possible confusion and unintentional method being called. I can go ahead and change all the callers to pass false when they call this method and just have ClientPreparedStatement.setObjectX pass the value true. This will eliminate the need for a new method in CrossConverts class.\r\n********************************\r\n\r\n\r\n********************************\r\n4) what problems result if you don't have the originalSetObject information? It would be better if we did not have the special case if we can help it, just always send string in small string case.\r\n    It seems likely there are existing problems with updateXXX also. maybe just is not right for getXXX, not sure. I'd like to see if there is any way to fix this without adding a param/extra call to\r\nthis high traffic routine.\r\n\r\nWhen originally I didn't have the check in my code, it caused the existing junit test UpdatableResultSetTest to fail. Now, that I have added ResultSet.updateXXX calls test in my junit test, I see the same failure with that new junit test if I remove the originalSetObject information. The exception is as follows. I have not spent the reason behind the class cast exception but I can spend some time on it to see if it is easy to fix this exception so we do not need to have special parameter originalSetObject anymore.\r\n1) testDerby6214updateXXX(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest)java.lang.ClassCastException: java.lang.String incompatible with java.sql.Clob\r\n        at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(NetStatementRequest.java:1462)\r\n        at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(NetStatementRequest.java:545)\r\n        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:162)\r\n        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:156)\r\n        at org.apache.derby.client.am.ClientResultSet.writeUpdateRow(ClientResultSet.java:4357)\r\n        at org.apache.derby.client.am.ClientResultSet.positionToCurrentRowAndUpdate(ClientResultSet.java:4098)\r\n        at org.apache.derby.client.am.ClientResultSet.updateRowX(ClientResultSet.java:3651)\r\n        at org.apache.derby.client.am.ClientResultSet.updateRow(ClientResultSet.java:3555)\r\n        at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testDerby6214updateXXX(ParameterMappingTest.java:439)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\r\n        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)\r\n        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)\r\n        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)\r\n        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n        at junit.extensions.TestSetup.run(TestSetup.java:25)\r\n        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n        at junit.extensions.TestSetup.run(TestSetup.java:25)\r\n        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n        at junit.extensions.TestSetup.run(TestSetup.java:25)\r\n        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n********************************\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-13T06:41:35.708+0000","updated":"2013-06-13T06:41:35.708+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13685889","id":"13685889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Just to recap, in this jira, we are trying to fix PreparedStatement.setObject(int, Object, Types.CLOB) when Object is of type String and that String object is less than or equal to 10922 characters. The 2 attached patches attempt to fix the problem by sending such Strings as String on the wire from client to server rather than stream(this matches the behavior for PreparedStatement.setString). If we decide to do the same for ResultSet.updateObject (since the code is shared by ResultSet.updateObject and PreparedStatement.setObject), it runs into following exception\r\n.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest)java.lang.ClassCastException: java.lang.String incompatible with java.sql.Clob \r\n        at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(NetStatementRequest.java:1462) \r\n        at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(NetStatementRequest.java:545) \r\n        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:162) \r\n        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:156) \r\n        at org.apache.derby.client.am.ClientResultSet.writeUpdateRow(ClientResultSet.java:4357) \r\n        at org.apache.derby.client.am.ClientResultSet.positionToCurrentRowAndUpdate(ClientResultSet.java:4098) \r\n        at org.apache.derby.client.am.ClientResultSet.updateRowX(ClientResultSet.java:3651) \r\n        at org.apache.derby.client.am.ClientResultSet.updateRow(ClientResultSet.java:3555) \r\n        at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testDerby6214updateXXX(ParameterMappingTest.java:439) \r\n\r\nI have been looking at this exception and it looks like when dealing with ResultSet.updateObject on a CLOB column, we have coded everywhere to look for Clob column. I tried changing the offending code line in the stack trace above and ran into same exception again at a different part of the code as shown below\r\njava.lang.ClassCastException: java.lang.String incompatible with java.sql.Clob\r\n        at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:1050)\r\n        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:168)\r\n        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:156)\r\n        at org.apache.derby.client.am.ClientResultSet.writeUpdateRow(ClientResultSet.java:4368)\r\n        at org.apache.derby.client.am.ClientResultSet.positionToCurrentRowAndUpdate(ClientResultSet.java:4109)\r\n        at org.apache.derby.client.am.ClientResultSet.updateRowX(ClientResultSet.java:3662)\r\n        at org.apache.derby.client.am.ClientResultSet.updateRow(ClientResultSet.java:3566)\r\n        at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testDerby6214updateXXX(ParameterMappingTest.java:439)\r\n\r\nFixing that by to accomodate String rather than Clob at this place resulted in same exception in another place. So I do not think we can avoid using a Clob object for ResultSet.updateObject for a CLOB column easily. I am looking at intercepting the String object from CrossConverts.setObject for ResultSet.updateObject and see if we can fix the problem that way rather than having a special case in highly reused code in CrossConverts.setObject. \r\n\r\nAdditionally, I put println in CrossConverts.setObject where we see if we are dealing with a String less than or equal to 10922 characters for a CLOB object and ran existing junit and derbyall tests and found that this code gets called only by ParameterMappingTest(by the new junit test that I have added in my codeline) and by existing junit test in UpdatableResultSetTest. So, atleast from the test runs, it looks like the suggested code changes in the 2 patches are used only by ResultSet.updateObject  and PreparedStatement.setObject","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-06-17T19:35:19.717+0000","updated":"2013-06-17T19:35:19.717+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13702985","id":"13702985","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Since CrossConverters.setObject is heavily used by various PreparedStatement.setXXX, ResultSet.getXXX, Resultset.updateXXX methods, the only change I am proposing there is to check the length of the String object if the type of the column is ClientTypes.CLOB and if yes, then return a String object if the String is less than or equal to 10922 characters otherwise return it as a CLOB object. The caller would use the returned object (String or CLOB) other than the ResultSet.updateObject and ResultSet.updateString methods when they are working with CLOB columns. These methods are coded to expect a CLOB object from CrossConverters.setObject call, irrespective of the length of the String. Because of this, these 3 methods will convert the returned String object to CLOB so that the rest of the code does not break. The junit and derbyall run fine with this patch. Please let me know if there is any feedback.\r\n\r\nThe ideal solution would be to not change the Client code at all and have the engine deal with reading the stream more than once when UPDATE can update more than one row and it is dealing with a stream.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-07-09T06:46:06.934+0000","updated":"2013-07-09T06:46:06.934+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12646245/comment/13921501","id":"13921501","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Not working on this currently","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2014-03-05T22:08:44.590+0000","updated":"2014-03-05T22:08:44.590+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6214/votes","votes":2,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1kcfz:"}}