{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12464162","self":"https://issues.apache.org/jira/rest/api/latest/issue/12464162","key":"CASSANDRA-1072","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png","name":"Sub-task","subtask":true},"parent":{"id":"12441605","key":"CASSANDRA-580","self":"https://issues.apache.org/jira/rest/api/2/issue/12441605","fields":{"summary":"vector clock support","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/2","id":"2","description":"A new feature of the product, which has yet to be developed.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png","name":"New Feature","subtask":false}}},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310865","id":"12310865","key":"CASSANDRA","name":"Cassandra","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310865&avatarId=12034","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310865&avatarId=12034","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310865&avatarId=12034","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310865&avatarId=12034"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11961","id":"11961","description":"Apache Cassandra related projects","name":"Cassandra"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314820","id":"12314820","description":"","name":"0.8 beta 1","archived":false,"released":true,"releaseDate":"2011-04-22"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2010-06-01 14:10:02.47","customfield_12312322":null,"customfield_12312323":null,"customfield_12310222":"10002_*:*_1_*:*_8763952490_*|*_1_*:*_2_*:*_10691728508_*|*_5_*:*_1_*:*_0","customfield_12310420":"27903","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-12-21T22:27:27.326+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-1072/watchers","watchCount":40,"isWatching":false},"created":"2010-05-10T18:06:06.328+0000","customfield_10022":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12311124":null,"customfield_12312334":null,"customfield_12310310":"4.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12333361","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12333361","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"outwardIssue":{"id":"12465419","key":"CASSANDRA-1132","self":"https://issues.apache.org/jira/rest/api/2/issue/12465419","fields":{"summary":"Add min/max counter support on top of the incr/decr counters..","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png","name":"Sub-task","subtask":true}}}},{"id":"12333360","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12333360","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"outwardIssue":{"id":"12471354","key":"CASSANDRA-1381","self":"https://issues.apache.org/jira/rest/api/2/issue/12471354","fields":{"summary":"standard counters (support: incr + decr)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png","name":"Sub-task","subtask":true}}}},{"id":"12333422","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12333422","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"outwardIssue":{"id":"12471746","key":"CASSANDRA-1397","self":"https://issues.apache.org/jira/rest/api/2/issue/12471746","fields":{"summary":"repair-on-write","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png","name":"Sub-task","subtask":true}}}},{"id":"12333309","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12333309","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"inwardIssue":{"id":"12471222","key":"CASSANDRA-1375","self":"https://issues.apache.org/jira/rest/api/2/issue/12471222","fields":{"summary":"Enable different sstable recovery processeses","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12332804","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12332804","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12468316","key":"CASSANDRA-1243","self":"https://issues.apache.org/jira/rest/api/2/issue/12468316","fields":{"summary":"Break out context code from increment counters","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png","name":"Sub-task","subtask":true}}}},{"id":"12337304","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12337304","type":{"id":"10001","name":"dependent","inward":"is depended upon by","outward":"depends upon","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"},"inwardIssue":{"id":"12497514","key":"CASSANDRA-2101","self":"https://issues.apache.org/jira/rest/api/2/issue/12497514","fields":{"summary":"support deletes in counters","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-05-02T02:29:36.134+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312978","id":"12312978","name":"Core"}],"timeoriginalestimate":null,"description":"Break out the increment counters out of CASSANDRA-580. Classes are shared between the two features but without the plain version vector code the changeset becomes smaller and more manageable.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12466515","id":"12466515","filename":"CASSANDRA-1072.121710.2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-18T00:07:05.342+0000","size":259691,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12466515/CASSANDRA-1072.121710.2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12466756","id":"12466756","filename":"CASSANDRA-1072.pre-value_refactor.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-21T19:54:55.639+0000","size":259180,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12466756/CASSANDRA-1072.pre-value_refactor.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12459096","id":"12459096","filename":"increment_test.py","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-08T22:42:21.689+0000","size":14437,"mimeType":"text/x-python-script","content":"https://issues.apache.org/jira/secure/attachment/12459096/increment_test.py"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12459754","id":"12459754","filename":"Partitionedcountersdesigndoc.pdf","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-17T01:02:13.148+0000","size":173764,"mimeType":"application/pdf","content":"https://issues.apache.org/jira/secure/attachment/12459754/Partitionedcountersdesigndoc.pdf"}],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"91888","summary":"Increment counters","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"customfield_12311420":null,"customfield_12311421":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":109,"total":109,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12874016","id":"12874016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=martinhill","name":"martinhill","emailAddress":"martinrhill2000 at yahoo dot co dot uk","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Martin Hill","active":true},"body":"Kelvin, thanks for working on this.\r\n\r\nWould it be possible to allow adding/subtracting a specific amount rather than limiting it to single incr/decr operations? (Incr/decr could be achieved by specifying 1 or -1 respectively)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=martinhill","name":"martinhill","emailAddress":"martinrhill2000 at yahoo dot co dot uk","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Martin Hill","active":true},"created":"2010-06-01T14:10:02.470+0000","updated":"2010-06-01T14:10:02.470+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12874088","id":"12874088","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"All of the counters being added are delta-based.  So, yes, what you're looking for is supported.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-06-01T16:03:05.469+0000","updated":"2010-06-01T16:03:51.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12876379","id":"12876379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"This is a work in progress patch, it is not complete yet but comments are welcome. Most of the code by Kelvin from CASSANDRA-580 with some adjustments by me and Adam.\r\n\r\nThere are a few todos left such as cleaning up the AES code and further testing before finalizing the patch.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-06-07T19:34:05.201+0000","updated":"2010-06-07T19:34:05.201+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12879275","id":"12879275","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"This patch implements an increment-only counter with support for both standard and super columns. Most of the code by Kelvin Kakugawa from CASSANDRA-580 with cleanup and bug fixes by Johan Oskarsson, Adam Samet and Sylvain Lebresne. The patch also paves the way for other clock types that use contexts in a similar way, for example CASSANDRA-1132\r\n\r\nFor example on how to use it see this thrift system test: test_incr_standard_insert\r\n\r\nChanges include\r\n* Adding a context byte array to thrift and avro clock structs, required for reconciliation of different versions\r\n* Adding an IncrementCounterClock that together with IncrementCounterReconciler is responsible for reconciliation etc of increment columns.\r\n* Adding an IContext interface and IncrementCounterContext implementation for dealing with the context byte arrays.\r\n* Update AES code to account for context-based clock types\r\n* StorageProxy: modification of write path for counter clock types (enforce CL.ONE to primary replica)\r\n* Exposing some methods needed in the column/container interfaces that exists in both standard and super colum types\r\n* Various helper methods in FBUtilities for working with byte arrays\r\n* System tests for incr counters (insert, remove, batch operations)\r\n* Unit tests for new classes and methods mentioned above","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-06-16T08:21:13.118+0000","updated":"2010-06-16T08:21:13.118+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12879785","id":"12879785","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Updated to apply cleanly to trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-06-17T14:01:45.859+0000","updated":"2010-06-17T14:01:45.859+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12880280","id":"12880280","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"{noformat}\r\ncontext-based clocks\r\n\r\ninterface extensions to cassandra.thrift:\r\n  replace timestamp w/ Clock()\r\n    Clock:\r\n      optional long timestamp\r\n      optional byte[] context\r\n\r\ndata structure code changes:\r\n  db.ColumnFamilyType + db.ClockType\r\n    enums\r\n    db.ColumnFamilyType:\r\n      Super / Standard\r\n    db.ClockType:\r\n      Timestamp / IncrementCounter\r\n\r\n    applied to all IColumnContainer sub-classes (CF / SC)\r\n      checked to determine switches in code\r\n\r\n  db.context package\r\n    IContext:\r\n      context creation + manipulation\r\n    AbstractReconciler\r\n      context-based clock reconciliation\r\n\r\n  IncrementCounterContext\r\n    context structure (current):\r\n      {timestamp of last update + [(node id, count), ...]\r\n\r\n    compare():\r\n      timestamp-based compare (of last update) -- highest\r\n\r\n    diff():\r\n      tuple-based comparison\r\n        greater than:\r\n          has at least every node and each count is larger (than comparison context)\r\n\r\n  db.IClock\r\n    concrete *Clock representations\r\n    encapsulates db.context.IContext functionality\r\n    current sub-classes:\r\n      TimestampClock\r\n      IncrementCounterClock\r\n    where the ClockType knows which contextManager (db.context.IContext) to use\r\n\r\n  db.IColumn\r\n    timestamp replaced w/ IClock\r\n    markedForDeleteAt replaced w/ IClock\r\n\r\nalgorithm code changes:\r\n1) on insert\r\n  a) thrift.CassandraServer : doInsert(...)\r\n    thrift.ThriftValidation : validateClock(Clock)\r\n      takes a thrift Clock and creates the appropriate IClock impl\r\n\r\n  b) service.StorageProxy : mutateBlocking(...)\r\n    db.RowMutation : updateClocks()\r\n      iterates through all CFs w/in RM\r\n        for any context-based CF type\r\n          creates appropriate context structure\r\n            i) counter\r\n              looks at value being inserted, then creates appropriate context\r\n                e.g. {timestamp + [(replica node id, value as long in bytes)]}\r\n\r\n  c) local / remote insert\r\n    db.Table : apply()\r\n      CF.addColumn()\r\n        inserts into CSLM (ConcurrentSkipListMap) of columns_\r\n        if null returned,\r\n          then success and exit\r\n\r\n        else:\r\n          save delta (the associated count for the XClock being inserted)\r\n          pull old Column\r\n          use Reconciler to collapse saved delta Column w/ old Column counter clocks:\r\n            e.g. for incremental counters\r\n              i) aggregate this replica's counts\r\n              ii) take max of every other replica's counts\r\n\r\n2) read\r\n  CL.ONE read:\r\n    just pull from the first replica that answers\r\n\r\n  read repair (used by QUORUM and, in the background, ONE):\r\n    check step:\r\n      read from each replica\r\n      blockFor QUORUM # of replicas\r\n        where one replica is randomly chosen to be non-digest\r\n      check results in service.ReadResponseResolver : resolve()\r\n        calculate digest for non-digest CF against all digests received\r\n        if they don't match:\r\n          then kick off repair step\r\n\r\n    repair step:\r\n      read non-digest from every replica\r\n      blockFor QUORUM # of replicas\r\n      fix results in service.RRR : resolve() + two other methods\r\n        i) assemble all versions of the CF from replicas received\r\n        ii) create a \"resolved\" CF via CF.resolve()\r\n          CF.resolve(other CF)\r\n            CF.addAll(other CF)\r\n              calls CF.addColumn() for each IColumn in the other CF\r\n        iii) for each version received, create a repair version to be sent to that replica\r\n          repairCF = reconciledCF.diff(versionCF)\r\n          if null,\r\n            skip\r\n          call: repairCF.cleanNodeCounts(replica to repair)\r\n            wipes out all the counts for the given replica in every *CounterClock in the CF \r\n          otherwise, send RM w/ repairCF under read-repair verb \r\n\r\n3) compaction\r\n  uses same CF.addColumn() code path to aggregate Columns across SSTs\r\n    nothing special\r\n\r\n4) AES\r\n  uses a modified compaction iterator\r\n    service.AntiEntropyService : doAESCompaction()\r\n      that applies the same code path from read-repair:\r\n        XCounterClock : cleanNodeCounts(InetAddress replica)\r\n\r\n      so, that the IClock contexts being created to repair the remote replicas\r\n        do not send over the counts for that given replica\r\n{noformat}\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-06-18T18:47:52.459+0000","updated":"2010-06-18T18:47:52.459+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12880676","id":"12880676","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"merge from trunk\r\n\r\nconflicts:\r\nservice.AntiEntropyService\r\n\r\nnote:\r\nTimestampClock uses the same path as trunk\r\nIncrementCounterClock uses the path in trunk-1072 (i.e. prone to streaming problems)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-06-20T21:04:39.424+0000","updated":"2010-06-20T21:04:39.424+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12881521","id":"12881521","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Update to make sure mutate and blocking mutate in StorageProxy both have support for counters.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-06-23T02:28:46.845+0000","updated":"2010-06-23T02:28:46.845+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12881747","id":"12881747","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"A bunch of remarks/comments/questions on the patch.\r\n\r\n- I think the replication logic should be fixed before the patch could get in.\r\n  About that, for consistency >= ONE, wouldn't it work to pick a replica, send\r\n  it the update, wait for the ack and then, send it to all other nodes\r\n  (then blocking for whatever number of node we need to achieve consistency) ?\r\n  Please tell me if I'm completely off here. \r\n\r\n- I think that if client insert negative value for increment counters, bad\r\n  stuffs will happened. The code should check for it (in Thrift validation\r\n  most probably). It should also check that the value is a long.\r\n\r\n- IncrementCounterReconciler.updateDeleteTimestamp() sets the delete\r\n  timestamp of the live column to the max of the timestamps of the live and\r\n  deleted columns. Shouldn't it set the max of the 'delete' timestamps ?\r\n\r\n- I'm not convinced by the thrift API for creating increment counter. Calling\r\n  Clock() doesn't at all make it explicit that we want increment counter. More\r\n  generally, will we ever want to expose the binary context to the client ?\r\n\r\n- There is a bunch of code duplication for AESCompactionIterator, even though\r\n  it is just an AntiCompactionIterator that cleans contexts. Would it be better\r\n  to merge those two by adding a flag saying if the context must be cleaned or\r\n  not ? Even if we don't, the switch in doAESCompaction could be removed.\r\n\r\n- In ReadResponseResolver.resolveSuperset(), the cf.cloneMe() is changed in\r\n  cf.cloneMeShallow(). Out of curiosity, is there a reason for it other than\r\n  for efficiency and are we sure it is safe to do ?\r\n\r\n- What about increment counters when we have\r\n  https://issues.apache.org/jira/browse/CASSANDRA-1210 ? I don't know what was\r\n  planned for the latter one but if it requires few changes with respect to\r\n  the increment only counters (don't a map of id -> (count, version) instead\r\n  of a map of id -> counts suffices ?), maybe we should got with #1210 right\r\n  away ?\r\n\r\nOther more minor comments:\r\n\r\n- In IncrementCounterReconciler.reconcile(), I think it would be more clear to\r\n  replace\r\n    if (clock.size() == DBConstants.intSize_ + IncrementCounterContext.HEADER_LENGTH)\r\n  by \r\n    if (clock.context.length == IncrementCounterContext.HEADER_LENGTH)\r\n  since it's weird to compare the serialized size here.\r\n  Moreover, if we check upfront that clients cannot put bad values in counter\r\n  updates, the checks that follows are unnecessary.\r\n\r\n- In IncrementCountContext.merge(), when computing the sum for a given id, the\r\n  code checks if id is in contextsMap and if not do a get and a put. It should\r\n  be a bit more efficient to start by doing a put of (id, count), and since a\r\n  put returns the old value, to correct by a second put if needed.\r\n\r\n- Column.comparePriority() is now dead code.\r\n\r\n- IncrementCounterContext.diff() doesn't respect the code style for a few\r\n  braces.\r\n\r\n- The constructor with no argument of TimestampClock should be removed.\r\n\r\n- Last, and probably least, but I'll still mention it. The code uses at\r\n  multiple times the pattern:\r\n    someloop {\r\n      if (somecondition) {\r\n        doSomething;\r\n        continue;\r\n      }\r\n      doSomethingElse;\r\n    }\r\n  I'm not fond of it as I find it more difficult to follow what gets executed\r\n  than with a good old fashioned 'else'. But maybe that's me.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-06-23T16:55:53.949+0000","updated":"2010-06-23T16:55:53.949+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12881806","id":"12881806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Handling CL > ONE:\r\nMy thoughts would be to send a write to multiple nodes (but, still, for one node id).  And, have a node (that's not responsible for that node id) still aggregate the counts it has for the given node id.  i.e. it would still help nodes \"catch up\" to that node id's total count.  The big caveat would be that the _initial_ write path would need to be special-cased.\r\n\r\nthrift API:\r\nYes, you're right.  And, right now, the binary context is primary useful for debugging.  The thrift interface isn't very explicit.  It's necessary for vector clocks, 580, but not very useful for 1072 / 1210.\r\n\r\nRRR.resolveSuperset():\r\nAs you suspected, it's not an efficiency-motivated modification.  If cloneMe() is used, there's the potential to aggregate a given node id's counts an extra time (from that initial cloneMe() call).\r\n\r\n1210 inclusion:\r\nIt's a relatively distinct extension, so we figured that we could wait for 1072 to go through, first.\r\n\r\ncoding style--avoiding else:\r\nYeah, it's personal preference.  I hate indents, so I consciously avoid else.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-06-23T18:23:16.825+0000","updated":"2010-06-23T18:23:16.825+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12881822","id":"12881822","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I'm going to need help understanding why special-casing some write paths isn't a sign we're Doing It Wrong. :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-06-23T18:50:53.151+0000","updated":"2010-06-23T18:50:53.151+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12882144","id":"12882144","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"{quote}\r\nHandling CL > ONE:\r\nMy thoughts would be to send a write to multiple nodes (but, still, for one node id). And, have a node (that's not responsible for that node id) still aggregate the counts it has for the given node id. i.e. it would still help nodes \"catch up\" to that node id's total count. The big caveat would be that the initial write path would need to be special-cased.\r\n{quote}\r\n\r\nI realize now that it can be a bit tricky. I agree that we would kind of want\r\nthat nodes always aggregate the counts it has for all id (or did I\r\nmisunderstand what you're suggesting ?), as otherwise you'll fairly rarely get\r\nthe more up to date version for a counter without CL.ALL (or am I missing\r\nsomething ?). For the 'the initial write path would need to be special-cased',\r\ncouldn't that be dealt using the context ? From what I understand, what we\r\nwant is to differentiate between initial update coming from the client (that\r\ncan be added to our previously known count) and update that comes for conflict\r\nresolution (read repairs and such, where we want to keep the more up to date\r\nvalue). Maybe a 'freshness' flag could be added to the context header, that\r\nwould be initially to true and switch to false by any resolution. Is that\r\ncompletely stupid ?\r\n\r\nIn any case, if we sent the write to multiple nodes, shouldn't we ensure that\r\nthe node responsible for the write did get it ? Seems to me the algorithm rely\r\non the fact that each node have the right count for it's count id.\r\n\r\nNot sure I see very clearly yet in all that (But I'm willing to see the light :)).\r\n\r\n{quote}\r\nRRR.resolveSuperset():\r\nAs you suspected, it's not an efficiency-motivated modification. If cloneMe() is used, there's the potential to aggregate a given node id's counts an extra time (from that initial cloneMe() call).\r\n{quote}\r\n\r\nVery true.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-06-24T12:49:42.218+0000","updated":"2010-06-24T12:49:42.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12882230","id":"12882230","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"I like the line of thinking that you have: using the context to differentiate writes and repairs.  Let me investigate this approach and work out the code.\r\n\r\nYes, you're right about the primary node needing to receive the write.  _maybe_ hinted-handoff?  Although, I'll investigate a solution that doesn't rely on HH.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-06-24T17:29:46.660+0000","updated":"2010-06-24T17:29:46.660+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12882303","id":"12882303","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Not sure we can 'trust' HH since we can't be sure that they will be \r\ndelivered correctly (plus a node could not be hinted but still not get\r\nthe write if we don't wait for it and are unlucky).\r\nBut it's probably not too hard to change the writeResponseHandler\r\nso that it at least wait for a specific node. And if we choose a live node \r\nand the 'closest' one (either local or using the snitch), it's probably\r\nfine.\r\n\r\nOther than that, I must say that I find a bit sad that to be sure you \r\nget the more up to date version of a count you have to use CL.ALL.\r\nBut truth is I don't see a way around it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-06-24T19:54:28.161+0000","updated":"2010-06-24T19:54:28.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12882363","id":"12882363","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"This updated patch addresses most concerns in the review, with the exception of the replication logic that Kelvin is working on.\r\n\r\n* Check for invalid/negative input. Includes unit test.\r\n* Pick the correct timestamp in updateDeleteTimestamp, added unit test\r\n* Collapsed duplicate AES code into one\r\n* Clarified IncrementCounterReconciler.reconcile() code\r\n* IncrementCountContext.merge() refactor as suggested\r\n* Removed dead code in Column\r\n* IncrementCounterContext.diff() reformat\r\n* Removed TimestampClock constructor\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-06-24T22:13:24.608+0000","updated":"2010-06-24T22:13:24.608+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12882662","id":"12882662","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=aguynamedben","name":"aguynamedben","emailAddress":"benstandefer at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ben Standefer","active":true},"body":"What is the probable release that would include this? 0.7 in 6-8 weeks-ish?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=aguynamedben","name":"aguynamedben","emailAddress":"benstandefer at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ben Standefer","active":true},"created":"2010-06-25T18:06:18.745+0000","updated":"2010-06-25T18:06:18.745+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12889602","id":"12889602","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Updated patch, the following changes and some minor fixes are in it. Most code by Kelvin and some testing + minor changes by me.\r\n \r\n* Don't guess clock type from thrift input, read from DatabaseDescriptor.\r\n* Context is removed from public api since it's not needed yet.\r\n* Removed cleanup logic and replaced with a flag in context as suggested by Sylvain.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-07-18T10:56:38.300+0000","updated":"2010-07-18T10:56:38.300+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12889701","id":"12889701","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"As commented above, I need help understanding why this is necessary:\r\n\r\n+            /**\r\n+             * perform secondary writes, if necessary\r\n+             *\r\n+             * use case: support distributed counter writes for CL > ONE\r\n+             * rationale:\r\n+             *   distributed counters need to be first written to one replica\r\n+             *     to be correctly accounted for\r\n+             *   then, for CL > ONE, writes can be sent to other replicas\r\n+             *     to help them catch up to the total count of the first replica\r\n+             */\r\n\r\nIs that what you mean by \"the replication logic that Kelvin is working on?\"","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-07-18T23:45:03.898+0000","updated":"2010-07-18T23:45:03.898+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12889716","id":"12889716","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"The secondary write path is necessary, because we need to make sure that the total writes to the primary (target) replica are correct.  Let's take a scenario, we have 3 replicas w/ associated counts:\r\nA: [(A, 10)]\r\nB: [(A, 3)]\r\nC: [(A, 5)]\r\n\r\ni.e. node A accepted some combination of increments until its count reached 10.  node B was repaired (via read repair or AES) from A's counter value when it was at 3.  node C was repaired when A's count was at 5.\r\n\r\nSo, if we use the unmodified write path and attempt this write:\r\n[(A, 1)]\r\n\r\ni.e. commit a write to node A w/ a delta of 1.\r\n\r\nLet's imagine a scenario where the write to node A fails, but the writes to B and C succeed:\r\nA: [(A, 10)]\r\nB: [(A, 4)]\r\nC: [(A, 6)]\r\n\r\nWhen the counter eventually repairs itself, that write will be considered lost.  Since, the primary replica did not receive that write and the other replicas were behind.  So, the reason why we need to ensure the primary write succeeds, first, is to ensure that the write has been accounted for in the system.  The secondary writes are just optimistic writes to help the other replicas play catch-up.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-07-19T01:19:37.923+0000","updated":"2010-07-19T01:19:37.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12889741","id":"12889741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Sounds like the problem is you are trying to be too clever by making increment too low-level.  It's fine to have increment be a special op at the thrift level, but internally we need to deal with _values_ and clocks otherwise we lose the ability to detect conflicts, as in your example.  If A should send out (11: {A: 11}) -- that is, (value, {clock}), then B and C can tell that their clocks are ancestors of A's w/ no conflicts.\r\n\r\nThis does mean that we need to keep conflict history for up to GCGraceSeconds (good discussion at http://pl.atyp.us/wordpress/?p=2601) but that is much more acceptable than compromising our fully-distributed design.  I also suspect it would be much less code, as well as more generalized.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-07-19T02:01:28.702+0000","updated":"2010-07-19T02:01:28.702+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12890255","id":"12890255","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I may be wrong here, but I think that it is a bit harder in\r\nCassandra. At least, here's a scenario I'm unsure how to deal with unless you\r\ndistinguish a primary replica for each write (as done in Kelvin algorithm).\r\n\r\nTake a cluster with RP=3. Let's call A, B and C the 3 node hosting some\r\ncounter c. Now say you do writes with CL.QUORUM (or less) and the writes are\r\ninitially done on some other node D that dispatch the writes to A, B and C.\r\nConsider the two following scenario:\r\n\r\nS1: you do 2 simple increments (+1) and everything works fine.\r\nA, B and C receives those and each have 2 columns whose values are 1 and whose\r\nclocks are ... (that's the point, not sure what are those clock to make it\r\nwork).\r\n\r\nS2: you do 3 simple increments (+1). For some reason you are (really) unlucky\r\nand on each write one of the node (each time a different one) don't get it.\r\nSo you also end up with each node (A, B and C) having 2 columns whose values\r\nare 1 and whose clocks are ... (same as in S1). But note that it's CL.QUORUM,\r\nwe have acknowledged the writes and should return 3 on a CL.QUORUM or CL.ALL\r\nread.\r\n\r\nI don't see any reasonable values for the clocks so that upon a read (even at\r\nCL.ALL) both those scenario returns the right value.\r\n\r\nSorry if I miss something simple, but I'll be interested by any idea/solution.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-07-20T13:12:49.311+0000","updated":"2010-07-20T13:12:49.311+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12893252","id":"12893252","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Attached a design document for the incremental counters.\r\n\r\nWe would like to help bring more ppl into the discussion of implementation details.  So, a design doc that presents the underlying logic in a more composed format was put together.  It's a little rough, as in the prose isn't fully fleshed out, but the major ideas are all present.\r\n\r\nWe also decided to remove the secondary write path and write flag logic.  We discovered an edge case that makes it unfeasible.  So, the 0.7 AES implementation needs to be modified, accordingly, as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-07-28T17:06:49.018+0000","updated":"2010-07-28T17:06:49.018+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12894052","id":"12894052","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=softwareprojects","name":"softwareprojects","emailAddress":"mike at softwareprojects dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Peters","active":true},"body":"Kelvin, thank you for putting the document together. Much appreciated.\r\n\r\nThe one thing that is a big concern to us is the limitation of reads requiring cl.ALL.  With a large number of nodes, it sounds like this will render reads not suitable for any real-time user-facing queries. There has to be a way around this?  Didn't the folks at Digg implement version-clocks with client side resolution not requiring cl.ALL for reads?  \r\n\r\nServer side resolution is definitely the way to go.  Just wondering if we can have the aes/resolution take place \"offline\", not requiring cl.ALL for reads.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=softwareprojects","name":"softwareprojects","emailAddress":"mike at softwareprojects dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Peters","active":true},"created":"2010-07-30T14:16:47.411+0000","updated":"2010-07-30T14:16:47.411+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12894066","id":"12894066","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"body":"Mike-\r\n\r\nYou might have a misunderstanding- cl.ALL means all replicas, not all nodes. So a \"large number of nodes\" doesn't matter, on the replication factor.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"created":"2010-07-30T15:57:53.721+0000","updated":"2010-07-30T15:57:53.721+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12894084","id":"12894084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=softwareprojects","name":"softwareprojects","emailAddress":"mike at softwareprojects dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Peters","active":true},"body":"Ah you're totally right Ryan! My bad.  Just being anxious about this feature","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=softwareprojects","name":"softwareprojects","emailAddress":"mike at softwareprojects dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Peters","active":true},"created":"2010-07-30T17:38:58.758+0000","updated":"2010-07-30T17:38:58.758+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12895035","id":"12895035","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Updates since last version of the patch.\r\n\r\n* Removed secondary write path and write flag due to concerns voiced and issues discovered.\r\n* Due to the above changes we have restored the clean operation for AES. The core of this from the 0.6 patch has been tried and tested in production.\r\n* Had to modify parts of the new streaming code to pass on the type of streaming operation performed in order to incorporate the clean operation.\r\n* Minor code cleanup, license headers, javadoc adjustments etc.\r\n\r\nFor further information about this patch see the design doc attached to this jira.\r\nAll unit and system tests pass for this patch. Including custom tests on a 10 node cluster.\r\nWork done by the usual suspects seen above.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-08-03T20:52:45.589+0000","updated":"2010-08-03T20:52:45.589+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12895179","id":"12895179","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"An issue was found in the AES code, will reroll patch and upload again.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-08-04T08:29:33.909+0000","updated":"2010-08-04T08:29:33.909+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12896429","id":"12896429","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I looked at the design document, but I didn't see the motivation for special-case code for counters, instead of dealing with it with the more general version vector code from CASSANDRA-580?  Did I miss that?\r\n\r\nRequiring CL.ALL on reads means it's basically unusable across multiple DCs, which seems to me that it's not really all that much of an improvement over using something like Cages w/in a single DC.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-09T00:00:03.791+0000","updated":"2010-08-09T00:00:03.791+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12896627","id":"12896627","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"The caveat wrt version vectors is that we need to do a read before a write.\r\n\r\nLet me investigate Cages.  I believe you mean this project:\r\nhttp://code.google.com/p/cages/","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-08-09T17:14:52.158+0000","updated":"2010-08-09T17:14:52.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12896693","id":"12896693","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"I took a look at Cages.  It's interesting as a platform for transactions on top of Cassandra.\r\n\r\nUnfortunately, that's not amenable to high performance counts.  ZK clusters only have one leader--i.e. only one node can be written to, at any given time.  It's not feasible to:\r\n1) acquire a ZK lock\r\n2) perform a quorum read\r\n3) perform a quorum write, then\r\n4) release the ZK lock\r\n\r\nfor every increment.  I've heard of the aftermath of such an approach (ZK locks to coordinate high performance counts on top of Cassandra) and it was not pretty.  Even this blog post:\r\nhttp://ria101.wordpress.com/2010/05/12/locking-and-transactions-over-cassandra-using-cages/\r\n\r\nmentions that to scale the locks, you'll have to start sharding the ZK clusters.  I completely understand this service for more complicated operations on top of Cassandra, but not for high performance counters.\r\n\r\nThe distributed counter code allows increments to be written straight into a cass cluster.  (No reads or locks are required.)  And, each replica aggregates all of the deltas that were originally written to it, plus idempotently repairs the increments written to the other replicas (to eventually learn the total counts for a given key).\r\n\r\nGranted, a CL.ONE read may be inconsistent to a certain degree.  However, eventually, each replica will learn all the increments written to all replicas.  If you need to know the exact count for a given key, then you will have to pay for a CL.ALL read.  However, this is true for any use case where writes aren't CL.QUORUM.\r\n\r\nPlease review Helland's Building on Quicksand paper (sections 5 & 6) for a more academic understanding of the approach implemented by #1072.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-08-09T21:00:39.615+0000","updated":"2010-08-09T21:00:39.615+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12897004","id":"12897004","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"An updated version of the patch.\r\n* merged with the latest streaming changes in trunk\r\n* contains the fix to the AES code and a bit of refactoring. \r\n\r\nWe have once again created a new issue with a chunk of 1072 in it for simplicity, making it easier to review and commit. \r\nThe new AES code can be found in CASSANDRA-1375, it is however also in this patch until 1375 has been committed, so this issue can be reviewed on it's own.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-08-10T19:11:04.552+0000","updated":"2010-08-10T19:11:04.552+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12897006","id":"12897006","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"True, you do have to read-before-write for version vectors, but that's a pretty low price compared to \r\n\r\n - losing availability if a single node is down\r\n - a large amount of special-case code for one new op type\r\n\r\nI'd very much like to explore the version vector approach in 580 more, before deciding that we need this extra complexity to achieve reasonable performance.  Because I don't think that will be necessary.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-10T19:13:10.150+0000","updated":"2010-08-10T19:13:10.150+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12898248","id":"12898248","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Having made some though, I see a few important difficulties/problem (in the\r\ncontext of Cassandra) with a version vector (or vector clock, even though I\r\nbelieve it is ill-suited for counters) approach :\r\n\r\n* as said, it involves a read-before-write. But I think it's worth than that\r\n  in that it involves an atomic 'read-then-write' (but maybe you already included \r\n  that in your comment, in which case I disagree on the 'pretty low price').\r\n  I, at least, don't see how, without atomicity between the read and the\r\n  write, you can ensure that you don't fall into one of:\r\n  *# ending with two different values having exact same vector\r\n  *# missing some increments\r\n\r\n* http://pl.atyp.us/wordpress/?p=2601 explains clearly why in such approach\r\n  you'll have to keep some history to be able to resolve later conflict. But\r\n  it only show the beginning of the problems. Take, as in this post, the\r\n  example of 3 nodes (and RF=3). Because stuffs can get lost, it could be very\r\n  well be that on node 1 you'll end up receiving say both:\r\n    ** the value 3 with a version clock [0, 1, 2]\r\n    ** the value 3 with a version clock [0, 2, 1]\r\n  and nothing before that (cause node 1 was dead during those first updates).\r\n  Then you're kinda screwed. You could get back on your feet if you have the\r\n  historic of the update of node 2 and 3, but that means that not only you\r\n  have to keep an historic of updates for some time, you'll have to send this\r\n  historic between nodes. Pretty sure that'll get messy.\r\n\r\nIf I'm wrong here, please feel free to correct me, I'd love to be wrong.\r\n\r\nNow, about the current idea implemented, I want to believe that we could lift\r\nsome of (what I believe to be) the main limitation, namely that we have to\r\nread at CL.ALL, by using some kind of repair-on-write (btw, the idea is not\r\nmine, but Kelvin's).\r\nThat is, a write would be:\r\n  # send the write to one chosen replica.\r\n  # this replica write the increment locally.\r\n  # then he reads locally (which ensure that he have the current correct\r\n  count for the part of the counter he is responsible for)\r\n  # he sends what he has read to other replicas and wait for a number of\r\n  acks that depends on CL.\r\n\r\nBy choosing how many replicas we wait for in 4 before answering the whole\r\nwrite query, we'll ensure the usual consistency level insurances (that is\r\nwrite then read at QUORUM ensures consistency).\r\nSure, a write will require a local read (but only 1 btw), but in that context\r\nI do believe it's a low price to pay (plus CL.ONE don't have to wait for it to\r\nsucceed, if high write throughput counter is what you really need). \r\n\r\nIt is true that this will require a special verb handler for the operation.\r\nBut there is nothing incredibly new in the operations it will perform so I\r\nbelieve that it could be written with not so much new specific code.\r\n\r\nIt is also true that point 1 makes the approach slightly more fragile that\r\nusual writes, as the chosen replica may timeout on us even though other nodes\r\nwouldn't have, but after all it makes it only as fragile as our reads (since\r\nwe ever only ask the actual value to a chosen node).\r\n\r\nSorry for the long post, especially if that turns out to be stupid.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-08-13T14:16:09.488+0000","updated":"2010-08-13T14:16:09.488+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899015","id":"12899015","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"body":"Sylvain, what does \"wait for a number of acks\" in your/Kelvin's step 4 mean? What happens if one or more replicas are on the other side of a partition? What values are returned while the chosen replica is waiting for acks? It's all very well to make a \"good faith\" attempt to reduce the window of inconsistency by sending updates to other replicas early, but waiting indefinitely seems like trying to enforce strong consistency and if the wait terminates then we have to handle the repair after the partition is resolved anyway. This may be the same objection as Jonathan made at 8pm on August 10, although it covers more cases than just multi-DC because partitions can and do occur within DCs as well. Reading the current version vector as part of a write doesn't seem like enough of a problem to justify complex workarounds, since it's probably in memory anyway (especially for a hot counter).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"created":"2010-08-16T18:18:25.330+0000","updated":"2010-08-16T18:18:25.330+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899037","id":"12899037","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"You left an important part of the sentence. This important part is 'that depends on CL'. Of course network partitions can occur. Actually what I'm proposing is all about handling better network partitions. It aims to establish the exact same behavior and consistency level insurances that Cassandra already ensures. The 'number of acks' will be equal to what you, the client issuing the write, ask for when specifying the consistency level.\r\n\r\nMoreover I've never suggested wait indefinitely. Again, it that wasn't clear is really just what Cassandra already do, that is, send the update to all replica and wait for only as many responses as the client has asked you to. Sorry if that wasn't clear.\r\n\r\nAs for the last sentence of you comment, I'm not sure I understand it. But I sure don't meant to propose a complex workarounds, quite the contrary, and right now, I think this is neither really complex, nor a workaround as this addresses real problems. \r\n\r\nBut don't get me wrong, I appreciate your questions/concerns as there could very well be something wrong in my reasoning.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-08-16T19:06:33.339+0000","updated":"2010-08-16T19:06:33.339+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899112","id":"12899112","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"body":"If I'm reading this correctly, then the prior approach would have required reading at CL.ALL to get a consistent result and this reduces it to CL.QUORUM instead.  At least, that's the only way I can reconcile \"lift\r\nsome of (what I believe to be) the main limitation\" from August 10 with both \"handling better network partitions\" and \"exact same behavior and consistency\" today.  Is that correct?  If it is, let's look at the simultaneous-write case some more.  Let's say two nodes get updates at the exact same instant, both at CL.QUORUM.  A reader at CL.QUORUM will therefore see at least one value reflecting each of those updates.  If that reader does see inconsistent values, how will it reconcile them?  In particular, if it sees A=10/B=11/C=12 from three replicas, how will it distinguish between the following?\r\n\r\n(a) Initial value was 10, B got a +1 which hasn't propagated, C got a +2 which hasn't propagated -> reconciliation should yield 13.\r\n(b) Initial value was 10, B got a +1 which propagated to C but not A, C got a +1 which hasn't propagated at all -> reconciliation should yield 12.\r\n\r\nI'm not trying to poke holes here; I'm just curious because I don't see clearly how the scheme you laid out would handle this case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"created":"2010-08-16T21:46:53.244+0000","updated":"2010-08-16T21:46:53.244+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899168","id":"12899168","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Hi Jeff,\r\n\r\nHelland's Building on Quicksand paper discusses the abstract strategy behind our distributed counters.  It would useful to review it:\r\nhttp://blogs.msdn.com/b/pathelland/archive/2008/12/12/building-on-quicksand-paper-for-cidr-conference-on-innovative-database-research.aspx\r\n\r\nThe relevant sections are 5 and 6.\r\n\r\nBriefly, Helland postulates that 3 useful properties of distributed commutative operations are:\r\n1) commutative operation,\r\n2) partitioned work, and\r\n3) idempotent repair.\r\n\r\nI also go through #1072 in detail, here:\r\nhttp://www.slideshare.net/kakugawa/distributed-counters-in-cassandra-cassandra-summit-2010\r\n\r\nThe important detail that we're missing from your example is the way the work was partitioned.  A given counter's value is actually constructed from the incremental updates received by each replica.  Let me clarify w/ an example.\r\n\r\nLet's assume that all replicas start w/ this distributed counter vector:\r\n    [(A, 4), (B, 3), (C, 3)] = 10\r\n\r\nExample (a):\r\ninitial value:\r\n    [(A, 4), (B, 3), (C, 3)] = 10\r\nnode B (+1):\r\n    [(A, 4), (B, 4), (C, 3)] = 11\r\nnode C (+1):\r\n    [(A, 4), (B, 3), (C, 5)] = 12\r\n\r\nOn reconciliation (between any node), we take the highest count for a remote replica.  So, if node A received a repair from both nodes B and C, the resulting vector would be:\r\n    [(A, 4), (B, 4), (C, 5)] = 13\r\n\r\nExample (b):\r\ninitial value:\r\n    [(A, 4), (B, 3), (C, 3)] = 10\r\nnode B (+1):\r\n    [(A, 4), (B, 4), (C, 3)] = 11\r\nnode C (after repair from B):\r\n    [(A, 4), (B, 4), (C, 3)] = 11\r\nnode C (+1):\r\n    [(A, 4), (B, 4), (C, 4)] = 12\r\n\r\nNow, let's take the situation where node A receives a repair from C (and, optionally, B), the resulting vector would be:\r\n    [(A, 4), (B, 4), (C, 4)] = 12\r\n\r\nI did gloss over some details in the above.  If you would like me to clarify, I would be happy to do so.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-08-16T23:04:30.938+0000","updated":"2010-08-16T23:04:30.938+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899179","id":"12899179","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"body":"Thanks for the explanation, Kelvin.  I see now where the requirement to read at CL.ALL comes from, and how the proposed scheme avoids it.  Too bad decrements had to be abandoned in the process.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jdarcy","name":"jdarcy","emailAddress":"jeff at pl dot atyp dot us","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jeff Darcy","active":true},"created":"2010-08-16T23:20:26.338+0000","updated":"2010-08-16T23:20:26.338+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12899726","id":"12899726","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"minor bug fix: ensure vector tuples are deterministically ordered","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-08-18T05:01:22.552+0000","updated":"2010-08-18T05:01:22.552+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900053","id":"12900053","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"-2 patch seems all kinds of messed up, unless it really ballooned by 6x and includes patches to bin/ among lots of other stuff now.\r\n\r\nI still don't understand the objection to 580 -- it requires read before write, but 1072 still does read before write to find previous clock.  am I missing something?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-18T21:55:40.814+0000","updated":"2010-08-18T21:55:40.814+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900090","id":"12900090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Yes, let me rebase and create the patch properly.\r\n\r\n\r\nThe problem w/ #580 is that vector clocks only provide a partial ordering of the logical updates.  However, for distributed commutative operations, we need to: 1) partition the updates and, 2) be able to idempotently repair updates between partitions, as well.  Bear in mind that we have 2 proposed implementations of #580: 1) node ids are chosen by the replica that updates the value, and 2) node ids are chosen by the client connection that updates the value.\r\n\r\n\r\nLet's take an example using #580 (replica-based node ids):\r\nThe current value + vector clock is:\r\n     10 + [(A, 5), (B, 3), (C, 4)]\r\n\r\non all the replicas (A, B, and C).  Now, let's say we have 2 clients, X and Y, that are trying to update the value.\r\nX reads from replica A, then increments the value by 2 and writes it to A (the clock is pre-constructed on the coordinator):\r\n    12 + [(A, 6), (B, 3), (C, 4)]\r\n\r\nY also reads from replica A (before X's update), then increments the value by 3 and writes it to A (the clock is pre-constructed on the coordinator):\r\n    13 + [(A, 6), (B, 3), (C, 4)]\r\n\r\nNow, replica A sees both variants.  However, it doesn't have enough information to properly reconcile both columns to arrive at 15.\r\n\r\n\r\nLet's take an example using #580 (connection-based node ids):\r\nThe current value + vector clock is:\r\n     10 + [(X, 5), (Y, 3)]\r\n\r\non all the replicas (A, B, and C).  X and Y were previous client connections that updated this value.  Now, let's say we have a client Z that tries to update this value twice.\r\nZ reads from replica A, then increments by 2 and writes it to B (clock is pre-constructed on coordinator):\r\n    12 + [(X, 5), (Y, 3), (Z, 1)]\r\n\r\nNext, Z reads from replica C, then increments by 3 and writes it to B (clock is pre-constructed on coordinator):\r\n    13 + [(X, 5), (Y, 3), (Z, 1)]\r\n\r\nAs in the previous example, replica B does not have enough information to properly reconcile both columns.\r\n\r\n\r\nFurther note, in both examples above, a CL.QUORUM read, then CL.QUORUM write would not fix the reconciliation problem.  #580 does not facilitate the partitioning of updates, so the reconciler does not know which portion of the value is \"new\" when it sees two updates w/ the same version vector.  If updates aren't partitioned, then a distributed lock system, like Cages, would be needed to enforce exact ordering throughout the distributed system.\r\n\r\n\r\nIf you are doing a set union, like in the Dynamo shopping cart example, then a partial ordering is sufficient and similar items in the shopping cart can be collapsed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-08-18T22:55:06.036+0000","updated":"2010-08-18T22:55:06.036+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900658","id":"12900658","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Right, I understand the reconciliation problem.  I read Jeff Darcy's blog too. :)  I was concerned that I was missing something about read-before-write that would apply to 580 but not 1072.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-20T10:00:28.560+0000","updated":"2010-08-20T10:00:28.560+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900659","id":"12900659","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I actually think the main problem with the 1072 approach is on the write side, not the read.  Writes are fragile.  Here is what I mean by that:\r\n\r\nBecause 1072 \"shards\" the increments across multiple machines, it can tolerate _temporary_ failures.  This is good.  But because the shards are no longer replicas in the normal Cassandra sense -- each is responsible for a different set of increments, rather than all maintaining the same data -- there is no way to create a write CL greater than ONE, and thus, no defense against _permanent_ failures of single machines.  That is, if a single machine dies at the right time, you will lose data, and unlike normal cassandra you can't prevent that by requesting that writes not be acked until a higher CL is achieved.  (You can try to band-aid the problem with Sylvain's repair-on-write, but only reduces the failure window, it does not eliminate it.)\r\n\r\nA related source of fragility is that operations here are not idempotent from the client's perspective.  This is why repair-on-write can't be used to simulate higher CLs -- if a client issues an increment and it comes back TimedOut (or a socket exception to the coordinator), it has no safe way to retry: if the operation went on to succeed later, but the client responded to the TimedOut by issuing another increment, we have added new data erroneously; but if we do not re-issue the operation, and the original operation failed permanently, we have lost data.  Thus, even temporary node failures can cause data corruption.  (I say corruption, because I mean to distinguish it from the sort of inconsistency that RR and AES can repair.  Once introduced into the system, this corruption is not distinguishable from real increments and thus un-repairable.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-20T10:14:20.372+0000","updated":"2010-08-23T14:37:42.447+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900680","id":"12900680","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"New cut of the patch Kelvin uploaded earlier.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-08-20T12:48:34.674+0000","updated":"2010-08-20T12:48:34.674+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12900848","id":"12900848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stuhood","name":"stuhood","emailAddress":"stuhood at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=stuhood&avatarId=10049","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=stuhood&avatarId=10049","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=stuhood&avatarId=10049","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=stuhood&avatarId=10049"},"displayName":"Stu Hood","active":true},"body":"I don't see a clear solution to prevent the read-before-write step inherent in #580, but if read-before-write / CAS loop is a common enough step (for this issue and 1311), perhaps pushing the CAS loop to the server would be useful. I'll comment on 1311 with some thoughts.\r\n\r\n----\r\n\r\nI think I agree with jbellis on this one: implementing write scaling (striping?) in a way that isn't generic breaks EC, so I'd like to see a solution there.\r\n\r\n> Because 1072 \"shards\" the increments across multiple machines\r\nA generic way to improve write throughput would be to implement striping. The outcome would essentially be duplicated rings overlaid on one another, so that multiple replica sets \"own\" the same tokens. For example, with N = 3, and a \"striping factor\" of 2, a single range would have 2 stripes of 3 nodes each, where each stripe holds disjoint data, and must be queried at read time. Writes go to a random stripe, so W=1 would block for 1 node in a stripe, and W=ALL would block for all 3 nodes in a stripe. Reads would need to touch both stripes, so a R=1 read would need to block for 2 nodes (one from each stripe).\r\n\r\n(The write throughput problem also heavily affects timeseries data, because users currently have to implement their own striping to prevent overloading the range receiving current data.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stuhood","name":"stuhood","emailAddress":"stuhood at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=stuhood&avatarId=10049","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=stuhood&avatarId=10049","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=stuhood&avatarId=10049","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=stuhood&avatarId=10049"},"displayName":"Stu Hood","active":true},"created":"2010-08-20T20:26:25.046+0000","updated":"2010-08-20T20:26:25.046+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12901405","id":"12901405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"ISTM that \"striping\" this way breaks conflict resolution -- if you have two increments at CL.ONE that update different nodes on the stripe during a partition, then after the partition heals there's no way to tell that you've lost an increment similar to the classic read-update-write race.  Having a single node responsible for each shard fixes this problem while still allowing rudimentary failure tolerance, but has the fragility problems described above.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-23T14:02:48.949+0000","updated":"2010-08-23T14:02:48.949+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12902840","id":"12902840","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Is my comment on CASSANDRA-1421 correct, that we don't need the Clock structure for this approach either?\r\n\r\nIf so then I think we should get rid of that before 0.7 final, since nobody has a use case for raw version vectors either.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-08-26T12:35:04.064+0000","updated":"2010-08-26T12:35:04.064+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12902850","id":"12902850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"If, as I suppose, you're refering to the Clock structure in thrift/avro, then I'm pretty sure you \r\nare correct. That is, the attached patch does use it, but it is trivial to get rid of it and simply \r\nignore the timestamp when its a write for a counter.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-08-26T13:14:40.933+0000","updated":"2010-08-26T13:14:40.933+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12904771","id":"12904771","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Admittedly there are tradeoffs to the approach used in 1072+1397 as outlined in previous comments. As long as users are aware of these constraints there are plenty of use cases, demonstrated by the interest on the mailing list. Similar to how eventual consistency may prevent some applications but are good enough for plenty of others.\r\n\r\nAre there any specific code changes we can make to the patch in order to make it commit worthy?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-08-31T21:04:35.056+0000","updated":"2010-08-31T21:04:35.056+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12904940","id":"12904940","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"am I right that there is no good reason to inflict Clock on our interface at this point?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-01T06:08:14.997+0000","updated":"2010-09-01T06:08:14.997+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12905202","id":"12905202","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"We've been looking at ways to adjust this patch to meet the EC concern above and came up with this compromise: a new increment method in the thrift interface.\r\n\r\nWith a new method Cassandra users would not be confused by the slightly different ConsistencyLevel behavior in the current patch. The method name and parameters would be a clear indication as to what it does and separate it from the methods used on standard column families.\r\n\r\nWith the interest shown in this feature I hope we can reach a compromise that works for all involved.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-09-01T20:21:05.799+0000","updated":"2010-09-01T20:21:05.799+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12905674","id":"12905674","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lenn0x","name":"lenn0x","emailAddress":"cg at chrisgoffinet dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Goffinet","active":true},"body":"I am in favor of Johan's proposal for a compromise.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lenn0x","name":"lenn0x","emailAddress":"cg at chrisgoffinet dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Goffinet","active":true},"created":"2010-09-02T21:12:45.011+0000","updated":"2010-09-02T21:12:45.011+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909022","id":"12909022","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Updated patch with separate method in thrift interface for increments, marked as experimental as discussed on dev list.\r\n\r\nPatch has been updated to the latest changes in trunk. Tested with unit and system test as well as tests run against a real cluster.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-09-13T22:15:29.931+0000","updated":"2010-09-13T22:15:29.931+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909051","id":"12909051","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"as described above, the Clock approach was a false start and should be removed now that we understand that CASSANDRA-580 is a dead end.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-13T23:45:00.879+0000","updated":"2010-09-13T23:45:00.879+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909174","id":"12909174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"This patch is already huge so it's better to do that in a different ticket after this has gone in. I volunteer to do that work.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-09-14T10:12:44.378+0000","updated":"2010-09-14T10:12:44.378+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909218","id":"12909218","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"that it's a huge patch is exactly why I don't want to take a \"let's just commit it and clean it up later\" approach.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-14T12:32:31.712+0000","updated":"2010-09-14T12:32:31.712+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909234","id":"12909234","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"The clock changes are separate from the counters and were introduced in a different ticket, CASSANDRA-1070. I see no reason to add more work that is not directly related to counters in this jira. The clock changes would get into trunk quicker if we didn't, avoiding the extra overhead of a big patch during reviews, merge with trunk, code updates and publication of a new patch.\r\nIf the concern is that we won't attend to the clocks once this patch is in I can promise that we'll look at it straight away.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-09-14T13:33:17.386+0000","updated":"2010-09-14T13:33:17.386+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909241","id":"12909241","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"A major concern is that the clocks are part of the API and schema.  So if we commit this as-is then we have several possible scenarios:\r\n\r\n1. clock change gets in before 0.7.0 and everything is fine\r\n2. clock change isn't ready for 0.7.0 and we block 0.7.0 for it\r\n3. clock change isn't ready for 0.7.0, we release anyway, and break compatibility w/ the next release\r\n4. clock change isn't ready for 0.7.0 so we postpone it until 0.8 (thus having to maintain both versions until 0.7 is obsolete)\r\n\r\n2-4 are not acceptable and while I know you have the best of intentions to finish it right away, the rest of 0.7.0 is shaping up rapidly and it just doesn't look like a good risk to me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-14T13:42:11.691+0000","updated":"2010-09-14T13:42:42.326+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909247","id":"12909247","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"(To be explicit, I'm fine with this going in 0.7.1 if it misses 0.7.0, as long as it doesn't break compatibility anywhere.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-14T13:54:07.753+0000","updated":"2010-09-14T13:54:07.753+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909275","id":"12909275","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"I agree that we want to avoid 2-4. But the clock api changes are already in trunk. I don't see why bundling the clock removal in 1072 would help us avoid the scenarios outlined above.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-09-14T15:02:07.744+0000","updated":"2010-09-14T15:02:07.744+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12909291","id":"12909291","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I was going to reply that it should be obvious that removing Clock from the API is relatively easy before we add a monster patch that introduces the only real dependency on it, but talk is cheap.  So I wrote the patch first: CASSANDRA-1501","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-09-14T15:39:28.596+0000","updated":"2010-09-14T15:39:28.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12928429","id":"12928429","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Updated patch with the following changes\r\n* Dependency on clock structure removed\r\n* Decrement support\r\n* Encapsulates part of logic in CounterColumnType, set by default_validation_class\r\n* Updated streaming code to fit into the latest refactoring\r\n* Thrift API updated to roughly match that of CASSANDRA-1546 (with the addition of supercolumn support)\r\n* Additional system tests\r\n\r\nCan be split up into smaller jiras, for example the streaming OperationType changes.\r\nWe hope this is a compromise all parties can be happy with.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-11-04T23:51:49.034+0000","updated":"2010-11-04T23:51:49.034+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12929750","id":"12929750","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I think this patch has a number of important shortcomings (all of which have been discussed in some comments of CASSANDRA-1546, so sorry for the repetition):\r\n\r\n# the patch uses IP addresses as node identifiers for the partitions of the counters. This is overly fragile (a change of IP, accidental or not, could corrupt data) and, I'm growing more and more convinced, a bad idea. An obvious solution is to use uuids instead of IPs. However in that perspective, I believe the approach taken by CASSANDRA-1546 to be a lot simpler (but I could be biased) that the clean context logic of this patch. Because the clean context logic requires a global knowledge of the node uuid affectations, while the approach of CASSANDRA-1546 does not.\r\n# cluster topology changes could result in data corruption, if no proper care is taken by the user. Consider a simple cluster with a single node A (RF=1), accepting updates on a counter c. We boostrap node B, that gets counter c in its range (it is thus streamed to B). And now let's say that node B is decommissioned. Counter c will be streamed back to A \"as is\". If, after B was boostrapped, repair has been run on A, this is fine. But if repair wasn't run, it'll result in a (on disk) corrupted counter, because the newly streamed parts will be merged with the old version.  And I don't think that requiring users to run repair at the risk of losing data is the right fix.  This is not unrelated to my previous point in that I believe that with uuids, we can fix that by renewing a given node ID on range changes. Again, the approach of CASSANDRA-1546 where we don't need to know the affectation of node ID -> actual node (at least not on the read and/or write path) make that much easier. \r\n# there is a race condition during reads. During reads, a given row can be read twice, because the switch from current memtable to memtable pending flush is not atomic. The same is true when a flushed memtable becomes a sstable and at the end of compaction. This is fine for normal reads, but will result in bogus reads for counters. The patch attached to CASSANDRA-1546 proposes a fix to that.\r\n# there is no replication on writes. Which is worst than merely not supporting CL.QUORUM. This patch does provide any reasonable durability guarantee. And imho, this is far too important to be simply left as a 'later improvement'.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-11-08T21:42:21.833+0000","updated":"2010-11-08T21:43:16.321+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12929782","id":"12929782","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"A set of system tests for #1072.\r\n\r\nA couple points of interest:\r\n- FIXME tags denote areas that need to be modified: hostnames, shell commands to stop/start/restart nodes on the remote server.\r\n- requires python 2.6\r\n- needs to be run from the base directory\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-08T22:42:21.756+0000","updated":"2010-11-08T22:42:21.756+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12932743","id":"12932743","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"All good points. We have reviewed them and the code, replies below.\r\n\r\n1. Is this the kind of ip address situation you are referring to?\r\nA cluster of nodes: A (127.0.0.1), B (127.0.0.2), and C (127.0.0.3) have been running and are not fully consistent.  They're brought back up w/ shuffled ips, like so: A (127.0.0.2), B (127.0.0.3), and C (127.0.0.1).  A has the most up-to-date view of writes to 127.0.0.1, however, C is now in-charge of writes to 127.0.0.1.  i.e. any writes to A that C had not seen, previously, have now been lost.\r\nWhile this is possible, it's not very likely that a production situation would shuffle the ip addresses of nodes in this way.\r\nA fix with UUIDs is possible but it's beyond the scope of this jira.\r\n\r\n2. Valid issue, but it does sound like something of an edge case. For a first version of 1072 it seems reasonable that instructions for ops would be sufficient for this problem. If the community then still feels it's a problem we can look at how to improve the code.\r\n\r\n3. To resolve this issue we have borrowed the implementation from CASSANDRA-1546 (with the added deadlock fix).\r\n\r\n4. Brought over implementation written earlier into this patch. Adds a stage and task that does \"repair on write\".\r\n\r\nWe've also refreshed the design doc to reflect these changes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-11-17T00:58:34.808+0000","updated":"2010-11-17T00:58:34.808+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12932750","id":"12932750","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"updated design doc to reflect refactored design:\r\nno algorithm change\r\nimplemented refactored","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-17T01:02:13.222+0000","updated":"2010-11-17T01:02:13.222+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12932917","id":"12932917","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Thanks for answer. I haven't had the time to have a look at the new patch, sorry, but I will as soon as time permits. A few answers to your answers tho.\r\n\r\n{quote}\r\n1. Is this the kind of IP address situation you are referring to?  A cluster of nodes: A (127.0.0.1), B (127.0.0.2), and C (127.0.0.3) have been running and are not fully consistent. They're brought back up w/ shuffled ips, like so: A (127.0.0.2), B (127.0.0.3), and C (127.0.0.1). A has the most up-to-date view of writes to 127.0.0.1, however, C is now in-charge of writes to 127.0.0.1. i.e. any writes to A that C had not seen, previously, have now been lost.\r\n{quote}\r\n\r\nThat's one scenario but I think you'll actually be very lucky if in such scenario, you only \"loose a few non replicated updates\". There is much (much) worst.\r\n\r\nSuppose you have your 3 nodes cluster (and say RF=2 or 3). Node A accepts one or more counter update and its part of the counter is say 10. This value 10 is replicated to B (as part of \"repair on write\" or read repair). On B, the memtable is flushed, this value 10 is in one of B sstable. Now A accepts more update(s), yielding the value to say 15. Again, this value 15 is replicated.  At this point, the cluster is coherent and the value for the counter is 15.  But say somehow the cluster is shutdown, there is some IP mixup and B is restarted with the ip that A had before. Now, any read (on B) will reconcile the two values 10 and 15, merge them (because it now believe that these are updates it has accepted and as such are deltas, while they are not) and yield 25. Very quickly, replication will pollute every other node in the cluster with this bogus value and compaction will make it permanent.\r\n\r\nPotentially, any change of a node IP that uses an IP that has been used for another node at some point (even a decommissioned one) can be harmful (and dramatically so), unless you know that everything has been compacted nice and clean.\r\n\r\nSo while I agree that such change of IPs are not supposed to be the norm, it can, and so it will, happen (even in test environment, where one could be less prudent and thus such scenario are even more likely to happen, it will pissed off people real bad).\r\n\r\nI'm strongly opposed (and will always be) to any change to Cassandra that will destroy data because someone in the op team has messed up and hit the enter key a bit too quickly. But that's just my humble opinion and its open source, so anybody else, please chime in and give yours.\r\n\r\n{quote}\r\nA fix with UUIDs is possible but it's beyond the scope of this jira.\r\n{quote}\r\n\r\nBecause of what's above, I disagree with this. Even more so because I'm not at all convinced that this could be easily fixed afterwards.\r\n\r\n{quote}\r\n2. Valid issue, but it does sound like something of an edge case. For a first version of 1072 it seems reasonable that instructions for ops would be sufficient for this problem. If the community then still feels it's a problem we can look at how to improve the code.\r\n{quote}\r\n\r\nNot sure that's an edge case. Right now, when a node is boostrapped, repair is not run automatically at the end of the boostrap (in parts) because more failures happen quickly. Thus a good advice is to wait a bit to make sure the new node behave alright before running repair on the other nodes, to have a quick roll back if the new node doesn't behave correctly. Boostrap followed by decommission seems to me bound to happen from time to time (if someone feels like confirming/denying ?). That repair have not been run when this happens doesn't seems a crazy scenario at all either. And anyway, as for 1, the risk is to corrupt data (for the same reason, because a node will merge values that are not deltas). I don't consider that \"telling people to be careful\" is a fix. And because I don't think fixing that will be easy, I'm not comfortable with seeing that later.\r\n\r\nMore generally, the counter design is based on some values being merged (summed) together (deltas) and other being reconciled as usual based on timestamps.  This is a double-edged sword. It allows for quite nice performance properties, but it requires to be very careful not to sum two values that should not be summed. I don't believe this is something that should be done later (especially when we're not sure it can be done later in a satisfactory way).\r\n\r\n{quote}\r\n3. To resolve this issue we have borrowed the implementation from CASSANDRA-1546 (with the added deadlock fix).\r\n{quote}\r\n\r\nCool and thanks for the deadlock fix.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-11-17T11:52:15.315+0000","updated":"2010-11-17T11:52:15.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12934687","id":"12934687","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"re-based against trunk\r\n\r\nmaterial modifications:\r\n- removed counter lock from 1546\r\n- reverse order of read/write for commutative operations\r\n- race condition: may potentially miss an MT, but never double counts (compare normal: may reconcile an MT twice, but never misses)\r\n\r\nnote: the above is a more graceful race condition, than the normal code path.  however, it does make eventual consistency more eventual.\r\nfurther note: if perfect accuracy is required, a more fine-grained lock strategy should be implemented.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-23T01:27:10.588+0000","updated":"2010-11-23T01:27:10.588+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12934711","id":"12934711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I think the bootstrap/decommission problem can be left as \"don't do that\" for now.\r\n\r\nI think we do need to fix the IP/UUID issue since as Sylvain says this isn't something that's going to be easy to fix later without forcing dump/reload.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-23T02:29:04.949+0000","updated":"2010-11-23T02:29:04.949+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12935003","id":"12935003","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"body":"We understand that is an issue that should be improved, but don't think it should be a blocker to moving forward.\r\n\r\nWe at Twitter are happy with this version and can't afford to spend any more time on it. We'd like to see this committed to trunk soon, but either way we're going to be running this code indefinitely, whether or not it ever makes it into an open source release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"created":"2010-11-23T19:48:34.544+0000","updated":"2010-11-23T19:48:34.544+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12935036","id":"12935036","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=reavels","name":"reavels","emailAddress":"simon dot reavely at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Reavely","active":true},"body":"For what its worth I would like to add support to what Ryan is saying...I really, really, really want to see this in trunk soon, despite the limitations. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=reavels","name":"reavels","emailAddress":"simon dot reavely at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Reavely","active":true},"created":"2010-11-23T20:49:14.260+0000","updated":"2010-11-23T20:49:14.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12935203","id":"12935203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"We want to help, I'm just thinking this through.\r\n\r\nIt sounds like you agree that using UUIDs is the right approach long term.  (Lots of people run Cassandra on EC2 + EBS, so changing IPs the data is on is not a corner case at all there.  Or any time you restore from a snapshot...)\r\n\r\nSo if you're going to be running this patch indefinitely, is committing it knowing that we're going to fix it to use UUIDs incompatibly, actually useful to the \"get Twitter running mainline Cassandra\" goal?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-24T04:27:14.120+0000","updated":"2010-11-24T04:27:14.120+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12935421","id":"12935421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"The short answer is yes, committing this now would make it much easier for us to run mainline Cassandra. \r\nSo far our upgrades of the counting clusters have involved recreating the data from our source of truth, so once more would not be the end of the world.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-11-24T18:07:02.158+0000","updated":"2010-11-24T18:07:02.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12964568","id":"12964568","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I read through the last patch:\r\n\r\n # I think there is a \"bug\" with the repair-on-write. As written, before sending a \"repair\", it cleans the context for all the replicas it will send it to, that is all alive replicas. This will basically clean up everything (except for maybe the count of down or old (decommissioned) replicas). Again, unless I'm missing something obvious, this will basically spend its time sending empty row mutations.  For each replica, only the context of this replica should be cleaned before sending it the repair mutation for this to be useful.\r\n # Even if \"fixed\", repair-on-write doesn't help to give consistency guarantees, being (non-optionally) asynchronous. Only CL.ONE is supported for writes (which anecdotally is only checked by an assertion much too late).  I see no reason for that limitation and to me it sure sound like something we want to provide on day one.\r\n # It removes the fix of the race condition. I strongly believe correctness should be our first concern. Making the race condition less harmful is not a fix. That being said, I'm not saying the fix in 1546 cannot be improved and the locking be made more fine-grained.\r\n\r\nEven in the absence of any failure, there is no more guarantee that what CL.ONE has to offers. By giving so little guarantees, 1072 will make the counter useful to much less people that it could, and this for no clear reason. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-11-28T16:12:11.396+0000","updated":"2010-11-28T16:12:11.396+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12964786","id":"12964786","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Is this an accurate summary of the current state of 1072 and CASSANDRA-1546?\r\n\r\n1072-pro: tested in production.  Supports counters in subcolumns.\r\n\r\n1072-con: IP-based partitioning is prone to catastrophic data loss if node IPs change (which is fairly common on an EC2/EBS deployment) or on decommission-after-bootstrap-before-repair (which is fairly uncommon ime) or possibly in other scenarios as well; changing 1072 to use UUIDs instead of IPs to fix this would be a substantial undertaking.  In the worst case, there is no ConsistencyLevel guarantee higher than ONE even with repair-on-write.\r\n\r\n1546-pro: ConsistencyLevel support is built in; support for optional \"marker\" allows retry on failure as well.  \"LocalCounterColumn\" approach limits the damage that can be done by bugs compared to relying on post-transfer \"cleaning\" of non-local data. Supports node IP changes.\r\n\r\n1546-con: essentially untested.  Some known corner cases involving node movement need to be addressed.  Would require using a custom comparator to emulate counters in subcolumns.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-29T15:50:18.749+0000","updated":"2010-11-29T16:06:27.904+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965058","id":"12965058","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"body":"Yeah, that sounds like a fair summary of the situation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"created":"2010-11-30T01:26:47.465+0000","updated":"2010-11-30T01:26:47.465+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965314","id":"12965314","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"We've also tried to test 1546, internally, but at scale it's counter-specific read/write code paths add too much contention to the thread stages.\r\n\r\nConsequently, we also invested a reasonable effort into optimizing 1546: removed a deadlock, found an unnecessary lock around SST compaction.  However, ultimately, we re-did the logic in 1072 to avoid the lock strategy of 1546.  1546's additional, counter-specific read/write paths require more reasoning about how it interacts w/ the underlying system.  Whereas, 1072's extension is more limited in scope, because it only extends the basic logic of Column classes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-11-30T18:04:32.605+0000","updated":"2010-11-30T18:04:32.605+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965356","id":"12965356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"In a perfect world I would rather wait to address the remaining -cons before committing but Kelvin, Johan, and Ryan have been rebasing this for months now and I don't think it's fair to prolong that pain indefinitely, especially if we're agreeing that we don't have to preserve backwards-compatibility at the storage layer when we fix those last issues.\r\n\r\nI _would_ like to try to get to a stable client API before we commit though, for the benefit of other users as well as client authors.  There are two fairly minor points I'd like to address:\r\n\r\n- A way to batch increment a counter in a super column (would changing CounterUpdate to contain a Counter instead of a CounterColumn be all we need here?)\r\n- Remove the timestamp from CounterUpdate (but keep the struct, because we'll want to add an optional uuid context for the planned replay support). The timestamp doesn't make sense to push client-side the way ordinary write timestamps do, since the conflict resolution is much more complicated and internal, so let's generate that server side.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-30T19:20:33.503+0000","updated":"2010-11-30T19:20:33.503+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965361","id":"12965361","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Also: Jake thinks Thrift union support is limited to C++, Java, and Ruby.  Unless he's wrong, it sounds like we should change Counter to a struct with optional fields.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-30T19:26:37.405+0000","updated":"2010-11-30T19:27:03.090+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965368","id":"12965368","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tjake","name":"tjake","emailAddress":"jakers at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tjake&avatarId=12744","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tjake&avatarId=12744","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tjake&avatarId=12744","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tjake&avatarId=12744"},"displayName":"T Jake Luciani","active":true},"body":"Yes those are the three that languages that directly support it. The rest treat it like a struct with 2 optional members.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tjake","name":"tjake","emailAddress":"jakers at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=tjake&avatarId=12744","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tjake&avatarId=12744","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tjake&avatarId=12744","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tjake&avatarId=12744"},"displayName":"T Jake Luciani","active":true},"created":"2010-11-30T19:33:15.667+0000","updated":"2010-11-30T19:33:15.667+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965375","id":"12965375","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"That should be adequate then.  Thanks for the clarification.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-11-30T19:39:25.537+0000","updated":"2010-11-30T19:39:25.537+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965806","id":"12965806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"update interface:\r\n- CounterUpdate: remove timestamp\r\n- CounterMutation: added\r\n- batch_add: via CounterMutation (instead of CounterUpdate)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-01T19:20:47.793+0000","updated":"2010-12-01T19:20:47.793+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12965831","id":"12965831","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I would still made a few changes to this interface:\r\n\r\n# CounterUpdate is lacking for batch_add, a CounterMutation should be a CounterUpdate or a Deletion.\r\n# And since we don't want to expose timestamps to the client for counters, we should probably have \r\na specific CounterDeletion struct with no timestamp. For the same reason the timestamp in remove_counter\r\nshould be removed too. \r\n\r\nAbout the deletion/remove, as it turns out it doesn't really work and probably never will, in that if new increments\r\nfollow too closely a remove, the remove could be ignored. I'm fine with keeping deletions as it (it's still useful, if only to remove definitively a counter) with a documentation explaining the limitation. But knowing it has limitation, we could also decide to keep removes restricted to the remove_counter function and not including it in batch updates. In which case we can get rid of CounterMutation altogether (and avoid creating a new CounterDeletion struct).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-01T20:25:27.602+0000","updated":"2010-12-01T20:25:27.602+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12966198","id":"12966198","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"np, I thought ahead.  CounterMutation is a struct w/ 2 optional fields: Counter, and Deletion.  It basically re-writes CounterMutation as a Mutation.\r\n\r\nNot in favor of CounterDeletion w/o a timestamp, though.  Although, I do see your point, I'm a little hesitant to make it too implicit.  Granted, users have to keep in mind that it's the JVM's timestamp that matters.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-02T17:47:43.524+0000","updated":"2010-12-02T17:47:43.524+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968476","id":"12968476","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"bq. CounterMutation is a struct w/ 2 optional fields: Counter, and Deletion\r\n\r\nlooks reasonable to me.\r\n\r\nbq. Not in favor of CounterDeletion w/o a timestamp\r\n\r\nI think it's confusing from a user's perspective to have it required on delete when it is not on write.  If there's no value to letting the user provide timestamps other than the current time then let's leave it out.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-12-06T23:14:55.979+0000","updated":"2010-12-06T23:14:55.979+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968494","id":"12968494","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"API update:\r\nremoved timestamp from remove_counter and CounterDeletion","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-06T23:57:58.275+0000","updated":"2010-12-06T23:57:58.275+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968642","id":"12968642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"bq. np, I thought ahead. CounterMutation is a struct w/ 2 optional fields: Counter, and Deletion. It basically re-writes CounterMutation as a Mutation.\r\n\r\nSorry, I don't know if I was clear before but I still think there is some inconsistency between CounterMutation and CounterUpdate. We want to keep CounterUpdate so we can add an optional uuid in there when we add replay facilities. But since a CounterMutation takes a Counter and not a CounterUpdate, we won't be able to have the uuid in there, which will limit the replay mechanism to {{add}} for no good reason (I think adding the uuid to CounterMutation directly is the wrong solution because it's not clear the replay will apply to deletions, plus I think this would be more confusing anyway).  What I'm proposing is simply to have\r\n{noformat}\r\n  struct CounterMutation {\r\n      1: optional CounterUpdate counter,\r\n      2: optional CounterDeletion deletion,\r\n  }\r\n{noformat}\r\n\r\nAnother (very minor) remark is that the comment for CounterUpdate is outdated (mentions the timestamp).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-07T09:29:57.369+0000","updated":"2010-12-07T09:29:57.369+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968822","id":"12968822","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Ah, I see.  Good point.\r\n\r\nLet me work that out.  We'll need to support SC mutation, as well, which CounterUpdate doesn't support.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-07T17:08:40.221+0000","updated":"2010-12-07T17:08:40.221+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968832","id":"12968832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"So, the challenge is that I mirrored the mutation interface for counters.\r\n\r\nI have two proposals that I'd like your opinion on:\r\na) add an optional uuid field to CounterColumn, or\r\nb) add an optional uuid field to CounterMutation that covers the whole mutation.\r\n\r\n(b) is not very fine-grained.  However, if a batch_add call fails, the client should retry the whole batch mutation.  ntm, uuids are specific to a given counter, so there won't be any fear of collisions across keys.  Although, if a batch mutation were to update the same key twice (w/in its update_map), the mutation will have to be collapsed at some point.\r\n\r\nnote: if we go w/ (a), then CounterUpdate should be refactored out into just a CounterColumn.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-07T17:22:16.913+0000","updated":"2010-12-07T17:22:16.913+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12968955","id":"12968955","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Hum indeed. In theory I think I prefer (a). It \"feels\" better and it is indeed more fine grained (and we won't have to care about what to do if a batch_add update multiple times the same counter, though it's not really a big problem). The only downside is that we return a CounterColumn from a get and we will never fill the uuid in that situation (even if the user provides one on add). It's probably ok since the uuid will be optional but still, this mean that for a CounterColumn c that use a uuid, we won't have c = get(add(c)), which may be slightly surprising to users at first.\r\n\r\nDespite that, I still think that my own preference goes to (a) (since I don't see any other clearly better alternative on the top of my hat). And I agree that CounterUpdate could go away then. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-07T20:34:31.660+0000","updated":"2010-12-07T20:34:31.660+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12969050","id":"12969050","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Ok, I'll work out (a) and remove CounterUpdate.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-07T22:33:21.892+0000","updated":"2010-12-07T22:33:21.892+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12969068","id":"12969068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"api update: replace CounterUpdate w/ CounterColumn (allow optional uuid field to be added to CounterColumn)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-07T23:04:45.569+0000","updated":"2010-12-07T23:04:45.569+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12970489","id":"12970489","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Look goods, but I wasn't able to apply the last patch on trunk (a try against 0.7 wasn't more successful). Could you rebase please ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-11T18:00:00.216+0000","updated":"2010-12-11T18:00:00.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971090","id":"12971090","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"rebased against trunk@0f89b78a9dd6a89cf56e0828c16f8c1673c83f96\r\n\r\nfixed a regression: CounterColumn needs to override deepCopy()","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-13T23:58:55.676+0000","updated":"2010-12-13T23:58:55.676+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971712","id":"12971712","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Thanks for the rebasing. A few comments/remarks:\r\n  # add and batch_add should throw an InvalidRequestException if CL != CL.ONE.\r\n    Right now this is checked by an assert in StorageProxy which is far too\r\n    late.\r\n  # Why doesn't the code really stuff the partitionedCounter inside the column\r\n    value ? Keeping the value and the partionedCounter aside seems wasteful. It\r\n    wastes space (the information is stored twice) and it wastes cpu (the\r\n    total is recomputed each time the context is modified, in particular after\r\n    each call to reconcile, while in practice is would be enough to compute it\r\n    just before returning the final value to the client). I admit the cpu part\r\n    is not so clear as if a counter doesn't change, we avoid recomputing the\r\n    value on each read by keeping it aside. I still think this would be a win\r\n    to no keep the pre-computed value. And anyway, I find this juggling\r\n    between the value and the partionedCounter adds clutter and is error-prone.\r\n  # That's not really a remark on the patch itself, but the patch includes the\r\n    fix for CASSANDRA-1830, so I think we'd better commit the #1830 first and\r\n    rebase this afterwards.\r\n\r\nA few other more minor remarks:\r\n  # Renaming repair_on_write to replicate_on_write would make me happy, in\r\n    that I do hope we can later improve this mechanism so that it helps\r\n    establish the usual consistency guarantees. In which case I believe\r\n    replicate_on_write will be a more precise and less confusing name.</nitpicking>\r\n  # About the repair on write, I would actually be in favor of renaming it\r\n    further in replicate_counter_on_write (or repair_counter_on_write :))\r\n    and/or disallowing it for non counter CFs. Even though there is nothing\r\n    intrinsically wrong with doing repair_on_write on non counter CFs, I think\r\n    it would be a disservice to users to let them think it could be useful\r\n    (unless it does have a use for non counter CFs, but I really don't see any).\r\n  # A few lines in ColumnSerializer do not follow the coding style.\r\n\r\nArguably those are either trivially fixable and/or more a matter of opinion\r\nthan anything. The exception being maybe the point on getting rid of keeping\r\nboth value and partionedCounter. I do believe it would be a nice change but I\r\nadmit this is not crucial and I would be OK with committing as is and keep\r\nthis as a future refactoring in the interest of having things move forward\r\n(note however that changing this will break the on disk format, but I think we\r\nagreed that we'll probably break it anyway to introduce uuids). Anyway, I\r\nwould still love to get your opinions on the issue :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-15T15:59:48.220+0000","updated":"2010-12-15T15:59:48.220+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971745","id":"12971745","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Yes, I agree that modifying the value / partitioned counter implementation is interesting.  I thought about it and my original rationale isn't as strong--optimizing for reads.  We could do a lazy optimization that keeps the calculated total, in memory, after it's been read the first time (invalidating, after an update).\r\n\r\nI think the rest of the comments are reasonable, as well.  Although, I've fixed 1830 in this patch months ago.  (I should have broken it out into a separate patch.)  And, I'd prefer replicate_on_write, because it *may* be more general.  Although, like you, I don't see a use for it beyond counters, atm.\r\n\r\nI'd be happy to fix the above after commit, though.  As long as we modify the value / partitioned counter implementation before 0.7.0 is final.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-15T17:22:33.930+0000","updated":"2010-12-15T17:22:33.930+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971752","id":"12971752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"We can't put this in a stable release series until we can commit to not breaking backwards compatibility as we fix things.  We should commit to trunk, then once everything is stablilized we can consider backporting to 0.7.x.  (Not to mention 0.7.0 is deep into the rc series, it's too late to add major features even if it were at no-known-problems.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-12-15T17:40:57.832+0000","updated":"2010-12-15T17:40:57.832+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971801","id":"12971801","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"Yes, I'm onboard w/ this.  (I'm thinking about what would need to be refactored to support the value / partitioned counter refactor.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-15T19:41:45.794+0000","updated":"2010-12-15T19:41:45.794+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12971871","id":"12971871","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"re-cut patch against trunk@e834012cd8f59d522c460e32f139cf785d1f97ee\r\nnote: apache's git repo is more up-to-date than github.com/apache\r\n\r\n1830 code refactored w/ 1072's version of the fix.  i.e. digest check broken out into a separate method.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-15T22:39:17.458+0000","updated":"2010-12-15T22:39:17.458+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12972512","id":"12972512","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"Why refactor 1830 in this patch ? To have this broken in a separate method is purely a matter a taste. Not even saying I don't prefer it, but I think we'd better keep each ticket focused. And this ticket has enough for himself :) \r\n\r\nBut that's a detail. And other than that, as said previously I'm fine with doing the refactor the partitioned counter into the column value post-commit.\r\n\r\nBefore committing I think it would be nice to do the  renaming of repair_on_write to replicate_on_write (I'm fine with just renaming the public api for now), to fix the coding style violation and to throw an InvalidRequestException early in CassandraServer when CL != CL.ONE. If only because those should be really quick to fix.\r\nBut then I'm basically +1 on this (I won't be joignable for the next two weeks so I figured I'd say it now :)).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-12-17T15:11:01.745+0000","updated":"2010-12-17T15:11:01.745+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12972628","id":"12972628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"renamed repair-on-write to replicate-on-write\r\nfixed coding style in ColumnSerializer\r\ncheck for CL.ONE in add() and batch_add()","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-17T19:59:41.256+0000","updated":"2010-12-17T19:59:41.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12972696","id":"12972696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"modified to: lazily calculate total on client read + don't serialize value to disk","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-18T00:07:05.483+0000","updated":"2010-12-18T00:12:58.008+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973335","id":"12973335","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"body":"Committing to trunk seems like a reasonable approach. Hopefully we can successfully backport to 0.7 then.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kingryan","name":"kingryan","emailAddress":"ryan at twitter dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ryan King","active":true},"created":"2010-12-20T19:53:26.665+0000","updated":"2010-12-20T19:53:26.665+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973839","id":"12973839","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lenn0x","name":"lenn0x","emailAddress":"cg at chrisgoffinet dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Goffinet","active":true},"body":"+1 this changeset. I want to commit this to trunk, and will do so. Speak now or forever hold your peace.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lenn0x","name":"lenn0x","emailAddress":"cg at chrisgoffinet dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Chris Goffinet","active":true},"created":"2010-12-21T19:37:02.695+0000","updated":"2010-12-21T19:37:02.695+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973848","id":"12973848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"I think it would be appropriate to let Johan do the honors, but it's up to you.\r\n\r\n+1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-12-21T19:48:11.137+0000","updated":"2010-12-21T19:48:11.137+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973850","id":"12973850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"body":"version of the patch, pre-value refactor.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kelvin","name":"kelvin","emailAddress":"kakugawa at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kelvin Kakugawa","active":true},"created":"2010-12-21T19:54:55.746+0000","updated":"2010-12-21T19:54:55.746+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973943","id":"12973943","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"body":"Committed CASSANDRA-1072.pre-value_refactor.patch to trunk. Thanks for all the help everyone!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=johanoskarsson","name":"johanoskarsson","emailAddress":"johan dot oskarsson at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Johan Oskarsson","active":true},"created":"2010-12-21T22:27:27.247+0000","updated":"2010-12-21T22:27:27.247+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/12973969","id":"12973969","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"body":"Integrated in Cassandra #637 (See [https://hudson.apache.org/hudson/job/Cassandra/637/])\r\n    Adds support for columns that act as incr/decr counters. Patch primarily by Kelvin Kakugawa with select parts from Chris Goffinet, Sylvain Lebresne, Rob Coli, Johan Oskarsson, Adam Samet, Jaakko Laine and more. Review by Jonathan Ellis and Sylvain Lebresne. CASSANDRA-1072.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"created":"2010-12-21T23:14:44.920+0000","updated":"2010-12-21T23:14:44.920+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12464162/comment/13033859","id":"13033859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ebullient12","name":"ebullient12","emailAddress":"choudhary_bhanu at yahoo dot co dot in","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ebullient12","active":true},"body":"I am implementing counters. Does anyone has php client for increment_test.py or any help in this direction?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ebullient12","name":"ebullient12","emailAddress":"choudhary_bhanu at yahoo dot co dot in","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ebullient12","active":true},"created":"2011-05-16T01:46:55.049+0000","updated":"2011-05-16T01:46:55.049+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-1072/votes","votes":16,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0g2tr:"}}