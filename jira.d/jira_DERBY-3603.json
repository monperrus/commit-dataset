{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12393362","self":"https://issues.apache.org/jira/rest/api/latest/issue/12393362","key":"DERBY-3603","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313142","id":"12313142","description":"","name":"10.3.3.0","archived":false,"released":true,"releaseDate":"2008-05-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2008-04-08 14:29:12.46","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23739","customfield_12310222":"1_*:*_1_*:*_741057518_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2008-04-16T16:05:48.689+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3603/watchers","watchCount":1,"isWatching":false},"created":"2008-04-08T02:14:51.171+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312876","id":"12312876","description":"","name":"10.3.2.1","archived":false,"released":true,"releaseDate":"2007-12-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-21T17:51:51.655+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"Derbys' 'IN' clause is returning different results depending on which side of a joined table\nI am doing my 'IN' comparison against. This only occurs when the number of items within the 'IN' clause is greater then 1.\n\nThis behaviour was also confirmed by Bryan Pendleton in this thread:\nhttp://mail-archives.apache.org/mod_mbox/db-derby-user/200804.mbox/%3c47FA5974.2060705@amberpoint.com%3e\n\nUsing the test database attatched the following 2 queries produce the issue:\n\nij>  select count(*) FROM spike.accounts account, spike.admin_units admin_unit,\n    spike.bookings booking\n    WHERE booking.child_id = 2 AND\n    admin_unit.admin_unit_id IN (1,21) AND\n    booking.booking_date_time_out >= 20080331000000 AND\n    booking.booking_date_time_in <= 20080406235900 AND\n    account.account_id = booking.account_id AND\n    admin_unit.admin_unit_id = account.admin_unit_id;\n1          \n-----------\n2          \n\n1 row selected\nij> select count(*) FROM spike.accounts account, spike.admin_units admin_unit,\n    spike.bookings booking\n    WHERE booking.child_id = 2 AND\n    account.admin_unit_id IN (1,21) AND\n    booking.booking_date_time_out >= 20080331000000 AND\n    booking.booking_date_time_in <= 20080406235900 AND\n    account.account_id = booking.account_id AND\n    admin_unit.admin_unit_id = account.admin_unit_id;\n1          \n-----------\n3          \n\n1 row selected\nij> \n\nThe only difference between the 2 statements is which side of a join the 'IN' clause is matched against.\n\nBryan performed some initial testing and stated the following:\n\n--------------------- SNIP ------------------------\n\nInterestingly, although the actual results do NOT contain any values\nfor admin_unit_id = 21, if I change the query to:\n\n    admin_unit.admin_unit_id IN (1)\nor\n    account.admin_unit_id IN (1)\n\nthen the problem disappears -- I get 3 rows for both queries.\n\nI also ran query plans for both the queries (in the IN (1,21) case)\nand have pasted the (simplified) query plans at the end of this message.\n\nI notice that in the case where the query gives 2 rows, which is\nwhen we specify admin_unit.admin_unit_id in (1,21), the admin_unit_id\nindex scan output in the query plan contains:\n\n           qualifiers:\nColumn[0][0] Id: 0\nOperator: =\nOrdered nulls: false\nUnknown return value: false\nNegate comparison result: false\n\nHowever, in the case where the query gives 3 rows, which is\nwhen we specify account.admin_unit_id in (1,21), the admin_unit_id\nindex scan output in the query plan contains:\n\n           qualifiers:\nNone\n\nI think it is the presence/absence of this qualifier on the query\nscan which is causing the different results in the query, as in\nthe first case we see:\n\n           Number of rows qualified=2\n           Number of rows visited=3\n\nbut in the second case we see:\n\n           Number of rows qualified=3\n           Number of rows visited=3\n\nI definitely don't have any explanation for why you are getting\nthis odd behavior; it certainly seems like a bug to me.\n\n-------------END SNIP -----------------------\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37298","summary":"'IN' clause ignores valid results, incorrect qualifier handling suspected","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eldavio","name":"eldavio","emailAddress":"david at economicoutlook dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Butterworth","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eldavio","name":"eldavio","emailAddress":"david at economicoutlook dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"David Butterworth","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10051","value":"Urgent","id":"10051"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":27,"total":27,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12586816","id":"12586816","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"This is a regression introduced between 10.3.1.4 and 10.3.2.1.\r\n\r\nI ran the queries on 10.3.1.4 with the provided database snapshot, and they both return 3 rows on 10.3.1.4, but 2 rows for 10.3.2.1.\r\n\r\n--- [10.3.1.4] snip snip ---\r\nij> select count(*) FROM spike.accounts account, spike.admin_units admin_unit,\r\n    spike.bookings booking\r\n    WHERE booking.child_id = 2 AND\r\n    admin_unit.admin_unit_id IN (1,21) AND\r\n    booking.booking_date_time_out >= 20080331000000 AND\r\n    booking.booking_date_time_in <= 20080406235900 AND\r\n    account.account_id = booking.account_id AND\r\n    admin_unit.admin_unit_id = account.admin_unit_id;\r\n1\r\n-----------\r\n3\r\n\r\n1 row selected\r\nij> select count(*) FROM spike.accounts account, spike.admin_units admin_unit,\r\n    spike.bookings booking\r\n    WHERE booking.child_id = 2 AND\r\n    account.admin_unit_id IN (1,21) AND\r\n    booking.booking_date_time_out >= 20080331000000 AND\r\n    booking.booking_date_time_in <= 20080406235900 AND\r\n    account.account_id = booking.account_id AND\r\n    admin_unit.admin_unit_id = account.admin_unit_id;\r\n1\r\n-----------\r\n3\r\n\r\n1 row selected\r\n--- snip snip ---\r\n\r\nHopefully someone with more historical insight may know what issue could have caused this sideeffect?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-08T14:29:12.460+0000","updated":"2008-04-08T14:29:12.460+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12586850","id":"12586850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> This is a regression introduced between 10.3.1.4 and 10.3.2.1.\r\n\r\nI wonder if this was caused by DERBY-3061, which was an IN list change that went into 10.3.2.1 (and 10.4) but was not in 10.3.1.4?  I don't have a lot of time on my hands right now, but perhaps I can investigate later this evening (PST).  That said, if anyone else has more cycles to investigate, that'd be great....","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-04-08T15:35:11.360+0000","updated":"2008-04-08T15:35:11.360+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12586863","id":"12586863","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Unchecking Existing Application Impact, because that means the solution will impact existing applications.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-04-08T16:00:09.849+0000","updated":"2008-04-08T16:00:09.849+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12586916","id":"12586916","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I verified on the 10.3 branch that this was indeed related to DERBY-3061 (svn 574730).  Prior to that change, both queries return \"3\".\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-04-08T18:09:44.035+0000","updated":"2008-04-08T18:09:44.035+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587030","id":"12587030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Just for completeness, I repeated Kathey's experiment on the trunk;\r\nI backed out the DERBY-3061 change and the query then returns 3 rows.\r\nSo that's more evidence that DERBY-3061's change is relevant, but I'm\r\nafraid I don't have any theories to contribute about why that is.\r\n\r\nI do notice that in DERBY-3061, the query in question has two conditions\r\non the same column, where one is clearly \"stronger\" than the other:\r\n\r\n   where mytable.id < 100\r\n   and mytable.id in ( 2, 15, 19, 20, 21, 48, 49 );\r\n\r\nHowever, in this issue, the query in question has two conditions on the\r\nsame column, where both conditions should (apparently) be of the same\r\n\"strength\", since both are (according to the DERBY-3061 changes) to be\r\ntreated as equality:\r\n\r\n   WHERE   admin_unit.admin_unit_id IN (1,21) AND\r\n      admin_unit.admin_unit_id = account.admin_unit_id; \r\n\r\nThis similarity in query structure appears to explain why the DERBY-3061\r\nchanges are relevant.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-09T01:48:13.020+0000","updated":"2008-04-09T01:48:13.020+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587138","id":"12587138","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"DERBY-3061 adds a check for \"otherPred.isInListProbePredicate()\". This again checks andNode.leftOperand.isInListProbePredicate().\r\nIt is a possibility that in this case we neglect that there is a equivalent rightOperand (it's not simply a true as might be expected) - but I haven't verified this yet.\r\n\r\nThe idea is that certain ordering of the elements effectively place the join on either the left or right side, causing it to be incorrectly evaluated if it ends up on the wrong side - which ever side that may be.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-09T10:54:39.233+0000","updated":"2008-04-09T11:05:04.630+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587193","id":"12587193","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"Ran the queries through the debugger to see if there were any obvious errors.\r\n\r\nThe only obvious difference I see is that the 2-row result query (S2), enters the procedure changed by DERBY-3061 a total of 4 times during optimization, while the 3-row result query (S3) only enters a single time. The callstacks are identical for the S2 and S3 queries in all 5 invocations. This could mean part of the IN list is optimized away in S2. If one optimizer path in S2 does not take all rows into consideration it will probably be a lot cheaper, and will be used, resulting in an incomplete result.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-09T13:56:48.535+0000","updated":"2008-04-09T14:05:05.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587196","id":"12587196","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"> the join on either the left or right side, causing it to be incorrectly evaluated if it ends up on the wrong side\r\n\r\nThat's a very intriguing theory, seems quite plausible, and worth following up. Interesting!\r\n\r\nThe other thing I was thinking about is that if I change the query to just IN (1) rather\r\nthan IN (1,21), then the problem does not occur. So I was wondering if the problem\r\nmight be that Predicate.java is now comparing the two predicates as *exactly* equal,\r\nrather than just \"equal enough for sorting during optimization\", and hence was seeing\r\nthe IN (1,21) predicate, at some point, as being redundant with the join criterion and\r\nwas optimizing it entirely away.\r\n\r\nNormally, erroneously optimizing away an entire predicate would cause us to get\r\nmore results, not fewer, but in this case the IN (1,21) predicate is effectively an \"OR\"\r\nclause and so if we lost it, or maybe lost one \"branch\" of it, the result might have\r\nfewer rows than we expected.\r\n\r\nHowever, I tried breaking the \"bad\" query (the one that returns 2 rows) into 2 queries, \r\none with IN (1) and one with IN (21), and got the following results:\r\n - query stating IN (1): count = 3\r\n - query stating IN (21): count = 0\r\n\r\nSo rows with admin_unit_id = 21 don't appear to be relevant to the actual results of\r\nthis query. I think that probably means this theory is not worth pursuing, but I\r\nfigured I'd post it anyway in case it was useful to others.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-09T14:00:11.146+0000","updated":"2008-04-09T14:00:11.146+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587239","id":"12587239","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thanks for the investigation, Bryan and Thomas!  I was hoping to look more into this last night but was hit by a freak migraine that knocked me out early.  It's great to see that some work is still happening, though.\r\n\r\nbryan> The other thing I was thinking about is that if I change the query to just IN (1) rather\r\nbryan> than IN (1,21), then the problem does not occur. \r\n\r\nJust a quick note that when the IN list only has a single value, it is transformed into a normal equality predicate.  See InListOperatorNode.preprocess(...).  So in that case IN-list \"multi-probing\" processing, which appears to be where the underlying bug resides, does not come into play.  That could be why things work correctly in that case...\r\n\r\nthomas> It is a possibility that in this case we neglect that there is a equivalent rightOperand\r\nthomas> (it's not simply a true as might be expected)\r\n\r\nWithout having done any tracing myself, I agree with both of you: this seems worth pursuing...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-04-09T15:37:22.731+0000","updated":"2008-04-09T15:37:22.731+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587243","id":"12587243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Attaching jarred up db for easier access.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-04-09T15:45:04.435+0000","updated":"2008-04-09T15:45:04.435+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587894","id":"12587894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"Looking at the queryplans I see something quite interesting.\r\n\r\nBoth queries S2 and S3 end up with the same query plan. The top looking like this:\r\n\r\n                              Scalar\r\n                                    |\r\n                                 PRN\r\n                                    |\r\n                     NestedLoop ExistsJoin\r\n                              /                     \\\r\nNestedLoopExistsJoin        IndexScanResultSet\r\n   /         \\                                          |\r\n...           ...                                      ...\r\n\r\nThe interesting stuff happens in the lower, right-hand IndexScanResultSet (let's call it ISR1)\r\n\r\nIn the correct 3-row query S3, ISR1 sees 3 rows and qualifies 3 rows.\r\nIn the incorrect 2-row query S2, ISR1 seens 3 rows, but only qualifies 2 of them.\r\n\r\nSo for S2, this becomes\r\n                              Scalar\r\n                                 (\"2\")\r\n                                    |\r\n                                 PRN\r\n                               (2 rows)\r\n                                    |\r\n                     NestedLoop ExistsJoin\r\n                    (3 rows L, 2 rows R)\r\n                              /                     \\\r\nNestedLoopExistsJoin        IndexScanResultSet\r\n(3 rows L, 3 rows R)             (sees 3 rows, qualifies 2 rows)\r\n   /         \\                                          |\r\n...           ...                                      ...\r\n\r\nThe query plan for both S2 and S3 state that ISR1 is an\r\n\"Index Scan ResultSet for ADMIN_UNITS using constraint ADMIN_UNIT_ID_PK at read committed isolation level using share row locking chosen by the optimizer\".\r\n\r\nNext task would be to find out why ISR1 rejects/discards the third row in S2, and not in S3.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-11T09:17:05.388+0000","updated":"2008-04-11T09:17:05.388+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587919","id":"12587919","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"Seems my comment formatting was messed up - doesn't really matter :)\r\n\r\nIn the debugger I can see that the problem is actually located in the uppermost NestedLoopExistsJoin of the queryplan (which really is a NestedLoopJoinResultSet), having its oneRowRightSide incorrectly set to true. We are looking for the set (1,21), so the right hand side should not have a single result row in this particular case. Changing this to false in the debugger cause the query to return the correct 3 rows for S2.\r\n\r\nNext question should then be - why was oneRowRightSide incorrectly set to true?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-11T10:41:28.324+0000","updated":"2008-04-11T10:41:28.324+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12587926","id":"12587926","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"oneRowRightSide is set during code generation for NestedLoopJoinResultSet.\r\n\r\nThis happens in JoinNode.generateCore(), which ends up with the following callstack:\r\n  org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(FromBaseTable.java:4405)\r\n  org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(FromBaseTable.java:3825)\r\n  org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isOneRowResultSet(IndexToBaseRowNode.java:316)\r\n  org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isOneRowResultSet(SingleChildResultSetNode.java:531)\r\n  org.apache.derby.impl.sql.compile.JoinNode.oneRowRightSide(JoinNode.java:1691)\r\n  org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1639)\r\n  org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1555)\r\n  ...\r\n\r\nAt this point both the restrictionList and predicateList only have a single entry, forcing us to return true.\r\nSeems we missed a predicate somewhere along the path...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-11T11:06:30.477+0000","updated":"2008-04-11T11:06:30.477+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588035","id":"12588035","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"The fact that \"oneRowRightSide\" is true for the NestedLoop join does indeed appear to be important here. Good find, Thomas!  With that in mind I did some tracing of the execution path.  My findings are below.\r\n\r\nThe query I used for tracing is as follows:\r\n\r\n  select account.admin_unit_id, account.account_id,\r\n    booking.booking_id, cast (admin_unit.admin_unit_name as varchar(30))\r\n  from spike.accounts account, spike.bookings booking,\r\n  spike.admin_units admin_unit\r\n  where account.account_id = booking.account_id\r\n    and admin_unit.admin_unit_id = account.admin_unit_id\r\n    and admin_unit.admin_unit_id in (1, 21)\r\n    and booking.child_id = 2;\r\n\r\nWhen I run this query the execution plan shows a join order of:\r\n\r\n  (ACCOUNTS x BOOKINGS) x ADMIN_UNITS\r\n\r\nThat is, we join ACCOUNTS and BOOKINGS to get a row R, then for each row R from that join, we join it (R) with a row from ADMIN_UNITS.  Due to the presence of the IN list the optimizer chooses to do multi-probing on ADMIN_UNITS, which means the probe predicate that represents \"admin_unit.admin_unit_id IN (1, 21)\" becomes the start and stop key.  Since we only allow a single start/stop key for any column, the join predicate between ACCOUNTS and ADMIN_UNITS is relegated to being a store qualifier.  This is notable for two reasons: 1) this explains the additional qualifier seen by Bryan in the query plan, and 2) as seen below, this qualifier is what causes the \"oneRowRightSide\" variable to get set to TRUE for ADMIN_UNITS.\r\n\r\nAlso note: before the change for DERBY-3061 the optimizer always sorted the join predicate as \"stronger\" than the probe predicate, and thus always chose the join predicate as the start/stop key.  That in turn meant that the probe predicate, which can only be used for probing if it is the start/stop key, was \"reverted\" back to a normal IN list qualifier.  So the problem described below did not show up.  But with DERBY-3061 the probe predicate and the join predicate have the same \"strength\" and thus the optimizer is free to use either one as the start/stop key. In this example it chooses the probe predicate.\r\n\r\nAll of that said, let's take a step back and note that the join between ACCOUNTS and BOOKINGS returns three rows:\r\n\r\nselect account.admin_unit_id, account.account_id, booking.booking_id\r\n from spike.accounts account, spike.bookings booking\r\n where account.account_id = booking.account_id\r\n and booking.child_id = 2;\r\n\r\nADMIN_UNIT&|ACCOUNT_ID |BOOKING_ID\r\n-----------------------------------\r\n1          |10         |1\r\n1          |10         |3\r\n1          |10         |4\r\n\r\nSo now, for *each* of the above three rows we want to fetch the matching row from ADMIN_UNITS.  So far so good.\r\n\r\nThe \"oneRowRightSide\" variable that Thomas mentioned comes into play because the optimizer thinks that for every outer row, i.e. for each of the three rows shown above, we will have at MOST one matching row from ADMIN_UNITS.  At first I thought this was incorrect--but upon further inspection it turns out be true.  The optimizer deduced this because the predicate refers to a primary key column, which has to be unique. So when we try to fetch a row such that the ADMIN_UNIT_ID column of ADMIN_UNITS equals some value, we will get at most one row back.  And since we have the join predicate as a store qualifier (mentioned above), we know that we _will_ in fact be trying \"to get a row such that the ADMIN_UNIT_ID column of ADMIN_UNITS equals some value\", where \"some value\" will be the ADMIN_UNIT_ID column from the intermediate join table shown above. (Note: the intermediate join table doesn't actually exist, it's just shown as such for discussion).\r\n\r\nSo at this point things are still working as expected.  We'll take the first row from the intermediate join, i.e. \"(1, 10, 1)\", and we'll do two things.  First we'll get the \"next\" probe value in the list of values.  Since the probe list is \"(1, 21)\", the next value is \"1\".  Second, we will see if there is a row in ADMIN_UNITS such that: \r\n\r\n  a) the ADMIN_UNIT_ID column of the row equals the current probe\r\n     value, which is \"1\", AND\r\n\r\n  b) the ADMIN_UNIT_ID column of the row equals the ADMIN_UNIT_ID of\r\n     the outer row, which is \"(1, 10, 1)\".\r\n\r\nSince both of these conditions are true, we'll return the first row as expected.  So our result at this point is:\r\n\r\nADMIN_UNIT&|ACCOUNT_ID |BOOKING_ID\r\n-----------------------------------\r\n1          |10         |1\r\n\r\nNow we attempt to fetch the \"next\" row from ADMIN_UNITS that matches the outer row \"(1, 10, 1)\".  But as mentioned earlier, the NestedLoop result set that would do so has \"oneRowRightSide\" set to TRUE.  This means that the NestedLoop _knows_ it will not find any more rows in ADMIN_UNITS that satsify conditions \"a\" and \"b\" shown above.  So instead of going to the table, >>> it just QUITS the scan <<<.  See the following in NestedLoopJoinResultSet:\r\n\r\n        if (oneRowRightSide && returnedRowMatchingRightSide)\r\n        {\r\n            rightRow = null;\r\n            returnedRowMatchingRightSide = false;\r\n        }\r\n\r\nSo we quit the inner scan of ADMIN_UNITS, which leads us to get the next \"outer\" row from the intermediate join rows shown earlier.  I.e.  we'll now set our outer row to be \"(1, 10, 3)\".  Then we'll execute:\r\n\r\n        if (leftRow == null)\r\n        {\r\n            closeRight();\r\n        }\r\n        else\r\n        {\r\n            rowsSeenLeft++;\r\n            openRight();\r\n        }\r\n\r\n\"leftRow\" here is the same as \"outer\" row, so it is \"(1, 10, 3)\" at this point.  Since it's not null we'll re-open the scan on ADMIN_UNITS, per the \"else\" branch.  Then, similar to what we did with the first outer row, we'll get the \"next\" probe value in the list of values for ADMIN_UNITS.\r\n\r\nBut this is where the problem occurs.  When we \"quit\" the scan in the above IF statement we left the MultiProbe result set in the middle of a scan.  So when we make the call to re-open the scan, we need to RESET the probing state.  But the code in MultiProbeTableScanResultSet does not currently do that.  More on that below.\r\n\r\nFor the current codeline we do *not* reset the probe scan, and thus the next probe value we see is \"21\", from the list (1, 21).  With that we will then try to get a row from ADMIN_UNIT_ID such that:\r\n\r\n  a) the ADMIN_UNIT_ID column of the row equals the current probe\r\n     value, which is >>> \"21\" <<<, AND\r\n\r\n  b) the ADMIN_UNIT_ID column of the row equals the ADMIN_UNIT_ID of\r\n     the outer row, which is \"(1, 10, 3)\".\r\n\r\nBut ADMIN_UNITS does not contain any rows which satisfy condition \"a\", so we will not return a row. Having no row from ADMIN_UNITS, we go on to fetch the next \"outer\" row from the intermediate join table, meaning we end up with \"(1, 10, 4)\".  So we'll use that outer row and do what we did with the others: i.e. First we'll get the next probe value in the list of values.  The logic in MultiProbeTableScan result set sees that we have exhaused the probe list at this point, so *NOW* it RESETS the probing state.  After that it gets the \"next\" probe value, which is the first value in the list (again), and thus we end up with a probe value of \"1\".  Second, we will see if there is a row in ADMIN_UNITS such that:\r\n\r\n  a) the ADMIN_UNIT_ID column of the row equals the current probe\r\n     value, which is \"1\", AND\r\n\r\n  b) the ADMIN_UNIT_ID column of the row equals the ADMIN_UNIT_ID of\r\n     the outer row, which is \"(1, 10, 4)\".\r\n\r\nSince both of these conditions are true, we'll return the row as expected.  So our result at this point is:\r\n\r\nADMIN_UNIT&|ACCOUNT_ID |BOOKING_ID\r\n-----------------------------------\r\n1          |10         |1\r\n1          |10         |4\r\n\r\nAnd that's how the query ends--missing a row.\r\n\r\nSo what's going on with MultiProbeTableScanResultSet?  There are some comments in the \"reopenCore()\" method of that class which explain a) why we do NOT reset the probe state in some cases, and b) why we DO reset the probe state in others.  For reference the comment is:\r\n\r\n     /* There are two scenarios for which we reopen this kind of scan:\r\n      *\r\n      *   A - The first is for join processing.  In this case we have\r\n      * a(nother) row from some outer table and we want to reopen this\r\n      * scan to look for rows matching the new outer row.\r\n      *\r\n      *   B - The second is for multi-probing.  Here we want to reopen\r\n      * the scan on this table to look for rows matching the next value\r\n      * in the probe list.\r\n      *\r\n      * If we are reopening the scan for scenario A (join processing)\r\n      * then we need to reset our position within the probe list.\r\n      * If we are reopening the scan for scenario B then we do *not*\r\n      * want to reset our position within the probe list because that\r\n      * position tells us where to find the next probe value.\r\n      *\r\n      * The way we tell the difference between the two scenarios is\r\n      * by looking at our current position in the probe list (i.e. the\r\n      * value of probeValIndex): if our current position is beyond the\r\n      * length of the probe list then we know that we are reopening the\r\n      * scan for scenario A.  Or put another away, we should never get\r\n      * here for scenario B if probeValIndex is greater than or equal\r\n      * to the length of the probe list.  The reason is that the call\r\n      * to reopenCore() for scenario B will only ever happen when\r\n      * moreInListVals() returns true--and in that case we know that\r\n      * probeValIndex will be less than the length of the probeValues.\r\n      */\r\n\r\nThis comment states one thing and assumes another. First it states (correctly) that if our current position is beyond the length of the probe list then we must be seeing scenario A.  It then goes on to assume (incorrectly) that if the current position is LESS than the length of the probe list we must be seeing scenario B.  It turns out that this is *NOT* true.  The reason it is not true is because of the \"oneRowRightSide\" processing described above: when that flag is set to true we quit the scan early, meaning that the current probe position will in fact be less than the length of the probe list.  Then we later come back with a(nother) row from the outer table (i.e. the intermediate join table shown above) and \"we want to reopen this scan to look for rows matching the new outer row\".  That means we need to reset the probe state: but due to the incorrect assumption, we don't reset it.  The result is incorrect results as described above.\r\n\r\nI'm attaching a first attempt at a fix, d3603_v1.patch.  With this patch applied the repro case correctly returns three rows.  The patch does not include a test case and I don't know yet if it passes the regression tests.  I'm running them now but they won't complete for several more hours.  So far the lang/subqueryFlattening test has failed with a plan diff, which may require some investigation...\r\n\r\nI'm still quite limited on time so if it is agreed that this is the correct fix (or at least, the right direction), it'd be great if someone could add the test and take it to completion--esp. if it could happen before the next 10.4 release candidate.  If no one picks it up I'll try to get to it sometime next week, but probably not in time for the second RC...\r\n\r\nRegardless of whether or not this writeup proves correct, many thanks again to Bryan and Thomas for their investigation and comments.  As no one officially assigned the issue to him/herself I spent some time investigating, as written above.  I hope I didn't step on anyone's toes in the process.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-04-11T17:16:24.715+0000","updated":"2008-04-11T17:16:24.715+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588404","id":"12588404","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Thanks Thomas and Army for all the analysis and explanation; it is *very* helpful!\r\n\r\nIf I am understanding it all correctly, then I believe this script reproduces the problem.\r\nWithout Army's patch the first 2 queries return (a) count=1, and (b) 1 row, but *with*\r\nArmy's patch all three queries return a result of 2 rows (count = 2), which I believe\r\nis the correct result.\r\n\r\nI'll see if I can turn Army's patch and this repro script into a complete patch and run\r\nthe tests, etc.\r\n\r\ndrop table a;\r\ndrop table c;\r\n\r\ncreate table a (a_id integer, c_id integer);\r\ncreate table c (c_id integer not null, primary key(c_id),\r\n                d_id integer, t_o bigint, t_i bigint);\r\n\r\ninsert into a (a_id, c_id) values (1, 1);\r\ninsert into a (a_id, c_id) values (2, 2);\r\ninsert into a (a_id, c_id) values (3, 1);\r\ninsert into c (c_id, d_id, t_o, t_i) values (1, 1, 1, 1);\r\ninsert into c (c_id, d_id, t_o, t_i) values (2, 2, 1, 1);\r\ninsert into c (c_id, d_id, t_o, t_i) values (21, 1, 1, 1);\r\n\r\nselect count(*) from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nselect a.a_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nselect a.a_id,c.d_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\n\r\nResults without the patch:\r\nij> select count(*) from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\n1\r\n-----------\r\n1\r\n\r\n1 row selected\r\nij> select a.a_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nA_ID\r\n-----------\r\n1\r\n\r\n1 row selected\r\nij> select a.a_id,c.d_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nA_ID       |D_ID\r\n-----------------------\r\n1          |1\r\n3          |1\r\n\r\nResults with the patch:\r\n\r\nij> select count(*) from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\n1\r\n-----------\r\n2\r\n\r\n1 row selected\r\nij> select a.a_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nA_ID\r\n-----------\r\n1\r\n3\r\n\r\n2 rows selected\r\nij> select a.a_id,c.d_id from a, c where a.a_id <> 2 and c.c_id in (1, 21)\r\n       and a.c_id = c.c_id;\r\nA_ID       |D_ID\r\n-----------------------\r\n1          |1\r\n3          |1\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-13T16:49:41.618+0000","updated":"2008-04-13T16:49:41.618+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588468","id":"12588468","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Attached is 'patch_with_test.diff', which expands on Army's\r\noriginal test by adding a simple reproduction script to\r\nInListMultiProbeTest.java.\r\n\r\nWith this patch in place, *almost* all the tests pass.\r\n\r\nHowever, I'm seeing a diff in subqueryFlattening.sql in\r\nthe derbyall/derbylang suite. I've attached the diff that I get.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-14T03:08:01.184+0000","updated":"2008-04-14T03:08:01.184+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588469","id":"12588469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"At a quick glance, it looks like the subqueryFlattening diff might be OK,\r\nand perhaps I just need to update the master output.\r\n\r\nBut it would be nice to have more eyes on this.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-14T03:09:18.124+0000","updated":"2008-04-14T03:09:18.124+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588492","id":"12588492","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"body":"No toes feeling stepped on Army - again an excellent writeup!\r\n\r\nI agree with Bryan that the subqueryFlattening.diff seems OK - it does produce the correct results but the filtering seems to happen at slightly different levels. I'll give the patch a spin too.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thomanie","name":"thomanie","emailAddress":"thomas dot nielsen at sun dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas Nielsen","active":true},"created":"2008-04-14T06:41:17.456+0000","updated":"2008-04-14T06:41:17.456+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588591","id":"12588591","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"The 2 queries in subqueryFlattening.sql which get the different runtime statistics are:\r\n\r\nSELECT count(ID) FROM DOCS WHERE ID <> ANY (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) );\r\nand\r\nSELECT count(ID) FROM DOCS WHERE ID > ANY (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) );\r\n\r\nThe queries get the correct final results, and the overall shape of the query\r\nplans is the same, but the precise details of which rows are processed\r\nat what stage of the query plan changes slightly.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-14T14:27:06.544+0000","updated":"2008-04-14T14:27:06.544+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12588661","id":"12588661","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thank you very much for picking this one up, Bryan.  I greatly appreciate it.\r\n\r\nOn the subqueryFlattening.diff:\r\n\r\nTo see why the diff occurs, I stepped through the following exercise.  I did not actually trace through the code, but I walked through what I *think* should be happening and it seems to have explained the diff...\r\n\r\nAt the time of the statements in question the data in the DOCS and COLLS tables is as follows:\r\n\r\nDOCS: ID (VARCHAR) =>\r\n  ('124'), ('24'), ('25'), ('27'), ('36'), ('567')\r\n\r\nCOLLS: ID (VARCHAR), COLLID (SMALLINT) =>\r\n  ('123', 2), ('124', -5), ('24', 1), ('26', -2), ('36', 1), ('37', 8)\r\n\r\nNow assume the query in question is:\r\n\r\n  SELECT count(ID) FROM DOCS\r\n    WHERE ID <> ANY (SELECT ID FROM COLLS WHERE COLLID IN (-2,1))\r\n\r\nThe ANY will be flattened giving us something to the effect of:\r\n\r\n  SELECT count(ID) FROM DOCS, COLLS\r\n    WHERE DOCS.ID <> COLLS.ID AND COLLS.COLLID IN (-2, 1)\r\n\r\nThe IN list for the queries that we're talking about is (-2, 1). So per the explanation I posted on Friday, we'd end up with something like the following withOUT the change.\r\n\r\nNote: Lines preceded by \"+\" indicate that we read a row from the inner table, COLLS.  Lines preced by \"*' indicate that what we do for the line changes with the proposed patch for this issue.  Lines preceded by an \"x\" indicate that we \"filter\" a row from COLLS, meaning we read it but then we discard it.\r\n\r\n  - Get DOCS row ('124').\r\n  - Get first IN list value, -2.\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', -2).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '124'.  They\r\n    are not equal so count the '124' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('24').\r\n  * Get next IN list value, 1.\r\n  + Get row from COLLS where COLLID is 1, i.e. ('24', 1).\r\n  x See if ID column of ('24', 1) is NOT EQUAL to '24'.  They\r\n    are EQUAL so we skip the row ('24', 1) and continuing our\r\n    scan of COLLS.\r\n  + Get next row from COLLS where COLLID is 1, i.e. ('36', 1).\r\n  - See if ID column of ('36', 1) is NOT EQUAL to '24'.  They\r\n    are not equal so count the '24' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('25').\r\n  - Implicitly RESET the probe state, then get the \"next\" IN\r\n    list value, which will be -2.\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', -2).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '25'.  They\r\n    are not equal so count the '25' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('27').\r\n  * Get next IN list value, 1.\r\n  + Get row from COLLS where COLLID is 1, i.e. ('24', 1).\r\n  - See if ID column of ('24', 1) is NOT EQUAL to '27'.  They\r\n    are not equal so count the '27' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('36').\r\n  - Implicitly RESET the probe state, then get the \"next\" IN\r\n    list value, which will be -2.\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', -2).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '36'.  They\r\n    are not equal so count the '36' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('567').\r\n  * Get next IN list value, 1.\r\n  + Get row from COLLS where COLLID is 1, i.e. ('24', 1).\r\n  - See if ID column of ('24', 1) is NOT EQUAL to '567'.  They\r\n    are not equal so count the '567' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - No more rows from DOCS, so done.\r\n\r\nWe can see from this that we get a row from COLLS a total of 7 times. In the process we \"filtered\" one row out, i.e. the row ('24', 1), because that row has the same ID has a row in DOCS.  Or put in terms of the scan statistics, we have 7 \"rows seen\" and one (1) row filtered.  And the query returns a count total of 6 rows from DOCS.\r\n\r\nBut now if we do the same exercise with the patch applied, we see the following:\r\n\r\n  - Get DOCS row ('124').\r\n  - Get first IN list value, -2.\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', -2).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '124'.  They\r\n    are not equal so count the '124' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('24').\r\n  * RESET probe state, then get \"next\" IN list value, which\r\n    is -2 (again).\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', 1).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '24'.  They\r\n    are not equal so count the '24' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('25').\r\n  * RESET probe state, then get \"next\" IN list value, which\r\n    is -2 (again).\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', 1).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '25'.  They\r\n    are not equal so count the '25' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('27').\r\n  * RESET probe state, then get \"next\" IN list value, which\r\n    is -2 (again).\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', 1).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '27'.  They\r\n    are not equal so count the '27' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('36').\r\n  * RESET probe state, then get \"next\" IN list value, which\r\n    is -2 (again).\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', 1).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '36'.  They\r\n    are not equal so count the '36' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - Get DOCS row ('567').\r\n  * RESET probe state, then get \"next\" IN list value, which\r\n    is -2 (again).\r\n  + Get row from COLLS where COLLID is -2, i.e. ('26', 1).\r\n  - See if ID column of ('26', -2) is NOT EQUAL to '567'.  They\r\n    are not equal so count the '567' row from DOCS and quit the\r\n    scan of COLLS.\r\n  - No more rows from DOCS, so done.\r\n\r\nNow the total number of rows we \"see\" from COLLS is 6 instead of 7.  This is because we never fetched the row ('24', 1) from the table.  Instead, we only had to fetch the one row, ('26', -2), over and over.  Then, since we never fetched row ('24', 1) from the table we didn't have to filter it out.  So we end up with a total of 6 \"rows seen\" and 0 rows filtered. Meanwhile the query still returns a count total of 6 rows from DOCS.\r\n\r\nI didn't run through this exercise for the other cases, but I imagine (hope!) things would work out in a similar fashion...Does that seem like a reasonable explanation to you?  If so, then I think it's okay to update the master file for subqueryFlattening.sql for this issue.\r\n\r\nOh, and thanks for writing the standalone repro, as well!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-04-14T17:54:45.410+0000","updated":"2008-04-14T17:54:45.410+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12589380","id":"12589380","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Thanks Army for the clear and detailed description of the subquery processing.\r\n\r\nTo confirm it, I introduced some crude print statements into the MultiProbe\r\ncode and:\r\n - without the patch I can see it ping-ponging back and forth between -2 and 1\r\n - with the patch I can see that it simply uses the -2 row over and over,\r\n   as you suggest.\r\n\r\nBased on that evidence, and on a close read of Army's description,\r\nI'm comfortable updating the subqueryFlattening.out file.\r\n\r\nAttached is updateSubquerymaster.diff, which I believe is ready for review.\r\n\r\nI intend to commit this patch to the trunk tonight or tomorrow morning,\r\nand I'm also intending to merge it to 10.4, assuming no additional\r\nconcerns are raised via review or testing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-16T01:23:01.865+0000","updated":"2008-04-16T01:23:01.865+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12589397","id":"12589397","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Committed the change to the trunk as revision 648492.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-16T03:38:18.433+0000","updated":"2008-04-16T03:38:18.433+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12589599","id":"12589599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Committed the change to the 10.4 branch as revision 648722.\r\n\r\nI'll investigate merging this change back to the 10.3 branch as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-16T15:24:46.880+0000","updated":"2008-04-16T15:24:46.880+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12589624","id":"12589624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Resolving with fixversion 10.4.0.0 (since there is no 10.4.1.3 yet) just to get it on the list of fixed bugs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-04-16T16:05:48.665+0000","updated":"2008-04-16T16:05:48.665+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12590145","id":"12590145","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Committed to the 10.3 branch as revision 649226.\r\n\r\nUpdated fix version to reflect that.\r\n\r\nThanks again Army and Thomas for the help and reviews!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-04-17T18:46:05.759+0000","updated":"2008-04-17T18:46:05.759+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12590194","id":"12590194","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"And thanks to you, Bryan, for taking this one to completion!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-04-17T20:15:28.051+0000","updated":"2008-04-17T20:15:28.051+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12393362/comment/12590457","id":"12590457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Changed fix version from 10.4.0.0 to 10.4.1.3.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-04-18T13:56:42.233+0000","updated":"2008-04-18T13:56:42.233+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3603/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06qxr:"}}