{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12385890","self":"https://issues.apache.org/jira/rest/api/latest/issue/12385890","key":"DERBY-3310","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313771","id":"12313771","description":"build: 764942, 14/Apr/09. Voted release: 28/Apr/09. Announced: 1/May/09","name":"10.5.1.1","archived":false,"released":true,"releaseDate":"2009-04-28"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2008-02-07 16:40:14.679","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23564","customfield_12310222":"1_*:*_1_*:*_6094065565_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2008-03-20T04:52:53.485+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3310/watchers","watchCount":1,"isWatching":false},"created":"2008-01-09T16:05:07.920+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12319068","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12319068","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12388009","key":"DERBY-3395","self":"https://issues.apache.org/jira/rest/api/2/issue/12388009","fields":{"summary":"'An ON clause associated with a JOIN operator is not valid.' failure with 10.3.2.1 passes with 10.2","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12318793","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318793","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12371145","key":"DERBY-2775","self":"https://issues.apache.org/jira/rest/api/2/issue/12371145","fields":{"summary":"DataTypeDescriptor should be immutable so that multiple ValueNode referring to the same DTD do not have unexpected state changes.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12319425","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12319425","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12390220","key":"DERBY-3494","self":"https://issues.apache.org/jira/rest/api/2/issue/12390220","fields":{"summary":"Move the setup of NormalizeResultSetNode into the NormalizeResultSetNode","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12318783","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318783","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12383008","key":"DERBY-3221","self":"https://issues.apache.org/jira/rest/api/2/issue/12383008","fields":{"summary":"\"java.sql.SQLException: The conglomerate (-5) requested does not exist.\" from Derby 10.3.1.4 embedded within Eclipse 3.3 and RAD 7.0","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-21T17:51:16.309+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"The following code \n\nCREATE TABLE U (SNAME VARCHAR(32000), TNAME VARCHAR(32000), C1 BIGINT);\n-- This triggers an ASSERT (because 2 is INTEGER and not BIGINT)\nINSERT INTO U(SNAME, TNAME, C1) SELECT DISTINCT SCHEMANAME, TABLENAME, 2\n FROM SYS.SYSTABLES T JOIN SYS.SYSSCHEMAS S ON T.SCHEMAID = S.SCHEMAID;\n\ngives\n\nERROR XJ001: Java exception: 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLInteger) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLLongint): org.apache.derby.shared.common.sanity.AssertFailure'.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37353","summary":"ASSERT in MergeSort.checkColumnTypes() disallow legal type conversions","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10102","value":"Patch Available","id":"10102"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":51,"total":51,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12557301","id":"12557301","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Attaching a repro in the form of an ij-script","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-09T16:06:27.523+0000","updated":"2008-01-09T16:06:27.523+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12557571","id":"12557571","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"This issue was first seen while trying to reproduce DERBY-3221 in sane mode.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-10T09:05:49.447+0000","updated":"2008-01-10T09:05:49.447+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12557632","id":"12557632","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Marking this as a regression since it worked fine in rev 540921, and possibly later.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-10T12:52:32.763+0000","updated":"2008-01-10T12:52:32.763+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12557946","id":"12557946","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Seems like this was introduced by \r\n------------------------------------------------------------------------\r\nr554012 | djd | 2007-07-06 21:40:07 +0200 (Fri, 06 Jul 2007) | 4 lines\r\n\r\nDERBY-2775 (partial) Clarify some type handling for ResultColumn and its expression by making\r\ncallers explictly get the expression's type from the expression, rather than having\r\na method in ResultColumn that doesn't do what it indicates it did.\r\nMake VirtualColumnNode's type just refect its source node.\r\n------------------------------------------------------------------------\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-11T09:34:00.106+0000","updated":"2008-01-11T09:34:00.106+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12566679","id":"12566679","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I wonder if the assertion in MergeSort should just be removed or is there a better assertion that could be used to make sure the types are assignable?\r\nFrom MergeSort ...\r\n                if (col1.getClass() != col2.getClass())\r\n                {\r\n                    SanityManager.THROWASSERT(\r\n                        \"col1.getClass() (\" + col1.getClass() +\r\n                        \") expected to be the same as col2.getClass() (\" +\r\n                        col2.getClass() + \")\");\r\n                }\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-07T16:40:14.679+0000","updated":"2008-02-07T16:40:14.679+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12566686","id":"12566686","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Before changing the assert it would be good to understand why the types are different. I thought that if the types were different then a cast node is required to make the types the same when assigning one value to another.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-07T16:53:49.715+0000","updated":"2008-02-07T16:53:49.715+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12566832","id":"12566832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I looked a little at the change that introduced the assertion, and narrowed it to this change in VirtualColumnNode.java, specifically the override of the setType method to set  the type of the source column.\r\nhttp://svn.apache.org/viewvc/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java?p2=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&p1=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&r1=554012&r2=554011&view=diff&pathrev=554012\r\n\r\nBefore this change the types when passing through the assertion code were both SQLInteger, now one is SQLInteger and the other is SQLLongInt.\r\n\r\nI am not clear yet whether both should be SQLInteger or SQLLongInt at this point.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-07T22:51:45.160+0000","updated":"2008-02-07T22:51:45.160+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12567206","id":"12567206","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"So things seem to work ok without the assert because SQLLongint.setValue()\r\ncalls getLong() on the value it is being set from so we get a compatible value.\r\n\r\nprotected void setFrom(DataValueDescriptor theValue) throws StandardException {\r\n\r\n\t\tsetValue(theValue.getLong());\r\n\t}\r\n\r\nHere is the trace where it is called.\r\n\r\nThread [main] (Suspended (breakpoint at line 94 in SQLInteger))\t\r\n\tSQLInteger.getLong() line: 94\t\r\n\tSQLLongint.setFrom(DataValueDescriptor) line: 440\t\r\n\tSQLLongint(DataType).setValue(DataValueDescriptor) line: 490\t\r\n\tSQLLongint(DataType).normalize(DataTypeDescriptor, DataValueDescriptor) line: 662\t\r\n\tDataTypeDescriptor.normalize(DataValueDescriptor, DataValueDescriptor) line: 469\t\r\n\tNormalizeResultSet.normalizeRow(ExecRow) line: 330\t\r\n\tNormalizeResultSet.getNextRowCore() line: 189\t\r\n\tInsertResultSet(DMLWriteResultSet).getNextRowCore(NoPutResultSet) line: 127\t\r\n\tInsertResultSet.open() line: 496\t\r\n\tGenericPreparedStatement.execute(Activation, boolean, long) line: 370\t\r\n\tEmbedStatement40(EmbedStatement).executeStatement(Activation, boolean, boolean) line: 1203\t\r\n\tEmbedStatement40(EmbedStatement).execute(String, boolean, boolean, int, int[], String[]) line: 596\t\r\n\tEmbedStatement40(EmbedStatement).execute(String) line: 528\t\r\n\tij.executeImmediate(String) line: 330\t\r\n\tutilMain14(utilMain).doCatch(String) line: 522\t\r\n\tutilMain14(utilMain).runScriptGuts() line: 364\t\r\n\tutilMain14(utilMain).go(LocalizedInput[], LocalizedOutput, Properties) line: 262\t\r\n\tMain14(Main).go(LocalizedInput, LocalizedOutput, Properties) line: 215\t\r\n\tMain.mainCore(String[], Main) line: 181\t\r\n\tMain14.main(String[]) line: 56\t\r\n\tij.main(String[]) line: 71\t\r\n\r\nIs a cast still needed?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-08T21:11:42.910+0000","updated":"2008-02-08T21:11:42.910+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12567247","id":"12567247","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"In this *specific* case a cast is not needed, but I'm thinking more about the general case, so if it had been a case where conversion was needed\r\nwould the behaviour be correct?\r\n\r\nSo:\r\n   is the assert wrong because the normalize node is doing the correct thing (e.g it knows INT -> IBIGNT is a safe conversion, no cast node needed),\r\n   or is the assert correct and the normalize node is not putting in conversion code\r\n   or is the normalize node and assert not related (my guess)\r\n\r\nWe are trying to insert a value of type A  into a column of type B, but there is the additional distinct step.\r\nso the query is doing something like:\r\n\r\nsort of (rows with value of type A)  ==> insert into table with column of type B\r\n\r\nThe assert is saying that at some point some types must match during a merge sort, which seems reasonable, but this would\r\nbe in the step before the normalize (which is the insert step). So why are the types different there?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-08T23:56:13.064+0000","updated":"2008-02-08T23:56:47.970+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12567761","id":"12567761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"So for our specific case we have\r\nsort of (rows with value of type INTEGER) ==> insert into table with column of type BIGINT\r\n\r\nSo it makes sense to me that at the sort  phase, both the row and the \"template\" should be INTEGER as was the case prior to the change for DERBY-2775. Now the template column type is BIGINT and the row column type is INTEGER.  \r\nCould you explain what the template is in this context and whether you think it should be INTEGER or BIGINT at this point in the processing?\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-11T19:12:29.117+0000","updated":"2008-02-11T19:12:29.117+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12567799","id":"12567799","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"What do you mean by template, which field in which class?\r\n\r\nA template row for the store is a row that contains the correct DataValueDescriptor objects for the desired type of the row,\r\nso what it should be depends on context.\r\n\r\nE.g. *if* this is true:\r\n\r\nsort of (rows with value of type INTEGER) ==> insert into table with column of type BIGINT \r\n\r\nthen the template for the sort would have a SQLInteger,  a template for the table corresponding to the insert would have an SQLLongint.\r\n\r\nHowever, I don't know enough about the details of language to know if the sort and insert are treated as logically separate items or if they\r\nare merged in some way.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-11T20:16:54.729+0000","updated":"2008-02-11T20:16:54.729+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12568250","id":"12568250","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I was referring to the template field in the MergeSort class.\r\n\r\nIf  \"the template for the sort would have a SQLInteger,\" then I take it our pre DERBY-2775 behavior was \r\ncorrect that the template was a SQLInteger and not a SQLLongInt.\r\n\r\nIs the change for VirtualColumnNode getting its type from its source node flawed in some way?\r\nhttp://svn.apache.org/viewvc/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java?p2=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&p1=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&r1=554012&r2=554011&view=diff&pathrev=554012\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-12T17:45:31.451+0000","updated":"2008-02-12T17:45:31.451+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12568659","id":"12568659","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I think the assert code is correctly testing for what it assumes to be true - ie. that class types of the sort template will exactly match subsequent rows fed to the sort.  It may work without the assert in this case but I am not sure that will always be true.\r\nBasically the sort interface requires a \"template\" of what rows will look like when fed into the sort.  So column[N] of each row fed into the sort should be the exact same type as template[N].  \r\n\r\nOne could build a sorter that compared different types in the same column but I didn't think Derby currently required that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2008-02-13T18:35:20.134+0000","updated":"2008-02-13T18:35:20.134+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12568679","id":"12568679","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I think then we get back to my question of  whether both template and row data should be SQLInteger or both should be SQLLongint at the time of the sort.\r\n\r\nBTW this is the trace from the point where we now change the type of the sourceColumn from INTEGER NOT NULL to BIGINT.\r\nI think I need to better understand the VirtualColumnNode change and why it was made.  \r\nThread [main] (Suspended (breakpoint at line 284 in VirtualColumnNode))\t\r\n\tVirtualColumnNode.setType(DataTypeDescriptor) line: 284\t\r\n\tResultColumnList.copyTypesAndLengthsToSource(ResultColumnList) line: 1645\t\r\n\tInsertNode.bindStatement() line: 426\t\r\n\tGenericStatement.prepMinion(LanguageConnectionContext, boolean, Object[], SchemaDescriptor, boolean) line: 314\t\r\n\tGenericStatement.prepare(LanguageConnectionContext, boolean) line: 88\t\r\n\tGenericLanguageConnectionContext.prepareInternalStatement(SchemaDescriptor, String, boolean, boolean) line: 768\t\r\n\tEmbedStatement40(EmbedStatement).execute(String, boolean, boolean, int, int[], String[]) line: 607\t\r\n\tEmbedStatement40(EmbedStatement).execute(String) line: 556\t\r\n\tij.executeImmediate(String) line: 330\t\r\n\tutilMain.doCatch(String) line: 508\t\r\n\tutilMain.runScriptGuts() line: 350\t\r\n\tutilMain.go(LocalizedInput[], LocalizedOutput, Properties) line: 248\t\r\n\tMain.go(LocalizedInput, LocalizedOutput, Properties) line: 215\t\r\n\tMain.mainCore(String[], Main) line: 181\t\r\n\tMain.main(String[]) line: 73\t\r\n\tij.main(String[]) line: 59\t\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-13T19:08:28.633+0000","updated":"2008-02-13T19:08:28.633+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570696","id":"12570696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I was hoping to pick up this issue, but must admit I am quite stuck.  I am really not sure at the time of the sort whether both template and row data should be SQLInteger or SQLLongInt.  If someone could explain which and why, I might better understand my destination and be able to make some progress on the issue.  Before the DERBY-2775 both were SQLInteger but I don't know that that was correct.  It may have been wrong for both values.  Any help or hints would be greatly appreciated.\r\n\r\nThanks\r\nKathey\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-20T14:13:56.313+0000","updated":"2008-02-20T14:13:56.313+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570713","id":"12570713","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Hi Kathey,\r\n\r\nBeware, you're getting a WAG here. :) But my opinion is that\r\nSQLInteger is the correct datatype, and SQLLongInt is incorrect.\r\n\r\nI'm guessing that the overall query tree looks something like:\r\n - InsertNode\r\n    - NormalizeResultSetNode\r\n       - SelectNode / ProjectRestrictNode\r\n\r\nIt seems to me that the data being sorted is the SELECT data,\r\nand that data uses the constant 2, and so that data should have\r\nbeen sorted as simple integers.\r\n\r\nThen, the NormalizeResultSetNode should have generated\r\na CAST operation to convert the integer to a biginit when the\r\ndata is retrieved from the sorter.\r\n\r\nAnd, the VirtualColumnNodes used by the InsertNode should\r\nhave pointed to the values returned by the NormalizeResultSetNode,\r\nso it seems correct that the VCN instance that the InsertNode\r\nreferences should be working with a SQLLongInt.\r\n\r\nSo I'd suggest investigating the NormalizeResultSetNode, and\r\nwhether it is generating the proper buffering CAST operations.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-02-20T15:15:08.136+0000","updated":"2008-02-20T15:15:08.136+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570748","id":"12570748","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"VirtualColumnNode has this comment\r\n\t/* A VirtualColumnNode contains a pointer to the immediate child result\r\n\t * that is materializing the virtual column and the ResultColumn\r\n\t * that represents that materialization.\r\n\t */\r\n\tprivate ResultSetNode\tsourceResultSet;\r\n\tprivate ResultColumn\tsourceColumn;\r\n\r\n\r\nThe DERBY-2775 change overrode the setType from  ValueNode:\r\npublic void setType(DataTypeDescriptor dataTypeServices) throws StandardException\r\n\t{\r\n\t\tthis.dataTypeServices = dataTypeServices;\r\n\t}\r\n\r\nwith\r\n\r\n  public void setType(DataTypeDescriptor dtd) throws StandardException\r\n    {\r\n        sourceColumn.setType(dtd);\r\n    }\r\n\r\nDoesn't this end up incorrectly end up affecting the child result, changing it from \r\nSQLInteger to SQLLongInt?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-20T16:57:55.920+0000","updated":"2008-02-20T16:57:55.920+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570761","id":"12570761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"If the \"immediate child result\" of the InsertNode is a Normalize node,\r\nthen I think the VCN instances for the columns in the InsertNode\r\nshould have sourceResultSet pointing to a NormalizeResultSet,\r\nand sourceColumn pointing to a column in the NRS's ResultColumnList.\r\n\r\nIn that case, it seems correct for that sourceColumn to be of type longint,\r\nbecause it represents the *result* of the normalization.\r\n\r\nThat is:\r\n - the PRN should sort values with integer type, and feed them up to the NRSN\r\n - the NRS should invoke normalizeRow() to convert the int to a long\r\n - the InsertNode should pull long values from the NRS and insert them\r\n   into the target table.\r\n\r\nHowever, it looks like maybe this was the intent of the design, but\r\nnever completed? Here's a snip from a comment in NormalizeResultSet.java:\r\n\r\n        * Normalize a row.  For now, this means calling constructors through\r\n        * the type services to normalize a type to itself.  For example,\r\n        * if you're putting a char(30) value into a char(15) column, it\r\n        * calls a SQLChar constructor with the char(30) value, and the\r\n        * constructor truncates the value and makes sure that no non-blank\r\n        * characters are truncated.\r\n        *\r\n        * In the future, this mechanism will be extended to do type conversions\r\n        * as well.  I didn't implement type conversions yet because it looks\r\n        * like a lot of work, and we needed char and varchar right away.\r\n\r\nAs I said before, though, I'm just guessing. It would be good to have some more\r\neyes and thoughts on how this is supposed to behave.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-02-20T17:17:12.911+0000","updated":"2008-02-20T17:17:12.911+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570848","id":"12570848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thank you so much Bryan for your help with this issue.\r\nI am a bit of a novice in this area so forgive if my questions\r\nare basic.  You said:\r\n- the PRN should sort values with integer type, and feed them up to the NRSN\r\n - the NRS should invoke normalizeRow() to convert the int to a long\r\n - the InsertNode should pull long values from the NRS and insert them\r\n   into the target table. \r\n\r\nand also said in an earlier comment.\r\n>So I'd suggest investigating the NormalizeResultSetNode, and\r\nwhether it is generating the proper buffering CAST operations. \r\n\r\nIf the sort happens before normalization, how could CAST operations in \r\nNormalizeResultSetNode  have an effect on the sort?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-20T22:02:07.634+0000","updated":"2008-02-20T22:02:07.634+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570893","id":"12570893","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"By itself, CAST operations in NormalizeResultSet would not fix\r\nthe sort problem you are seeing, I agree. \r\n\r\nMy comments are with respect to your earlier question:\r\n> I am really not sure at the time of the sort whether both template and row data \r\n> should be SQLInteger or SQLLongInt. If someone could explain which and why\r\n\r\nI think I am trying to propose a two-part theory:\r\n1) at the time of the sort, both template and row data should be SQLInteger.\r\n2) Since the Insert requires a SQLLongInteger, I think the conversion from\r\nInt to LongInt should occur in NormalizeResultSet, rather than in the sort.\r\n\r\nSo working on NormalizeResultSet by itself would be only part of the solution,\r\nit still would also be necessary to change things so that the sort doesn't see\r\nthe type mismatch.\r\n\r\nDoes that make more sense?\r\n\r\nthanks,\r\n\r\nbryan\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-02-20T23:57:14.642+0000","updated":"2008-02-20T23:57:14.642+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12570901","id":"12570901","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Bryan, that makes sense to me.  My primary focus \r\nis to change the sort so it doesn't see the type mismatch.\r\n\r\nFrom what you say, the change to VirtualColumnNode \r\nhttp://svn.apache.org/viewvc/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/VirtualColumnNode.java?p2=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&p1=%2Fdb%2Fderby%2Fcode%2Ftrunk%2Fjava%2Fengine%2Forg%2Fapache%2Fderby%2Fimpl%2Fsql%2Fcompile%2FVirtualColumnNode.java&r1=554012&r2=554011&view=diff&pathrev=554012\r\nshould not have affected the sort phase, but clearly it did.\r\n\r\nI think it would help a lot to understand why this change was made.  Dan could you elaborate?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-21T00:14:18.934+0000","updated":"2008-02-21T00:14:18.934+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571003","id":"12571003","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Perhaps this modified repro better illustrates that the sort should\r\nuse SQLInteger and not SQLLongint in the original repro:\r\n\r\nij> create table d3310 (x bigint);\r\n0 rows inserted/updated/deleted\r\nij> insert into d3310 select distinct * from (values 2.0, 2.1, 2.2) v;\r\nERROR XJ001: Java exception: 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLDecimal) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLLongint): org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\r\nIf the cast to BIGINT happened in or before the sort, the above insert\r\nstatement might end up inserting a single row instead of three rows,\r\nsince the values would no longer be distinct.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-02-21T10:41:05.279+0000","updated":"2008-02-21T10:41:05.279+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571069","id":"12571069","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"For the rationale to the change to VirtualColumnNode (554012) \r\n\r\nFrom the description of VirtualColumnNode it is a representation of a base column from a view or a table in another part of a query.\r\nIf this is the case then the type of the VirtualColumnNode must be the type of the underlying column. It's role is not as a type\r\nchanger. If it is meant to have that role as well, which would seem to overload its purpose, then that should be clearly documented in the class.\r\nI think keeping the roles of the various nodes to be clear and simple is the best approach.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-21T15:19:12.593+0000","updated":"2008-02-21T15:19:12.593+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571209","id":"12571209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks again everyone for the help.  \r\nIn InsertNode.bindStatement we have:\r\n\t\t\tresultSet = resultSet.genNormalizeResultSetNode(resultSet, false);\r\n\t\t\tresultColumnList.copyTypesAndLengthsToSource(resultSet.getResultColumns());\r\n\r\n\r\nResultSetNode.genNormalizeResultSetNode makes a shallow copy of the resultColumnList and\r\n replaces the expressions with VirtualColumnNodes which still point at the source column:\r\nSo ultimately we hit this line in ResultColumnList.copyTypesAndLengthsToSource \r\n\r\n\tsourceRC.getExpression().setType(resultColumn.getTypeServices());\r\n\t\t\r\nwhich ends up changing the underlying source column type with the new setType method.\r\n\r\nAs an experiment, I tried commenting that  line in copyTypesAndLengthsToSource \r\nout, to find out why it is needed and I found that suites.All and derbyall  passed with the line \r\ncommented out as did the repro for this issue.  I wonder if/why it is needed.\r\n\r\nBelow is the experimental patch:\r\nIndex: java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java\r\n===================================================================\r\n--- java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java (revision 629575)\r\n+++ java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java (working copy)\r\n@@ -1642,7 +1642,7 @@\r\n                        ResultColumn sourceRC = (ResultColumn) sourceRCL.elementAt(index);\r\n                        ResultColumn resultColumn = (ResultColumn) elementAt(index);\r\n                        sourceRC.setType(resultColumn.getTypeServices());\r\n-                       sourceRC.getExpression().setType(resultColumn.getTypeServices());\r\n+                       //sourceRC.getExpression().setType(resultColumn.getTypeServices());\r\n                }\r\n        }\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-21T22:16:58.155+0000","updated":"2008-02-21T22:16:58.155+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571543","id":"12571543","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Attached is my initial attempt at fixing this issue.  I am not quite sure this is the right approach.  The fix removes the line call setType on the underlying expressions from  copyTypesAndLengthsToSource, to avoid changing the type of the source column of VirtualColumnNodes.\r\n\r\nI haven't been able to find any cases that this change affects adversely, but perhaps this is not the right approach.  Maybe the problem is that genNormalizeResultSetNode puts the VirtualColumnNodes in the normalized resultset in the first place.  Perhaps they should be CastNodes? \r\nThen perhaps copyTypesAndLengthsToSource wouldn't be necessary.\r\nAnyway I would appreciate comments on the patch and possible alternatives.\r\n\r\n\r\nJust for some historical background, I traced copyLengthsAndTypesToSource back to its origin.\r\nIt was put in to address a case that is no longer valid with Derby, but I'll put it here just in case it helps:\r\n\r\n-- the following gets an exception trying to convert '11.4' to \r\nan integer\r\ncreate table trash(c1 real check(c1 > 2));\r\ninsert into trash values '11.4';\r\n\r\n\r\nThanks \r\n\r\nKathey\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-22T19:22:16.019+0000","updated":"2008-02-22T19:22:16.019+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571557","id":"12571557","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Nice find.\r\n\r\nTo me the whole method seems very strange, why does the type of the source node need to be changed?\r\nI wonder if the whole method should be removed, as you say a CAST node might be better.\r\nChanging the type of the source node could be a potential for a huge source of bugs, if the implementation\r\nof the node is expecting its type to match its contents.\r\n\r\nOf course the existing comment in the javadoc for the method is one of those useless comments:\r\n\r\n   >>> This is useful when adding a NormalizeResultSetNode.\r\n\r\nThe missing part is *why* is it useful. An example of why I try to request good comments during code reviews,\r\nwhy is the most important part of any comment.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-22T19:42:39.853+0000","updated":"2008-02-22T19:42:39.853+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571618","id":"12571618","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Dan for looking at the patch.  Do you think this is a \r\nsufficient incremental improvement to resolve the regression? \r\nthen I can file a separate issue to investgate the wisdom and future\r\nof copyLengthsAndTypesToSource.\r\n\r\nSimply  removing it lead to all sorts of unpleasantness, such as\r\nij> insert into d3310 select distinct * from (values 2.0, 2.1, 2.2) v;\r\n3 rows inserted/updated/deleted\r\nij> select * from d3310;\r\nX\r\n--------------------\r\nERROR XSDA7: Restore of a serializable or SQLData object of class , attempted to read more data than was originally stor\r\ned\r\nERROR XJ001: Java exception: ': java.io.EOFException'.\r\nij> exit;\r\n\r\nI am going to attach a diff file of the original change that inserted the method.\r\nI am not sure I understand all the code that was there before but I think\r\nit was perhaps superior to the fix.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-22T22:19:50.307+0000","updated":"2008-02-22T22:19:50.307+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571624","id":"12571624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"> Do you think this is a sufficient incremental improvement to resolve the regression? \r\n\r\nIn my opinion not at the moment, I'm uncomfortable with fixes that can't be explained. At the moment it's a case\r\nof :\r\n   - if I do this then it appears to work but I don't know why.\r\n\r\nIt's good that you've found the likely source of the problem, but it's just a starting point.\r\nI'll spend some time trying to understand what that method is trying to do, it probably has to\r\ndo with some comments in ResultSetNode.genNormalizeResultSetNode:\r\n\r\n  \t * Put a NormalizeResultSetNode on top of the specified ResultSetNode.\r\n\t * ColumnReferences must continue to point to the same ResultColumn, so\r\n\t * that ResultColumn must percolate up to the new PRN.\r\n\r\nNot sure what that means exactly, but it seems related.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-22T22:41:46.819+0000","updated":"2008-02-22T22:41:46.819+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571629","id":"12571629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"ResultSetNode.genNormalizeResultSetNode() is a little strange:\r\n\r\nIts purpose is to push a normalize result set node on-top of a ResultSetNode.\r\n\r\nThe passed in child node is always the node is actually invoked on, so it's always operating on this.\r\n(I'll attach a simple patch for that, it simplifies the code a little, otherwise it appears the method is operating on\r\ntwo result set nodes instead of just itself.\r\n\r\nWhat's strange to me is that even though it is wrapping itself with a normalize node, the code ends up modifying\r\nits own resultColumns. A normal, expected pattern for such a situation is that the node to be wrapped would\r\nbe unmodified by pushing a normalize node on top of it. This could be related to this issue, the source nodes and\r\ntarget nodes might be being mixed up.\r\n\r\n[sorry if this appears unclear, it's just something I noticed and wanted to quickly throw out there]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-22T22:57:28.495+0000","updated":"2008-02-22T22:57:28.495+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571637","id":"12571637","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"[more rambling]\r\nThe pattern of modifying the node being wrapped when wrapping it seems a common theme in ResultSetNode:\r\n\r\n  genProjectRestrictForReordering & genProjectRestrict also do it.\r\n\r\nHave to say it's a very counter-intuitive coding style and likely to lead to bugs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-22T23:17:20.235+0000","updated":"2008-02-22T23:17:20.235+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571647","id":"12571647","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Looking at NormalizeResultSet I now see that cast nodes are not needed. NormalizeResultSet performs type\r\nconversions itself without any need for cast nodes.\r\n\r\nIt needs a set of DataTypeDescriptors that represent the intended types. SO I'm guessing the layout should be\r\nsomething like to say convert our INT into a  BIGINT\r\n\r\nNormalizeNode\r\n    ResultColumn(BIGINT) -> VirtualColumnNode (??) -> A (below)\r\n\r\n    source result set node\r\n         A - ResultColumn (INT) -> constant (INT)\r\n\r\n\r\nThat's a rough guess, but I think it's beginning to show why the fix works. I think without the change\r\nthe type of A would be set to BIGINT and with the change it would remain at INT.\r\n\r\nNot saying I fully understand it yet, but just throwing more info out there from looking at the code.\r\n\r\n[edit to have conversion (INT TO BIGINT) correct]\r\n  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-22T23:59:18.020+0000","updated":"2008-02-23T00:06:31.379+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571652","id":"12571652","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"Cleanup of ResultSetNode.genNormalizeResultSetNode() so that it always operates in itself (ie. it returns a NormalizeResultSetNode that wraps itself. This was the usage of the method in every case, thus make it the only possible behaviour to make the code clearer.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-23T00:11:02.403+0000","updated":"2008-02-23T00:11:02.403+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12571929","id":"12571929","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"[yet more rambling]\r\nA ResultSetNode has a set of ResultColumns and each ResultColumn has an expression under it.\r\n\r\nA NormalizeResultSetNode is added above a ResultSetNode (wraps it) when the type of at least one of its\r\nResultColumn does not match the type of its expression,\r\nResultColumn indicates this can be the case & I added some more comments to that.\r\n\r\nOnce the decision is made to add a NormalizeResultSetNode  there is some processing of ResultColumns and ResultColumnLists\r\nthat I haven't understood yet, this includes the call copyLengthsAndTypesToSource() that Kathey modified.\r\n\r\nSetting up a NormalizeResultSetNode  is spread over three locations, the class itself (very little, it's almost acting like a C struct),\r\nthe genNormalizeResultSetNode method and then copyLengthsAndTypesToSource. A good O-O implementation would have\r\nthe logic to create a NormalizeResultSetNode  self-contained in NormalizeResultSetNode.\r\n\r\nSince the ResultColumnList of the original ResultSetNode correctly describes the desired outcome, it's not clear to\r\nme why NormalizeResultSetNode  can't just refer to the same list and use it for its processing. They may be some chance\r\nthat this would cause recursion at some point, where a NormalizeResultSetNode  would think it needed to be wrapped\r\nin a NormalizeResultSetNode  since the types of its columns and expression don't match (i.e. when it is handled as a regular ResultSetNode).\r\n\r\nI think moving the setup of a NormalizeResultSetNode  into the class itself, so that its inputs are just the ResultSetNode to wrap\r\nwould help clear up the code, especially if comments were added indicating why certain actions were being taken.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-24T19:06:10.033+0000","updated":"2008-02-24T19:06:10.033+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12573487","id":"12573487","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"The attached patch derby-3310_remove_genNormalizeResultSetNode_diff.txt moves the contents of ResultSetNode.genNormalizeResultSetNode into NormalizeResultSetNode.init() method.  The method still copies the ResultColumnList as before.\r\n\r\nI had a harder time with getting rid of copyTypesAndLengthsToSource, so decided to wait for a second patch for removing that method. I'll post some questions about that after this patch gets committed.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-28T22:13:08.156+0000","updated":"2008-02-28T22:13:08.156+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12573800","id":"12573800","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I should probably mention that I am not convinced that moving the \r\ngenNormalizeResultSetNode code into the NormalizeResultSetNode init method\r\nmakes things much clearer.  It seems to bury the modification of the ResultSetNode\r\ndeeper IMHO.  Anyway I would appreciate a second opinion on this and review of \r\nthe patch.\r\n\r\nThanks \r\n\r\nKathey\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-29T15:56:49.346+0000","updated":"2008-02-29T15:56:49.346+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12573805","id":"12573805","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"I haven't looked at the patch yet, but I agree modifying the ResultSetNode (R) to be wrapped inside NormalizeResultSetNode (NR) would be really unclear,\r\nbut I don't think the ResultSetNode R should be modified. It's a very unnatural coding style, subject to bugs, e.g. with the code as-is any other node that thinks\r\n it is pointing to R's ResultColumns silently gets changed to be pointing to NR's ResultColumns.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-02-29T16:04:04.428+0000","updated":"2008-02-29T16:04:04.428+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12573813","id":"12573813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I think then I misinterpreted your suggestion:\r\n>Setting up a NormalizeResultSetNode is spread over three locations, the class itself (very little, it's almost acting like a C struct),\r\n>the genNormalizeResultSetNode method and then copyLengthsAndTypesToSource. A good O-O implementation would have\r\n>the logic to create a NormalizeResultSetNode self-contained in NormalizeResultSetNode.\r\n\r\nI was endeavoring to move the existing logic into NormalizeResultSetNode.  Perhaps some \r\nother first steps are more appropriate.  Any advice is appreciated.  I do feel however that\r\nI am getting further away, not closer to resolving DERBY-3310.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-02-29T16:18:15.741+0000","updated":"2008-02-29T16:18:15.741+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12574618","id":"12574618","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Unmarking patch available. It seems that it does not make sense to move the logic into NormalizeResultSetNode until we can avoid changing the underlying ResultSetNode. Dan suggested I try to make a write up of the current behaviour and what is being modified.  I will try to do that.\r\n\r\nKathey\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-03T17:33:32.413+0000","updated":"2008-03-03T17:33:32.413+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12575071","id":"12575071","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"genNormalizeResultSetNode() has this code:\r\n\t\t/* We get a shallow copy of the ResultColumnList and its \r\n\t\t * ResultColumns.  (Copy maintains ResultColumn.expression for now.)\r\n\t\t */\r\n                ResultColumnList prRCList = resultColumns;\r\n\t\tresultColumns = resultColumns.copyListAndObjects();\r\n\r\n               ... \r\n\t      Change prRCList to remove generatedGroupingColumns and add \r\n\t      VirtualColumnNodes, get NormalizeResultSetNode \r\n\r\n\r\nI wanted to understand the difference between doing this and just leaving \r\nresultColumns alone and working on the copy for prRCList  so I changed it to just\r\n                ResultColumnList prRCList = resultColumns.copyListAndObjects();\r\n       ... \r\n\t      Change prRCList to remove generatedGroupingColumns and add \r\n\t      VirtualColumnNodes, get NormalizeResultSetNode \r\n\r\nThis led to a NullPointerException in the generated code for views.sql doing a select \r\nfrom a view.\r\nCaused by: java.lang.NullPointerException\r\n        at org.apache.derby.exe.acaa7ac093x0118x781cx2bb1xffffc28339b210.e3(Unkn\r\nown Source)\r\n        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGener\r\natedClass.java:145)\r\n        ... 17 more\r\n\r\nI am not sure I understand the difference in my new code and the old and why the \r\nnew doesn't work.  If anyone has an immediate ideas that would be most helpful. \r\n I'll try to debug the NPE to see if that sheds any light.  \r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-04T17:47:42.203+0000","updated":"2008-03-04T17:47:42.203+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12575453","id":"12575453","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Unassigning myself from this issue for now while I focus on DERBY-3494 to reorganize the code. I am not sure that that is necessary to resolve this issue.  Perhaps someone has a more straight forward solution and can get this regression fixed for 10.4.\r\n\r\nStatus of the issue as I leave it is:\r\n\r\nI submitted a patch derby-3310_try1_diff.txt that resolves the issue and passes regression tests. That patch removes the change of the underlying expression of the NormalizeResultSetNode, so that it does not affect the sort.  ResultSetNode  expects the type of the column to be different from the expression in this case, so the patch seems to resolve the issue.  Dan had some concerns with the patch however, since the Normalization code is not clear, we are not sure if it is ok to remove the change of the expresion type.\r\n\r\nDan thought reorganizing the normalization code to avoid changing the underlying result set would make things clearer (DERBY-3494), so I am looking at that now.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-05T18:43:53.026+0000","updated":"2008-03-05T18:43:53.026+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12576453","id":"12576453","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Dan> I don't think the ResultSetNode R should be modified. It's a very unnatural coding style,\r\nDan> subject to bugs, e.g. with the code as-is any other node that thinks it is pointing to R's\r\nDan> ResultColumns silently gets changed to be pointing to NR's ResultColumns.\r\n\r\nAfter doing a bit of investigation for DERBY-3494, I think this \"silent update\" effect is precisely\r\n*why* ResultSetNode R is being modified.  That is, if there is some column reference pointing\r\nto R's ResultColumns and then additional nodes are generated on top of R, it appears that\r\nthose column references *must* point to the \"top\" of the newly-generated nodes instead of\r\nto R.  At least, that appears to be what execution-time logic expects (see DERBY-3494).\r\n\r\nSo the execution code _expects_ that any ColumnReference node which thinks it is pointing\r\nto R's ResultColumns _is_ silently changed to point to the NR's result columns.  It may be\r\n\"unnatural\" and \"subject to bugs\", but this particular \"side effect\" looks to be intentional.  Not\r\ngood, necessarily, but intentional...\r\n\r\nI'm not saying anything else about this particular issue (I still need to catch up on the discussion),\r\nbut I thought I'd throw that out there.  Apologies if it's irrelevant.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-03-08T00:15:08.147+0000","updated":"2008-03-08T00:15:08.147+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12577562","id":"12577562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"I did some tracing through the various compilation stages for the short reproduction provided by\r\nKnut Anders in his February 21st comment.  Attached is d3310_writeup_1.html, which is an attempt\r\nto describe my findings.  Hopefully this is helpful...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-03-11T19:07:46.828+0000","updated":"2008-03-11T19:07:46.828+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12577604","id":"12577604","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thank you Army for your detailed write up and articulating what\r\nI could not for the proposed change for this issue.  Dan given \r\nArmy's analysis, do you think there is now sufficient reasoning for\r\nthe derby-3310_try1_diff.txt change.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-11T21:13:05.616+0000","updated":"2008-03-11T21:13:05.616+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12577980","id":"12577980","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Attached is a revision of the try1 patch (derby-3310_diff.txt) that adds some comments to the changed method.  Since Army confirmed that this change the right thing to do, I would like to commit this patch to get rid of this regression for 10.4.  I welcome comments on the comments and the patch.\r\n\r\nUltimately with DERBY-3494 I would like to try to roll this method into NormalizeResultSetNode, but for this fix I think it best not to combine it with code reorg.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-12T18:59:11.779+0000","updated":"2008-03-12T18:59:11.779+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12577981","id":"12577981","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"had an extraneous file in the diff","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-12T19:04:31.426+0000","updated":"2008-03-12T19:04:31.426+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12578442","id":"12578442","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I plan to commit DERBY-3310_diff.txt this afternoon.\r\nPlease let me know if you have any concerns.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-13T18:49:14.038+0000","updated":"2008-03-13T18:49:14.038+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12578482","id":"12578482","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"It would be good to get the contents of Army's analysis into the code, rather than just hanging off a jira issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-03-13T20:38:55.127+0000","updated":"2008-03-13T20:38:55.127+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12578496","id":"12578496","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I wasn't so sure where to hang it in the code where it would make sense, especially after\r\nthe change was made,  so I added a short summary to copyTypesAndLengthsToSource \r\nand referenced the full document.  Where in the code would be a good place to put it?  I could add it as \r\npart of the commit log or ...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-13T21:18:36.218+0000","updated":"2008-03-13T21:18:36.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12578498","id":"12578498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"body":"The commit log is not the correct place.\r\n\r\nI don't know where the correct place is, but it seems to be explaining how various nodes work together etc.,\r\nso appropriate comments in the javadoc for nodes and/or their methods seems the best. I'm sure it's not just\r\na matter of taking the text and placing it in one location. It just seems a shame for the information Army worked hard\r\nto produce not to be in the most useful place.\r\n\r\nIf anyone gains understanding of any piece of code during development or bug-fixing then it's best for the community\r\nif that knowledge is kept, typically by adding comments to the code.\r\n\r\nAnother option is the language how-it-works section on the wiki, there it probably could be as a single document.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=djd","name":"djd","emailAddress":"djd at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Daniel John Debrunner","active":true},"created":"2008-03-13T21:31:27.817+0000","updated":"2008-03-13T21:31:27.817+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12580660","id":"12580660","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Resolving for 10.5 and 10.4. Thanks so much Army for your  help with this issue.  I still plan to post some form of Army's document on the Wiki.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-03-20T04:52:53.404+0000","updated":"2008-03-20T04:52:53.404+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12385890/comment/12583229","id":"12583229","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"A little late on this, but I finally got around to having a close read\r\nof Army's writeup and it seems 100% accurate to me. It's a\r\nwonderful document, and it really helped me understand how \r\nthe Normalize node works, as well as the DERBY-2775 changes interacted\r\nto exhibit this behavior.\r\n\r\nI think that the document would be quite valuable in the\r\nclass-level javadoc for NormalizeResultSetNode.java, as it\r\nreally does an excellent job of explaining how NRSN is intended to work.\r\nIt's a clear example, and quite carefully worded and thorough.\r\n\r\nI also think that the document would be quite useful in the wiki, \r\nif that proves to be easier.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-03-28T23:06:12.829+0000","updated":"2008-03-28T23:06:12.829+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3310/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06r9z:"}}