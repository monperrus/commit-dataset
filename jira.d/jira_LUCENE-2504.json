{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12467414","self":"https://issues.apache.org/jira/rest/api/latest/issue/12467414","key":"LUCENE-2504","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2010-06-19 19:57:58.817","customfield_12312323":null,"customfield_12310420":"11319","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_7180028523_*|*_5_*:*_2_*:*_327783594_*|*_4_*:*_1_*:*_63509624339","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2012-09-18T18:47:13.666+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2504/watchers","watchCount":2,"isWatching":false},"created":"2010-06-19T19:43:17.222+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"5.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-05-10T10:43:01.045+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310235","id":"12310235","name":"core/search","description":"issues with search code"}],"timeoriginalestimate":null,"description":"sorting can be much slower on trunk than branch_3x","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"25506","summary":"sorting performance regression","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":39,"total":39,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12880539","id":"12880539","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I'll dig.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-06-19T19:57:58.817+0000","updated":"2010-06-19T19:57:58.817+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12880540","id":"12880540","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"My guess is that this is caused by LUCENE-2380, but I opened a separate issue since I'm not sure.\r\nThis is the same type of JVM performance issues reported by Mike in LUCENE-2143 and myself in LUCENE-2380.\r\n\r\nSetup:\r\n  Same test index I used to test faceting: 10M doc index with 5 fields:\r\n   -  f100000_s:  a single valued string field with 100,000 unique values \r\n   -  f10000_s:   a single valued field with 10,000 unique values\r\n   -  f1000_s:   a single valued field with 1000 unique values\r\n   -  f100_s:   a single valued field with 100 unique values\r\n   -  f10_s:   a single valued field with 10 unique values\r\n\r\nURLs I tested against Solr are of the form:\r\nhttp://localhost:8983/solr/select?q=*:*&rows=1&sort=f100000_s+asc\r\n\r\nbranch_3x\r\n----------------------------------------------------------\r\n f100000_s sort only: 101 ms\r\nsort against random field: 101 ms\r\n\r\ntrunk:\r\n----------------------------------------------------------\r\n f100000_s sort only: 111 ms\r\nsort against random field: 158 ms\r\n\r\nThis is not due to garbage collection or cache effects.  After you sort against a mix of fields, the performance is worse forever... you can go back to sorting against  f100000_s only, and the performance never recovers.\r\n\r\nSystem: Ubuntu on Phenom II 4x3.0GHz, Java 1.6_20\r\n\r\nSo my guess is that this is caused by the ord lookup going through PagedBytes, and the JVM not optimizing away the indirection when there is a mix of implementations.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-19T20:05:57.979+0000","updated":"2010-06-19T20:05:57.979+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12880541","id":"12880541","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"More numbers:  Ubuntu, Java 1.7.0-ea-b98 (64 bit):\r\nf100000_s sort only: 126 ms\r\nsort against random field: 175 ms","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-19T20:11:50.275+0000","updated":"2010-06-19T20:11:50.275+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12880542","id":"12880542","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"More numbers: Windows 7:\r\njava version \"1.6.0_17\"\r\nJava(TM) SE Runtime Environment (build 1.6.0_17-b04)\r\nJava HotSpot(TM) 64-Bit Server VM (build 14.3-b01, mixed mode)\r\n\r\nf100000_s sort only: 115 ms\r\nsort against random field: 162 ms ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-19T20:18:22.513+0000","updated":"2010-06-19T20:18:22.513+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12881225","id":"12881225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Hmmm, the way FieldComparator / FieldComparatorSource work now, it doesn't seem possible to specialize based on the underlying native array type.  In order to do this, a new FieldComparator would need to be returned for each segment.\r\n\r\nOne possibility: modify setNextReader to return a FieldComparator?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-22T15:16:15.082+0000","updated":"2010-06-22T15:16:15.082+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12881251","id":"12881251","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"body":"bq. One possibility: modify setNextReader to return a FieldComparator?\r\n\r\nDo you mean Collector's setNextReader()? That doesn't make sense. Most Collectors don't deal w/ FieldComparators at all ...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"created":"2010-06-22T17:09:44.461+0000","updated":"2010-06-22T17:09:44.461+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12881277","id":"12881277","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. Do you mean Collector's setNextReader()? \r\nNo, FieldComparator.setNextReader()\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-06-22T18:13:08.648+0000","updated":"2010-06-22T18:13:08.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12881281","id":"12881281","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"body":"Ahh ok. That makes sense then :).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"created":"2010-06-22T18:20:54.363+0000","updated":"2010-06-22T18:20:54.363+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12887111","id":"12887111","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nDigging into this, finally...\r\n\r\nTo try to make a somewhat more realistic search test, I created a\r\nstandalone test (attached zip file), which runs different query types\r\n(term, phrase, OR of 2 terms, AND of 2 terms, prefix, phrase) sorting\r\nby score or by a string field (with increasing numbers of unique\r\nvalues: country (~250 values I think), and then\r\nunique10/100/1K/10K/100K/1M)).  I derive the unique fields by taking\r\nfirst N unique titles from wikipedia; the country field comes from the\r\nSortableSingleDocSource in contrib/benchmark.\r\n\r\nIt runs with 2 threads (machine has 2 cores), and each thread first\r\nshuffles the queries privately but deterministically, so that each\r\nmatching thread in the trunk & 3x tests are running query+sort in same\r\norder.\r\n\r\nI then created a Wikipedia index with first 5M docs, one optimized and\r\none not optimized (13 segments) and with 5% docs deleted, on trunk and\r\n3x.\r\n\r\nI sweep through all query+sorts 23 times (getting top 10 hits for\r\neach), using 2 threads, measuring wall clock time each time.  I\r\ndiscard first 3 results for each query+sort, and then take fastest\r\ntime of the remaining 20.\r\n\r\nJava is 1.6.0_17; I run with -server -Xmx1g -Xms1g (machine has 3G\r\nRAM); OS is Linux CentOS 5.5.\r\n\r\n*NOTE*: these results include the patch from LUCENE-2504, for both\r\ntrunk & 3.x!\r\n\r\nResults (pctg change in query time, going from 3x -> trunk) on\r\noptimized index:\r\n\r\nResults on optimized index:\r\n\r\n||Query||country||unique10||unique100||unique1K||unique10K||unique100K||unique1M||score||\r\n|<all>|{color:red}40.5%{color}|{color:red}40.6%{color}|{color:red}41.0%{color}|{color:red}40.5%{color}|{color:red}40.7%{color}|{color:green}1.6%{color}|{color:green}1.8%{color}|{color:red}2.8%{color}|\r\n|+united +states|{color:red}6.1%{color}|{color:red}6.0%{color}|{color:red}6.0%{color}|{color:red}6.6%{color}|{color:red}6.3%{color}|{color:red}0.4%{color}|{color:red}1.4%{color}|{color:green}1.7%{color}|\r\n|\"united states\"|{color:green}8.4%{color}|{color:green}8.5%{color}|{color:green}8.2%{color}|{color:green}8.1%{color}|{color:green}8.1%{color}|{color:green}9.2%{color}|{color:green}9.3%{color}|{color:green}8.7%{color}|\r\n|states|{color:red}20.3%{color}|{color:red}20.4%{color}|{color:red}20.9%{color}|{color:red}22.5%{color}|{color:red}22.5%{color}|{color:red}8.0%{color}|{color:red}8.1%{color}|{color:green}0.1%{color}|\r\n|unite*|{color:red}8.1%{color}|{color:red}8.3%{color}|{color:red}8.3%{color}|{color:red}8.6%{color}|{color:red}9.0%{color}|{color:green}2.8%{color}|{color:green}0.8%{color}|{color:green}1.2%{color}|\r\n|united states|{color:red}1.3%{color}|{color:red}1.9%{color}|{color:red}2.5%{color}|{color:red}1.8%{color}|{color:red}2.2%{color}|{color:green}2.3%{color}|{color:green}1.3%{color}|{color:green}2.2%{color}|\r\n\r\nResults on unoptimized index (w/ 5% deletions):\r\n\r\n||Query||country||unique10||unique100||unique1K||unique10K||unique100K||unique1M||score||\r\n|<all>|{color:red}25.1%{color}|{color:red}25.8%{color}|{color:red}24.9%{color}|{color:red}27.2%{color}|{color:red}26.3%{color}|{color:red}27.4%{color}|{color:red}27.3%{color}|{color:red}1.4%{color}|\r\n|+united +states|{color:red}7.8%{color}|{color:red}7.6%{color}|{color:red}7.5%{color}|{color:red}7.8%{color}|{color:red}7.6%{color}|{color:red}8.6%{color}|{color:red}8.9%{color}|{color:red}6.5%{color}|\r\n|\"united states\"|{color:green}13.4%{color}|{color:green}13.7%{color}|{color:green}13.6%{color}|{color:green}13.8%{color}|{color:green}13.4%{color}|{color:green}14.1%{color}|{color:green}13.6%{color}|{color:green}14.8%{color}|\r\n|states|{color:red}13.6%{color}|{color:red}14.3%{color}|{color:red}14.2%{color}|{color:red}15.5%{color}|{color:red}15.5%{color}|{color:red}18.6%{color}|{color:red}18.8%{color}|{color:red}1.7%{color}|\r\n|unite*|{color:red}5.8%{color}|{color:red}5.3%{color}|{color:red}5.0%{color}|{color:red}5.7%{color}|{color:red}5.3%{color}|{color:red}6.9%{color}|{color:red}6.9%{color}|{color:green}2.4%{color}|\r\n|united states|{color:red}2.3%{color}|{color:red}2.6%{color}|{color:red}1.4%{color}|{color:red}1.9%{color}|{color:red}2.5%{color}|{color:red}4.9%{color}|{color:red}6.6%{color}|{color:red}0.1%{color}|\r\n\r\nUnfortunately, the tests have highish variance (up to maybe +/- 10%),\r\nI think thanks to hotspot's unpredictability (\"java ghosts\").  EG if I\r\nchange the order in which the queries are run, the results change\r\nquite a bit.  If I run the exact same test, results change alot.  This\r\nof course makes conclusions nearly impossible... but still some rough\r\nobservations:\r\n \r\n  * Trunk is definitely slower when sorting by field; sorting by\r\n    score is roughly the same perf.\r\n\r\n  * For some reason, the unoptimized index generally takes less perf\r\n    hit than the optimized index... odd.\r\n\r\n  * Curious that phrase query is faster across the board... not sure\r\n    why.  Maybe my recent optos to PhraseQuery somehow favor flex?\r\n\r\n  * Perf loss is in proportion to how \"easy\" the query is\r\n    (AllDocsQuery is the worst; TermQuery next), which makes sense\r\n    since the slowdown is in collection.\r\n\r\nEven though the results are noisy... I still think we should try to\r\nspecialize direct access to the native array for doc->ord lookup.\r\nI'll work on that next...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-07-10T23:17:18.191+0000","updated":"2010-07-10T23:17:18.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12905008","id":"12905008","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I implemented Yonik's suggestion here: the comparator may now\r\nreturn a new segment-specific FieldComparator on each call to\r\n.setNextReader.  I fixed all FieldComparators to simply \"return this\",\r\nexcept for the TermOrdValComparator which returns a comparator\r\nspecialized to the bit-width of the packed ints doc->ord mapping for\r\nthe fixed-array (8, 16, 32) cases.\r\n\r\nThis is all quite silly: we are only doing this to \"game\" hotspot into\r\nproperly inlining/compiling what is in fact an array lookup, just\r\ncurrently hidden behind method calls in the packed ints impls.  We\r\nreally \"shouldn't have to\" do this custom source code specialization.\r\n\r\nAnd, I think a more general framework for source-code specialization\r\nis a cleaner way to minimize hotspot unpredictability (LUCENE-1594),\r\nin the future.  Maybe once we cutover to that, we can remove these\r\ncases of custom specialization in Lucene's core (the 12 private\r\ninner Collector impls in TopFieldCollector is another example).\r\n\r\nHere are the results, comparing 3.x perf to trunk w/ the attached\r\npatch -- all runs include the pending [separate] fix on LUCENE-2631:\r\n\r\nOptimized index:\r\n\r\n||Query||country||unique10||unique100||unique1K||unique10K||unique100K||unique1M||score||\r\n|<all>|{color:red}8.5%{color}|{color:red}8.5%{color}|{color:red}8.4%{color}|{color:red}8.7%{color}|{color:red}8.7%{color}|{color:red}8.4%{color}|{color:red}9.4%{color}|{color:green}10.7%{color}|\r\n|+united +states|{color:red}1.8%{color}|{color:green}0.6%{color}|{color:green}0.3%{color}|{color:green}0.4%{color}|{color:red}0.9%{color}|{color:red}0.7%{color}|{color:red}2.1%{color}|{color:green}2.9%{color}|\r\n|\"united states\"|{color:green}5.2%{color}|{color:green}5.5%{color}|{color:green}5.7%{color}|{color:green}5.2%{color}|{color:green}5.2%{color}|{color:green}4.8%{color}|{color:green}6.9%{color}|{color:green}7.1%{color}|\r\n|states|{color:red}4.6%{color}|{color:red}4.8%{color}|{color:red}4.1%{color}|{color:red}5.2%{color}|{color:red}5.1%{color}|{color:red}7.0%{color}|{color:red}3.8%{color}|{color:green}1.8%{color}|\r\n|unite*|{color:red}2.0%{color}|{color:red}1.7%{color}|{color:red}3.0%{color}|{color:red}2.6%{color}|{color:red}2.4%{color}|{color:red}5.7%{color}|{color:red}6.0%{color}|{color:green}3.0%{color}|\r\n|united states|{color:red}0.5%{color}|{color:red}0.4%{color}|{color:green}2.8%{color}|{color:green}2.6%{color}|{color:green}3.1%{color}|{color:green}2.1%{color}|{color:red}1.1%{color}|{color:green}2.0%{color}|\r\n\r\n\r\nMulti-segment index (5% deletions):\r\n\r\n||Query||country||unique10||unique100||unique1K||unique10K||unique100K||unique1M||score||\r\n|<all>|{color:red}10.0%{color}|{color:red}10.2%{color}|{color:red}10.1%{color}|{color:red}9.4%{color}|{color:red}9.4%{color}|{color:red}10.1%{color}|{color:red}10.0%{color}|{color:green}5.1%{color}|\r\n|+united +states|{color:red}7.2%{color}|{color:red}7.5%{color}|{color:red}7.7%{color}|{color:red}8.5%{color}|{color:red}8.4%{color}|{color:red}7.1%{color}|{color:red}5.4%{color}|{color:red}1.9%{color}|\r\n|\"united states\"|{color:green}4.5%{color}|{color:green}4.2%{color}|{color:green}4.0%{color}|{color:green}3.8%{color}|{color:green}4.5%{color}|{color:green}4.3%{color}|{color:green}3.7%{color}|{color:green}4.2%{color}|\r\n|states|{color:red}6.5%{color}|{color:red}8.6%{color}|{color:red}7.3%{color}|{color:red}6.9%{color}|{color:red}7.5%{color}|{color:red}9.4%{color}|{color:red}9.9%{color}|{color:red}1.3%{color}|\r\n|unite*|{color:red}4.5%{color}|{color:red}5.3%{color}|{color:red}4.3%{color}|{color:red}3.9%{color}|{color:red}4.5%{color}|{color:red}4.7%{color}|{color:red}4.7%{color}|{color:red}0.4%{color}|\r\n|united states|{color:red}4.6%{color}|{color:red}2.4%{color}|{color:red}3.2%{color}|{color:red}3.4%{color}|{color:red}1.9%{color}|{color:red}4.8%{color}|{color:red}3.3%{color}|{color:red}1.9%{color}|\r\n\r\nSo... this fix does make up much of the difference; we still seem to\r\nbe a bit (single digits) slower, but, I think this is acceptable given\r\nthe massive reduction in RAM required for the FieldCache entry.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-01T12:20:37.044+0000","updated":"2010-09-01T12:20:37.044+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908251","id":"12908251","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Great!  Hopefully I'll get a change to test it out shortly on my system too.\r\nI just committed 2 places that the new returned comparator was ignored.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-11T00:16:23.219+0000","updated":"2010-09-11T00:16:23.219+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908255","id":"12908255","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. I just committed 2 places that the new returned comparator was ignored.\r\n\r\nUrgh -- thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-11T00:45:05.176+0000","updated":"2010-09-11T00:45:05.176+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908336","id":"12908336","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. This is all quite silly: we are only doing this to \"game\" hotspot into properly inlining/compiling what is in fact an array lookup, just currently hidden behind method calls in the packed ints impls. We really \"shouldn't have to\" do this custom source code specialization.\r\n\r\nYeah, but this is the way hotspot currently works, and I don't know if there are any plans to change it.\r\nHotspot can be pretty aggressive at inlining, but then it deoptimizes when it turns out that the inline is no longer valid (because of a different implementation).\r\n\r\nIt's something worth keeping in mind for the rest of Lucene too - bothin benchmarking and design. Multiple implementations used from a single spot will not be inlined (if multiple implementations are actually used in the same run).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-11T16:29:16.911+0000","updated":"2010-09-11T16:29:16.911+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908357","id":"12908357","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"I'm still seeing bad degredations in solr - I think it's because the default way for solr to sort strings is with MissingLastOrdComparator, which isn't specialized. I'll try and work up a patch based on Mike's work.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-11T19:25:22.113+0000","updated":"2010-09-11T19:25:22.113+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908519","id":"12908519","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Hmmm, turns out the sorting bug I just checked in (r996332) has been around a bit longer than I thought - since field cache was converted to bytes on 6/3/2010 (LUCENE-2380).\r\n\r\nSo anyone using trunk since then and sorting on string fields with null values may want to upgrade.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-12T18:25:23.154+0000","updated":"2010-09-12T18:25:23.154+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908909","id":"12908909","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK, here's  a patch for solr's sort missing last.\r\nMedian response time in my tests drops from 160 to 102 ms.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-13T18:37:02.591+0000","updated":"2010-09-13T18:37:02.591+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908918","id":"12908918","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"silly question, what does the bigString do?\r\n\r\n(just wondering if it should be U+10FFFF,U+10FFFF,... now that we use utf-8 order, depending what it does)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-09-13T18:48:23.115+0000","updated":"2010-09-13T18:48:23.115+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908934","id":"12908934","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. silly question, what does the bigString do? \r\n\r\nIt's actually not currently used by Solr.... but it's basically to use as a proxy for a null if you want the Comparables returned by value() to match the sort order the Comparator actually used.\r\n\r\nbq. (just wondering if it should be U+10FFFF,U+10FFFF,... now that we use utf-8 order, depending what it does)\r\n\r\nMaybe... if it is supposed to be just a string (I know that's the name, but maybe it should be called bigTerm I guess).  All of our terms are currently UTF8 - but I don't know if that will last?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-13T19:08:13.160+0000","updated":"2010-09-13T19:08:13.160+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908947","id":"12908947","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. Maybe... if it is supposed to be just a string (I know that's the name, but maybe it should be called bigTerm I guess). All of our terms are currently UTF8 - but I don't know if that will last?\r\n\r\nwell you are right, for example collated terms for Locale-sensitive sort will hopefully use full byte range soon... \r\n\r\nwe can always safely use bytes of 0xff i think?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-09-13T19:17:36.199+0000","updated":"2010-09-13T19:17:36.199+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908953","id":"12908953","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. we can always safely use bytes of 0xff i think?\r\n\r\nYep, should be fine.  Is there an upper bound on how long collated terms can be?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-13T19:23:47.314+0000","updated":"2010-09-13T19:23:47.314+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908956","id":"12908956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. Yep, should be fine. Is there an upper bound on how long collated terms can be?\r\n\r\nThere isn't, but...\r\n\r\nI can't promise (but i'll verify), i think actually a single 0xff might do, for the major encodings.\r\n\r\n* its invalid in utf-8\r\n* its technically valid, but unused (reset byte) in bocu-1\r\n* collation keys i understand are a modified bocu, likely unused there too.\r\n\r\nso its like a NaN sentinel, if someone is doing something very wierd, maybe it wont work,\r\nbut in general, i think it will work. ill check.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-09-13T19:29:17.508+0000","updated":"2010-09-13T19:29:17.508+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908963","id":"12908963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK, I've changed bigString to bigTerm and used 10 0xff bytes (to account for possible binary encoding of 8 byte numerics + other stuff like tags that trie encoding uses).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-13T19:43:06.672+0000","updated":"2010-09-13T19:43:06.672+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12908965","id":"12908965","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Cool thanks (unfortunately i ran a bunch of collators and encountered what looks like 0xff bytes)\r\nI think this will help.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-09-13T19:49:53.734+0000","updated":"2010-09-13T19:49:53.734+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909098","id":"12909098","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Yonik, just curious, how do you know what HotSpot is doing?  Empirically based on performance numbers?  HotSpot code or documentation that spells out exactly when it inlines?  Or is there some tool or diagnostic capability to learn this information?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-09-14T02:54:35.562+0000","updated":"2010-09-14T02:54:35.562+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909107","id":"12909107","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. Yonik, just curious, how do you know what HotSpot is doing? Empirically based on performance numbers?\r\n\r\nYeah - it's a best guess based on what I see when performance testing, and matching that up with what I've read in the past.\r\nAs far as deoptmization is concerned, it's mentioned here: http://java.sun.com/products/hotspot/whitepaper.html, but I haven't read much elsewhere.\r\n\r\nSpecific to this issue, the whole optimization/deoptimization issue is extremely complex.\r\nRecall that I reported this: \"Median response time in my tests drops from 160 to 102 ms.\"\r\n\r\nFor simplicity, there are some details I left out:\r\nThose numbers were for randomly sorting on different fields (hopefully the most realistic scenario).\r\nIf you test differently, the results are far different.\r\n\r\nThe first and second test runs measured median time sorting on a single field 100 times in a row, then moving to the next field.\r\n\r\nTrunk before patch:\r\n|unique terms in field|median sort time in ms (first run)|second run\r\n|100000|105|168\r\n|10000|105|169\r\n|1000|106|164\r\n|100|127|163\r\n|10|165|197\r\n\r\nTrunk after patch:\r\n|unique terms in field|median sort time in ms (first run)|second run\r\n|100000|85|130\r\n|10000|92|129\r\n|1000|92|126\r\n|100|116|127\r\n|10|117|128\r\n\r\nbranch_3x\r\n|unique terms in field|median sort time in ms (first run)|second run\r\n|100000|102|102\r\n|10000|102|103\r\n|1000|101|103\r\n|100|103|103\r\n|10|118|118\r\n\r\nSo, it seems by running in batches (sorting on the same field over and over), we cause hotspot to overspecialize somehow, and then when we switch things up the resulting deoptimization puts us in a permanently worse condition).  branch_3x does not suffer from that, but trunk still does due to the increased amount of indirection.  I imagine the differences are also due to the boundaries that the compiler tries to inline/specialize for a certain class.\r\n\r\nIt certainly complicates performance testing, and we need to keep a sharp eye on how we actually test potential improvements.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T04:04:27.186+0000","updated":"2010-09-14T04:04:27.186+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909177","id":"12909177","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"The fickleness of the hotspot compiler is just awful, and, frankely\r\nunacceptable.  Java (Oracle) really needs to do something to address\r\nthis.\r\n\r\nEG, see my post here:\r\n\r\n  http://forums.sun.com/thread.jspa?threadID=5420631  \r\n\r\nIn that standalone test, I can get drastically different search\r\nperformance depending on what code runs first.  Hotspot gets itself\r\ninto a state where it's \"stuck\" and is not able to re-optimize for the\r\ncode that's running.  When I disassembled the methods hotspot had\r\ncompiled, one thing I found was that readVInt (the hottest of hot in\r\nLucene today) was compiled very differently depending on what code ran\r\nfirst!\r\n\r\nThe changes we've had to make to Lucene/Solr in this issue to\r\nworkaround hotspot are here are horrible -- we've introduced ugly code\r\ndup specializations so that hotspot properly detects given method\r\ncalls are in fact just an array lookup.  We've made similar\r\nspecializations elsewhere in Lucene...\r\n\r\nWeirdly, I've found that running java with -Xbatch gives far more\r\nrepeatable results.  This is bizarre because that option forces\r\ncompilation to run in the foreground; it's not supposed to alter which\r\nmethods hotspot chooses to optimize, and, how much (I think?).  Though\r\nmaybe because threads are paused awaiting compilation it alters\r\nhotspots targets?  However, -Xbatch doesn't always give the fastest\r\nresults.\r\n\r\nNot that we have a choice here... but I've often wondered whether .NET\r\nhas this same hotspot fickleness problem.\r\n\r\nI think this is a severe and growing problem for Lucene going forward\r\n-- our search performance is crucial and we can't risk hotspot\r\nrandomly, substantially slowing things down by alot.  We're unable\r\nto do true performance tuning when hospot \"noise\" easily dwarfs the\r\neffects we're trying to measure.\r\n\r\nI think the only viable option going forward is to create a search\r\nframework that's able to generate its own specialized java code.  We'd\r\nuse this, statically, to generate pieces of the search executation\r\npath that we think are common enough to warrent up-front specialization,\r\nbut also expose it dynamically so apps can \"optimize\" for their query\r\npaths, either statically (pre-built/compiled in their apps) or\r\ndynamically (like how a JSP rewrites to java code and is then\r\ncompiled).  Of course we'd still retain the non-specialized code, as a\r\nfallback to handle those cases the specializer can't yet cover, or,\r\nfor apps where the net bytecode must be kept smallish.\r\n\r\nIn theory such a search autogen framework could also generate into\r\nC/C++, enabling us to choose a good point to wrap the result with JNI\r\n(eg, TopDocsCollector.topDocs), which'd be wonderful as it'd fully\r\nsidestep the hotspot fickleness.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-14T10:19:52.957+0000","updated":"2010-09-14T10:19:52.957+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909214","id":"12909214","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"{quote}\r\nJava (Oracle) really needs to do something to address this.\r\n{quote}\r\n\r\nI think we all owe it to ourselves to stop equating java with Sun/Oracle, if Java \r\nstays with Oracle its pretty obvious the language (is) will die anyway.\r\n\r\n{quote}\r\nI think this is a severe and growing problem for Lucene going forward\r\n- our search performance is crucial and we can't risk hotspot\r\nrandomly, substantially slowing things down by alot.\r\n{quote}\r\n\r\nWhile I agree at the moment we should make efforts to work around issues like this,\r\nI don't think we should jump the gun and make real design/architectural\r\nchoices based on Oracle bugs.\r\n\r\nEspecially for trunk, by the time we release Lucene 4.0 some other company\r\nwill probably \"own\" Java anyway.\r\n\r\n{quote}\r\nNot that we have a choice here... but I've often wondered whether .NET\r\nhas this same hotspot fickleness problem\r\n{quote}\r\n\r\n.NET is not a choice but generating C/C++ code is?\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-09-14T12:25:19.908+0000","updated":"2010-09-14T12:25:19.908+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909230","id":"12909230","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"bq. I think we all owe it to ourselves to stop equating java with Sun/Oracle, if Java stays with Oracle its pretty obvious the language (is) will die anyway.\r\nI agree with robert that we should stop comparing against sun jvms all the time and turn everything upside-down specializing code here and there or go one step further and generate C++ code. Dude who is gonna maintain the compatibility to Java-Only environments? I could imagine that we have something which is super special purpose like mike did with DirectNIOFSDirectory  to work around unexposed methods like fadvice. \r\n\r\nI think that code specializations of very \"hot\" part of lucene are ok and we should follow that way like we did at some places but it already make things very complicated to follow. Without the knowledge of a committer or a person actively following that development it is extremely difficult to comprehend design decisions.\r\n\r\nI would rather like the idea to put effort in stuff like harmony and make code we can control perform better that introducing a preprocessor which generates code for a JVM owned by a company. Would it make way more sense to push OSS JVMs than spending lots of time on investigating on .NET as an alternative or C/C++ code generator? Before I would go the C++ path I'd rather use Java to host a C core like lucy which brings you as close as it gets to the machine. \r\n\r\nbq. EG, see my post here:\r\n\r\ninteresting papers - seems we are touching the limits of Java though.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2010-09-14T13:22:37.568+0000","updated":"2010-09-14T13:22:37.568+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909272","id":"12909272","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Looks like we're not using the correct comparators everywhere.\r\nI was trying a slightly different way to implement sort-missing-last, and my first comparator only implements setNextReader(), but I'm now getting many UnsupportedOperationExceptions (i.e. the search process is using older comparators after calling setNextReader())\r\n\r\nOne culprit is OneComparatorNonScoringCollector, and another is OneComparatorFieldValueHitQueue I think.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T14:50:04.172+0000","updated":"2010-09-14T14:50:04.172+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909312","id":"12909312","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. I'm now getting many UnsupportedOperationExceptions (i.e. the search process is using older comparators after calling setNextReader())\r\n\r\nThat's no good!\r\n\r\nbq. One culprit is OneComparatorNonScoringCollector, and another is OneComparatorFieldValueHitQueue I think.\r\n\r\nHmm I don't see the problem -- eg OneComparatorNonScoringCollector saves the returned comparator from comparator.setNextReader.\r\n\r\nCan you post the full exc?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-14T16:32:21.843+0000","updated":"2010-09-14T16:32:21.843+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909319","id":"12909319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"Attaching a draft patch that seems to fix the issue (the ones I can find at least).\r\n\r\nbq. Hmm I don't see the problem - eg OneComparatorNonScoringCollector saves the returned comparator from comparator.setNextReader.\r\n\r\nYes, but FieldValueHitQueue has it's own list of comparators that never get updated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T16:44:09.596+0000","updated":"2010-09-14T16:44:09.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909337","id":"12909337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nI think we all owe it to ourselves to stop equating java with Oracle, if Java \r\nstays with Oracle its pretty obvious the language (is) will die anyway.\r\n{quote}\r\n\r\nYeah I agree.\r\n\r\nThe open question is whether this hotspot fickleness is particular to\r\nOracle's java impl, or, is somehow endemic to bytecode VMs (.NET\r\nincluded).  It's really a hard, complex problem (JIT compilation from\r\nbytecode based on runtime data), so it wouldn't surprise me if it's\r\nthe latter, to varying degrees.\r\n\r\nbq. .NET is not a choice but generating C/C++ code is?\r\n\r\nAs far as I know it's much easier to invoke C/C++ from java, than .NET\r\nfrom java.  C/C++ is also more portable than .NET, I think?  (There is\r\nMono -- how mature is it by now?).\r\n\r\n{quote}\r\nI don't think we should jump the gun and make real design/architectural\r\nchoices based on Oracle bugs.\r\n{quote}\r\n\r\nI expect source code spec will also buy sizable perf gains\r\nirrespective of hotspot fickleness, and in non-Oracle java impls.\r\nGenerating a dedicated class, with one method doing all searching and\r\ncollecting, removes all kinds of barriers to the JIT compiler.  It\r\nmakes its job far easier.\r\n\r\nbq. I agree with robert that we should stop comparing against sun jvms all the time and turn everything upside-down specializing code here and there or go one step further and generate C++ code. Dude who is gonna maintain the compatibility to Java-Only environments?\r\n\r\nIf we manage to pursue specialized code gen, it'll be a loooong time\r\ncoming!  My point about C/C++ is that if we do somehow manage to get a\r\nworking code gen framework online (for Java), the added cost to make\r\nit also target C/C++ will be \"relatively\" small.  Ie, it's nearly \"for\r\nfree\".\r\n\r\nIf we were do to this, that would not mean we'd abandon java, of\r\ncourse -- the framework would fully support \"pure java\" as well.\r\n\r\nbq. I think that code specializations of very \"hot\" part of lucene are ok and we should follow that way like we did at some places but it already make things very complicated to follow. \r\n\r\nYou mean manual specialization right (like this issue)?\r\n\r\nYes, I think we will have to keep manually specializing, going\r\nforward, until we can have code generator that\r\ndoes it more cleanly...\r\n\r\nbq. Would it make way more sense to push OSS JVMs than spending lots of time on investigating on .NET as an alternative or C/C++ code generator?\r\n\r\nI think we should do both.\r\n\r\nbq. Before I would go the C++ path I'd rather use Java to host a C core like lucy which brings you as close as it gets to the machine.\r\n\r\nI think this (a Java wrapper for Lucy) is a great idea -- we should explore that, too.\r\n\r\nbq. interesting papers - seems we are touching the limits of Java though.\r\n\r\nWell that's the big question -- limits of Java or limit's of Sun/Oracle's impl.\r\n\r\nIt looks like harmony has a ways to go on absolute performance: I just\r\nran a very quick benchmark (TermQuery search on 10 M multi-segment\r\nwiki index w/ a 50% random filter) and Oracle java 1.6.0_21 gets 15.6\r\nQPS while Harmony 1.5.0-r946978 gets 9.5 QPS (Harmony 1.6.0-r946981\r\nalso gets 9.5 QPS).  I just ran java -server -Xms2g -Xmx2g; it's\r\npossible by tuning Harmony (it has many awesome looking command-line\r\nargs!) it'd get faster...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-14T17:10:58.237+0000","updated":"2010-09-14T17:10:58.237+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909339","id":"12909339","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"bq. Yes, but FieldValueHitQueue has it's own list of comparators that never get updated.\r\n\r\nUgh, yes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-09-14T17:13:29.327+0000","updated":"2010-09-14T17:13:29.327+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909407","id":"12909407","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"bq. The open question is whether this hotspot fickleness is particular to Oracle's java impl, or, is somehow endemic to bytecode VMs (.NET included).\r\n\r\nI tried IBM's latest Java6 (SR8 FP1, 20100624)\r\nIt seems to have some of the same pitfalls as Oracle's JVM, just different.\r\nThe first run does not differ from the second run in the same JVM as it does with Oracle, but the first run itself has much more variation.  The worst case is worse, and just like the Oracle JVM, it gets stuck in it's worst case.\r\n\r\nEach run (of the complete set of fields) in a separate JVM since two runs in the same JVM didn't really differ as they did in the oracle JVM.\r\n\r\n\r\nbranch_3x:\r\n|unique terms in field|median sort time of 100 sorts in ms|another run|another run|another run|another run|another run|another run\r\n|100000|129|128|130|109|98|128|135\r\n|10000|128|123|127|127|98|128|135\r\n|1000|129|130|130|128|98|130|136\r\n|100|128|133|133|130|100|132|139\r\n|10|150|153|153|154|122|153|159\r\n\r\ntrunk:\r\n|unique terms in field|median sort time of 100 sorts in ms|another run|another run|another run|another run|another run|another run\r\n|100000|217|81|383|99|79|78|215\r\n|10000|254|73|346|101|106|108|267\r\n|1000|253|74|347|99|107|108|258\r\n|100|253|107|394|98|107|102|255\r\n|10|251|107|388|99|106|98|257\r\n\r\nThe second way of testing is to completely mix fields (no serial correlation between what field is sorted on).  This is the test that is very predictable with the Oracle JVM, but I still see wide variability with the IBM JVM.  Here is the list of different runs for the IBM JVM (ms):\r\n\r\nbranch_3x\r\n|128|129|123|120|128|100|95|74|130|91|120\r\n\r\ntrunk\r\n|106|89|168|116|155|119|108|118|112|169|165\r\n\r\nTo my eye, it looks like we have more variability in trunk, due to increased use of abstractions?\r\n\r\nedit: corrected the table description - all times in this message are for the IBM JVM.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T19:40:45.797+0000","updated":"2010-09-15T13:00:21.249+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909456","id":"12909456","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"OK, I've committed the fix to always use the latest generation field comparator.\r\nNot sure if this is the best way to handle - but at least it's correct now and we can improve more later.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T21:09:02.220+0000","updated":"2010-09-14T21:09:02.220+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/12909462","id":"12909462","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"This was a simple attempt to try and simplify the comparators.   Static classes are used instead of inner classes.  Unfortunately, it didn't help the JVMs from getting stuck in badly optimized code (it was a long shot for that), but it does result in a consistent 4% speedup.\r\n\r\nIt looks as simple as the previous version to my eye, so I'll commit if there are no objections.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2010-09-14T21:26:07.685+0000","updated":"2010-09-14T21:26:07.685+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/13281794","id":"13281794","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"yonik, I see a bunch of commits on this issue, can we resolve this?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-05-23T18:44:48.769+0000","updated":"2012-05-23T18:44:48.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/13412315","id":"13412315","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2012-07-11T23:03:47.471+0000","updated":"2012-07-11T23:03:47.471+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12467414/comment/13429706","id":"13429706","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"rmuir20120906-bulk-40-change","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-08-07T03:41:25.901+0000","updated":"2012-08-07T03:41:25.901+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2504/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04q6f:"}}