{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12332650","self":"https://issues.apache.org/jira/rest/api/latest/issue/12332650","key":"DERBY-1251","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2006-05-09 21:48:58.0","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22396","customfield_12310222":"3_*:*_1_*:*_1549361000_*|*_1_*:*_1_*:*_86649000_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_798933000","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2006-05-14T14:55:41.000+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1251/watchers","watchCount":0,"isWatching":false},"created":"2006-04-25T16:28:51.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2006-05-23T20:51:14.000+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11407","id":"11407","name":"JDBC"},{"self":"https://issues.apache.org/jira/rest/api/2/component/11690","id":"11690","name":"Network Client"}],"timeoriginalestimate":null,"description":"If an application does the following:\n\nrs.updateInt(1, newValueCol1);\nrs.updateRow();\nrs.updateInt(2, newValueCol2);\nrs.cancelRowUpdates();\n\nThen, when calling rs.getInt(1), it will return the old value. Instead it should return the new value.\n\nWorkaround: after calling rs.updateRow(), the application could call rs.relative(0).\n\nThis problem does not affect forward only resultsets, since after an updateRow() they get positoned before the next row, leaving it impossible to do anything with the current row.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"40685","summary":"cancelRowUpdates() affects rows updated with updateRow() in scrollable updatable resultsets","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10102","value":"Patch Available","id":"10102"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":14,"total":14,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12376218","id":"12376218","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"The bug was detected while adding the following testcase in SURTest:\r\n    /**\r\n     * Test that you can correctly run multiple updateXXX() + updateRow() \r\n     * combined with cancelRowUpdates().\r\n     */\r\n    public void testMultiUpdateRow1() \r\n        throws SQLException \r\n    {\r\n        Statement s = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\r\n                                          ResultSet.CONCUR_UPDATABLE);\r\n        s.setCursorName(getNextCursorName());\r\n        ResultSet rs = s.executeQuery(\"select * from t1\");\r\n        rs.absolute(5);\r\n        final int oldCol2 = rs.getInt(2);\r\n        final int newCol2 = -2222;\r\n        final int oldCol3 = rs.getInt(3);\r\n        final int newCol3 = -3333;\r\n                \r\n        rs.updateInt(2, newCol2);\r\n        assertEquals(\"Expected the resultset to be updated after updateInt\", \r\n                     newCol2, rs.getInt(2));\r\n        rs.cancelRowUpdates();\r\n        assertEquals(\"Expected updateXXX to have no effect after cancelRowUpdated\", \r\n                     oldCol2, rs.getInt(2));\r\n        rs.updateInt(2, newCol2);\r\n        assertEquals(\"Expected the resultset to be updated after updateInt\", \r\n                     newCol2, rs.getInt(2));\r\n        assertTrue(\"Expected rs.rowUpdated() to be false before updateRow\", \r\n                   !rs.rowUpdated());\r\n        rs.updateRow();\r\n        \r\n        assertTrue(\"Expected rs.rowUpdated() to be true after updateRow\", \r\n                   rs.rowUpdated());\r\n==== FAILS HERE ======\r\n        assertEquals(\"Expected the resultset detect the updates of previous \" + \r\n                     \"updateRow\", newCol2, rs.getInt(2));\r\n====================       \r\n        rs.updateInt(3, newCol3);\r\n        \r\n        assertEquals(\"Expected the resultset to be updated after updateInt\", \r\n                     newCol3, rs.getInt(3));\r\n        assertEquals(\"Expected the resultset detect the updates of previous \" + \r\n                     \"updateRow\", newCol2, rs.getInt(2));\r\n        \r\n        rs.cancelRowUpdates();\r\n        \r\n        assertEquals(\"Expected updateXXX to have no effect after \" +\r\n                     \"cancelRowUpdated\", oldCol3, rs.getInt(3));\r\n        assertEquals(\"Expected the resultset detect the updates of previous \" +\r\n                     \"updateRow after cancelRowUpdated\", newCol2, rs.getInt(2));\r\n        rs.updateInt(3, newCol3);\r\n        rs.updateRow();\r\n        assertEquals(\"Expected the resultset to be updated after updateInt\", \r\n                     newCol3, rs.getInt(3));\r\n        rs.cancelRowUpdates();\r\n        \r\n        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n                     \"updateRow after cancelRowUpdates\", newCol2, rs.getInt(2));\r\n        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n                     \"updateRow after cacnelRowUpdates\", newCol2, rs.getInt(2));\r\n        assertTrue(\"Expected rs.rowUpdated() to be true after \" + \r\n                   \"updateRow and cancelRowUpdates\", rs.rowUpdated());\r\n        \r\n        rs.close();\r\n    }\r\n\r\nThe test fails with:\r\n1) testMultiUpdateRow1(org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest)junit.framework.AssertionFailedError: Expected the resultset detect the updates of previous updateRow expected:<-2222> but was:<4>\r\n        at org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testMultiUpdateRow1(SURTest.java:203)\r\n...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-04-25T16:32:50.000+0000","updated":"2006-04-25T16:32:50.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12376245","id":"12376245","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Actually, the previous comment indicates another related bug: after updateRow(), rs.getXXX() returns the old value. \r\n\r\nIn addition I found that in the network driver: after doing updateRow(), and you later do updateXXX() + cancelRowUpdates(), the cancelRowUpdates() does not have any effect, since updateRow() had been called once on the row.\r\n\r\nDue to this logic in org.apache.derby.client.am.ResultSet.cancelRowUpdates() :\r\n\r\n                / if updateRow() has already been called, then cancelRowUpdates should have\r\n                // no effect.  updateRowCalled_ is reset to false as soon as the cursor moves to a new row.\r\n                if (!updateRowCalled_) {\r\n                    resetUpdatedColumns();\r\n                }\r\nupdateRowCalled_ is set to true in updateRow().\r\n\r\nSeems most of this logic is relaxed on having the resultset becoming unpositioned after an updateRow().\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-04-25T19:38:20.000+0000","updated":"2006-04-25T19:38:20.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12376444","id":"12376444","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Changes to address this bug:\r\n\r\nEmbedded JDBC driver:\r\n\r\nEmbedResultSet.java: \r\n* at the end of updateRow/deleteRow, the rowdata in the resultset is reloaded from the cursor\r\n\r\n\r\nClient JDBC driver:\r\nResultSet.java:\r\n* removed the use of updateRowCalled_\r\n* at the end of updateRowX/deleteRowX, the rowdata is reloaded from the cursor\r\n \r\n\r\nTests:\r\nSURTest.java\r\n* 3 testcases added, covering both this issue, and the DERBY-1249.\r\n\r\nNote: by reloading the rowdata from the cursor, this fix also fixes issue DERBY-1249, therefore these tests are part of this fix.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-04-26T16:30:17.000+0000","updated":"2006-04-26T16:30:17.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12377466","id":"12377466","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Withdrawing the patch DERBY-1251.diff.\r\n\r\nIt turns out that the currentRow attribute in the EmbedResultSet may in certain combinations of scrolling refer directly to a row in the hashtable of a ScrollInsensitive ResultSet.  updateXXX() methods then get to write into the hashtable. When doing cancelRowUpdates(), EmbedResultSet copies over its internal reference to the columns, however the data in the hashtable may still have been modified by updateXXX. This patch simply reveals this problem more clearly, as this situation may occur every time one do cancelRowUpdates. I will work on a patch to completely remove this problem.\r\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-03T03:20:25.000+0000","updated":"2006-05-03T03:20:25.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378381","id":"12378381","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Embedded:\r\n\r\nIn this patch (DERBY-1251v2.diff) I have addressed the problem in that\r\nupdateXXX(..) methods get to write directly into data which is owned\r\nby theResultSet. The old behavior was that updateXXX() wrote directly\r\ninto currentRow(..), and a copy of the old data in current row was put\r\ninto copyOfDatabaseRow, to support cancelRowUpdates.\r\n\r\nThe new logic is that the updateXXX(..) methods will write into a\r\nnew ExecRow attribute in EmbedResultSet, called updateRow, and it is\r\nno longer necessary to copy data into copyofDatabaseRow.\r\n\r\nWhen doing updateRow() or insertRow(), the values are collected from\r\nupdateRow instead of currentRow. When doing cancelRowUpdates(), the\r\nrelevant flags are reset.\r\n\r\nThese changes has allowed me to remove the following attributes from\r\nEmbedResultSet:\r\n\r\n * ExecRow insertRow\r\n * ExecRow currentRowBeforeInsert\r\n * DataValueDescriptor[] rowData\r\n * DataValueDescriptor[] copyOfDatabaseRow;\r\n\r\nA new field has been added instead: \r\n * ExecRow updateRow\r\n\r\nAll getXXX() methods use a method to look up a DataValueDescriptor for\r\nthe column. The getColumn() method will either return a\r\nDataValueDescriptor from currentRow if the column has not been updated\r\nwith updateXXX(). Otherwise it will return the column from updateRow.\r\nIf on insertRow, the DataValueDescriptor is located from the\r\nupdateRow attribute.  \r\n\r\nThe patch still (as in previous patch DERBY-1251.diff) reload data\r\nfrom the cursor at the end of updateRow and deleteRow. This is done by\r\ncalling movePosition() equal to relative(0).  \r\n\r\nClient changes:\r\nSimilar as in DERBY-1251.diff: reload the data of the row after\r\nupdateRow(). Note that reloading the data from the cursor, causes an\r\nextra roundtrip to the server. So this part can be improved. In\r\ndeleteRow() I am using updateCount_ to check if the row was deleted by\r\nthe cursor. This is also used in updateRow(), to see if it is necessary to \r\nreload data from the cursor.\r\n\r\nTesting:\r\nSURTest: 4 testcases added.\r\nThe test passes, and I did not get any failures in derbyall.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-08T15:25:25.000+0000","updated":"2006-05-08T15:25:25.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378382","id":"12378382","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"A patch (DERBY-1251v2.diff) is available for review.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-08T15:26:23.000+0000","updated":"2006-05-08T15:26:23.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378383","id":"12378383","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Attaching report from derbyall, with patch DERBY-1251v2.diff\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-08T15:28:20.000+0000","updated":"2006-05-08T15:28:20.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378628","id":"12378628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fernanda","name":"fernanda","emailAddress":"fernanda dot pizzorno dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Fernanda Pizzorno","active":true},"body":"Review:\r\n\r\nThe patch looks good, here are some comments:\r\n\r\nIndex: java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java\r\n===================================================================\r\n@@ -180,10 +181,17 @@\r\n[...]\r\n+\t/* updateRow is used to keep the values which are updated with updateXXX() \r\n+\t * calls. It is by both insertRow() and updateRow(). \r\n                           ^ used\r\n+\t * It is initialized to null if the resultset is not updatable. \r\n+\t */\r\n[...]\r\n+\t/* These are the columns which have been updated so far. \r\n+\t * Used to build UPDATE...WHERE CURRENT OF sql and \r\n                                                       *** could this be removed?\r\n+\t * INSERT INTO .. statements.\r\n+\t */\r\n\r\n@@ -240,14 +248,26 @@\r\n \r\n[...]\r\n+\t\t    columnGotUpdated = new boolean[columnCount];\r\n+\t\t    updateRow = factory.getValueRow(columnCount);\r\n+\t\t\tfor (int i = 1; i <= columnGotUpdated.length; i++) {\r\n+\t\t        updateRow.setColumn(i, resultDescription.getColumnDescriptor(i).\r\n+\t\t            getType().getNull());\r\n+\t\t    }\r\n+\t\t    initializeUpdateRowModifiers();\t\t\t\r\n+\t\t} else {\r\n+\t\t\tupdateRow = null;\r\n\r\nCould you use columnCount instead of columnGotUpdated.length on the third line?\r\nThere is a mix of tab and spaces being used on these rows.\r\n\r\n@ -289,14 +309,18 @@\r\n \t// onRow protects us from making requests of\r\n \t// resultSet that would fail with NullPointerExceptions\r\n \t// or milder problems due to not having a row.\r\n[...]\r\n+\tprotected final void checkOnRow() throws SQLException\t{\r\n+\t\tif (currentRow.getRowArray() == null) {\r\n \t\t\tthrow newSQLException(SQLState.NO_CURRENT_ROW);\r\n+\t\t} \r\n+\t}\r\n\r\nThis comments should be updated to reflect what is done in the method.\r\n\r\n[...]\r\n\r\n+\t/**\r\n+\t * Initializes the updateRow and columnGotUpdated fields\r\n+\t */\r\n+\tprivate void initializeUpdateRowModifiers() {\r\n+\t\tcurrentRowHasBeenUpdated = false;\r\n+\t\tArrays.fill(columnGotUpdated, false);\r\n \t}\r\n\r\nThis comment should also be updated, updateRow is not being initialized.\r\n\r\n[...]\r\n\r\n@@ -3598,15 +3620,19 @@\r\n                 }\r\n                 rs.close();\r\n                 rs.finish();\r\n-                //After a delete, the ResultSet will be positioned right before \r\n-                //the next row.\r\n-                rowData = null;\r\n-                currentRow = null;\r\n+                //For forward only resultsets, after a delete, \r\n+                // the ResultSet will be positioned right before the next row.\r\n+                if (getType() == TYPE_FORWARD_ONLY) {\r\n+                    currentRow.setRowArray(null);\r\n+                } else {\r\n+                    movePosition(RELATIVE, 0, \"relative\");\r\n+                }\r\n\r\nAccording to JDBC 3.0 specification section \"14.2.4.2 Deleting a Row\", after a\r\ndeleteRow has been called, the cursor will be positioned before the next valid\r\nrow. Is there a reason to make this comment specific to forward only result \r\nsets?\r\n\r\n\r\nIndex: java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java\r\n===================================================================\r\n\r\n@@ -242,6 +242,218 @@\r\n         verifyTuple(rs);\r\n         assertFailOnUpdate(rs);\r\n     }\r\n+\r\n+    /**\r\n+     * Test that you can correctly run multiple updateXXX() + updateRow() \r\n+     * combined with cancelRowUpdates().\r\n+     */\r\n+    public void testMultiUpdateRow1() \r\n+        throws SQLException \r\n+    {\r\n[...]\r\n+        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n+                     \"updateRow after cancelRowUpdates\", newCol2, rs.getInt(2));\r\n+        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n+                     \"updateRow after cancelRowUpdates\", newCol2, rs.getInt(2));\r\n\r\nI guess the intention was to check column 2 and 3 and not twice column 2.\r\n\r\n\r\n+        assertTrue(\"Expected rs.rowUpdated() to be true after \" + \r\n+                   \"updateRow and cancelRowUpdates\", rs.rowUpdated());\r\n+        \r\n+        rs.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that you can correctly run multiple updateNull() + updateRow() \r\n+     * combined with cancelRowUpdates().\r\n+     */\r\n+    public void testMultiUpdateRow2() \r\n+        throws SQLException \r\n+    {\r\n[...]\r\n\r\n\r\n+        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n+                     \"updateRow after cancelRowUpdates\", 0, rs.getInt(2));\r\n+        assertEquals(\"Expected the resultset detect the updates of previous\" + \r\n+                     \"updateRow after cancelRowUpdates\", 0, rs.getInt(2));\r\n\r\nSame here.\r\n\r\n+        assertTrue(\"Expected rs.rowUpdated() to be true after \" + \r\n+                   \"updateRow and cancelRowUpdates\", rs.rowUpdated());\r\n+        \r\n+        rs.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that you get cursor operation conflict warning if updating \r\n+     * a row which has been deleted from the table.\r\n+     */\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fernanda","name":"fernanda","emailAddress":"fernanda dot pizzorno dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Fernanda Pizzorno","active":true},"created":"2006-05-09T21:48:58.000+0000","updated":"2006-05-09T21:48:58.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378856","id":"12378856","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"> - //After a delete, the ResultSet will be positioned right before\r\n> - //the next row.\r\n> - rowData = null;\r\n> - currentRow = null;\r\n> + //For forward only resultsets, after a delete,\r\n> + // the ResultSet will be positioned right before the next row.\r\n> + if (getType() == TYPE_FORWARD_ONLY) {\r\n> + currentRow.setRowArray(null);\r\n> + } else {\r\n> + movePosition(RELATIVE, 0, \"relative\");\r\n> + } \r\n> \r\n> According to JDBC 3.0 specification section \"14.2.4.2 Deleting a Row\", after a\r\n> deleteRow has been called, the cursor will be positioned before the next valid\r\n> row. Is there a reason to make this comment specific to forward only result\r\n> sets? \r\n\r\nThis is a good point. For FORWARD_ONLY resultsets, this means that the cursor is not on a row (i.e all getXXX(..) methods throws exception), and when calling next the cursor will be positioned on the next row.\r\nFor SCROLL INSENSITIVE cursors, I am a bit unsure if the current row (which has been deleted) is valid or not.  If it is valid, it is correct to be on the current row, since it is before the next valid row. If it is considered as invalid the cursor should be position somewhere inbetween the current row and the next row (i.e not on a row). \r\nThen the behavior would be that: calling next() will give the next row, calling previous will give the previous row, and calling relative(0) will give the current invalid (deleted) row in scroll insensitive resultsets. \r\n\r\nHowever I choose to not deal with this in this patch. The call to movePosition(RELATIVE..) should not be part of the patch, it could be added in another patch, i.e  if we choose to consider the current row as a valid row after it has been deleted.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-10T15:58:24.000+0000","updated":"2006-05-10T15:58:24.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378858","id":"12378858","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Attached is a patch (DERBY-1251v3.diff) which addresses the review comments. The changes in deleteRow() behavior has been removed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-10T16:01:28.000+0000","updated":"2006-05-10T16:01:28.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378902","id":"12378902","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fernanda","name":"fernanda","emailAddress":"fernanda dot pizzorno dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Fernanda Pizzorno","active":true},"body":"All of my comments have been addressed. The patch DERBY-1251v3.diff looks good.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=fernanda","name":"fernanda","emailAddress":"fernanda dot pizzorno dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Fernanda Pizzorno","active":true},"created":"2006-05-10T19:27:17.000+0000","updated":"2006-05-10T19:27:17.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12378922","id":"12378922","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I will run some tests and commit the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2006-05-10T20:58:16.000+0000","updated":"2006-05-10T20:58:16.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12402209","id":"12402209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed revision 406279.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2006-05-14T14:55:41.000+0000","updated":"2006-05-14T14:55:41.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12332650/comment/12412934","id":"12412934","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"body":"Thanks for committing this patch. Closing the report.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andreask","name":"andreask","emailAddress":"andreas dot korneliussen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andreas Korneliussen","active":true},"created":"2006-05-23T20:51:14.000+0000","updated":"2006-05-23T20:51:14.000+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-1251/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i07buf:"}}