{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12383008","self":"https://issues.apache.org/jira/rest/api/latest/issue/12383008","key":"DERBY-3221","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313142","id":"12313142","description":"","name":"10.3.3.0","archived":false,"released":true,"releaseDate":"2008-05-12"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313111","id":"12313111","description":"","name":"10.4.1.3","archived":false,"released":true,"releaseDate":"2008-04-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2007-11-24 18:57:10.353","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23502","customfield_12310222":"3_*:*_1_*:*_606297779_*|*_1_*:*_2_*:*_4367204942_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2008-01-18T09:54:57.839+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3221/watchers","watchCount":1,"isWatching":false},"created":"2007-11-21T20:23:15.118+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312876","id":"12312876","description":"","name":"10.3.2.1","archived":false,"released":true,"releaseDate":"2007-12-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12318783","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318783","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12385890","key":"DERBY-3310","self":"https://issues.apache.org/jira/rest/api/2/issue/12385890","fields":{"summary":"ASSERT in MergeSort.checkColumnTypes() disallow legal type conversions","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12318745","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12318745","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12327853","key":"DERBY-827","self":"https://issues.apache.org/jira/rest/api/2/issue/12327853","fields":{"summary":"Performance can be improved by re-using language ResultSets across Activation executions.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-21T17:51:08.249+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11407","id":"11407","name":"JDBC"}],"timeoriginalestimate":null,"description":"We are getting an SQLException when several prepared statement deletes are done upon an existing database.  As far as we can tell this exception should never occur unless (evil) things like deleting the database or editing files occurs.  This is using the embedded driver within a plug-in inside RAD 7.0 (and Eclipse 3.3).\n\nI'm not sure what else to submit that might be helpful.\n\njava.sql.SQLException: The conglomerate (-5) requested does not exist.\n at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\n at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\n at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\n at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\n at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\n at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\n at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\n at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\n at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)\n at sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n at java.lang.reflect.Method.invoke(Unknown Source)\n at com.surelogic.sierra.jdbc.LazyPreparedStatementConnection$LazyPreparedStatement.invoke(Unknown Source)\n at $Proxy1.execute(Unknown Source)\n at com.surelogic.sierra.jdbc.finding.FindingManager.delete(Unknown Source)\n at com.surelogic.sierra.jdbc.finding.ClientFindingManager.updateLocalFindings(Unknown Source)\n at com.surelogic.sierra.jdbc.project.ClientProjectManager.synchronizeProject(Unknown Source)\n at com.surelogic.sierra.client.eclipse.jobs.SynchronizeJob.synchronize(Unknown Source)\n at com.surelogic.sierra.client.eclipse.jobs.SynchronizeJob.run(Unknown Source)\n at org.eclipse.core.internal.jobs.Worker.run(Unknown Source)\nCaused by: ERROR XSAI2: The conglomerate (-5) requested does not exist.\n at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\n at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\n at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\n at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\n at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\n at org.apache.derby.impl.sql.execute.IndexChanger.finish(Unknown Source)\n at org.apache.derby.impl.sql.execute.IndexSetChanger.finish(Unknown Source)\n at org.apache.derby.impl.sql.execute.RowChangerImpl.finish(Unknown Source)\n at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source)\n at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\n ... 14 more","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37365","summary":"\"java.sql.SQLException: The conglomerate (-5) requested does not exist.\" from Derby 10.3.1.4 embedded within Eclipse 3.3 and RAD 7.0","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hallorant","name":"hallorant","emailAddress":"hallorant at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tim Halloran","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hallorant","name":"hallorant","emailAddress":"hallorant at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tim Halloran","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":"Windows Vista Ubuntu Linux on IBM's VM (RAD 7.0)","customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":42,"total":42,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12545206","id":"12545206","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Is the problem reproducible, and if so, is it possible to post code that demonstrates the problem or a step-by-step description of how to reproduce it?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2007-11-24T18:57:10.353+0000","updated":"2007-11-24T18:57:10.353+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12550545","id":"12550545","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"Me too.\r\n\r\nI have a 'database create' script that un-surprisingly creates tables and populates them.\r\n\r\nRunning on 10.3.1.4 I get an\r\n\r\nERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n\r\nCaused by: ERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n\r\nRunning on 10.2.2.0 everything is fine.\r\n\r\nSpooky.\r\n\r\nThe environment is just using the corresponding version of the embedded driver with all the jars on the classpath, starting with an empty derby.home directory (except for derby.properties turning up logging).\r\n\r\nThere's a few posts on the net about this error having something to do with corrupted files. Clearly this doesn't apply in this case, except that 10.3.1.4 may be having it's own nervous breakdown.\r\n\r\n100% repeatable. Would I get anything by connecting a debugger? With all this (Unknown Source) I doubt it. I don't rate my chances of getting a good test case quickly.\r\n\r\noh and:\r\n\r\n~ $ java -version; uname -primo\r\njava version \"1.6.0_03\"\r\nJava(TM) SE Runtime Environment (build 1.6.0_03-b05)\r\nJava HotSpot(TM) 64-Bit Server VM (build 1.6.0_03-b05, mixed mode)\r\n2.6.23-gentoo-r3-6 x86_64 Intel(R) Core(TM)2 Quad CPU Q6600 @ 2.40GHz GenuineIntel GNU/Linux\r\n\r\nFor the sake of it I tested using:\r\n\r\njava version \"1.6.0_03\"\r\nJava(TM) SE Runtime Environment (build 1.6.0_03-b05)\r\nJava HotSpot(TM) Server VM (build 1.6.0_03-b05, mixed mode)\r\n\r\nwith 10.3.1.4 and still get the above error.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-11T15:54:14.283+0000","updated":"2007-12-11T15:55:12.189+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12550666","id":"12550666","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"Negative conglomerate numbers are used for temporary files.  Are you doing anything special with temporary\r\nfiles in your environment - ie. possibly setting derby option to relocate them?  Any chance some other process\r\nis going after temporary files while your app is still working?  From minimal info available it looks like we are\r\nsomehow losing the temporary file associated with a deferred update, but I could be reading the incomplete\r\nstack wrong.\r\n\r\nBest chance for someone to fix this is if you can post a reproducible case that a developer could run in their\r\nown environment.\r\n\r\nSince you have a 100% reproducible case, if you can't do that can you do the following to give a clue what is\r\ngoing on when the error is encountered:\r\n\r\no start with a new database\r\no set option so that we never lose anything from the error log file: derby.infolog.append=true \r\n    http://db.apache.org/derby/docs/10.3/tuning/rtunproper13217.html\r\no set option to log the sql that you are doing to derby.log:  derby.language.logStatementText=true\r\n   http://db.apache.org/derby/docs/10.3/tuning/rtunproper43517.html\r\nreproduce bug and post COMPLETE derby.log from test run.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2007-12-11T18:25:13.661+0000","updated":"2007-12-11T18:25:13.661+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12550981","id":"12550981","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"Well, of course, I switch back to 10.3.1.4 today, and no bug!!! So as I thought, test case; not so much.\r\n\r\nBUT, with the wonder that is the Eclipse local history, and the mystery that is svn, once again the error arises.\r\n\r\nI can't publish the full log (956k) as it contains a year's work that hasn't been paid for yet :-( I realise that this might not go back far enough, it's the best I can do, apologies. Still, at least anyone that comes across such things will know that they aren't delusional.\r\n\r\nI did try 'sync && sync' before firing up the java code, but it made no difference. The filesystem all this is happening on has recently changed to being a linux software raid, but other than that everything else is pretty vanilla ext3 with nothing else accessing the dir.\r\n\r\nderby.properties now reads:\r\n------8<-----------\r\nderby.stream.error.logSeverityLevel=0\r\nderby.language.logStatementText=true\r\nderby.infolog.append=true \r\n------8<-----------\r\n\r\nSo, we are in a stored proc fired by a trigger. (names may have been changed to pretext the innocent)\r\n\r\n\r\n\r\n2007-12-12 13:22:40.326 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Executing prepared statement: INSERT INTO SubTTTXX ( nShapeID , nSubShapeID , nColorID , nHelp ) SELECT DISTINCT X.nColorID\r\n, DSO.nSubShapeID , X.nColorID , (SELECT INTEGER(MAX(nHelp)+1) FROM SubTTTXX) FROM SubTTTXX X JOIN DirectSubTTT DSO ON X.nHelp > 0 AND DSO.nShapeID = X.nSubShapeID LEFT JOIN SubTTT SO ON SO.nShapeID = X.nShapeID AND SO.nSubShapeID = DSO.nSu\r\nbShapeID WHERE X.nShapeID <> DSO.nSubShapeID AND SO.nShapeID IS NULL :End prepared statement\r\n2007-12-12 13:22:40.330 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Cleanup action starting\r\n2007-12-12 13:22:40.330 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Failed Statement is: INSERT INTO SubTTTXX ( nShapeID , nSubShapeID , nColorID , nHelp ) SELECT DISTINCT X.nShapeID , DSO\r\n.nSubShapeID , X.nColorID , (SELECT INTEGER(MAX(nHelp)+1) FROM SubTTTXX) FROM SubTTTXX X JOIN DirectSubTTT DSO ON X.nHelp > 0 AND DSO.nShapeID = X.nSubShapeID LEFT JOIN SubTTT SO ON SO.nShapeID = X.nShapeID AND SO.nSubShapeID = DSO.nSubShapeID WHE\r\nRE X.nShapeID <> DSO.nSubShapeID AND SO.nShapeID IS NULL\r\nERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107)\r\n        at org.apache.derby.exe.ac12564092x0116xce84xf62dx000055b50d0421.g0(Unknown Source)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n        at java.lang.reflect.Method.invoke(Method.java:597)\r\n        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)\r\n        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801)\r\n        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.importFromLegacyTables(DbOOOFactory.java:383)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.access$1500(DbOOOFactory.java:94)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO$2.doInTransactionWithoutResult(DbOOOFactory.java:352)\r\n        at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:134)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.add(DbOOOFactory.java:339)\r\n        at com.xxx.zzz.kkk.MetaJJJ.reload(MetaJJJ.java:44)\r\n        at com.xxx.zzz.kkk.MetaJJJ.startup(MetaJJJ.java:57)\r\n        at com.xxx.zzz.kkk.Start.startupZzz(Start.java:208)\r\n        at com.xxx.zzz.kkk.Start.startup(Start.java:160)\r\n        at com.xxx.start.Starter.startup(Starter.java:264)\r\n        at com.xxx.start.Main.startup(Main.java:270)\r\n        at com.xxx.start.Main.main(Main.java:199)\r\nCleanup action completed\r\n2007-12-12 13:22:40.490 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Cleanup action starting\r\n2007-12-12 13:22:40.490 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Failed Statement is:  INSERT INTO SubTTT ( nShapeID , nSubShapeID , nColorID ) SELECT DISTINCT C.nRCID , S.nRCID , (S\r\nELECT nColorID FROM Colorition WHERE nIsCCC = 1) FROM LegacySubCCC SC JOIN LegacyCCC C ON SC.nRunID = ? AND C.nRunID = ? AND C.nICCCID = SC.nICCCID JOIN LegacyCCC S ON S.nRunID = ? AND S.nICCCID = SC.nISubCCCID LEF\r\nT JOIN SubTTT SO ON SO.nShapeID = C.nRCID AND SO.nSubShapeID = S.nRCID WHERE SO.nShapeID IS NULL with 3 parameters begin parameter #1: 1 :end parameter begin parameter #2: 1 :end parameter begin parameter #3: 1 :end parameter \r\nERROR 38000: The exception 'java.sql.SQLException: The conglomerate (-15) requested does not exist.' was thrown while evaluating an expression.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source)\r\n        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)\r\n        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801)\r\n        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.importFromLegacyTables(DbOOOFactory.java:383)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.access$1500(DbOOOFactory.java:94)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO$2.doInTransactionWithoutResult(DbOOOFactory.java:352)\r\n        at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:134)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.add(DbOOOFactory.java:339)\r\n        at com.xxx.zzz.kkk.MetaJJJ.reload(MetaJJJ.java:44)\r\n        at com.xxx.zzz.kkk.MetaJJJ.startup(MetaJJJ.java:57)\r\n        at com.xxx.zzz.kkk.Start.startupZzz(Start.java:208)\r\n        at com.xxx.zzz.kkk.Start.startup(Start.java:160)\r\n        at com.xxx.start.Starter.startup(Starter.java:264)\r\n        at com.xxx.start.Main.startup(Main.java:270)\r\n        at com.xxx.start.Main.main(Main.java:199)\r\nCaused by: java.sql.SQLException: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107)\r\n        at org.apache.derby.exe.ac12564092x0116xce84xf62dx000055b50d0421.g0(Unknown Source)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n        at java.lang.reflect.Method.invoke(Method.java:597)\r\n        ... 32 more\r\nCaused by: java.sql.SQLException: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 50 more\r\nCaused by: ERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        ... 44 more\r\n============= begin nested exception, level (1) ===========\r\njava.sql.SQLException: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107)\r\n        at org.apache.derby.exe.ac12564092x0116xce84xf62dx000055b50d0421.g0(Unknown Source)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n        at java.lang.reflect.Method.invoke(Method.java:597)\r\n        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)\r\n        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801)\r\n        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.importFromLegacyTables(DbOOOFactory.java:383)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.access$1500(DbOOOFactory.java:94)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO$2.doInTransactionWithoutResult(DbOOOFactory.java:352)\r\n        at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:134)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.add(DbOOOFactory.java:339)\r\n        at com.xxx.zzz.kkk.MetaJJJ.reload(MetaJJJ.java:44)\r\n        at com.xxx.zzz.kkk.MetaJJJ.startup(MetaJJJ.java:57)\r\n        at com.xxx.zzz.kkk.Start.startupZzz(Start.java:208)\r\n        at com.xxx.zzz.kkk.Start.startup(Start.java:160)\r\n        at com.xxx.start.Starter.startup(Starter.java:264)\r\n        at com.xxx.start.Main.startup(Main.java:270)\r\n        at com.xxx.start.Main.main(Main.java:199)\r\nCaused by: java.sql.SQLException: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 50 more\r\nCaused by: ERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        ... 44 more\r\n============= end nested exception, level (1) ===========\r\n============= begin nested exception, level (2) ===========\r\njava.sql.SQLException: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107)\r\n        at org.apache.derby.exe.ac12564092x0116xce84xf62dx000055b50d0421.g0(Unknown Source)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n        at java.lang.reflect.Method.invoke(Method.java:597)\r\n        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)\r\n        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801)\r\n        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.importFromLegacyTables(DbOOOFactory.java:383)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.access$1500(DbOOOFactory.java:94)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO$2.doInTransactionWithoutResult(DbOOOFactory.java:352)\r\n        at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:134)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.add(DbOOOFactory.java:339)\r\n        at com.xxx.zzz.kkk.MetaJJJ.reload(MetaJJJ.java:44)\r\n        at com.xxx.zzz.kkk.MetaJJJ.startup(MetaJJJ.java:57)\r\n        at com.xxx.zzz.kkk.Start.startupZzz(Start.java:208)\r\n        at com.xxx.zzz.kkk.Start.startup(Start.java:160)\r\n        at com.xxx.start.Starter.startup(Starter.java:264)\r\n        at com.xxx.start.Main.startup(Main.java:270)\r\n        at com.xxx.start.Main.main(Main.java:199)\r\nCaused by: ERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        ... 44 more\r\n============= end nested exception, level (2) ===========\r\n============= begin nested exception, level (3) ===========\r\nERROR XSAI2: The conglomerate (-15) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107)\r\n        at org.apache.derby.exe.ac12564092x0116xce84xf62dx000055b50d0421.g0(Unknown Source)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n        at java.lang.reflect.Method.invoke(Method.java:597)\r\n        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)\r\n        at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101)\r\n        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797)\r\n        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801)\r\n        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.importFromLegacyTables(DbOOOFactory.java:383)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.access$1500(DbOOOFactory.java:94)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO$2.doInTransactionWithoutResult(DbOOOFactory.java:352)\r\n        at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)\r\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:134)\r\n        at com.xxx.yyy.DbOOOFactory$DBOOO.add(DbOOOFactory.java:339)\r\n        at com.xxx.zzz.kkk.MetaJJJ.reload(MetaJJJ.java:44)\r\n        at com.xxx.zzz.kkk.MetaJJJ.startup(MetaJJJ.java:57)\r\n        at com.xxx.zzz.kkk.Start.startupZzz(Start.java:208)\r\n        at com.xxx.zzz.kkk.Start.startup(Start.java:160)\r\n        at com.xxx.start.Starter.startup(Starter.java:264)\r\n        at com.xxx.start.Main.startup(Main.java:270)\r\n        at com.xxx.start.Main.main(Main.java:199)\r\n============= end nested exception, level (3) ===========\r\nCleanup action completed\r\n2007-12-12 13:22:40.524 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DATABASE = directory:shape), (DRDAID = null), Rolling back\r\n2007-12-12 13:22:40.885 GMT Thread[Main,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DRDAID = null), Committing\r\n2007-12-12 13:22:40.893 GMT Thread[xxx-start ShutdownHook,5,main] (XID = 1452), (SESSIONID = 2), (DATABASE = directory:shape), (DATABASE = directory:shape), (DRDAID = null), Rolling back\r\n\r\n2007-12-12 13:22:43.104 GMT:\r\nShutting down instance c013800d-0116-ce84-f62d-000055b50d04\r\n\r\n----\r\n(note2self: I have a patch against r192 that reproduces this, and a full copy of the derby.log)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-12T14:33:06.857+0000","updated":"2007-12-12T14:33:06.857+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551077","id":"12551077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"What is the last error, if any in derby.log which precedes the error you posted.\r\n\r\nAlso I see that this is session 2.  Is your app multi-threaded?  Is it using multiple connections?  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2007-12-12T19:03:13.074+0000","updated":"2007-12-12T19:03:13.074+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551079","id":"12551079","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"in the case where you can reproduce this.  Is it always the same statement at the same point in the app that fails?  Is the error always exactly the same (ie. is the conglomerate number always -15)?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2007-12-12T19:04:57.108+0000","updated":"2007-12-12T19:04:57.108+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551086","id":"12551086","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"looking at your recent posting I think the error is actually while executing code as part of a trigger.  \r\nUnfortunately I don't think are error logging handles this nesting of execution very well.  The error is happening\r\nas part of executing code as part of a trigger - but I don't think we are logging the query in the trigger that is \r\ncausing the problem.\r\n\r\nWould it be possible to post the query that is executing in your java code.  :\r\n    at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:79)\r\n        at com.xxx.zzz.kkk.sp.SubTTT$1.work(SubTTT.java:43)\r\n        at com.xxx.zzz.kkk.sp.Template.getResult(Template.java:80)\r\n        at com.xxx.zzz.kkk.sp.SubTTT.insert(SubTTT.java:107) \r\n\r\nIs it possible that code has changed somewhat and that could be what affects whether the bug reproduces or not?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2007-12-12T19:15:31.591+0000","updated":"2007-12-12T19:15:31.591+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551117","id":"12551117","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"Yes it's pretty deep in a trigger.\r\n\r\nI think the statement that kicks everything off, that you request is\r\n\r\nINSERT INTO SubTTT ( nShapeID , nSubShapeID , nColorID ) SELECT DISTINCT C.nRCID , S.nRCID , (S\r\nELECT nColorID FROM Colorition WHERE nIsCCC = 1) FROM LegacySubCCC SC JOIN LegacyCCC C ON SC.nRunID = ? AND C.nRunID = ? AND C.nICCCID = SC.nICCCID JOIN LegacyCCC S ON S.nRunID = ? AND S.nICCCID = SC.nISubCCCID LEF\r\nT JOIN SubTTT SO ON SO.nShapeID = C.nRCID AND SO.nSubShapeID = S.nRCID WHERE SO.nShapeID IS NULL\r\n\r\nwhich is logged up there somewhere.\r\n\r\nThere are no errors before what I have posted, but the execution of the above statement is several pages back in the log.\r\n\r\nAs you say, changing the code a bit stops the bug. Interestingly, if I select out of a different Legacy* table then I don't get the bug.\r\n\r\nEven more interestingly, if I shove the data in a Temporary table, then select out of that, I get the bug still! And the conglomerate number changes.\r\n\r\nAbsolutely 100% the same each time I run the whole shebang.\r\n\r\nNot really multi-threaded, there is an ij session on stdout/in so that I can take a peek in the embedded database while debugging. However, I don't think this  connects before the bug bites. The java app does try to connect to an existing database, and if this fails, connect again with ;create=true, and runs the create script. Actually, initially, there may be another connection opened adn closed that just finds out what version of derby is running etc, but this closes straight after having a look around.\r\n\r\nI'm just trying to run with fewer rows in the table that gets selected from, for the hell of it, as the bug arises with the largest row count Legacy table.\r\nInitial results seem to show that fewer rows (we're only talking 4 being few, 100 being many) doesn't trigger the bug. I'm gonna check that this still exercises the same code path.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-12T21:35:46.769+0000","updated":"2007-12-12T21:35:46.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551161","id":"12551161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"I can narrow it down to the inclusion of five rows in the selected set - these rows don't seem to cause any different logic to be followed, but they possibly cause a loop that executes SQL in the proc to be run a few extra times.\r\n\r\nFor now, I'm going back to 10.2.2.0. Everything works there.\r\n\r\nMay be in the future a stupid mistake in the script will show itself.\r\n\r\nLast thought: would a shorter transaction make such a conglomerate error less likely? Though from a business logic point of view this isn't an option.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-12T23:50:45.191+0000","updated":"2007-12-12T23:50:45.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551165","id":"12551165","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> I can narrow it down to the inclusion of five rows in the selected set - these rows don't seem to\r\n> cause any different logic to be followed\r\n\r\nI haven't been following this very closely, but the fact that 5 rows is the magic number and that Mike mentioned temporary files made me think of impl/sql/execute/TemporaryRowHolderImpl.java, where we have:\r\n\r\npublic static final int DEFAULT_OVERFLOWTHRESHOLD = 5;\r\n\r\nExamination of the code shows that this will be the size of \"rowArray\" for the TemporaryRowHolder, and once we reach 5 rows we'll create a temporary conglomerate to store the extra rows.  I can't be certain, but I *think* that one of the ways in which we use TemporaryRowHolders is when we update a unique index column, in which case we put the new row into a temporary row holder, delete the old row, then insert from the temporary row holder.  This indirection allows correct processing of scenarios when the new (updated) value of one row matches the old value of another row (by deleting the old row first and *then* inserting new row, we avoid throwing a duplicate key violation).\r\n\r\nMaybe that's related, maybe not.  Just thought I'd mention it since I saw the number 5...\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-12-13T00:11:12.274+0000","updated":"2007-12-13T00:18:59.365+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551168","id":"12551168","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Ah, never mind, I see Mike already covered what I just wrote:\r\n\r\n  \"...looks like we are somehow losing the temporary file associated with a deferred update\"\r\n\r\nSorry for the noise (oops).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2007-12-13T00:20:53.427+0000","updated":"2007-12-13T00:20:53.427+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551496","id":"12551496","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"ooh, 10.3.2.1 is out:\r\n\r\nBug still present :-(\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-13T12:50:54.840+0000","updated":"2007-12-13T12:50:54.840+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12551931","id":"12551931","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"I'm going in....\r\n\r\nrolling my own 10.3.2.1...\r\n\r\nOpening impl/sql/execute/TemporaryRowHolderImpl.java....\r\n\r\npublic static final int DEFAULT_OVERFLOWTHRESHOLD = 100; \r\n\r\nsquashes the bug - well, probably just chases it into the undergrowth.\r\n\r\n\r\n\r\n\r\nI'll probably fiddle the test data that's used on Monday to avoid the bug :-)\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-14T20:23:27.937+0000","updated":"2007-12-14T20:23:27.937+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12552433","id":"12552433","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"Tried with different test data and still hit the bug, so here's a test case.\r\n\r\nIncludes a stored proc, create script, data, etc.\r\n\r\nWith derby on the CLASSPATH should reproduce just fine with 10.3.2.1 and not fail with 10.2.2.0\r\n\r\nI have reduced things as far as I could. Don't even have constraints now. Only 3 tables with 2 cols each.\r\n\r\nIt seems the 'insert.first' query in SubShape.properties is necessary to reproduce the bug, so may be it has something to do with updating a table you have already updated in the same tran?\r\n\r\nAnd it seems to be when the sp is called for the second time? but I'm pretty sure there is no recursion problem there. Anyhoo, it works fine on 10.2.2.0, so I don't *think* the trigger/sp is doing anything too strange.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-17T15:09:04.666+0000","updated":"2007-12-17T15:09:04.666+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12554994","id":"12554994","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"If I don't reuse the prepared statement, then the bug is avoided.\r\n\r\nSubShape.java:\r\n\r\n\t\t\t\t\tfor (long i = r.getLong(1); i >= 0; i--) {\r\n\t\t\t\t\t\tif (conn.prepareStatement(sql\r\n\t\t\t\t\t\t\t\t.getProperty(\"insert.test\")).executeUpdate() < 1)\r\n\t\t\t\t\t\t\tbreak;\r\n\r\nSo, I guess this bug is caused by something not being cleared when reusing the PreparedStatement.\r\n\r\nA work around is basically to not use the PreparedStatement again, which obviously defeats the purpose :-)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2007-12-30T11:44:29.587+0000","updated":"2007-12-30T11:44:29.587+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12555324","id":"12555324","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"When I run the test case with a sane build (trunk), I get an assert failure:\r\n\r\nij> INSERT INTO SubShape (nID, nSubID) SELECT nID, nSubID FROM Test;\r\njava.sql.SQLException: Java exception: 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLInteger) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLLongint): org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)\r\n\tat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:245)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1666)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1324)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1650)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299)\r\n\tat SubShape.insert(SubShape.java:37)\r\n\tat org.apache.derby.exe.ac12564092x0117x3b06x55cfx0000003a57281.g0(Unknown Source)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\r\n\tat java.lang.reflect.Method.invoke(Method.java:597)\r\n\tat org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)\r\n\tat org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:74)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:159)\r\n\tat org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:269)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1150)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1234)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:624)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:556)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:330)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:508)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:215)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:73)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\nCaused by: java.sql.SQLException: Java exception: 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLInteger) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLLongint): org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)\r\n\t... 35 more\r\nCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLInteger) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLLongint)\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)\r\n\tat org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(MergeSort.java:472)\r\n\tat org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:98)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(SortResultSet.java:317)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:268)\r\n\tat org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore(NormalizeResultSet.java:147)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:407)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1234)\r\n\t... 28 more\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-01-02T15:13:49.252+0000","updated":"2008-01-02T15:13:49.252+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12555896","id":"12555896","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Could this be another followup error from DERBY-827? Seems like the problem COULD be that SortResultSet.sortTemplateRow is not reset/recomputed when SortResultSet is closed (nothing is done to it in SortResultSet.close()). It seems like the sanity check which compares sortTemplateRow to the row being fed to the sorter fails, which I guess could happen if the template left over from the previous execution doesn't match the new one.\r\n\r\nI'll try out the repro and see if the theory holds.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-04T11:28:48.353+0000","updated":"2008-01-04T11:28:48.353+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12555945","id":"12555945","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"My theory does NOT hold :( The failure still happens when sortTemplateRow is re-initialized in each call to openCore. Could this be a conversion thing? That is; should it be possible to promote an SQLInteger to an SQLLongint? If I read the code correctly, it seems like col2 is the sort template (SQLLongint) and col1 is from the current row. Also, where does the last NPE come from? Is that just a consequence, or is it significant? ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-04T15:38:37.561+0000","updated":"2008-01-04T15:38:37.561+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12555967","id":"12555967","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Looking more closely at the repro, I see that all columns are of type BIGINT. So it seems reasonable that the sort template has type SQLLongint, but why is it given a row where the 3rd (the failure is is reported for the third (colid=2) column) column has type SQLInteger?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-04T16:18:50.579+0000","updated":"2008-01-04T16:18:50.579+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12555977","id":"12555977","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Hi Dyre, thanks for looking at this! You might find it useful to capture the generated\r\ncode and decompile it, then look at that together with a close look at the query plan.\r\nPresumably the sort is due to a GROUP BY or ORDER BY clause in the query, or\r\nperhaps due to a DISTINCT? When I was looking at some datatype mismatch\r\nproblems in ORDER BY processing (DERBY-2352), I saw that the code generation\r\nlogic for these areas involves objects like the ResultColumn and the OrderByList.\r\nHopefully this is helpful, let me know and I can try to offer some more ideas.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-01-04T16:43:15.656+0000","updated":"2008-01-04T16:43:15.656+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12556519","id":"12556519","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Dyre, I think you are right that this is a regression caused by DERBY-827. I'm not able to reproduce the error on revision 540920, but it is reproducible on revision 540921, which introduced the reuse of result sets.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-01-07T09:20:04.713+0000","updated":"2008-01-07T09:20:04.713+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12556565","id":"12556565","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Thanks for your feedback, Bryan and Knut. So it is indeed a consequence of DERBY-827 :(\r\n\r\nHmm, the strange part is that according to the call stack posted by Knut the error happens at SubShape.insert(SubShape.java:37):\r\n\r\n                                 // if nothing is new, then nothing to do\r\n                                if (ps.executeUpdate() > 0) {\r\n\r\n                                        // do pre stuff\r\n                                        for (String stmt : sql.getProperty(\"pre\"\r\n).split(\";\")) {\r\n                                                ps = conn.prepareStatement(stmt)\r\n;\r\n                                                ps.executeUpdate();  // <--- line 37\r\n                                        }\r\n\r\nSo this particular statement is AFAICT never re-executed. So, in theory, DERBY-827 should not make a dfference here, and if I read James' comment correctly, it is the prepared statement being re-executed at line 57 that seems to be the culprit. Meaning that preparing it prior to each execute removes the symptom...\r\n\r\nSo we have to assume then, that some cruft left in the internal result set tree of this prepared statement SOMEHOW causes the newly prepared statement at line 37 to fail. Right now, I cannot imagine how that could happen... \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-07T13:49:47.711+0000","updated":"2008-01-07T13:49:47.711+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12556605","id":"12556605","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"The ASSERT reported in a debug build is really a red herring and\r\nnot related to the original problem. I think the ASSERT simply is\r\ntoo strict as it does not allow what would be legal\r\nconversion. Simply modifying the queries so that they explicitly\r\nCAST all INTEGER values to BIGINT seems to remove that\r\nproblem (see attached modified_SubShape.properties), and exposes the\r\noriginal problem with the missing temporary conglomerate. And\r\nthat problem is only reported by the prepared statement that is\r\nactually re-executed, so that fits nicely with the DERBY-827\r\nhypothesis.\r\n\r\nThe new call-stack from the line 57 (insert.test) statement shows\r\nthat the missing conglomerate error comes from (re-)using\r\nInsertResultSet.rowHolder. At first I thought the problem was\r\nthat close() isn't called on this object in\r\nInsertResultSet.close(), but then I noticed that\r\nnormalInsertCore() calls close() on it:\r\n\r\n\t\tif (rowHolder != null)\r\n\t\t{\r\n\t\t\trowHolder.close();\r\n\t\t\t// rowHolder kept across opens\r\n\t\t} \r\n\r\nThe comment doesn't really make sense since rowHolder, in fact,\r\nis closed. Anyway, the real problem is that code in the beginning\r\nof normalInsertCore() assumes that the comment is true, and only\r\ninitializes rowHolder on the first execute:\r\n \r\n\t\tif (firstExecute && constants.deferred)\r\n\t\t{\r\n\t\t\tProperties properties = new Properties();\r\n\r\n\t\t\t// Get the properties on the old heap\r\n\t\t\trowChanger.getHeapConglomerateController().getInternalTablePropertySet(properties);\r\n\r\n\t\t\t/*\r\n\t\t\t** If deferred we save a copy of the entire row.\r\n\t\t\t*/\r\n\t\t\trowHolder = new TemporaryRowHolderImpl(activation, properties);\r\n\t\t\trowChanger.setRowHolder(rowHolder);\r\n\t\t}\r\n\r\nSimply commenting out firstExecute in the if-test (see attached\r\nderby-3221.prelim.diff) makes the repro run without problems. I\r\nhave not run any other tests with this change, nor do I know if\r\nthis is the right approach. But at least it points to what causes\r\nthe problem, and explains why it was introduced by DERBY-827.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-07T16:03:41.271+0000","updated":"2008-01-07T16:03:41.271+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12556852","id":"12556852","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Minor update: Knut suggested that I could try to comment out the call to rowHolder.close() rather than the firstExecute test to make the code match the comment. Unfortunately, when I tried it, I got the missing conglomerate error again, so it seems that keeping the rowHolder open is not enough to prevent the temp conglomerate from disappearing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-08T09:23:27.162+0000","updated":"2008-01-08T09:23:27.162+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557261","id":"12557261","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"I did some more digging, and I now think I know how it should be fixed, (creating a new TemporaryRowHolderImpl object in each execution works, but is overkill). I noticed that the problem did not occur EVERY time a prepared statement was re-executed. Sometimes it would not fail until the 9th execution. \r\n\r\nIt turns out that the problem was a lack of communication between TemporaryRowHolderImpl and  TemporaryRowHolderResultSet. When rows are inserted into the RowHolder it will fill as many rows as it can into its internal rowArray, before creating, and \"spilling over\" into a temporary conglomerate. \r\n\r\nThe RowHolderResultSet  is used to read the rows back out, so it starts by returning the rows from the rowArray, and then proceeds with rows from the temporary conglomerate. Unfortunately, the RowHolder doesn't provide a proper API for checking if a temporary conglomerate has actually been created. To get around this RowHolderResultSet checks if  RowHolder.CID (the conglomerate id of the temporary conglomerate) is 0. If it is, RowHolderResultSet assumes that no temporary conglomerate has been created.\r\n\r\nThis scheme worked well when internal result sets were not reused because then each execution started with a newly created RowHolder which had its CID member initialized to 0. But when results sets are reused this fact cannot be relied upon since CID it NOT set back to 0 by RowHolder.close(). \r\n\r\nSo the error will ONLY surface when a prepared statement has caused the rowHolder to spill into a temporary conglomerate (thereby assigning a value != 0 to CID), and some subsequent execution does NOT spill over. Then when the latter execution tries to read from the RowHolderResultSet it will incorrectly look for a temporary conglomerate that was never created in the insert-phase.\r\n\r\nI'm currently running tests on a patch that provides an api for testing if the conglomerate has been created (and also sets CID to 0 in close()). I plan to upload it if the tests pass.\r\n\r\n(There should probably be a regression test for this, but James' repro does not have ASF license so I guess we can't just convert that to JUnit).\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-09T13:24:29.180+0000","updated":"2008-01-09T13:24:29.180+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557269","id":"12557269","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"All tests pass (except jdbc4/ResultSetTest as reported in the Tinderbox test).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-09T13:40:13.138+0000","updated":"2008-01-09T13:40:13.138+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557287","id":"12557287","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I think the fix looks good, but I'm not completely convinced that (holder.CID == 0) is equivalent to (!holder.isConglomCreated()). In TemporaryRowHolderImpl.truncate(), conglomCreated is set to false, but CID is left untouched, so they may get out of sync. (But since truncate() first calls close(), which will drop the conglomerate, I don't think that this code will ever be executed. Perhaps it's better to remove it?) Similarly, TemporaryRowHolderResultSet.reStartScan() sets CID and leaves conglomCreated untouched. Do you think this can cause any problems?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-01-09T14:53:11.363+0000","updated":"2008-01-09T14:53:11.363+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557291","id":"12557291","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Sigh... you are probably right. I guess that the safest thing to do is to stick with the CID==0 test, and set it to 0 whenever the temporary conglomerate is removed. But I think that a more explicit and intuitive predicate would have made the code easier to read. Come to think of it, I really loathe such \"cooperating classes\" where correct behavior depends on a shared state that's manipulated by both... but in this case I guess a smaller, less intrusive, change is preferable.\r\n\r\nWrt. reStartScan(): I would assume that when you restart a scan must already have a CID from when the scan was first started (and so presumably conglomCreated is true), but I have not verified this, so yes it might be a problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-09T15:22:27.299+0000","updated":"2008-01-09T15:22:27.299+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557355","id":"12557355","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"> I really loathe such \"cooperating classes\" where correct behavior depends \r\n> on a shared state that's manipulated by both\r\n\r\nI think you are right to criticize this implementation. Perhaps a reasonable\r\napproach is to first make and verify the small fix, then later, separately,\r\nre-design this interaction as you suggest, with an explicit API for tracking\r\nwhether or not the temporary row holder overflowed to an explicit conglomerate or not.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2008-01-09T17:45:13.714+0000","updated":"2008-01-09T17:45:13.714+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12557979","id":"12557979","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"body":"FYI: DERBY-39 may be connected?\r\n\r\nI can't see how, but I can use almost the same test case as above to reproduce DERBY-39","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=northshorefiend","name":"northshorefiend","emailAddress":"spam123 at JamesAshepherd dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"James Alan Shepherd","active":true},"created":"2008-01-11T13:10:29.237+0000","updated":"2008-01-11T13:10:29.237+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12558015","id":"12558015","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Thanks James,\r\nI took your DERBY-39 repro for a spin, but unfortunately I keep hitting DERBY-3310 and this time I don't seem to be able to work around it with a cast, so I need to manually disable the ASSERT, I think.\r\n\r\nI'm currently running tests for a new version of my patch, where I\r\n- revert back to testing the presence of a temp conglom with CID==0\r\n- make CID private\r\n- make clients (TemporaryRowHolderResultSet) use the existing accessor (getTemporaryConglomId())\r\n- always set CID to 0, when conglomCreated is set to false and the conglomerate is removed\r\n\r\nRight now I'm providing a mutator for CID that reStartScan can use, but I cannot see what purpose this really serves. Changing the CID behind the owning class' back like that seems like it has the potential to introduce both leaks and inconsistencies. I'm trying to flag any situation where a conglomerate could be leaked, or the holder left in an inconsistent state, and see if this actually happens in the tests. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-11T16:10:11.184+0000","updated":"2008-01-11T16:10:11.184+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12558609","id":"12558609","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"I looked into the use of\r\nTemporaryRowHolderResultSet.reStartScan(long, long) some more, and\r\nit turns out that it is only used a couple of places in\r\nDependentResultSet. In all of those cases the two arguments are\r\nobtained from the very same TemporaryRowHolderImpl object\r\nwhich this TemporaryRowHolderResultSet refers to. So those\r\nparameters are unnecessary, and the temporary conglomerate id is\r\nnever actually modified by reStartScan().\r\n\r\nI'm currently testing a new patch which does include a mutator for the CID\r\nvariable, but which also has an ASSERT which verifies that the\r\nnew and old values are identical.\r\n\r\nAs suggested by Bryan, I defer a more thorough cleanup to a later patch.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-14T14:10:57.256+0000","updated":"2008-01-14T14:10:57.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12558663","id":"12558663","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"New patch (v2) (described in previous comments).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-14T16:41:52.167+0000","updated":"2008-01-14T16:41:52.167+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12559410","id":"12559410","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Patch v2 looks good. Adding a getter and a setter for CID and making it private was a good move. +1 to commit.\r\n\r\nTwo small issues that you may want to address:\r\n\r\n- The patch adds some whitespace in TemporaryRowHolderImpl.java right above makeIndexProperties()\r\n\r\n- It looks a bit odd to have an assert inside the mutator to ensure that it doesn't mutate the field. It also makes the method useless for others who may have a perfectly legitimate reason to mutate the field. Perhaps it's better to move the assert to the caller, since that's the context where the assert is meaningful.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2008-01-16T09:31:30.183+0000","updated":"2008-01-16T09:31:30.183+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12559977","id":"12559977","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Attaching v3 to address Knut's latest comments. I was about to say that he just has to live with the white space diff since that's what Netbeans does, but then I softened up and edited the file in emacs... :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-17T16:22:42.012+0000","updated":"2008-01-17T16:22:42.012+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12560319","id":"12560319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Committed revision 613116.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-18T09:54:57.826+0000","updated":"2008-01-18T09:54:57.826+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12562122","id":"12562122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Would it make sense to port this to 10.3?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2008-01-24T16:28:09.218+0000","updated":"2008-01-24T16:28:09.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12562138","id":"12562138","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"I would think so. I can try to do that tomorrow. I probably need to practice my merging skills...  :)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-24T17:30:27.589+0000","updated":"2008-01-24T17:30:27.589+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12562585","id":"12562585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Merged to 10.3 with revision 615273","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-25T17:16:28.494+0000","updated":"2008-01-25T17:16:28.494+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12562614","id":"12562614","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hallorant","name":"hallorant","emailAddress":"hallorant at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tim Halloran","active":true},"body":"Any idea when 10.3.2.2 will be released?  I couldn't find a download for it yet on the site.  Best regards","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hallorant","name":"hallorant","emailAddress":"hallorant at acm dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tim Halloran","active":true},"created":"2008-01-25T18:30:38.416+0000","updated":"2008-01-25T18:30:38.416+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12562850","id":"12562850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"body":"Hi Tim, \r\n\r\nmy understanding is that there are no specific plans to make another 10.3 release, (such a release would be numbered 10.3.3.x for some x which depends on the number of release candidates needed). Check out Kathey Marsden's reply to my related question about this on derby-dev:\r\n\r\nhttp://www.nabble.com/Confused-about-merging-and-fix-versions-to15092390.html\r\n\r\nAs the release manager for 10.4 (which definitely will have this fix) I guess it is my job to convince you to switch to that :)  Anyway, you can read about it here (please note that as this is open-source the dates on this page are goals, not definite promises):\r\n\r\nhttp://wiki.apache.org/db-derby/DerbyTenFourRelease","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dyret","name":"dyret","emailAddress":"Dyre dot Tjeldvoll at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dyre Tjeldvoll","active":true},"created":"2008-01-26T12:32:11.257+0000","updated":"2008-01-26T12:32:11.257+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12383008/comment/12563232","id":"12563232","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"dyre> my understanding is that there are no specific plans to make another 10.3 release\r\n\r\nFor what it's worth, I think that in *theory* it should be safe to use a \"personal\" build off the 10.3 branch in a production environment.  At least, that is one of the goals of a stable branch, so far as I understand it.  Note the following line from the Apache Derby home page:\r\n\r\n  http://db.apache.org/derby/dev/derby_source.html#Branches\r\n\r\n  \"Production use of Derby should use official Derby releases or snapshot builds off\r\n    the branches (or self built jars off the branches with bug fixes).\"\r\n\r\nThe parenthetical at the end is what I'm referring to.  So Tim, you could in theory build your own jars off the 10.3 branch and use that in production, if waiting for 10.4 is not an option...\r\n\r\nUnless of course the above-quoted page is wrong, in which case I hope someone a) corrects me rather quickly, and b) updates the page accordingly...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2008-01-28T18:29:02.131+0000","updated":"2008-01-28T18:29:02.131+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-3221/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06rcn:"}}