{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12468646","self":"https://issues.apache.org/jira/rest/api/latest/issue/12468646","key":"LUCENE-2529","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314822","id":"12314822","description":"Major release after 3.x","name":"3.1","archived":false,"released":true,"releaseDate":"2011-03-31"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2010-07-09 10:12:46.842","customfield_12312323":null,"customfield_12310420":"11298","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_7206672815_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-09-28T02:21:58.371+0000","workratio":0,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2529/watchers","watchCount":0,"isWatching":false},"created":"2010-07-06T16:30:45.556+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":3600,"aggregatetimeoriginalestimate":3600,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314799","id":"12314799","description":"Bugfixes of 2.9.2","name":"2.9.3","archived":false,"released":true,"releaseDate":"2010-06-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314798","id":"12314798","description":"Bugfixes for 3.0.1","name":"3.0.2","archived":false,"released":true,"releaseDate":"2010-06-18"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314822","id":"12314822","description":"Major release after 3.x","name":"3.1","archived":false,"released":true,"releaseDate":"2011-03-31"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12314025","id":"12314025","description":"Alpha release of the 4.x series","name":"4.0-ALPHA","archived":false,"released":true,"releaseDate":"2012-07-03"}],"issuelinks":[{"id":"12334081","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12334081","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12475114","key":"LUCENE-2668","self":"https://issues.apache.org/jira/rest/api/2/issue/12475114","fields":{"summary":"offset gap should be added regardless of existence of tokens in DocInverterPerField","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=koji","name":"koji","emailAddress":"koji dot sekiguchi at rondhuit dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=koji&avatarId=17548","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=koji&avatarId=17548","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=koji&avatarId=17548","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=koji&avatarId=17548"},"displayName":"Koji Sekiguchi","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-03-30T15:50:03.240+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310232","id":"12310232","name":"core/index","description":"issues with indexing code"}],"timeoriginalestimate":3600,"description":"I'm doing some fancy stuff with span queries that is very sensitive to term positions.  I discovered that the position increment gap on indexing is only applied between values when there are existing terms indexed for the document.  I suspect this logic wasn't deliberate, it's just how its always been for no particular reason.  I think it should always apply the gap between fields.  Reference DocInverterPerField.java line 82:\r\n\r\nif (fieldState.length > 0)\r\n          fieldState.position += docState.analyzer.getPositionIncrementGap(fieldInfo.name);\r\n\r\nThis is checking fieldState.length.  I think the condition should simply be:  if (i > 0).\r\nI don't think this change will affect anyone at all but it will certainly help me.  Presently, I can either change this line in Lucene, or I can put in a hack so that the first value for the document is some dummy value which is wasteful.","customfield_10010":null,"timetracking":{"originalEstimate":"1h","remainingEstimate":"1h","originalEstimateSeconds":3600,"remainingEstimateSeconds":3600},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10120","value":"Patch Available","id":"10120"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":3600,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"25481","summary":"always apply position increment gap between values","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":3600,"percent":0},"customfield_12311024":null,"environment":"(I don't know which version to say this affects since it's some quasi trunk release and the new versioning scheme confuses me.)","customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":3600,"percent":0},"comment":{"startAt":0,"maxResults":28,"total":28,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12886670","id":"12886670","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I agree it's weird that the if checks fieldState.length instead of i; we should fix it, though, this is a subtle break in back-compat.\r\n\r\nOnce we do LUCENE-2309 (fully decouple indexing & analysis) and LUCENE-2450 (write-once attr bindings in the analyzer chain), this sort of fix would be nicely \"external\" to Lucene.  Ie the semantics of how positions / offsets increment across boundaries of multiple fields would be fully determined by the app/analyzer, not baked into Lucene's core.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-07-09T10:12:46.842+0000","updated":"2010-07-09T10:12:46.842+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12886986","id":"12886986","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"How does this change backwards compatibility?  The index format is certainly the same.  And there's no documented or implied contract I'm breaking with this change in increment gap behavior.  I'd be really surprised to learn that anyone actually depends on the current behavior.  When I went into the code I was figuring it might smartly only apply the increment gap if the offset *changed* from one value to another but it doesn't even do that, and so the current algorithm strikes me as a bit arbitrary.  Seems like a safe one-liner commit to me.  But then I'm biased as the reporter ;-)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-07-10T03:33:54.674+0000","updated":"2010-07-10T03:33:54.674+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12887041","id":"12887041","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Well, if an app has a multi-valued field today where the first N (> 1) values analyze to 0 tokens, then this change will alter the positions of subsequent tokens.\r\n\r\nStill, I agree, it seems unlikely that an app is relying on this... so I think we can just break it (and advertise that we did so, in CHANGES under back compat breaks).\r\n\r\nNote that offsets also have logic that avoids adding the offset gap if there were no tokens; but it's slightly different since it will not add the gap if the current value in the multi-valued field had no tokens (whereas the logic for the position gap is only if we've seen net 0 tokens so far).  Seems like we should also fix offset to always add the gap?\r\n\r\nWanna cons up a patch...?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-07-10T14:49:57.417+0000","updated":"2010-07-10T14:49:57.417+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12887062","id":"12887062","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I changed the conditional as described in this issue -- a one-liner.\r\n\r\nI have no comment on the \"offset gap\" as I'm not familiar with the logic you speak of, Michael.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-07-10T17:03:09.156+0000","updated":"2010-07-10T17:03:09.156+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12915063","id":"12915063","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=koji","name":"koji","emailAddress":"koji dot sekiguchi at rondhuit dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=koji&avatarId=17548","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=koji&avatarId=17548","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=koji&avatarId=17548","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=koji&avatarId=17548"},"displayName":"Koji Sekiguchi","active":true},"body":"I'll see this issue and LUCENE-2668 all together.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=koji","name":"koji","emailAddress":"koji dot sekiguchi at rondhuit dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=koji&avatarId=17548","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=koji&avatarId=17548","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=koji&avatarId=17548","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=koji&avatarId=17548"},"displayName":"Koji Sekiguchi","active":true},"created":"2010-09-26T22:35:19.428+0000","updated":"2010-09-26T22:35:19.428+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12915593","id":"12915593","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=koji","name":"koji","emailAddress":"koji dot sekiguchi at rondhuit dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=koji&avatarId=17548","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=koji&avatarId=17548","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=koji&avatarId=17548","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=koji&avatarId=17548"},"displayName":"Koji Sekiguchi","active":true},"body":"trunk: Committed revision 1001796 and 1001957.\r\nbranch_3x: Committed revision 1001991.\r\n\r\nThanks, David!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=koji","name":"koji","emailAddress":"koji dot sekiguchi at rondhuit dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=koji&avatarId=17548","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=koji&avatarId=17548","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=koji&avatarId=17548","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=koji&avatarId=17548"},"displayName":"Koji Sekiguchi","active":true},"created":"2010-09-28T02:21:58.340+0000","updated":"2010-09-28T02:21:58.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12915726","id":"12915726","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I've been so busy; I intended to return to this issue later in the week.  Unfortunately this issue isn't completely resolved in my testing.  It's good that the position increment gap is always applied now, but there is some other increment logic in this class that foils my attempts to coordinate the positions across multiple fields, particularly when the first value is non-existent for a multi-valued field.  I'll post more about it later.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-09-28T12:40:48.999+0000","updated":"2010-09-28T12:40:48.999+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917157","id":"12917157","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Always adding the position increment is good but insufficient to solve my problem.\r\n\r\nA new patch rectifies the followup situation I reported inadvertently to LUCENE-2668 that I should have said here.  The jist is that DocInverterPerField _conditionally_ decrements the position and then always increments it, and this is problematic for attempting to keep position increments across several multi-value fields aligned (using an analyzer setting posIncr to 0) when the first value generates no tokens (either blank or stop words).  Mike McCandless pointed out that the unfortunate existing logic had to do with preventing the position from becoming -1 which doesn't work with payloads -- LUCENE-1542.  \r\n\r\nMy new patch here doesn't even have a pre-decrement nor post-increment and thus I find the code easier to follow.  It ignores the provided position increment of the first token (typically 1), voiding the need to shift them back and forth.  There is one oddity included here and that is I always add 1 to the position increment _gap_ (i.e. between values).  With this oddity included, all the tests pass (except for the test for this very issue, which I correct in this patch)  --yay!  Without this oddity, a handful of tests failed that depended on the first token adding one to the position.  My +1 up at the value loop can be seen as actually enforcing that the first token's position is 1, and also adding a +1 for when there is no token for a value (critical for aligning multiple fields).  Perhaps this +1 should happen at a different line number to be less confusing but the end result should be the same.\r\n\r\nI expect for many people this is very confusing, especially if you're not knee deep in this subject as I am presently.  Mike, hopefully you're understanding what I'm up to here.  The tests pass, remember.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-02T04:27:45.932+0000","updated":"2010-10-02T04:27:45.932+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917177","id":"12917177","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I like the idea of disregarding the posIncrGap of the first token.\r\n\r\nMaybe, instead of that +1 inside IW, we change the default posIncrGap\r\nto 1?\r\n\r\nCan you spell out examples of how the indexed positions will change w/\r\nthis patch -- I'm having trouble visualizing this.  EG for a single\r\nvalued field, multi-valued, etc.\r\n\r\nFor one, because we now ignore the token's posIncrGap if it's the\r\nfirst token (per value in the field), any tokenizer that alters the\r\nposIncr from the default (1) will now see different positions indexed,\r\nright?\r\n\r\nMan I really want to get this logic out of indexer and into the\r\nanalysis chain (LUCENE-2450 enables this).  How multi-valued streams\r\nshould handle the transition from one value to another shouldn't be\r\ninside the indexer... and maybe (someday) tokens should store their\r\nposition (not the gap) so we don't have this cryptic logic inside the\r\nindexer...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-10-02T10:10:36.613+0000","updated":"2010-10-02T10:10:36.613+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917178","id":"12917178","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Duh, sorry I meant \"I like the idea of disregarding the posIncr of the first token\" (not the posIncrGap).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2010-10-02T10:11:19.258+0000","updated":"2010-10-02T10:11:19.258+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917237","id":"12917237","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"(patch updated)\r\n\r\nbq. Maybe, instead of that +1 inside IW, we change the default posIncrGap to 1?\r\n\r\nI had the +1 for the gap (i.e. between values) level because I was trying to get a blank value (or a value consisting of stop words) to bump the position counter as well.  I've been tinkering with this a bit more and I realize now that I can still achieve my aims without doing that, but it's still necessary to ignore the very first position increment of the very first value -- only.  See the new patch.  I think the result now should be even more amenable to others (i.e. is least disruptive) since anyone messing with the position increment of the first token of subsequent values will still be honored.\r\n\r\nbq. Can you spell out examples of how the indexed positions will change w/ this patch - I'm having trouble visualizing this. EG for a single valued field, multi-valued, etc.\r\n\r\nA single valued field is unaffected.  The first emitted token (if there are any at all) will remain at position 0 no matter what the analyzer does.  This is also true for the first value of a multi-valued field if there is any.\r\n\r\nFor multi-valued fields, it is now always the case that the first token of subsequent values (e.g. not the first value) will be the previous position (0 if none) + the gap + the first position increment of this value (typically 1).  This is consistent and sensible.  Formerly,\r\nif the first value was a blank value (or a value consisting of stop words), then you'd get 1 less than what you get now.  I hope the test I modified as part of this patch makes this more clear; I had to increment the tested positions by 1.\r\n\r\nAs I said before, I also think that the code is more clear since it no longer has that conditional pre-decrement and post increment of the position that was probably only understood by you.  And I did away with the weird \"+1\" at the gap in my previous patch.\r\n\r\nbq. Man I really want to get this logic out of indexer and into the analysis chain (LUCENE-2450 enables this). How multi-valued streams should handle the transition from one value to another shouldn't be inside the indexer... and maybe (someday) tokens should store their position (not the gap) so we don't have this cryptic logic inside the indexer..\r\n\r\nThat sounds great.  There are other strategies of messing with position increments that I simply can't do without hacking this code further.  For example, it would be neat if the first token of a value could be devised to start at posIncGap*valueIndex (ex: 0, 1000, 2000, ...) so that Span queries could determine which value index a term matched against by looking at it's position (ex: 3092: divide by 1000, drop remainder, add 1: the 4th value ).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-02T18:49:54.322+0000","updated":"2010-10-02T18:49:54.322+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917650","id":"12917650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. but there is some other increment logic in this class that foils my attempts to coordinate the positions across multiple fields, particularly when the first value is non-existent for a multi-valued field.\r\n\r\nI don't think this will ever completely work correctly though, for example the only way to \"accumulate\" positions across a field that ends with a stopword / all stopwords would be to add a positional equivalent to end() that we did for offsets, so that highlighting would work for multi-valued fields. otherwise reset() -> clearAttributes() and the PositionIncrementAttribute is \"lost\"\r\n\r\nI think if you are trying to coordinate positions across multi-valued fields, it probably means you shouldn't be using a multivalued field. It seems to only make sense to put multiple *independent* values in a multi-valued field, not ones that are \"continuations\" of each other. By definition if they are continuations of each other, I think its better to index the whole thing as single-valued... and you have complete control of the positions within your tokenstream.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T16:18:01.918+0000","updated":"2010-10-04T16:18:01.918+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917655","id":"12917655","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Rob, I don't completely follow your first paragraph, but this patch I posted _does_ work correctly for what I'm doing.  It is one part of the puzzle in searching multi-valued fields at coordinated positions.  The other part is span queries with field masking.  For my problem space, I'm willing to sacrifice the ability to do phrase queries.  I can't do them because my solution forces all position increments to 0, but using a gap.\r\n\r\nMy patch here (and the patch already applied by Koji recently) for this issue isn't really code specific to the problem I'm solving, but it is necessary for my approach, and I think makes the logic in this class easier to follow and more consistent with respect to the behavior of the position increment gap and handling of the very first position increment.  All existing tests pass.  On the basis of that alone, I'm hopeful that you, Michael, and other committers are amenable to applying this patch.\r\n\r\nI acknowledge I could try to operate completely within a single value and thereby have more control over the position increments.  That's an idea I didn't think of, thanks.  But I believe the point I just made on my patch being an improvement stands.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-04T17:10:07.498+0000","updated":"2010-10-04T17:10:07.498+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917663","id":"12917663","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. Rob, I don't completely follow your first paragraph\r\n\r\nWhat i was trying to say, is that there's no way for positions to be properly accumulated across multi-valued fields.\r\nfor example (i will use the pipe as a field separator and assume english stopwords):\r\n{noformat}\r\nbrown fox | went to | market\r\n{noformat}\r\n\r\nIn this case the index will \"lose\" the 2 position increments caused by \"went\", and \"to\", and they \r\nwon't be reflected in the \"market\" position.\r\n\r\nMy suggestion is that if you have values like this with position dependencies, they are really\r\none single value, not independent values, and don't belong in a multivalued-field.\r\n\r\nIn this case, if you simply index the entire content as one field, and in your tokenstream handle the \r\nseparator however you want, and the \"market\" token will properly reflect whatever you previously did \r\nwith the tokens, either via that separator and/or stopwords or other things.\r\n\r\nbq. For my problem space, I'm willing to sacrifice the ability to do phrase queries.\r\n\r\nRight, but my concern is that other users are not. \r\nI don't think we should discard the first token's position increment value completely, will the QueryParser do this too?\r\n\r\nbq. My patch here (and the patch already applied by Koji recently) for this issue isn't really code specific to the problem I'm solving, but it is necessary for my approach\r\n\r\nThe previous patch (the one described on the issue) I definitely agreed with. \r\nBut what you speak of here (discarding the first token's position) is different, \r\nand I'm not convinced its necessary for your approach (you could use a single-valued field).\r\n\r\nbq. All existing tests pass. On the basis of that alone, I'm hopeful that you, Michael, and other committers are amenable to applying this patch.\r\n\r\nWell, unfortunately (not your fault at all!) that isn't very comforting to me. \r\nFor example, the queryparser has very minimal tests wrt this sorta stuff, yet\r\nas I mentioned above its important to think about how it consumes tokenstreams, \r\nbecause if its inconsistent with the indexer then queries start returning less results.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T17:26:38.043+0000","updated":"2010-10-04T17:26:38.043+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917696","id":"12917696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Here's a patch, showing what i mean about why it is bad to discard the first position.\r\n\r\nThe test uses SpanFirstQuery (imagine a custom queryparser that supports a \"starts-with\" operator).\r\n\r\nthe test passes on trunk, but fails if i apply the patch to discard the position of the first term.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T18:41:32.390+0000","updated":"2010-10-04T18:41:32.390+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917697","id":"12917697","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"bq. My suggestion is that if you have values like this with position dependencies, they are really one single value, not independent values, and don't belong in a multivalued-field.\r\n\r\nMy use-case is not like your example.  The value at index x has no relation to values before or after it in the same field.  It _does_ have a relationship to a separate multi-valued field's value at the same value index.  With this patch and an analyzer that sets all position increments to 0, all tokens for the same value index across both fields will have the same token position.\r\n\r\nbq. (me)    For my problem space, I'm willing to sacrifice the ability to do phrase queries.\r\n\r\nbq. Right, but my concern is that other users are not.  I don't think we should discard the first token's position increment value completely, will the QueryParser do this too?\r\n\r\nThe fact that my entire solution (for which this patch is a subset) can't do phrases is not evident in this patch.  Perhaps I should have kept my overall use case a secret so as not to cloud the purpose of this patch.  This patch is about generating predictable/intuitive/sensible (in my opinion) position values, particularly at the very start of a field.  I hope you would share my opinion if you apply the patch and examine the results such as what the test case the patch modifies does.\r\n\r\nIn my opinion (and apparently Mike McCandless -- \"I like the idea of disregarding the posIncrGap of the first token.\") I disagree.  The point of a position increment gap is only meaningful _between_ values.  It's meaningless for the first token.  At your suggestion I looked in QueryParser.java to look for problems that may have to do with the position increment.  I don't see any problems that would be introduced by this patch.  For convenient reference here, the position increment is grabbed at line 608:\r\n{code:java}\r\nint positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\r\nif (positionIncrement != 0) {\r\n  positionCount += positionIncrement;\r\n} else {\r\n  severalTokensAtSamePosition = true;\r\n}\r\n{code}\r\n\r\nThe ensuing logic seems pretty sane to me (albeit complicated).  The only thing in here that could arguably be improved is line 645:\r\n{code:java}\r\nif (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\r\n{code}\r\nI think the \"== 1\" should be \"<= 1\" just in case there's some intentional oddities in the analyzer that 99.9% of people wouldn't ever do.  I'm in the exception case.  But I have a different query time analyzer so I don't care that much.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-04T18:42:15.714+0000","updated":"2010-10-04T18:42:15.714+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917709","id":"12917709","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. The point of a position increment gap is only meaningful between values.\r\n\r\nThats not true, see my test for an example. Its a position increment, in my example I show how you would implement a \"starts-with\" \r\noperator consistent with how PhraseQuery works by default: it respects the \"holes\" from stopwords for better precision. \r\n\r\nFor example in the English language, lots of sentences start with stopwords so I think its a pretty big deal to just arbitrarily \r\nthrow out the position of the first token in the document.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T18:57:45.973+0000","updated":"2010-10-04T18:57:45.973+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917787","id":"12917787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I think you're right Rob, I didn't think of that at all.  I altered the patch further, and included your test as a part of it.  I also added a little to the existing test I patched so that I consider a leading stop word, which is really the jist of what you are drawing attention to in your patch.  The tests pass.  This patch is retains the spirit of the earlier patch, but it honors the first position increment, expecting it to be >= 1.  If it's 0, then the fieldState.position would end up being -1 but there's a quick check here that will correct it to be 0.  That suits my needs, and the whole result I think is clearer and more consistent than the existing code & behavior.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-04T21:51:02.748+0000","updated":"2010-10-04T21:51:02.748+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917796","id":"12917796","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. but it honors the first position increment, expecting it to be >= 1. If it's 0, then the fieldState.position would end up being -1 but there's a quick check here that will correct it to be 0.\r\n\r\nThank you... in my opinion here though (the zero case), we should just throw a hard Exception! \r\n\r\nBecause if the first token in a field has posIncrement = 0, this is meaningless,\r\nit means it has some negative position (it is floating around in the gap or before the field at all)\r\n\r\nPersonally I would prefer if any of the code inside lucene does something this stupid, that we\r\nget a hard test fail rather than a cover-up!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T22:02:10.191+0000","updated":"2010-10-04T22:02:10.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917807","id":"12917807","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"attached is a patch for BaseTokenStreamTestCase that tests if the first value has a posInc=0 (nonsensical position increment).\r\n\r\nThe synonymfilter from solr fails with the test, but I don't really care... there is no point in indexing your text if you are going to put useless values in the index... I still think we should throw hard exception here.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-04T22:32:28.200+0000","updated":"2010-10-04T22:32:28.200+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917993","id":"12917993","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Just to see how the tests fared with your suggestion, I commented out my \"correction\" of position from -1 to 0, and instead put in:\r\n  assert fieldState.position >= 0 : \"LUCENE-1542, pos < 0 doesn't work with payloads\";\r\n\r\nSome lucene tests failed:\r\n TestIndexWriter.testNegativePositions\r\nTestPositionIncrement.testSetPosition and testPayloadsPos0\r\n\r\nI ran the Solr tests and didn't see failures that had to do with the position.  No synonym failure like you reported.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-05T14:30:13.057+0000","updated":"2010-10-05T14:30:13.057+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12917999","id":"12917999","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. I ran the Solr tests and didn't see failures that had to do with the position. No synonym failure like you reported.\r\n\r\nRight, you need my assert to catch that...\r\n\r\nSo i really wish we could fix this, its a mess. An initial position increment of zero is meaningless, but lots of peoples\r\nanalysis chains do it... the whole PositionIncrementAttribute is really broken.\r\n\r\ne.g. just imagine a synonym-filter that injects \"hte\" for \"the\" followed by a stopfilter with setEnablePositionIncrements(false) \r\n\r\nat the moment i don't see how we can remove the \"turn zero into one\" hack easily... i don't like it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-05T14:40:08.077+0000","updated":"2010-10-05T14:40:08.077+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12918012","id":"12918012","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I sympathize with your point of view Rob; arguably a position of < 0 is illogical and an error.  If the current behavior should stay then we can at least put a comment in the code here acknowledging the illogical nature of it.\r\n\r\nHow do you feel about committing my latest patch, with the addition of a suitable comment just mentioned?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-05T15:05:58.241+0000","updated":"2010-10-05T15:05:58.241+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12918029","id":"12918029","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"bq. How do you feel about committing my latest patch, with the addition of a suitable comment just mentioned?\r\n\r\nwell honestly now that LUCENE-2529_skip_posIncr_for_1st_token.patch doesnt skip the posIncr for the first token, I'm having a tough time seeing what it changes?\r\n\r\nI do like that when we do the \"hack\" correction of \"turn zero into one\" that the numOverlaps is now consistent... but what else changes?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-05T15:37:02.423+0000","updated":"2010-10-05T15:37:02.423+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12918034","id":"12918034","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Quoting myself earlier:\r\nbq. For multi-valued fields, it is now always the case that the first token of subsequent values (e.g. not the first value) will be the previous position (0 if none) + the gap + the first position increment of this value (typically 1). This is consistent and sensible. Formerly, if the first value was a blank value (or a value consisting of stop words), then you'd get 1 less than what you get now. I hope the test I modified as part of this patch makes this more clear; I had to increment the tested positions by 1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-05T15:48:49.593+0000","updated":"2010-10-05T15:48:49.593+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12918260","id":"12918260","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"David, sorry to make you repeat yourself.\r\n\r\nI'm not sure about this change though, for example it breaks contrib/highlighter tests (I didnt look at the test to see more details).\r\n\r\nHowever, if we decide to do it in the future, I think we should remove these special checks from the main loop:\r\nFor example, instead of:\r\n{code}\r\nif (firstToken && i == 0)//i.e. this is the very first token we emit for this field in this document\r\n              fieldState.position--;//we want to start at 0, not 1\r\n{code}\r\n\r\nthis could check hasMoreTokens && i == 0 before the loop, so its not checked for every token in the document.\r\nin a similar sense I think the \"correct < 0 to 0\" check should probably be outside of the loop, since it can only really happen for the first term.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2010-10-05T22:19:15.638+0000","updated":"2010-10-05T22:19:15.638+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/12918576","id":"12918576","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"Yes, the check could move outside the loop.  I don't think so for the \"correct < 0\" but whatever.  And the Highlight test fails because the test is based off of a multi-valued field in which the first value is blank, thus triggering the subsequent positions to be off by one from the former behavior.\r\nA small readability improvement might be to set fieldState.position to -1 instead of decrementing it because that is exactly the intended effect, which is more clear.\r\n\r\nFYI the observable change in behavior in this patch principally results from the \"firstToken\" boolean part of the condition in which the position is decremented.  Remove that part of the condition leaving simply i==0 and you get the former/existing behavior.\r\n\r\nUgh, I've thought about this issue way too much and I'm suddenly having a change of opinion.  Arguably the current effect of positions is more consistent... it is as if the starting position (prior to looking at the position increment) is -1, no matter whether the first value has tokens or not.  I'm going to achieve my objectives for my project via your suggestion of a single field with a value separator and a custom analyzer.  It's a little hacky but I'll then have full control over the positions and the field isn't stored any way.  I wish I had the ability to control positions in the indexer here a bit more but the support really isn't there and won't be until perhaps LUCENE-2450, the issue Mike referenced.\r\n\r\nAs far as my patch goes, with the small modification to get the existing behavior, I think it's an improvement to readability over the current code.  I can submit an update if desired. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2010-10-06T16:29:02.530+0000","updated":"2010-10-06T16:29:02.530+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12468646/comment/13013349","id":"13013349","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"body":"Bulk close for 3.1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gsingers","name":"gsingers","emailAddress":"gsingers at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Grant Ingersoll","active":true},"created":"2011-03-30T15:50:03.238+0000","updated":"2011-03-30T15:50:03.238+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-2529/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04q0v:"}}