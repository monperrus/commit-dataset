{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12628077","self":"https://issues.apache.org/jira/rest/api/latest/issue/12628077","key":"DERBY-6045","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323475","id":"12323475","description":"Head of 10.8 branch starting 2014-01-13","name":"10.8.3.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323562","id":"12323562","description":"Head of 10.9 branch after releasing 10.9.1.0","name":"10.9.2.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326659","id":"12326659","description":"candidate for Second release for 10.10 branch","name":"10.10.2.0","archived":false,"released":true,"releaseDate":"2014-04-15"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12324243","id":"12324243","description":"First release on the 10.11 branch","name":"10.11.1.1","archived":false,"released":true,"releaseDate":"2014-08-26"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2013-01-18 20:07:44.0","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"304928","customfield_12310222":"1_*:*_1_*:*_11491282946_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2013-05-30T18:01:19.673+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6045/watchers","watchCount":7,"isWatching":false},"created":"2013-01-17T17:59:56.762+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316344","id":"12316344","description":"First release on the 10.9 branch","name":"10.9.1.0","archived":false,"released":true,"releaseDate":"2012-06-25"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12321550","id":"12321550","description":"First release on the 10.10 branch","name":"10.10.1.1","archived":false,"released":true,"releaseDate":"2013-04-15"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12369431","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12369431","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12649208","key":"DERBY-6226","self":"https://issues.apache.org/jira/rest/api/2/issue/12649208","fields":{"summary":"enhance optmizer to use multiple probes into multiple indexes to satisfy OR queries on different columns.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12364131","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12364131","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12400684","key":"DERBY-3790","self":"https://issues.apache.org/jira/rest/api/2/issue/12400684","fields":{"summary":"Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12363281","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363281","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"27899","key":"DERBY-47","self":"https://issues.apache.org/jira/rest/api/2/issue/27899","fields":{"summary":"Some possible improvements to IN optimization","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12367002","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12367002","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12641497","key":"DERBY-6156","self":"https://issues.apache.org/jira/rest/api/2/issue/12641497","fields":{"summary":"Starting Derby 10.9, we do not not keep statistics for single-column unique index. Check the code to see optimizer calculates correct cost even with the missing stats for such indexes","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-01-21T00:23:11.824+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"I have a table with a long integer primary key field and 11 million rows. I seem to be unable to load large chunks of rows via id in a reasonably efficient manner.\r\n\r\n  1. If I do individual lookups via the primary key, then a fast indexed lookup occurs. However, if I do large numbers of such queries, then the time is overwhelmed by round-trip overhead which makes everything incredibly slow.\r\n\r\n  2. If I use a single query with a disjunction of the primary keys of interest,  then a table scan is performed (even if the clause only contains 1-3 items), which walks over 11 million rows...incredibly inefficient.\r\n\r\n  3. If I use an IN clause, then a table scan is performed (even if the clause only contains 1-3 items), which walks over 11 million rows...incredibly inefficient.\r\n\r\nI'm guessing that this might have something to do with the fact that I'm using large integers and really big numbers that don't start anywhere at or about 1 for my keys. Could this possibly be confusing the optimizer?\r\n\r\nHere are the unlimited query plans for the 3 cases that I enumerated:\r\n*********************************************************************************************\r\n\r\n[EL Fine]: 2013-01-17 11:09:53.384--ServerSession(582235416)--Connection(1430986883)--Thread(Thread[\"Initial Lisp Listener\",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?)\r\n\tbind => [2251799814033500]\r\n\r\nThu Jan 17 11:09:53 CST 2013 Thread[\"Initial Lisp Listener\",5,SubL Thread Group] (XID = 4711079), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) ******* Project-Restrict ResultSet (3):\r\nNumber of opens = 1\r\nRows seen = 1\r\nRows filtered = 0\r\nrestriction = false\r\nprojection = true\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\trestriction time (milliseconds) = 0\r\n\tprojection time (milliseconds) = 0\r\n\toptimizer estimated row count: 1.00\r\n\toptimizer estimated cost: 6.59\r\nSource result set:\r\n\tIndex Row to Base Row ResultSet for FORMULA_TERM:\r\n\tNumber of opens = 1\r\n\tRows seen = 1\r\n\tColumns accessed from heap = {1, 2, 3, 4, 5, 6, 7, 8}\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 1.00\r\n\t\toptimizer estimated cost: 6.59\r\n\t\tIndex Scan ResultSet for FORMULA_TERM using constraint KB_FORMULA_TERM_TERM_ID_PK at read committed isolation level using share row locking chosen by the optimizer\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 1\r\n\t\tRows filtered = 0\r\n\t\tFetch Size = 1\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\tscan information:\r\n\t\t\tBit set of columns fetched=All\r\n\t\t\tNumber of columns fetched=2\r\n\t\t\tNumber of deleted rows visited=0\r\n\t\t\tNumber of pages visited=3\r\n\t\t\tNumber of rows qualified=1\r\n\t\t\tNumber of rows visited=1\r\n\t\t\tScan type=btree\r\n\t\t\tTree height=-1\r\n\t\t\tstart position:\r\n\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\tstop position:\r\n\t\t\t\t> on first 1 column(s).\r\n\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\tqualifiers:\r\n\t\t\t\tNone\r\n\t\t\toptimizer estimated row count: 1.00\r\n\t\t\toptimizer estimated cost: 6.59\r\n\r\n[EL Fine]: 2013-01-17 11:01:00.732--ServerSession(1237006689)--Connection(927179828)--Thread(Thread[\"Initial Lisp Listener\",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?))\r\n\tbind => [2251799814033500, 2251799814033501, 2251799814033499]\r\n\r\nThu Jan 17 11:01:10 CST 2013 Thread[\"Initial Lisp Listener\",5,SubL Thread Group] (XID = 4711078), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) ******* Project-Restrict ResultSet (3):\r\nNumber of opens = 1\r\nRows seen = 3\r\nRows filtered = 0\r\nrestriction = false\r\nprojection = true\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\trestriction time (milliseconds) = 0\r\n\tprojection time (milliseconds) = 0\r\n\toptimizer estimated row count: 1176730.30\r\n\toptimizer estimated cost: 5931065.54\r\nSource result set:\r\n\tProject-Restrict ResultSet (2):\r\n\tNumber of opens = 1\r\n\tRows seen = 11767298\r\n\tRows filtered = 11767295\r\n\trestriction = true\r\n\tprojection = false\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 1176730.30\r\n\t\toptimizer estimated cost: 5931065.54\r\n\tSource result set:\r\n\t\tTable Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 11767298\r\n\t\tRows filtered = 0\r\n\t\tFetch Size = 16\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\tscan information:\r\n\t\t\tBit set of columns fetched=All\r\n\t\t\tNumber of columns fetched=9\r\n\t\t\tNumber of pages visited=34358\r\n\t\t\tNumber of rows qualified=11767298\r\n\t\t\tNumber of rows visited=11767298\r\n\t\t\tScan type=heap\r\n\t\t\tstart position:\r\n\t\t\t\tnull\r\n\t\t\tstop position:\r\n\t\t\t\tnull\r\n\t\t\tqualifiers:\r\n\t\t\t\tNone\r\n\t\t\toptimizer estimated row count: 1176730.30\r\n\t\t\toptimizer estimated cost: 5931065.54\r\n\r\n[EL Fine]: 2013-01-17 11:27:00.627--ServerSession(1237006689)--Connection(1688096771)--Thread(Thread[\"Initial Lisp Listener\",5,SubL Thread Group])--SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (?,?,?))\r\n\tbind => [2251799814033500, 2251799814033501, 2251799814033499]\r\n\r\nThu Jan 17 11:47:26 CST 2013 Thread[\"Initial Lisp Listener\",5,SubL Thread Group] (XID = 4711080), (SESSIONID = 3), SELECT TERM_ID, ARG0, ARG1, ARG2, ARG3, FORMULA_HASH, FORMULA_LENGTH, FORMULA_TYPE, KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (?,?,?)) ******* Project-Restrict ResultSet (3):\r\nNumber of opens = 1\r\nRows seen = 3\r\nRows filtered = 0\r\nrestriction = false\r\nprojection = true\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\trestriction time (milliseconds) = 0\r\n\tprojection time (milliseconds) = 0\r\n\toptimizer estimated row count: 1176730.30\r\n\toptimizer estimated cost: 5931065.54\r\nSource result set:\r\n\tProject-Restrict ResultSet (2):\r\n\tNumber of opens = 1\r\n\tRows seen = 11767298\r\n\tRows filtered = 11767295\r\n\trestriction = true\r\n\tprojection = false\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 1176730.30\r\n\t\toptimizer estimated cost: 5931065.54\r\n\tSource result set:\r\n\t\tTable Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 11767298\r\n\t\tRows filtered = 0\r\n\t\tFetch Size = 16\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\tscan information:\r\n\t\t\tBit set of columns fetched=All\r\n\t\t\tNumber of columns fetched=9\r\n\t\t\tNumber of pages visited=34358\r\n\t\t\tNumber of rows qualified=11767298\r\n\t\t\tNumber of rows visited=11767298\r\n\t\t\tScan type=heap\r\n\t\t\tstart position:\r\n\t\t\t\tnull\r\n\t\t\tstop position:\r\n\t\t\t\tnull\r\n\t\t\tqualifiers:\r\n\t\t\t\tNone\r\n\t\t\toptimizer estimated row count: 1176730.30\r\n\t\t\toptimizer estimated cost: 5931065.54\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10362","value":"Performance","id":"10362"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10421","value":"Seen in production","id":"10421"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"254306","summary":"in list multi-probe by primary key not chosen on tables with >256 rows","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10422","value":"High Value Fix","id":"10422"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10427","value":"Workaround attached","id":"10427"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":"Linux Debian 6.0.5","customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":73,"total":73,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557475","id":"13557475","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I did some more testing and it looks like if I create a table with 128 rows, then b-tree searches are performed in every case. However, if I increase the table to 256 rows or larger, then I start getting heap searches that scan every row when querying for multiple rows via primary key. Here is some code that will generate the SQL for a table that demonstrates the problem:\r\n\r\npublic static void main(String[] args) {\r\n    final Logger logger = Logger.getLogger(DerbyTester.class.toString());\r\n    try {\r\n      StringBuilder buf = new StringBuilder(1024*1024);\r\n      buf.append(\"DROP TABLE VARIABLE_TERM;\\n\");\r\n      buf.append(\"\\n\");\r\n      buf.append(\"CREATE TABLE VARIABLE_TERM\\n\");\r\n      buf.append(\"(\\n\");\r\n      buf.append(\"        term_id                  BIGINT NOT NULL,\\n\");\r\n      buf.append(\"        var_name              VARCHAR(1024) NOT NULL,\\n\");\r\n      buf.append(\"        var_type                SMALLINT NOT NULL,     \\n\");\r\n      buf.append(\"        kb_status              INTEGER NOT NULL        \\n\");\r\n      buf.append(\");\\n\");\r\n      buf.append(\"\\n\");\r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_term_id_pk PRIMARY KEY (term_id);\\n\");\r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT variable_term_id_check CHECK ((TERM_ID >= 1688849860263936) AND (TERM_ID <= 1970324836974591));\\n\");\r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type);\\n\");\r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_var_type_enum_check CHECK ((var_type >= 0) AND (var_type <= 4));\\n\");\r\n      buf.append(\"\\n\");\r\n      int count = 256; // @note count should be at least 40\r\n      long idStart = 1688849860263936L;\r\n      for (int i = 0; i < count; i++) {\r\n        buf.append(\"INSERT INTO VARIABLE_TERM VALUES (\").append(idStart++).append(\", \\'?var\").append(i).append(\"\\', \").append(((i %2) == 0) ? 1 : 4).append(\", 1);\\n\");\r\n      }\r\n      buf.append(\"\\n\");\r\n      buf.append(\"SELECT * FROM VARIABLE_TERM WHERE TERM_ID = 1688849860263966;\\n\");\r\n      buf.append(\"SELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1688849860263937) OR (TERM_ID =1688849860263975) OR (TERM_ID = 1688849860263960);\\n\");\r\n      buf.append(\"SELECT * FROM VARIABLE_TERM WHERE (TERM_ID  IN (1688849860263937, 1688849860263975, 1688849860263960));\\n\");\r\n       buf.append(\"\\n\");\r\n       System.out.println(buf.toString());\r\n       System.out.flush();\r\n    } catch (Exception e) {\r\n      logger.log(Level.SEVERE, e.getMessage(), e);\r\n    } finally {\r\n      System.exit(0);\r\n    }\r\n  }","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-01-18T18:55:44.240+0000","updated":"2013-01-18T19:08:51.743+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557551","id":"13557551","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"the bug description is confusing to me.  Is the following a valid statement of the 2 problem queries:\r\n\r\n1) in clause with 3 values on primary key on table with 11 million rows does not use index.\r\n2) or with 2 equality constaints on primary key does not use index.\r\n\r\nI don't think the optmizer will do #2 as currently designed.  I thought the optmizer had been improved to do #1.  \r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T20:07:44.000+0000","updated":"2013-01-18T20:07:44.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557552","id":"13557552","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"you might see if your test case is affected by adding an update statistics call after loading the data in the base table.  with unique indexes I would not think so, but \r\nsomething wierd is going on so may lend some light.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T20:09:20.520+0000","updated":"2013-01-18T20:09:20.520+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557558","id":"13557558","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"since just doing a single select has more overhead than you want, does your real use case want a lot of values in the in list?  As a workarount you might try loading your search values into a temp table and doing a join for the result, and see if the optimizer will internally do the index probes that make sense.\r\n\r\na union might be another workaround.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T20:15:30.265+0000","updated":"2013-01-18T20:18:54.870+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557562","id":"13557562","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"also for debugging would be good to understand if the problem is specific to BIGINT or not.  \r\n\r\nFor in list optmization we use to just translate it to a index scan bounded by the min and max values in the list, which would be bad for your case.  I thought it had been changed to do multiple probes into the index.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T20:18:24.572+0000","updated":"2013-01-18T20:18:24.572+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557579","id":"13557579","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"DERBY-47 is the orignal project that implemented the IN-LIST optimization that seems like it should be being applied in this case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T20:36:30.356+0000","updated":"2013-01-18T20:37:31.839+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557637","id":"13557637","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"*******************\r\n>the bug description is confusing to me. Is the following a valid statement of the 2 problem queries:\r\n>\r\n>1) in clause with 3 values on primary key on table with 11 million rows does not use index.\r\n>2) or with 2 equality constaints on primary key does not use index.\r\n>\r\n>I don't think the optmizer will do #2 as currently designed. I thought the optmizer had been improved to do #1.\r\n\r\nThe main problem is that both of these 2 queries do a complete table scan for me on tables with more than 256 entries:\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID  IN (1688849860263937, 1688849860263975, 1688849860263960));\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1688849860263937) OR (TERM_ID =1688849860263975) OR (TERM_ID = 1688849860263960);\r\n\r\nIf either one did a multiprobe, I'd be happy although it is pretty clear that both of them should be doing multiprobes in this case. \r\n\r\n*******************\r\n> DERBY-47 is the original project that implemented the IN-LIST optimization that seems like it should be being applied in this case. \r\n\r\nDERBY-47 sounds like it might be related, but that bug is resolved and I'm able to do an IN query and it is still doing an entire table scan. Maybe this is a regression of that bug?\r\n\r\n*******************\r\n>you might see if your test case is affected by adding an update statistics call after loading the data in the base table. with unique indexes I would not think so, but\r\n>something wierd is going on so may lend some light. \r\n\r\nI'll try that out, but none of my queries use the unique index columns in the WHERE, so this doesn't sound very likely and the FormulaTerm table that I'm able to do this on, doesn't have a unique index defined for it.\r\n\r\n*******************\r\n> also for debugging would be good to understand if the problem is specific to BIGINT or not.\r\n\r\nI'll try it with regular ints.\r\n\r\n*******************\r\n> since just doing a single select has more overhead than you want, does your real use case want a lot of values in the in list? As a workarount you might try loading your \r\n> search values into a temp table and doing a join for the result, and see if the optimizer will internally do the index probes that make sense.\r\n\r\nHmm, can you give me an example on how to do this? The common case is that I'll have 10's to 100's of rows  to look up by id at once in tables with > 10 million rows.\r\n\r\n*******************\r\n> a union might be another workaround. \r\n\r\nI'm using JPA which doesn't support UNIONs.\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-01-18T21:41:22.441+0000","updated":"2013-01-18T22:08:26.551+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557660","id":"13557660","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"CALL SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null);\r\nhad no effect.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-01-18T22:00:46.532+0000","updated":"2013-01-18T22:00:46.532+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557677","id":"13557677","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"if regular ints work, it might be a casting issue.  Not necessarily a problem with BIGINT itself, but somehow derby having the wrong type for the constant in the \r\nquery.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T22:14:21.829+0000","updated":"2013-01-18T22:14:21.829+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557684","id":"13557684","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"at the high level for join workaround i am suggesting - syntax is problably not exact\r\n\r\n// table with 11 milion rows\r\ncreate table a (primary key a int, data int)\r\n\r\ninstead of \r\nselect * from a where a IN (num1, num2, num3)\r\n\r\ndo\r\ncreate table temp (a int)\r\ninsert values num1, num2, and num2 3 into temp\r\n\r\nand then\r\nselect * from a where a.a = temp.a\r\n\r\n\r\nif that works then you can optimize by using user temp tables.\r\nAnd also you may be able to optimize by building a user defined table that just materializes the rows from an in memory array and avoid inserts, but \r\nthe optimizer support of user defined tables is still evolving so not sure if it would pick right plan. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-01-18T22:21:50.255+0000","updated":"2013-01-18T22:21:50.255+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13557713","id":"13557713","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I just tried it with regular integers, starting from 1 and the only indexing being the primary key. Still get the same issue. If I make a table with 64 rows, then it does fast b-tree scans using the IN query. If the table has 256 or more rows, it does slow heap scans over every row in the table when using the IN query. It looks like maybe there is a logic-po in the code. Doing full table scans over small tables might be faster than multi-probing, but instead it is doing it on large tables. This is just a wild guess.\r\n\r\nHere is the SQL:\r\n\r\nDROP TABLE VARIABLE_TERM;\r\n\r\nCREATE TABLE VARIABLE_TERM\r\n(\r\n        term_id                  INTEGER NOT NULL,\r\n        var_name              VARCHAR(1024) NOT NULL,\r\n        var_type                SMALLINT NOT NULL,     \r\n        kb_status              INTEGER NOT NULL        \r\n);\r\n\r\nALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_term_id_pk PRIMARY KEY (term_id);\r\n\r\nINSERT INTO VARIABLE_TERM VALUES (1, '?var0', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (2, '?var1', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (3, '?var2', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (4, '?var3', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (5, '?var4', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (6, '?var5', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (7, '?var6', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (8, '?var7', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (9, '?var8', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (10, '?var9', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (11, '?var10', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (12, '?var11', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (13, '?var12', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (14, '?var13', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (15, '?var14', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (16, '?var15', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (17, '?var16', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (18, '?var17', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (19, '?var18', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (20, '?var19', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (21, '?var20', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (22, '?var21', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (23, '?var22', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (24, '?var23', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (25, '?var24', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (26, '?var25', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (27, '?var26', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (28, '?var27', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (29, '?var28', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (30, '?var29', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (31, '?var30', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (32, '?var31', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (33, '?var32', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (34, '?var33', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (35, '?var34', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (36, '?var35', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (37, '?var36', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (38, '?var37', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (39, '?var38', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (40, '?var39', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (41, '?var40', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (42, '?var41', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (43, '?var42', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (44, '?var43', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (45, '?var44', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (46, '?var45', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (47, '?var46', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (48, '?var47', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (49, '?var48', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (50, '?var49', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (51, '?var50', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (52, '?var51', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (53, '?var52', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (54, '?var53', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (55, '?var54', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (56, '?var55', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (57, '?var56', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (58, '?var57', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (59, '?var58', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (60, '?var59', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (61, '?var60', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (62, '?var61', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (63, '?var62', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (64, '?var63', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (65, '?var64', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (66, '?var65', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (67, '?var66', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (68, '?var67', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (69, '?var68', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (70, '?var69', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (71, '?var70', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (72, '?var71', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (73, '?var72', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (74, '?var73', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (75, '?var74', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (76, '?var75', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (77, '?var76', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (78, '?var77', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (79, '?var78', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (80, '?var79', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (81, '?var80', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (82, '?var81', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (83, '?var82', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (84, '?var83', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (85, '?var84', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (86, '?var85', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (87, '?var86', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (88, '?var87', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (89, '?var88', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (90, '?var89', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (91, '?var90', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (92, '?var91', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (93, '?var92', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (94, '?var93', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (95, '?var94', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (96, '?var95', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (97, '?var96', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (98, '?var97', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (99, '?var98', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (100, '?var99', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (101, '?var100', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (102, '?var101', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (103, '?var102', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (104, '?var103', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (105, '?var104', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (106, '?var105', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (107, '?var106', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (108, '?var107', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (109, '?var108', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (110, '?var109', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (111, '?var110', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (112, '?var111', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (113, '?var112', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (114, '?var113', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (115, '?var114', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (116, '?var115', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (117, '?var116', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (118, '?var117', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (119, '?var118', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (120, '?var119', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (121, '?var120', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (122, '?var121', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (123, '?var122', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (124, '?var123', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (125, '?var124', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (126, '?var125', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (127, '?var126', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (128, '?var127', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (129, '?var128', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (130, '?var129', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (131, '?var130', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (132, '?var131', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (133, '?var132', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (134, '?var133', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (135, '?var134', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (136, '?var135', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (137, '?var136', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (138, '?var137', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (139, '?var138', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (140, '?var139', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (141, '?var140', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (142, '?var141', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (143, '?var142', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (144, '?var143', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (145, '?var144', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (146, '?var145', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (147, '?var146', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (148, '?var147', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (149, '?var148', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (150, '?var149', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (151, '?var150', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (152, '?var151', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (153, '?var152', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (154, '?var153', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (155, '?var154', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (156, '?var155', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (157, '?var156', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (158, '?var157', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (159, '?var158', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (160, '?var159', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (161, '?var160', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (162, '?var161', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (163, '?var162', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (164, '?var163', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (165, '?var164', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (166, '?var165', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (167, '?var166', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (168, '?var167', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (169, '?var168', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (170, '?var169', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (171, '?var170', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (172, '?var171', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (173, '?var172', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (174, '?var173', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (175, '?var174', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (176, '?var175', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (177, '?var176', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (178, '?var177', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (179, '?var178', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (180, '?var179', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (181, '?var180', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (182, '?var181', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (183, '?var182', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (184, '?var183', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (185, '?var184', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (186, '?var185', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (187, '?var186', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (188, '?var187', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (189, '?var188', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (190, '?var189', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (191, '?var190', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (192, '?var191', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (193, '?var192', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (194, '?var193', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (195, '?var194', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (196, '?var195', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (197, '?var196', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (198, '?var197', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (199, '?var198', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (200, '?var199', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (201, '?var200', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (202, '?var201', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (203, '?var202', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (204, '?var203', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (205, '?var204', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (206, '?var205', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (207, '?var206', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (208, '?var207', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (209, '?var208', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (210, '?var209', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (211, '?var210', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (212, '?var211', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (213, '?var212', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (214, '?var213', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (215, '?var214', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (216, '?var215', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (217, '?var216', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (218, '?var217', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (219, '?var218', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (220, '?var219', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (221, '?var220', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (222, '?var221', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (223, '?var222', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (224, '?var223', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (225, '?var224', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (226, '?var225', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (227, '?var226', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (228, '?var227', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (229, '?var228', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (230, '?var229', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (231, '?var230', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (232, '?var231', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (233, '?var232', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (234, '?var233', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (235, '?var234', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (236, '?var235', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (237, '?var236', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (238, '?var237', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (239, '?var238', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (240, '?var239', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (241, '?var240', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (242, '?var241', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (243, '?var242', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (244, '?var243', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (245, '?var244', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (246, '?var245', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (247, '?var246', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (248, '?var247', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (249, '?var248', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (250, '?var249', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (251, '?var250', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (252, '?var251', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (253, '?var252', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (254, '?var253', 4, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (255, '?var254', 1, 1);\r\nINSERT INTO VARIABLE_TERM VALUES (256, '?var255', 4, 1);\r\n\r\nCALL SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null);\r\n\r\nSELECT * FROM VARIABLE_TERM WHERE TERM_ID = 11;\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 11) OR (TERM_ID =21) OR (TERM_ID = 31);\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID  IN (11, 21, 31));","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-01-18T22:53:29.195+0000","updated":"2013-01-18T22:53:29.195+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13562907","id":"13562907","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"On the trunk, I tried experimenting with Tony's table with primary key as shown below\r\nCREATE TABLE VARIABLE_TERM\r\n(\r\n        term_id INTEGER NOT NULL,\r\n        var_name VARCHAR(1024) NOT NULL,\r\n        var_type SMALLINT NOT NULL, \r\n        kb_status INTEGER NOT NULL \r\n);\r\n\r\nALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_term_id_pk PRIMARY KEY (term_id);\r\n\r\nThe following queries show different query plan(as pointed by Tony) depending on the number of rows in the variable_term table.\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 11) OR (TERM_ID =21) OR (TERM_ID = 31);\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID IN (11, 21, 31)); \r\n\r\nThe queries above used index scan with KB_VARIABLE_TERM_TERM_ID_PK  when there were 10 rows in the table. But if I had even 25 rows, they started using table scan. \r\n\r\nThe following query always used index scan with 10/25/64 rows\r\nSELECT * FROM VARIABLE_TERM WHERE TERM_ID = 11;\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-01-25T18:58:21.762+0000","updated":"2013-01-25T18:58:21.762+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13564390","id":"13564390","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Thanks for confirming that Mamta. I get exactly the same behavior except for the breakpoints at which things switch from multiprobe to table scan which I believe is due to relative page size differences. My DB used 32k pages and the default is 4k (a factor of 8 difference). If you take your breakpoint of 25 and multiply by 8 you get 200 which is roughly around the breakpoint that I'm seeing.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-01-28T16:36:43.411+0000","updated":"2013-01-28T16:37:23.334+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13571092","id":"13571092","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"BTW, I tried the little experiment I tried on the trunk(on 25/Jan/13) on 10.9.1.0 release and saw the same behavior as trunk. But on 10.8.1.1 and 10.8.1.2, I saw that even after 25 rows, we still use index scan rather than switching to table scan. So something has changed between 10.8 and 10.9 release apparently which has changed the behavior.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-05T06:45:40.727+0000","updated":"2013-02-05T06:45:40.727+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13571551","id":"13571551","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"The test scenario from comment on 25/Jan/13 show incorrect table scan usage on trunk and 10.9 releases. The same test behaves correctly (ie uses index scan) on all 3 releases of 10.8 codeline - 10.8.1.1, 10.8.1.2 and 10.8.3.0, The top of the 10.8 codeline also works correctly. So something has changed between 10.8 and 10.9 release apparently which has changed the behavior. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-05T18:30:07.279+0000","updated":"2013-02-05T18:30:07.279+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13571580","id":"13571580","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I have another similar case that I believe might be related. If I have a disjunction in a delete statement it appears to use table scans:\r\n\r\nThis takes 10.5 min on a very small DB to run the following command 17,200 times:\r\nDELETE FROM kb.mt_gaf_top_level_term_counts WHERE (term = ?) OR (mt = ?)\r\n\r\nHowever, if I break the delete statement into 2 separate calls, then the total time is only 17 secs:\r\nDELETE FROM kb.mt_gaf_top_level_term_counts WHERE (term = ?) \r\nDELETE FROM kb.mt_gaf_top_level_term_counts WHERE (mt = ?) \r\n\r\nThe table has about 10k rows.\r\n\r\nTable looks like:\r\nDROP TABLE KB.MT_GAF_TOP_LEVEL_TERM_COUNTS;\r\n\r\nCREATE TABLE KB.MT_GAF_TOP_LEVEL_TERM_COUNTS\r\n(\r\n        mt BIGINT NOT NULL, \r\n        term BIGINT NOT NULL,\r\n        term_index INTEGER NOT NULL,\r\n        usage_count BIGINT NOT NULL\r\n);\r\n\r\nALTER TABLE kb.mt_gaf_top_level_term_counts ADD CONSTRAINT kb_mt_gaf_top_level_term_counts_pk PRIMARY KEY (mt, term, term_index);\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_mt_index ON kb.mt_gaf_top_level_term_counts(mt);\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_term_index ON kb.mt_gaf_top_level_term_counts(term);\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-02-05T18:53:10.443+0000","updated":"2013-02-05T18:53:10.443+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13574910","id":"13574910","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I went through various checkins that went into 10.9 and found the checkin that has caused the regression to be r1341481. This checkin was made for DERBY-3790(Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column). When I try the test scenario from comment on 25/Jan/13 on codeline synced upto r1341481, I see us using table scans but if I sync up the client to the immediate earlier checkin 1341350, I see us using index scan. I will work on writing a junit test for test scenario that I have been trying.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-08T22:47:47.025+0000","updated":"2013-02-08T22:47:47.025+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13574915","id":"13574915","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Checkin for DERBY-3790 may have caused the regression tracked under DERBY-6045","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-08T22:49:46.953+0000","updated":"2013-02-08T22:49:46.953+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13574996","id":"13574996","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"since DERBY-6045 has to do with background statistics, it would be good to see if the problem existed in releases before automatic statistics.\r\n\r\nAlso might be interesting to run test with automatic statistics disabled, in current system.\r\n\r\nDERBY-6045 was about not creating cardinality stats for unique one key indexes, which really should not be useful to the optimizer.  Could see\r\nif running update statistics by hand before the query helps or not?\r\n\r\nShould see if the system did the right thing pre-auto statistics\r\nif table is first created with index and then loaded (so should mean no statistics),","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-02-09T00:34:25.490+0000","updated":"2013-02-09T00:34:25.490+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13576356","id":"13576356","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I have aded a junit test which won't run at this point since it starts with name xtest... rather than test... Once this jira is fixed, we should enable the test. The revision number for the checkin is 1445030 and the commit comments are \r\n********************\r\nDERBY-6045 (in list multi-probe by primary key not chosen on tables with >256 rows)\r\n\r\nAdding a junit test but it will not run since the the fixture name is not starting with \"test\"... We should remove the x in front of test fixture's name once DERBY-6045 has been fixed\r\n********************\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-12T03:58:11.399+0000","updated":"2013-02-12T03:58:11.399+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578175","id":"13578175","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Made some changes to the junit test and committed it into trunk with revision 1446048 with following commit comments\r\n******************** \r\nDERBY-6045 (in list multi-probe by primary key not chosen on tables with >256 rows)\r\n\r\nAdded a new test scenario where we add about 10K rows into a table with primary key and check if we are still using index scan for the queries being tested\r\n\r\nAdditionally, cleaned up the test a little bit.\r\n******************** \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-14T05:50:48.922+0000","updated":"2013-02-14T05:50:48.922+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578183","id":"13578183","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I ran the new junit test org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest:xtestDerby6045 on my clients for trunk and all the codelines upto 10.3 release. I find that the test fails on trunk and 10.9 but passes on 10.8 through 10.3 codelines.\r\n\r\nWhat I found though is that in 10.8 through 10.3 codelines, if I do not have \r\n        s.execute(\"call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null)\");\r\n(actually 10.4 and 10.3 codelines do not have update statistics procedure. On those 2 codelines, I used compress table procedure to re-generate the statistics, s.execute(\"call syscs_util.syscs_compress_table('APP','VARIABLE_TERM',1)\");)\r\nafter inserting total of 24 rows in the table, then we do not pick up index scan. \r\n\r\nI am copying following from the junit test for reference\r\n        //Add 14 more rows\r\n        for (int i=11; i<=25; i++) {\r\n            ps.setInt(1, i);\r\n            ps.executeUpdate();\r\n        }\r\n        s.execute(\"call SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null)\");\r\n        //Need to execute the query with an extra white space so that the\r\n        // queries will get recompiled. If the following queries looked \r\n        // exactly like the earlier queries in this fixture, we would \r\n        // end up using the earloer query plan rather than creating a \r\n        // new query plan which is going recognize the additional rows.\r\n        runThreeQueries(1);\r\nIf I take out update statistics call, following 2 queries(which are run inside runThreeQueries method) end up using table scan rather than index scan on 10.8 through 10.3 codelines\r\n       SELECT  *  FROM VARIABLE_TERM WHERE (TERM_ID = 11) OR (TERM_ID =21) OR (TERM_ID = 31)\r\n       SELECT  *  FROM VARIABLE_TERM WHERE (TERM_ID IN (11, 21, 31))\r\n\r\ntrunk and 10.9 codelines use table scan no matter whether we run update statistics or not. This appears to be because of checkin r1341481 that went in for DERBY-3790 into 10.9 and trunk.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-14T06:17:58.856+0000","updated":"2013-02-14T06:17:58.856+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578225","id":"13578225","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"I think specifying derby.storage.indexStats.debug.keepDisposableStats=true *and* regenerating statistics for the relevant tables will suffice as a work-around for this issue.\r\n\r\nGiven that we agree the statistics for single-column unique indexes aren't needed, do we know what puts off the optimizer?\r\nThe lack of statistics, or stale row estimates?\r\n(I don't have time to dig into that, and I don't know what the optimizer does in this case.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2013-02-14T08:28:11.103+0000","updated":"2013-02-14T08:28:11.103+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578596","id":"13578596","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Kristian, thanks for your suggestion about the property(derby.storage.indexStats.debug.keepDisposableStats=true) to revert back to old behavior. I tried that property on trunk with the experiment I tried on the trunk(on 25/Jan/13), and I see that now we pick up index scan both in case of 10rows and 24rows in the table. Like you said, I ran update statistics before running the SELECT statements. The number of rows in sys.systatistics is 0 before calling update statistics. After the call to update statistics, one row gets added(when the derby.storage.indexStats.debug.keepDisposableStats=true property is used) as shown below\r\nij>  select * from sys.sysstatistics;\r\nSTATID                              |REFERENCEID                         |TABLEID                             |CREATIONTIMESTAMP            |&|VALID|COLCOUNT   |STATISTICS\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n6839c016-013c-da22-2265-00000011dd90|560740aa-013c-da21-c463-000000124308|ed8940a7-013c-da21-c463-000000124308|2013-02-14 11:15:44.381      |I|true |1          |numunique= 25 &\r\n\r\nWithout the property derby.storage.indexStats.debug.keepDisposableStats=true on trunk, the number of rows remain 0 in sys.systatistics before and after the update statisitcs call and that is the case when we use table scan rather than index scan for 24rows in the table.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-14T19:39:44.822+0000","updated":"2013-02-14T19:39:44.822+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578733","id":"13578733","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"BTW, I found that on trunk, we do use index scan with 10K rows in table. So, for 10rows and 10K rows, we use index scan but for 24rows, we use table scan. These three test scenarios are in the junit test org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest:xtestDerby6045 ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-14T22:06:05.374+0000","updated":"2013-02-14T22:06:05.374+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578786","id":"13578786","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"Tony, at least for the int test that mamta has added we are seeing index scan used for 10k rows.  I am worried now that our test cases may not\r\nbe reflecting the actual problem you are seeing in your real environment of millions of rows. Can you verify in your test case if there are a large\r\nnumber of rows for the int case you are seeing the bug? Some interesting values for \"large\" are those that cause there to be multiple pages in the\r\nbase table.  In your case you have 32k pages and your test data looks like it is something like ~20 bytes per row (just a guess from the datatypes\r\nand that varchar only takes up the necessary room).  I just pulled 10k out a hat for mamta's test.\r\n\r\nAlso can you verify that update statistics has been run on your big table?  I think it is a bug, but it looks like the existing behavior in all code lines\r\nis that you need to run update statistics for the optimizer to pick index scan in this case, even if the interesting index is unique.  \r\n\r\n I always worry about optimizer cost bugs with test\r\ncases involving a really small number of rows, as the bugs uncovered there may not apply to the large number of row case. I think what mamta\r\nis seeing now is, in all cases run update statistics after data is loaded and before queries are executed:\r\n\r\n10.9 - 10 rows index scan, 24 rows table scan , 10k rows index scan\r\n10.8 through 10.3 - 10 rows index scan, 24 rows table scan, 10k rows test not tried, but assume it will pick index scan\r\n\r\n\r\nAt the low number of rows end if you just look at costs it may make perfect sense from just a cycle cost perspective to choose a table scan\r\nvs. using index.   The reason for this is that I/O cost dominates over the cost to scan every row on a page.  So in the case where the base\r\ntable has 1 page and the index has 1 page, pure costing will often choose to scan the 1 data page rather than pay 1 i/o to get index page and\r\nthen another i/o to get data page.  For other reasons (mostly to not have to lock all the rows you see during a table scan) the derby code has been \r\nchanged to fudge the costs a little to get index scans chosen \r\nin this case, most notably a single probe query using with an exact key match using an index.  These fixes tend to aplly only to low number of \r\nrows anomaly's, and not to the real life issues like your 11 million row case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-02-14T22:59:03.387+0000","updated":"2013-02-14T22:59:03.387+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578905","id":"13578905","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I'm still seeing full heap scans even with 10k rows. I used the same table as in my comment on: 18/Jan/13 22:53, just with  more rows.\r\n\r\nHowever, if I run derby with:\r\n   derby.storage.indexStats.debug.keepDisposableStats=true\r\n   and then explicitly update statistics, with CALL SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null);\r\n, then I start seeing index scans on the 10k table. I imagine this will work as a temporary work-around on the 11m row table, although I haven't tried it yet.\r\n\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-02-15T02:35:25.809+0000","updated":"2013-02-26T20:36:47.396+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13578914","id":"13578914","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Feel free to lower the priority since there is a work-around. However, I still feel like this is a very important issue. People shouldn't have to add special configurations to  Derby in order for blatantly obvious indexing to take place. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-02-15T02:48:00.282+0000","updated":"2013-02-15T02:48:00.282+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13579064","id":"13579064","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"Ticking work-around field and lowering the priority.\r\nWith Seen in production, Regression and Performance ticked the release manager should be able to notice this issue :)\r\n\r\nI agree this is something that must be fixed, and it should be fixed before 10.10 goes out.\r\nIt can be done in two ways:\r\n a) change the optimizer behavior\r\n b) start generating statistics for single-column indexes again\r\n\r\nI'd prefer (a), but realize that's the more difficult approach.\r\nI know the community has been looking into some other optimizer issues lately, maybe we can take advantage of that to ease the investigation of this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2013-02-15T09:52:18.053+0000","updated":"2013-02-15T09:52:18.053+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13587387","id":"13587387","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Hi Tony, regarding your following comment(BTW, you probably meant 18th Jan rather than 8th Jan)\r\n****************************************************\r\nI'm still seeing full heap scans even with 10k rows. I used the same table as in my comment on: 8/Jan/13 22:53, just with more rows.\r\n****************************************************\r\n\r\nI worked on the test case provided by you on 18/Jan/13 22:53 and found that if I remove the 2nd unique index(copying below for reference) from the table, we start using index scan with 10K rows. I plan to add a junit test for this case to trunk. That test will be named such that it won't get run for now until we understand the impact of the 2nd unique index on the selection of scan for 10K rows.\r\nbuf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type);\\n\"); \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-26T18:50:23.756+0000","updated":"2013-02-26T18:50:23.756+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13587395","id":"13587395","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Forgot to mention in the earlier comment that the primary key column doesn't have to be BIGINT. I saw during my testing that even when term_id is declared to be INTEGER NOT NULL, we use table scan for 10K rows if there is following additional unique index defined on the table(along with term_id being the primary key)\r\nALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-26T18:57:29.142+0000","updated":"2013-02-26T18:57:29.142+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13587406","id":"13587406","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Committed the the test case in trunk with revision 1450363.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-26T19:06:24.103+0000","updated":"2013-02-26T19:06:24.103+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13587408","id":"13587408","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"****\r\n(BTW, you probably meant 18th Jan rather than 8th Jan) \r\n****\r\nYes, you are absolutely correct, I meant 18/Jan/13 22:53.\r\n\r\n***************\r\nI worked on the test case provided by you on 18/Jan/13 22:53 and found that if I remove the 2nd unique index(copying below for reference) from the table, we start using index scan with 10K rows. I plan to add a junit test for this case to trunk. That test will be named such that it won't get run for now until we understand the impact of the 2nd unique index on the selection of scan for 10K rows.\r\nbuf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type);\\n\");\r\n***************\r\nI'm confused about this, the comment from 18/Jan/13 22:53 only has 1 primary key index and no unique indexes. It also uses regular integers and not bigints.\r\n\r\nI'm definitely seeing slow index scans on the latest release even with the simplified table in that comment. Are you seeing a difference between the latest trunk and the last release when running this? If so, are you possibly running with derby.storage.indexStats.debug.keepDisposableStats=true which would change the results?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-02-26T19:07:46.207+0000","updated":"2013-02-26T19:12:32.006+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13588052","id":"13588052","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I am copying the JDBC program which will show that on trunk, SELECT query with OR clause does not use index scan if there is following constraint defined on the table(haven't tried 10.9 codeline because my 10.9 client has pending work from other jira). 10.8 and 10.7 codelines continue to use index scan even with the following constraint defined on the table.\r\n            s.execute(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type)\"); \r\n\r\nIn trunk, if I comment out the code for creating kb_variable_term_variable_name_unique, the SELECT query with OR clause starts using index scan. NOTE that table has 10K rows in it. To run the program, do following and then look at derby.log for the query plans for the SELECT queries\r\njava  -Dderby.language.logQueryPlan=true MamtaJDBC \r\n\r\n\r\npublic class MamtaJDBC { \r\n   public static void main(String[] args) { \r\n      try { \r\n            Class.forName(\"org.apache.derby.jdbc.EmbeddedDriver\"); \r\n            Connection conn = DriverManager \r\n                    .getConnection(\"jdbc:derby:db1;create=true\"); \r\n            Statement s = conn.createStatement();\r\n            s.execute(\"CREATE TABLE VARIABLE_TERM (\" + \r\n  \t  \" term_id int NOT NULL,\" + \r\n  \t  \" var_name VARCHAR(1024) NOT NULL,\"+ \r\n  \t  \" var_type SMALLINT NOT NULL, \"+ \r\n  \t  \" kb_status INTEGER NOT NULL )\"); \r\n            s.execute(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_term_id_pk PRIMARY KEY (term_id)\"); \r\n            s.execute(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type)\"); \r\n            int count = 10000;\r\n\r\n            for (int i = 0; i < count; i++) { \r\n    \ts.execute(\"INSERT INTO VARIABLE_TERM VALUES (\" + i + \", \\'?var\"+i+\"\\',\"+ (((i %2) == 0) ? 1 : 4)+\",1)\");\r\n            } \r\n            s.execute(\"SELECT * FROM VARIABLE_TERM WHERE TERM_ID = 30\"); \r\n            s.execute(\"SELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1) OR (TERM_ID =39) OR (TERM_ID = 24)\"); \r\n       } catch (SQLException se) { \r\n            while (se != null) { \r\n                System.out.println(\"SQLState=\" + se.getSQLState() \r\n                        + se.getMessage()); \r\n                se.printStackTrace(); \r\n                se = se.getNextException(); \r\n        } \r\n     } catch (Exception ex) {\r\n          System.out.println(\"exception \" + ex.getMessage());\r\n     } finally { \r\n          System.exit(0); \r\n    } \r\n  } \r\n}\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-27T06:22:14.272+0000","updated":"2013-02-27T20:29:19.645+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13588057","id":"13588057","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Hi Tony, I am talking about the very first comment in this jira by you. There you have 1 primary key index  and one unique index on the table. I will copy part of that code from 18th Jan for reference here\r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_term_id_pk PRIMARY KEY (term_id);\\n\"); \r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT variable_term_id_check CHECK ((TERM_ID >= 1688849860263936) AND (TERM_ID <= 1970324836974591));\\n\"); \r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_variable_name_unique UNIQUE (var_name, var_type);\\n\"); \r\n      buf.append(\"ALTER TABLE variable_term ADD CONSTRAINT kb_variable_term_var_type_enum_check CHECK ((var_type >= 0) AND (var_type <= 4));\\n\"); \r\n\r\nI have created a small JDBC program which I have in my previous comment. Maybe you can give that a try and see what plan gets used with and without the additional unique index.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-02-27T06:27:02.573+0000","updated":"2013-02-27T06:27:02.573+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13593048","id":"13593048","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I was curious to see what query plans are considered by trunk and 10.8(with the selectivity details) to see if I can figure out what is different between the two codelines which requires us to use table scan in trunk and index scan on 10.8. This is for the test case provided in comment  18/Jan/13 22:53 (but I tried only with 25 rows. With 25 rows is when I see tunk using table scan where as 10.8 using index scan). \r\n\r\nTo get the query plans, I followed Knut's suggestion in another email by defining following 2 stored procedures\r\npublic static void trace() {\r\n    org.apache.derby.iapi.db.OptimizerTrace.setOptimizerTrace(true);\r\n}\r\npublic static void printTrace() {\r\n   System.out.println(org.apache.derby.iapi.db.OptimizerTrace.getOptimizerTraceOutput());\r\n}\r\n\r\nAnd then I ran the query in question in ij as follows\r\njava -Dij.exceptionTrace=true -Dderby.language.logQueryPlan=true org.apache.derby.tools.ij\r\nconnect 'jdbc:derby:db1';\r\ncreate procedure trace() language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC.trace';\r\ncreate procedure print_trace() language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC.printTrace';\r\ncall trace();\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1) OR (TERM_ID =39) OR (TERM_ID = 24);\r\ncall print_trace();\r\n\r\n\r\nWith both 10.8 and trunk(as shown in the attached email), I see coming up with the same numbers for different query plans considered by optimizer and hence I am not sure what the difference might be. I will look in the actual code to see if I can figure something out. Thanks\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-05T04:03:55.897+0000","updated":"2013-03-05T04:03:55.897+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13594880","id":"13594880","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I reran the query above with update statistics before running the query on both trunk and 10.8 to see what the optimizer trace looks like and indeed is different for the two codelines. I have attached the optimizer trace for the 2 codelines(optimizerTraceOutputWithUpdateStatsFor10_8.txt and optimizerTraceOutputWithUpdateStatsForTrunk.txt)\r\njava -Dij.exceptionTrace=true -Dderby.language.logQueryPlan=true org.apache.derby.tools.ij \r\nconnect 'jdbc:derby:db1'; \r\ncreate procedure trace() language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC.trace'; \r\ncreate procedure print_trace() language java parameter style java external name 'org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC.printTrace'; \r\ncall SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('APP', 'VARIABLE_TERM', null);\r\ncall trace();\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1) OR (TERM_ID =39) OR (TERM_ID = 24);\r\ncall print_trace();\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-06T17:24:55.994+0000","updated":"2013-03-06T17:24:55.994+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13597292","id":"13597292","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"After debugging the code, I have found that in o.a.d.impl.sql.compile.FromBaseTable, while estimating the cost for the given conglomerate and predicate list, in the method below,\r\n\tpublic CostEstimate estimateCost(OptimizablePredicateList predList,\r\n\t\tConglomerateDescriptor cd,\r\n\t\tCostEstimate outerCost,\r\n                     \tOptimizer optimizer,\r\n\t\tRowOrdering rowOrdering)\r\n\t\t\tthrows StandardException\r\nwe do not find any statistics for one-column unique index below\r\n\tstatisticsForConglomerate = tableDescriptor.statisticsExist(cd);\r\nThis is because as part of DERBY-3790, we are not keeping the stats for one-column unique index any more. Later on in the same method, estimateCost, based on the existence of statistics and two other conditions, we change the selectivity value to be more favorable for the one-column unique index \r\n                       if (seenFirstColumn && statisticsForConglomerate &&\r\n                               (startStopPredCount > 0))\r\n\r\nbut since the statistics don't exist for one-column unique indexanymore, we do not improve the selectivity in trunk anymore. I will look into fixing this to recognize one-column unique index.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-08T17:06:22.473+0000","updated":"2013-03-08T17:06:22.473+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13599413","id":"13599413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"FromBaseTable.java has following code to change the selectivity if statistics exist for a conglomerate but since we do not collect statistics for single-column unique index anymore, following if condition will never be true for single-column unique index and hence we will not consider that index even if it is a faster plan)\r\n    if (seenFirstColumn && statisticsForConglomerate &&\r\n          (startStopPredCount > 0))\r\n    {\r\n           statStartStopSelectivity =\r\n                 tableDescriptor.selectivityForConglomerate(cd, startStopPredCount);\r\n      }\r\n\r\nIn my attached patch, I am changing the code above to as follows\r\n\r\n if (seenFirstColumn && (startStopPredCount > 0))\r\n {\r\n    if (statisticsForConglomerate)\r\n       statStartStopSelectivity =\r\n          tableDescriptor.selectivityForConglomerate(cd,\r\n              startStopPredCount);\r\n    else {\r\n       if (cd.isIndex())  {\r\n          //DERBY-3790 (Investigate if request for update\r\n          // statistics can be skipped for certain kind of\r\n          // indexes, one instance may be unique indexes based\r\n          // on one column.) But as found in DERBY-6045 (in list\r\n          // multi-probe by primary key not chosen on tables with\r\n          // >256 rows), even though we do not keep the\r\n          // statistics for single-column unique indexes, we\r\n          // should improve the selectivity of such an index\r\n          // when the index is being considered by the optimizer.\r\n          IndexRowGenerator irg = null;\r\n          irg = cd.getIndexDescriptor();\r\n          if (irg.isUnique()\r\n             && irg.numberOfOrderedColumns() == 1\r\n             && startStopPredCount == 1)\r\n                statStartStopSelectivity =\r\n                   (double)(1/(double)baseRowCount());\r\n       }\r\n    }\r\n }\r\n\r\nWith the new code, if we come across a conglomerate with no available statistics, then we check if \r\n1)we are dealing with an index and\r\n2)if it is single-column unique index and \r\n3)there is one start-stop predicate, then\r\ngo ahead and set the start-stop selectivity to 1/number of rows in the table.\r\n\r\nI changed the InListMultiProbeTest.java by removing x in fron of the 2 fixtures xtestDerby6045 and xtestDerby6045InsertAllRowsAdditionalUniqueIndex and both those fixtures ran fine with my patch.\r\n\r\nI will appreciate another pair of eyes on the code rework, especially, the check for \"there is one start-stop predicate\" in the if clause. The reason I think we need this check is based on the existing code that we have in TableDescriptor for indexes with statistics\r\npublic double selectivityForConglomerate(ConglomerateDescriptor cd, int numKeys) \r\n  throws StandardException\r\n{\r\n     UUID referenceUUID = cd.getUUID();\r\n     List sdl = getStatistics();\r\n     for (Iterator li = sdl.iterator(); li.hasNext(); )\r\n     {\r\n         StatisticsDescriptor statDesc = (StatisticsDescriptor) li.next();\r\n         if (!referenceUUID.equals(statDesc.getReferenceID()))\r\n            continue;\r\n\t\t\t\r\n         if (statDesc.getColumnCount() != numKeys)\r\n            continue;\r\n\t\t\t\r\n         return statDesc.getStatistic().selectivity((Object[])null);\r\n}\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-11T22:34:01.308+0000","updated":"2013-03-11T22:34:01.308+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13599420","id":"13599420","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I am running derbyall and junit with the patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-11T22:39:33.434+0000","updated":"2013-03-11T22:39:33.434+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13599702","id":"13599702","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"derbyall ran fine with no errors. \r\n\r\nWith junit suite, there was one new failure but it is just the order of the rows that is different.\r\n1) refActions1(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 8859 expected:<[2          |K52|OFC       |ROBIN]     > but was:<[1          |K55|DB        |JOHN ]     >\r\n\tat org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:109)\r\n\tat org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:204)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\r\nThe query in question in refActions1 is as follows and it returns 2 rows\r\nselect * from db2test.dept where dno in (select vdno from\r\n  db2test.vempunion)\r\n  and dno in ('K55', 'K52');\r\n\r\nIn the master file, the output for this query is as follows(looks like this test is still not completely converted to junit and that is why there is a master for it)\r\nselect * from db2test.dept where dno in (select vdno from\r\n  db2test.vempunion)\r\n  and dno in ('K55', 'K52');\r\nC0         |DNO|DNAME     |DMGRNAME  \r\n-------------------------------------\r\n2          |K52|OFC       |ROBIN     \r\n1          |K55|DB        |JOHN      \r\n\r\nWith my patch, the query returns the same rows but in different order as shown below\r\nselect * from db2test.dept where dno in (select vdno from\r\n  db2test.vempunion)\r\n  and dno in ('K55', 'K52');\r\nC0         |DNO|DNAME     |DMGRNAME  \r\n-------------------------------------\r\n1          |K55|DB        |JOHN      \r\n2          |K52|OFC       |ROBIN     \r\n\r\nSince there is no order by clause, should this diff be considered harmless? ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-12T04:44:30.434+0000","updated":"2013-03-12T04:44:30.434+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13599711","id":"13599711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I debugged the code a little bit to see why on trunk following query uses index scan\r\nSELECT * FROM VARIABLE_TERM WHERE TERM_ID = 11;\r\nwhen we have found that the following query uses table scan on trunk. Just to recap, table VARIABLE_TERM has primary key on TERM_ID and it has 25 rows\r\nSELECT * FROM VARIABLE_TERM WHERE (TERM_ID = 1) OR (TERM_ID =39) OR (TERM_ID = 24);\r\n\r\nI found that when optimizer is considering different plans for the query, one of things that get checked is \r\n\t\t\t\tif (! isOneRowResultSet(predList))\r\nThis check is in FromBaseTable.nextAccessPath. For a query with IN clause, this isOneRowResultSet(predList) will always return false but for the query with one = predicate, isOneRowResultSet(predList) will return true and hence we will pick primary key index scan for that query. Hope this helps understanding why query with = predicate uses index scan.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-12T05:09:29.977+0000","updated":"2013-03-12T05:09:29.977+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13599865","id":"13599865","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The suggested fix looks reasonable to me. I agree that the ordering change in refActions1 looks benign. Still, it might be prudent to compare the query plans of the query before and after the fix to verify that the change is not an unexpected one.\r\n\r\nThe check for startStopPredCount being exactly one is probably redundant, since I don't think it is possible to have more start/stop predicates than the number of key columns. I'm not sure, though, and I don't think keeping it will do any harm.\r\n\r\nSome code nits:\r\n\r\n- Please add braces around the if branch in the new if/else statement.\r\n\r\n- The nested if statement inside the else branch could pulled up one level by changing \"else\" to \"else if\" in the parent if statement. That would save one indentation level and give more horizontal space to the code and comments inside it.\r\n\r\n- The irg variable is first initialized to null and then on the next line set to cd.getIndexDescriptor(). Setting it to the index descriptor immediately, and skipping the intermediate step where it's null, would make it a bit clearer.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-03-12T09:41:40.427+0000","updated":"2013-03-12T09:41:40.427+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13600114","id":"13600114","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I agree with knut's comments.  change looks good to me.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-03-12T15:49:21.775+0000","updated":"2013-03-12T15:49:21.775+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13600117","id":"13600117","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"With your change will the code now pick index even if update statistics has never been run?  Looking to see if this would be a good change to backport to 10.8 and before.  Have thought that it was bad that you needed update statistics at all to get this kind of query with a unique index to pick the index.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-03-12T15:51:16.215+0000","updated":"2013-03-12T15:51:16.215+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13600120","id":"13600120","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"after verifying the plan is ok for the diff query, I suggest changing the test to add an order by to make the result order deterministic.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-03-12T15:54:50.490+0000","updated":"2013-03-12T15:54:50.490+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13609271","id":"13609271","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I debugged the failure in refActions1. I found that with my changes, with only 3 rows in the table db2test.dept, we use table scan but without my changes, we use index scan. But if I add just few more rows in db2test.dept - totalling to be say 30 rows, we use index scan for both with and without my changes. I believe that the reason behind table scan (with only 3 rows in the table) with my changes is that there are not enough rows in the table for it to make sense to use index scan. I am attaching a new patch (DERBY6045_patch2_diff.txt) which uses order by for the query below so we will not see the order change in the rows. Additionally, I have taken care of comments from Knut. If there are no further comments, then I will go ahead and commit the patch soon, Thanks\r\nselect * from db2test.dept where dno in (select vdno from\r\n  db2test.vempunion)\r\n  and dno in ('K55', 'K52')\r\n  order by dno;\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-03-21T18:30:45.658+0000","updated":"2013-03-21T18:30:45.658+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13610121","id":"13610121","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The #2 patch probably also needs to update the canon for refActions1.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-03-22T10:48:41.316+0000","updated":"2013-03-22T10:48:41.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13619507","id":"13619507","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Committed changes for this jira with revision 1463378. The commit comments were as follows\r\n****************************************************\r\nDERBY-6045 (in list multi-probe by primary key not chosen on tables with >256 rows)\r\n\r\nChanges for DERBY-3790 (Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column.) caused Derby to use table scan rather than index scan since we do not generate stats for single column unique index. As part of that change, we forgot to make code changes in optimizer to compensate for missing stats for such indexes. As found in DERBY-6045 (in list multi-probe by primary key not chosen on tables with >256 rows), even though we do not keep the statistics for single-column unique indexes, we should improve the selectivity of such an index when the index is being considered by the optimizer.\r\n\r\nMaking the relevant code changes now allows us to enable the tests in InListMultiProbeTest.java since they will now run correctly by picking up index scan rather than table scan.\r\n\r\nAdditionally, one test in refActions1.sql does not have order by to it and there are only 3 rows in the table. Without the changes for DERBY-6045 we were using index scan for it but now it uses table scan which is giving the rows in different order. I have added order by to the query so plan selection does not change order of the rows. The reason behind table scan might be that with only 3 rows in the table, it is cheaper to do table sccan rather than index scan. \r\n****************************************************\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-04-02T04:33:39.743+0000","updated":"2013-04-02T04:33:39.743+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13619937","id":"13619937","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Thanks Mamta and everyone involoved!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-04-02T15:49:47.643+0000","updated":"2013-04-02T15:49:47.643+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13626758","id":"13626758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Committed few more regression tests in trunk(10.11) with revisions 1465830 and 1466097","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-04-09T16:14:13.154+0000","updated":"2013-04-09T16:14:13.154+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13649806","id":"13649806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I committed a junit test for DELETE statement on trunk with revision 1479607.\r\nCommiting test that shows that we use index scan for DELETE statement on a table with appropriate indexes. This happens with or without update statistics and with or without parameterized statement.\r\n\r\nTony, can you please try the jars from the trunk and see if resolves the problem with the SELECT and DELETE test cases that you provided? The DELETE case may be different than the SELECTproblem that got fixed through the engine changes for this jira, and if so, then may be we can open a new jira for the DELETE case and pursue it as part of that jira.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-06T15:44:29.405+0000","updated":"2013-05-06T15:44:29.405+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13649813","id":"13649813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"Did your new delete tests show any problem before your fix?  It would be nice to get a junit test case checked in that shows the\r\ndelete problem being reported, especially if it is still a problem.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-06T16:00:18.214+0000","updated":"2013-05-06T16:00:18.214+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13649821","id":"13649821","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"OK. I'll do some addtional testing and try to create a reproducible test case. It may be a couple of days till I can get to this though.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-06T16:08:23.011+0000","updated":"2013-05-06T16:08:23.011+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13650027","id":"13650027","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I tried the new junit delete test case in 10.10 and I see that the test runs fine on 10.10 without any code changes that went in for this jira. It is possible that the delete test case does not exactly do what Tony is trying to do. Tony, thanks for doing the additional testing for a reproducible test case. I am copying part of the junit test here for easier reference\r\n\r\n            CREATE TABLE MT_GAF_TOP_LEVEL_TERM_COUNTS (mt BIGINT NOT NULL, term BIGINT NOT NULL, term_index INTEGER NOT NULL, usage_count BIGINT NOT NULL );\r\n            ALTER TABLE MT_GAF_TOP_LEVEL_TERM_COUNTS ADD CONSTRAINT kb_mt_gaf_top_level_term_counts_pk PRIMARY KEY (mt, term, term_index);\r\n            CREATE INDEX kb_mt_gaf_top_level_term_counts_mt_index ON MT_GAF_TOP_LEVEL_TERM_COUNTS(mt);\r\n            CREATE INDEX kb_mt_gaf_top_level_term_counts_term_index ON MT_GAF_TOP_LEVEL_TERM_COUNTS(term);\r\n\r\nThen I insert 10K rows in the table\r\n            PreparedStatement ps = s.getConnection().prepareStatement(\r\n                \"insert into \" + DERBY_6045_DATA_TABLE2 +\r\n                \" VALUES (?, ?, ?, ?)\");\r\n            int numberOfRows = 10000;\r\n            for (int i=1; i<=numberOfRows; i++) {\r\n                ps.setInt(1, i);\r\n                ps.setInt(2, i);\r\n                ps.setInt(3, i);\r\n                ps.setInt(4, i);\r\n                ps.executeUpdate();\r\n            }\r\nNext, I execute following 2 delete statements and check the runtime statistics for them\r\n        if (useParameterMarkers) {\r\n            ps = prepareStatement(\"DELETE FROM MT_GAF_TOP_LEVEL_TERM_COUNTS WHERE (term = ?) \");\r\n            ps.setInt(1,1);\r\n            ps.execute();\r\n        } else {\r\n        \ts.execute(\"DELETE FROM MT_GAF_TOP_LEVEL_TERM_COUNTS WHERE (term = 2) \");\r\n        }\r\n        rtsp = SQLUtilities.getRuntimeStatisticsParser(s);\r\n        assertTrue(rtsp.usedIndexScan());\r\n\r\n        if (useParameterMarkers) {\r\n            ps = prepareStatement(\"DELETE FROM mt_gaf_top_level_term_counts WHERE (term = ?) OR (mt = ?)\");\r\n      \t    ps.setInt(1,3);\r\n            ps.setInt(2,4);\r\n            ps.execute();\r\n        } else {\r\n        \ts.execute(\"DELETE FROM mt_gaf_top_level_term_counts WHERE (term = 5) OR (mt = 6)\");\r\n        }\r\n        rtsp = SQLUtilities.getRuntimeStatisticsParser(s);\r\n        assertTrue(rtsp.usedIndexScan());\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-06T19:38:57.029+0000","updated":"2013-05-06T19:38:57.029+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13650028","id":"13650028","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"In the mean time, I will work on backporting the changes to 10.10 codeline since the changes certainly fix the problem with the SELECT statement in this jira not using the index scan.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-06T19:40:28.877+0000","updated":"2013-05-06T19:40:28.877+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13651601","id":"13651601","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Backported the code changes and some additional test to 10.10 with revision 1480153","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-08T04:01:13.069+0000","updated":"2013-05-08T04:01:13.069+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13651983","id":"13651983","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Backported changes to 10.9 with revision 1480320","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-08T15:20:26.780+0000","updated":"2013-05-08T15:20:26.780+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13653393","id":"13653393","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"Backported changes to 10.8 with revision 1480730","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-09T23:53:07.689+0000","updated":"2013-05-09T23:53:07.689+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13654595","id":"13654595","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"thanks for backporting this to 10.8.  Even though the regression was introduced in 10.9, this change actually\r\nalso helps previous releases.  With this change some queries that use unique indexes will pick better plans.\r\nIn those cases previous to this fix one would first have to update the statistics to get the right plan to be picked.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-10T16:49:04.442+0000","updated":"2013-05-10T16:49:04.442+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13654752","id":"13654752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"It should be fine to backport this jira further back if someone is interested in doing so. I have backported it upto 10.8 so far.\r\n\r\nAlso, I will leave the jira open for another week in case if Tony finds something while trying to reproduce the DELETE case. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-10T19:19:49.425+0000","updated":"2013-05-10T19:19:49.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13662910","id":"13662910","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Tony, any results by now?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2013-05-21T11:39:10.911+0000","updated":"2013-05-21T11:39:10.911+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13663083","id":"13663083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I can confirm that the issue with disjunction in deletes is still an issue even in 10.10.1.1. I'm trying to create a reproducible test now. Should I open a new bug for this?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-21T16:18:06.191+0000","updated":"2013-05-21T16:18:06.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13663095","id":"13663095","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Here is the query plan for the disjunctive delete, notice the full table scan on 29K rows even though term, pred and mt all have individual indexes (which I've confirmed):\r\n\r\nTue May 21 11:28:34 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88632), (SESSIONID = 1), DELETE FROM kb.mt_gaf_top_level_term_counts WHERE (term = 1407374883554049) OR (pred = 1407374883554049) OR (mt = 1407374883554049) ******* Delete Cascade ResultSet using row locking:\r\ndeferred: false\r\nRows deleted = 418\r\nIndexes updated = 9\r\nExecute Time = 0\r\n\tProject-Restrict ResultSet (1):\r\n\tNumber of opens = 1\r\n\tRows seen = 418\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 14751.50\r\n\t\toptimizer estimated cost: 12365.71\r\n\tSource result set:\r\n\t\tTable Scan ResultSet for MT_GAF_TOP_LEVEL_TERM_COUNTS at read committed isolation level using exclusive row locking chosen by the optimizer\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 418\r\n\t\tRows filtered = 0\r\n\t\tFetch Size = 1\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\tscan information:\r\n\t\t\tBit set of columns fetched={0, 1, 2, 3, 4}\r\n\t\t\tNumber of columns fetched=5\r\n\t\t\tNumber of pages visited=67\r\n\t\t\tNumber of rows qualified=418\r\n\t\t\tNumber of rows visited=29498\r\n\t\t\tScan type=heap\r\n\t\t\tstart position:\r\n\t\t\t\tnull\r\n\t\t\tstop position:\r\n\t\t\t\tnull\r\n\t\t\tqualifiers:\r\n\t\t\t\tColumn[1][0] Id: 3\r\n\t\t\t\tOperator: =\r\n\t\t\t\tOrdered nulls: false\r\n\t\t\t\tUnknown return value: false\r\n\t\t\t\tNegate comparison result: false\r\n\t\t\t\tColumn[1][1] Id: 2\r\n\t\t\t\tOperator: =\r\n\t\t\t\tOrdered nulls: false\r\n\t\t\t\tUnknown return value: false\r\n\t\t\t\tNegate comparison result: false\r\n\t\t\t\tColumn[1][2] Id: 1\r\n\t\t\t\tOperator: =\r\n\t\t\t\tOrdered nulls: false\r\n\t\t\t\tUnknown return value: false\r\n\t\t\t\tNegate comparison result: false\r\n\t\t\toptimizer estimated row count: 14751.50\r\n\t\t\toptimizer estimated cost: 12365.71\r\nReferential Actions On Dependent Tables:\r\n\tDelete Cascade ResultSet using row locking:\r\n\tdeferred: false\r\n\tRows deleted = 860\r\n\tIndexes updated = 3\r\n\tExecute Time = 0\r\n\tProject-Restrict ResultSet (3):\r\n\tNumber of opens = 1\r\n\tRows seen = 860\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 129341.00\r\n\t\toptimizer estimated cost: 38529.20\r\n\tSource result set:\r\n\t\tIndex Scan ResultSet for GAF_ARG using index On Foreign Key at serializable isolation level using exclusive table locking chosen by the optimizer\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 860\r\n\t\tRows filtered = 0\r\n\t\tFetch Size = 1\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\tscan information:\r\n\t\t\tBit set of columns fetched=All\r\n\t\t\tNumber of columns fetched=2\r\n\t\t\tNumber of deleted rows visited=0\r\n\t\t\tNumber of pages visited=837\r\n\t\t\tNumber of rows qualified=860\r\n\t\t\tNumber of rows visited=1278\r\n\t\t\tScan type=btree\r\n\t\t\tTree height=2\r\n\t\t\tstart position:\r\n\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\tstop position:\r\n\t\t\t\t> on first 1 column(s).\r\n\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\tqualifiers:\r\n\t\t\t\tNone\r\n\t\t\toptimizer estimated row count: 129341.00\r\n\t\t\toptimizer estimated cost: 38529.20\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88634), (SESSIONID = 1), CALL SYSIBM.SQLTABLES(?,?,?,?,?) ******* null\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88634), (SESSIONID = 1), EXECUTE STATEMENT SYS.\"getTables\" ******* Sort ResultSet:\r\nNumber of opens = 1\r\nRows input = 0\r\nRows returned = 0\r\nEliminate duplicates = false\r\nIn sorted order = false\r\nSort information: \r\n\tNumber of rows input=0\r\n\tNumber of rows output=0\r\n\tSort type=internal\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\toptimizer estimated row count: 0.00\r\n\toptimizer estimated cost: 6.08\r\nSource result set:\r\n\tProject-Restrict ResultSet (19):\r\n\tNumber of opens = 1\r\n\tRows seen = 0\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 0.00\r\n\t\toptimizer estimated cost: 6.08\r\n\tSource result set:\r\n\t\tNested Loop Join ResultSet:\r\n\t\tNumber of opens = 1\r\n\t\tRows seen from the left = 48\r\n\t\tRows seen from the right = 0\r\n\t\tRows filtered = 0\r\n\t\tRows returned = 0\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\toptimizer estimated row count: 0.00\r\n\t\t\toptimizer estimated cost: 6.08\r\n\t\tLeft result set:\r\n\t\t\tNested Loop Join ResultSet:\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen from the left = 12\r\n\t\t\tRows seen from the right = 48\r\n\t\t\tRows filtered = 0\r\n\t\t\tRows returned = 48\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 1.70\r\n\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\tLeft result set:\r\n\t\t\t\tProject-Restrict ResultSet (5):\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 12\r\n\t\t\t\tRows filtered = 0\r\n\t\t\t\trestriction = true\r\n\t\t\t\tprojection = true\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\tSource result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSSCHEMAS:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 12\r\n\t\t\t\t\tColumns accessed from heap = {0, 1}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSSCHEMAS using index SYSSCHEMAS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 12\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\tNumber of rows qualified=12\r\n\t\t\t\t\t\t\tNumber of rows visited=12\r\n\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\r\n\t\t\tRight result set:\r\n\t\t\t\tUnion ResultSet:\r\n\t\t\t\tNumber of opens = 12\r\n\t\t\t\tRows seen from the left = 36\r\n\t\t\t\tRows seen from the right = 12\r\n\t\t\t\tRows returned = 48\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 1.70\r\n\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\tLeft result set:\r\n\t\t\t\t\tUnion ResultSet:\r\n\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\tRows seen from the left = 24\r\n\t\t\t\t\tRows seen from the right = 12\r\n\t\t\t\t\tRows returned = 36\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 1.28\r\n\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\tUnion ResultSet:\r\n\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\tRows seen from the left = 12\r\n\t\t\t\t\t\tRows seen from the right = 12\r\n\t\t\t\t\t\tRows returned = 24\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 0.85\r\n\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\tNormalize ResultSet:\r\n\t\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\t\tRows seen = 12\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 0.85\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\tRow ResultSet:\r\n\t\t\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\t\t\tRows returned = 12\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\r\n\r\n\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\tRow ResultSet:\r\n\t\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\t\tRows returned = 12\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\r\n\r\n\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\tNormalize ResultSet:\r\n\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\tRows seen = 12\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 1.28\r\n\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\tRow ResultSet:\r\n\t\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\t\tRows returned = 12\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\r\n\r\n\r\n\t\t\t\tRight result set:\r\n\t\t\t\t\tNormalize ResultSet:\r\n\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\tRows seen = 12\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 1.70\r\n\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\tRow ResultSet:\r\n\t\t\t\t\t\tNumber of opens = 12\r\n\t\t\t\t\t\tRows returned = 12\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\toptimizer estimated cost: 0.00\r\n\r\n\r\n\r\n\r\n\t\tRight result set:\r\n\t\t\tProject-Restrict ResultSet (18):\r\n\t\t\tNumber of opens = 48\r\n\t\t\tRows seen = 0\r\n\t\t\tRows filtered = 0\r\n\t\t\trestriction = true\r\n\t\t\tprojection = true\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 0.00\r\n\t\t\t\toptimizer estimated cost: 1.08\r\n\t\t\tSource result set:\r\n\t\t\t\tIndex Row to Base Row ResultSet for SYSTABLES:\r\n\t\t\t\tNumber of opens = 48\r\n\t\t\t\tRows seen = 0\r\n\t\t\t\tColumns accessed from heap = {1, 2, 3}\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 0.00\r\n\t\t\t\t\toptimizer estimated cost: 1.08\r\n\t\t\t\t\tIndex Scan ResultSet for SYSTABLES using index SYSTABLES_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\tNumber of opens = 48\r\n\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\tscan information:\r\n\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\tNumber of columns fetched=3\r\n\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\tNumber of pages visited=48\r\n\t\t\t\t\t\tNumber of rows qualified=0\r\n\t\t\t\t\t\tNumber of rows visited=48\r\n\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t>= on first 2 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t1 \r\n\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\tColumn[0][0] Id: 1\r\n\t\t\t\t\t\t\tOperator: =\r\n\t\t\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\t\t\toptimizer estimated row count: 0.00\r\n\t\t\t\t\t\toptimizer estimated cost: 1.08\r\n\r\n\r\n\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88635), (SESSIONID = 1), CALL SYSIBM.SQLPRIMARYKEYS(?,?,?,?) ******* null\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88635), (SESSIONID = 1), EXECUTE STATEMENT SYS.\"getPrimaryKeys\" ******* Sort ResultSet:\r\nNumber of opens = 1\r\nRows input = 1\r\nRows returned = 1\r\nEliminate duplicates = false\r\nIn sorted order = false\r\nSort information: \r\n\tNumber of rows input=1\r\n\tNumber of rows output=1\r\n\tSort type=internal\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\toptimizer estimated row count: 47.58\r\n\toptimizer estimated cost: 688.05\r\nSource result set:\r\n\tProject-Restrict ResultSet (23):\r\n\tNumber of opens = 1\r\n\tRows seen = 1\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 47.58\r\n\t\toptimizer estimated cost: 688.05\r\n\tSource result set:\r\n\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\tNested Loop Join ResultSet:\r\n\t\tNumber of opens = 1\r\n\t\tRows seen from the left = 1\r\n\t\tRows seen from the right = 1\r\n\t\tRows filtered = 0\r\n\t\tRows returned = 1\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\toptimizer estimated row count: 47.58\r\n\t\t\toptimizer estimated cost: 688.05\r\n\t\tLeft result set:\r\n\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\tNested Loop Join ResultSet:\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen from the left = 1\r\n\t\t\tRows seen from the right = 1\r\n\t\t\tRows filtered = 0\r\n\t\t\tRows returned = 1\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 4.82\r\n\t\t\t\toptimizer estimated cost: 290.29\r\n\t\t\tLeft result set:\r\n\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen from the left = 1\r\n\t\t\t\tRows seen from the right = 1\r\n\t\t\t\tRows filtered = 0\r\n\t\t\t\tRows returned = 1\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\toptimizer estimated cost: 121.22\r\n\t\t\t\tLeft result set:\r\n\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\tNested Loop Join ResultSet:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen from the left = 1\r\n\t\t\t\t\tRows seen from the right = 1\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tRows returned = 1\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\toptimizer estimated cost: 112.46\r\n\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\tNested Loop Join ResultSet:\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen from the left = 1\r\n\t\t\t\t\t\tRows seen from the right = 1\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tRows returned = 1\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 2.30\r\n\t\t\t\t\t\t\toptimizer estimated cost: 35.38\r\n\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\tProject-Restrict ResultSet (8):\r\n\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\trestriction = false\r\n\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 2.70\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 15.68\r\n\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSTABLES:\r\n\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\tColumns accessed from heap = {0, 1, 3}\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 2.70\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 15.68\r\n\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSTABLES are { index=SYSTABLES_INDEX1 }\r\n\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSTABLES using index SYSTABLES_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\tBit set of columns fetched={0, 2}\r\n\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 2.70\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 15.68\r\n\r\n\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\tProject-Restrict ResultSet (11):\r\n\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\trestriction = true\r\n\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 2.30\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 19.70\r\n\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSSCHEMAS:\r\n\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\tColumns accessed from heap = {0, 1}\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 2.30\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 19.70\r\n\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSSCHEMAS are { index=SYSSCHEMAS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSSCHEMAS using index SYSSCHEMAS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 2.30\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 19.70\r\n\r\n\r\n\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\tProject-Restrict ResultSet (14):\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 2\r\n\t\t\t\t\t\tRows filtered = 1\r\n\t\t\t\t\t\trestriction = true\r\n\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\t\toptimizer estimated cost: 77.08\r\n\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCONSTRAINTS:\r\n\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\tRows seen = 2\r\n\t\t\t\t\t\t\tColumns accessed from heap = {0, 1, 2, 3}\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 77.08\r\n\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSCONSTRAINTS are { index=SYSCONSTRAINTS_INDEX3, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSCONSTRAINTS using index SYSCONSTRAINTS_INDEX3 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\tRows seen = 2\r\n\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\t\t\t\tNumber of rows qualified=2\r\n\t\t\t\t\t\t\t\t\tNumber of rows visited=3\r\n\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\tTree height=2\r\n\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 77.08\r\n\r\n\r\n\t\t\t\tRight result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSKEYS:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\tColumns accessed from heap = {1}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\toptimizer estimated cost: 8.75\r\n\t\t\t\t\t\tUser supplied optimizer overrides on SYSKEYS are { index=SYSKEYS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSKEYS using index SYSKEYS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\tNumber of rows visited=1\r\n\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\toptimizer estimated row count: 2.34\r\n\t\t\t\t\t\t\toptimizer estimated cost: 8.75\r\n\r\n\r\n\t\t\tRight result set:\r\n\t\t\t\tProject-Restrict ResultSet (19):\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 1\r\n\t\t\t\tRows filtered = 0\r\n\t\t\t\trestriction = true\r\n\t\t\t\tprojection = true\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 4.82\r\n\t\t\t\t\toptimizer estimated cost: 169.07\r\n\t\t\t\tSource result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCONGLOMERATES:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\tColumns accessed from heap = {1, 5, 7}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 4.82\r\n\t\t\t\t\t\toptimizer estimated cost: 169.07\r\n\t\t\t\t\t\tUser supplied optimizer overrides on SYSCONGLOMERATES are { index=SYSCONGLOMERATES_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSCONGLOMERATES using index SYSCONGLOMERATES_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\tTree height=2\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\toptimizer estimated row count: 4.82\r\n\t\t\t\t\t\t\toptimizer estimated cost: 169.07\r\n\r\n\r\n\t\tRight result set:\r\n\t\t\tProject-Restrict ResultSet (22):\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen = 6\r\n\t\t\tRows filtered = 5\r\n\t\t\trestriction = true\r\n\t\t\tprojection = true\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 47.58\r\n\t\t\t\toptimizer estimated cost: 397.76\r\n\t\t\tSource result set:\r\n\t\t\t\tIndex Row to Base Row ResultSet for SYSCOLUMNS:\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 6\r\n\t\t\t\tColumns accessed from heap = {0, 1, 2}\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 47.58\r\n\t\t\t\t\toptimizer estimated cost: 397.76\r\n\t\t\t\t\tUser supplied optimizer overrides on SYSCOLUMNS are { index=SYSCOLUMNS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\tIndex Scan ResultSet for SYSCOLUMNS using index SYSCOLUMNS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 6\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\tscan information:\r\n\t\t\t\t\t\tBit set of columns fetched={0, 2}\r\n\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\tNumber of rows qualified=6\r\n\t\t\t\t\t\tNumber of rows visited=7\r\n\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\tTree height=2\r\n\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\toptimizer estimated row count: 47.58\r\n\t\t\t\t\t\toptimizer estimated cost: 397.76\r\n\r\n\r\n\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88638), (SESSIONID = 1), CALL SYSIBM.SQLFOREIGNKEYS(?,?,?,?,?,?,?) ******* null\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88638), (SESSIONID = 1), EXECUTE STATEMENT SYS.\"getImportedKeys\" ******* Sort ResultSet:\r\nNumber of opens = 1\r\nRows input = 0\r\nRows returned = 0\r\nEliminate duplicates = false\r\nIn sorted order = false\r\nSort information: \r\n\tNumber of rows input=0\r\n\tNumber of rows output=0\r\n\tSort type=internal\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\toptimizer estimated row count: 17909.93\r\n\toptimizer estimated cost: 1583882.90\r\nSource result set:\r\n\tProject-Restrict ResultSet (41):\r\n\tNumber of opens = 1\r\n\tRows seen = 0\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 17909.93\r\n\t\toptimizer estimated cost: 1583882.90\r\n\tSource result set:\r\n\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\tNested Loop Join ResultSet:\r\n\t\tNumber of opens = 1\r\n\t\tRows seen from the left = 0\r\n\t\tRows seen from the right = 0\r\n\t\tRows filtered = 0\r\n\t\tRows returned = 0\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\toptimizer estimated row count: 17909.93\r\n\t\t\toptimizer estimated cost: 1583882.90\r\n\t\tLeft result set:\r\n\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\tNested Loop Join ResultSet:\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen from the left = 0\r\n\t\t\tRows seen from the right = 0\r\n\t\t\tRows filtered = 0\r\n\t\t\tRows returned = 0\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 18151.34\r\n\t\t\t\toptimizer estimated cost: 86691.48\r\n\t\t\tLeft result set:\r\n\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen from the left = 0\r\n\t\t\t\tRows seen from the right = 0\r\n\t\t\t\tRows filtered = 0\r\n\t\t\t\tRows returned = 0\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\toptimizer estimated cost: 23051.65\r\n\t\t\t\tLeft result set:\r\n\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen from the left = 0\r\n\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\toptimizer estimated cost: 19756.65\r\n\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen from the left = 0\r\n\t\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\toptimizer estimated cost: 15848.39\r\n\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\tRows seen from the left = 0\r\n\t\t\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 12553.39\r\n\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\tProject-Restrict ResultSet (27):\r\n\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\trestriction = false\r\n\t\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 7718.61\r\n\t\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\t\t\t\tNested Loop Join ResultSet:\r\n\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\tRows seen from the left = 0\r\n\t\t\t\t\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 7718.61\r\n\t\t\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\t\t\t\t\tNested Loop Join ResultSet:\r\n\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\tRows seen from the left = 0\r\n\t\t\t\t\t\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 89.30\r\n\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 352.73\r\n\t\t\t\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\t\t\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\tRows seen from the left = 2\r\n\t\t\t\t\t\t\t\t\t\t\tRows seen from the right = 0\r\n\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\tRows returned = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 39.63\r\n\t\t\t\t\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides for join are { joinOrder=FIXED }\r\n\t\t\t\t\t\t\t\t\t\t\t\tNested Loop Join ResultSet:\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows seen from the left = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows seen from the right = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows returned = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 20.86\r\n\t\t\t\t\t\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tProject-Restrict ResultSet (17):\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trestriction = false\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 6.58\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNested Loop Exists Join ResultSet:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen from the left = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen from the right = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows returned = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 6.58\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tLeft result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tProject-Restrict ResultSet (14):\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trestriction = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSSCHEMAS:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {0}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSSCHEMAS are { index=SYSSCHEMAS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSSCHEMAS using index SYSSCHEMAS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSTABLES:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {0}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 1.59\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSTABLES are { index=SYSTABLES_INDEX1 }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSTABLES using index SYSTABLES_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=3\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows visited=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>= on first 2 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t> on first 2 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 1.59\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCONSTRAINTS:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {0, 2}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 14.27\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSCONSTRAINTS are { index=SYSCONSTRAINTS_INDEX3, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSCONSTRAINTS using index SYSCONSTRAINTS_INDEX3 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows visited=3\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTree height=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 14.27\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSFOREIGNKEYS:\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {1, 2, 3}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 18.78\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSFOREIGNKEYS are { index=SYSFOREIGNKEYS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSFOREIGNKEYS using index SYSFOREIGNKEYS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows qualified=0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t> on first 1 column(s).\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 4.34\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 18.78\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCONGLOMERATES:\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {5}\r\n\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 89.30\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 313.10\r\n\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSCONGLOMERATES are { index=SYSCONGLOMERATES_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSCONGLOMERATES using index SYSCONGLOMERATES_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 89.30\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 313.10\r\n\r\n\r\n\t\t\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\t\t\tProject-Restrict ResultSet (26):\r\n\t\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\trestriction = true\r\n\t\t\t\t\t\t\t\t\t\tprojection = true\r\n\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 7365.89\r\n\t\t\t\t\t\t\t\t\t\tSource result set:\r\n\t\t\t\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCOLUMNS:\r\n\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\tColumns accessed from heap = {2}\r\n\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 7365.89\r\n\t\t\t\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSCOLUMNS are { index=SYSCOLUMNS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSCOLUMNS using index SYSCOLUMNS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 7365.89\r\n\r\n\r\n\t\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSCONSTRAINTS:\r\n\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\tColumns accessed from heap = {1, 2}\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 4834.78\r\n\t\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSCONSTRAINTS are { index=SYSCONSTRAINTS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSCONSTRAINTS using index SYSCONSTRAINTS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\t\toptimizer estimated cost: 4834.78\r\n\r\n\r\n\t\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSTABLES:\r\n\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\tColumns accessed from heap = {1, 3}\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 3295.00\r\n\t\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSTABLES are { index=SYSTABLES_INDEX2, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\t\tIndex Scan ResultSet for SYSTABLES using index SYSTABLES_INDEX2 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\t\toptimizer estimated cost: 3295.00\r\n\r\n\r\n\t\t\t\t\tRight result set:\r\n\t\t\t\t\t\tIndex Row to Base Row ResultSet for SYSSCHEMAS:\r\n\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\tColumns accessed from heap = {1}\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\toptimizer estimated cost: 3908.27\r\n\t\t\t\t\t\t\tUser supplied optimizer overrides on SYSSCHEMAS are { index=SYSSCHEMAS_INDEX2, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\t\tIndex Scan ResultSet for SYSSCHEMAS using index SYSSCHEMAS_INDEX2 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\t\toptimizer estimated cost: 3908.27\r\n\r\n\r\n\t\t\t\tRight result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSKEYS:\r\n\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\tColumns accessed from heap = {1}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\toptimizer estimated cost: 3295.00\r\n\t\t\t\t\t\tUser supplied optimizer overrides on SYSKEYS are { index=SYSKEYS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSKEYS using index SYSKEYS_INDEX1 at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 1\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tColumn[0][0] Id: 0\r\n\t\t\t\t\t\t\t\tOperator: =\r\n\t\t\t\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\t\t\t\toptimizer estimated row count: 881.13\r\n\t\t\t\t\t\t\toptimizer estimated cost: 3295.00\r\n\r\n\r\n\t\t\tRight result set:\r\n\t\t\t\tIndex Row to Base Row ResultSet for SYSCONGLOMERATES:\r\n\t\t\t\tNumber of opens = 0\r\n\t\t\t\tRows seen = 0\r\n\t\t\t\tColumns accessed from heap = {5, 7}\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 18151.34\r\n\t\t\t\t\toptimizer estimated cost: 63639.83\r\n\t\t\t\t\tUser supplied optimizer overrides on SYSCONGLOMERATES are { index=SYSCONGLOMERATES_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\tIndex Scan ResultSet for SYSCONGLOMERATES using index SYSCONGLOMERATES_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\tscan information:\r\n\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\toptimizer estimated row count: 18151.34\r\n\t\t\t\t\t\toptimizer estimated cost: 63639.83\r\n\r\n\r\n\t\tRight result set:\r\n\t\t\tProject-Restrict ResultSet (40):\r\n\t\t\tNumber of opens = 0\r\n\t\t\tRows seen = 0\r\n\t\t\tRows filtered = 0\r\n\t\t\trestriction = true\r\n\t\t\tprojection = true\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 17909.93\r\n\t\t\t\toptimizer estimated cost: 1497191.43\r\n\t\t\tSource result set:\r\n\t\t\t\tIndex Row to Base Row ResultSet for SYSCOLUMNS:\r\n\t\t\t\tNumber of opens = 0\r\n\t\t\t\tRows seen = 0\r\n\t\t\t\tColumns accessed from heap = {0, 1, 2}\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 17909.93\r\n\t\t\t\t\toptimizer estimated cost: 1497191.43\r\n\t\t\t\t\tUser supplied optimizer overrides on SYSCOLUMNS are { index=SYSCOLUMNS_INDEX1, joinStrategy=NESTEDLOOP }\r\n\t\t\t\t\tIndex Scan ResultSet for SYSCOLUMNS using index SYSCOLUMNS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\tNumber of opens = 0\r\n\t\t\t\t\tRows seen = 0\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\r\n\t\t\t\t\tscan information:\r\n\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\tPositioning information not available because this ResultSet was never opened.\r\n\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\toptimizer estimated row count: 17909.93\r\n\t\t\t\t\t\toptimizer estimated cost: 1497191.43\r\n\r\n\r\n\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88640), (SESSIONID = 1), CALL SYSIBM.SQLCOLUMNS(?,?,?,?,?) ******* null\r\nTue May 21 11:29:56 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 88640), (SESSIONID = 1), EXECUTE STATEMENT SYS.\"getColumns\" ******* Sort ResultSet:\r\nNumber of opens = 1\r\nRows input = 6\r\nRows returned = 6\r\nEliminate duplicates = false\r\nIn sorted order = false\r\nSort information: \r\n\tNumber of rows input=6\r\n\tNumber of rows output=6\r\n\tSort type=internal\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\toptimizer estimated row count: 0.86\r\n\toptimizer estimated cost: 10.74\r\nSource result set:\r\n\tProject-Restrict ResultSet (12):\r\n\tNumber of opens = 1\r\n\tRows seen = 6\r\n\tRows filtered = 0\r\n\trestriction = false\r\n\tprojection = true\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\trestriction time (milliseconds) = 0\r\n\t\tprojection time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 0.86\r\n\t\toptimizer estimated cost: 10.74\r\n\tSource result set:\r\n\t\tNested Loop Join ResultSet:\r\n\t\tNumber of opens = 1\r\n\t\tRows seen from the left = 1\r\n\t\tRows seen from the right = 6\r\n\t\tRows filtered = 0\r\n\t\tRows returned = 6\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\toptimizer estimated row count: 0.86\r\n\t\t\toptimizer estimated cost: 10.74\r\n\t\tLeft result set:\r\n\t\t\tNested Loop Join ResultSet:\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen from the left = 1\r\n\t\t\tRows seen from the right = 1\r\n\t\t\tRows filtered = 0\r\n\t\t\tRows returned = 1\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 0.11\r\n\t\t\t\toptimizer estimated cost: 6.42\r\n\t\t\tLeft result set:\r\n\t\t\t\tProject-Restrict ResultSet (5):\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 1\r\n\t\t\t\tRows filtered = 0\r\n\t\t\t\trestriction = true\r\n\t\t\t\tprojection = true\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\tSource result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSSCHEMAS:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\tColumns accessed from heap = {0, 1}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSSCHEMAS using index SYSSCHEMAS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 1\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\tNumber of columns fetched=2\r\n\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\tNumber of rows qualified=1\r\n\t\t\t\t\t\t\tNumber of rows visited=2\r\n\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\t\toptimizer estimated row count: 0.43\r\n\t\t\t\t\t\t\toptimizer estimated cost: 4.99\r\n\r\n\t\t\tRight result set:\r\n\t\t\t\tProject-Restrict ResultSet (8):\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 3\r\n\t\t\t\tRows filtered = 2\r\n\t\t\t\trestriction = true\r\n\t\t\t\tprojection = true\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 0.11\r\n\t\t\t\t\toptimizer estimated cost: 1.43\r\n\t\t\t\tSource result set:\r\n\t\t\t\t\tIndex Row to Base Row ResultSet for SYSTABLES:\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 3\r\n\t\t\t\t\tColumns accessed from heap = {0, 1, 3}\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\toptimizer estimated row count: 0.11\r\n\t\t\t\t\t\toptimizer estimated cost: 1.43\r\n\t\t\t\t\t\tIndex Scan ResultSet for SYSTABLES using index SYSTABLES_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\t\tRows seen = 3\r\n\t\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\t\tscan information:\r\n\t\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\t\tNumber of columns fetched=3\r\n\t\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\t\tNumber of pages visited=1\r\n\t\t\t\t\t\t\tNumber of rows qualified=3\r\n\t\t\t\t\t\t\tNumber of rows visited=4\r\n\t\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\t\tTree height=1\r\n\t\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t\t>= on first 2 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t\t1 \r\n\t\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t\t>= on first 1 column(s).\r\n\t\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\t\tColumn[0][0] Id: 1\r\n\t\t\t\t\t\t\t\tOperator: =\r\n\t\t\t\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\t\t\t\toptimizer estimated row count: 0.11\r\n\t\t\t\t\t\t\toptimizer estimated cost: 1.43\r\n\r\n\r\n\t\tRight result set:\r\n\t\t\tProject-Restrict ResultSet (11):\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen = 6\r\n\t\t\tRows filtered = 0\r\n\t\t\trestriction = true\r\n\t\t\tprojection = true\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\trestriction time (milliseconds) = 0\r\n\t\t\t\tprojection time (milliseconds) = 0\r\n\t\t\t\toptimizer estimated row count: 0.86\r\n\t\t\t\toptimizer estimated cost: 4.32\r\n\t\t\tSource result set:\r\n\t\t\t\tIndex Row to Base Row ResultSet for SYSCOLUMNS:\r\n\t\t\t\tNumber of opens = 1\r\n\t\t\t\tRows seen = 6\r\n\t\t\t\tColumns accessed from heap = {0, 1, 2, 3, 4, 7, 8}\r\n\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\toptimizer estimated row count: 0.86\r\n\t\t\t\t\toptimizer estimated cost: 4.32\r\n\t\t\t\t\tIndex Scan ResultSet for SYSCOLUMNS using index SYSCOLUMNS_INDEX1 at read committed isolation level using instantaneous share row locking chosen by the optimizer\r\n\t\t\t\t\tNumber of opens = 1\r\n\t\t\t\t\tRows seen = 6\r\n\t\t\t\t\tRows filtered = 0\r\n\t\t\t\t\tFetch Size = 16\r\n\t\t\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\t\t\tscan information:\r\n\t\t\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\t\t\tNumber of columns fetched=3\r\n\t\t\t\t\t\tNumber of deleted rows visited=0\r\n\t\t\t\t\t\tNumber of pages visited=2\r\n\t\t\t\t\t\tNumber of rows qualified=6\r\n\t\t\t\t\t\tNumber of rows visited=7\r\n\t\t\t\t\t\tScan type=btree\r\n\t\t\t\t\t\tTree height=2\r\n\t\t\t\t\t\tstart position:\r\n\t\t\t\t\t\t\t>= on first 2 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\tstop position:\r\n\t\t\t\t\t\t\t>= on first 2 column(s).\r\n\t\t\t\t\t\t\tOrdered null semantics on the following columns: \r\n\t\t\t\t\t\t\t0 \r\n\t\t\t\t\t\tqualifiers:\r\n\t\t\t\t\t\t\tNone\r\n\t\t\t\t\t\toptimizer estimated row count: 0.86\r\n\t\t\t\t\t\toptimizer estimated cost: 4.32\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-21T16:35:16.402+0000","updated":"2013-05-21T16:38:29.490+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13663121","id":"13663121","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Ive attached table.del which is a table dump that should reproduce the disjunctive delete table scan. This is proprietary and should be deleted when testing is complete.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-21T16:58:54.949+0000","updated":"2013-05-21T17:11:07.754+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13663130","id":"13663130","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I've attached a dump of the table that should reproduce the issue. \r\nThe table was dumped with:\r\nCALL SYSCS_UTIL.SYSCS_EXPORT_TABLE('KB', 'MT_GAF_TOP_LEVEL_TERM_COUNTS', 'table.del', null, null, 'UTF-8');\r\n\r\nThe current table definition looks like:\r\n\r\nCREATE TABLE KB.MT_GAF_TOP_LEVEL_TERM_COUNTS\r\n(\r\n        id BIGINT NOT NULL,\r\n        mt BIGINT NOT NULL, \r\n        pred BIGINT NOT NULL,\r\n        term BIGINT NOT NULL,\r\n        term_index INTEGER NOT NULL,\r\n        usage_count BIGINT NOT NULL\r\n);\r\n\r\n\r\nALTER TABLE kb.mt_gaf_top_level_term_counts \r\n  ADD CONSTRAINT kb_mt_gaf_top_level_term_counts_pk PRIMARY KEY (id);\r\nALTER TABLE kb.mt_gaf_top_level_term_counts \r\n   ADD CONSTRAINT kb_mt_gaf_top_level_term_counts_non_negative_usage_count_check CHECK (usage_count >= 0);\r\n\r\n\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_mt_index ON kb.mt_gaf_top_level_term_counts(mt);\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_term_index ON kb.mt_gaf_top_level_term_counts(term);\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_pred_index ON kb.mt_gaf_top_level_term_counts(pred);\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_mt_pred_term_index_index ON kb.mt_gaf_top_level_term_counts(mt, pred, term_index); -- fast find of terms\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_pred_term_term_index_index ON kb.mt_gaf_top_level_term_counts(pred, term, term_index); -- fast find of mts\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_mt_term_term_index_index ON kb.mt_gaf_top_level_term_counts(mt, term, term_index); -- fast find of preds\r\nCREATE INDEX  kb_mt_gaf_top_level_term_counts_mt_pred_term_index ON kb.mt_gaf_top_level_term_counts(mt, pred, term); -- fast find of term indices\r\nCREATE INDEX kb_mt_gaf_top_level_term_counts_mt_pred_term_index_term_index ON kb.mt_gaf_top_level_term_counts(mt, pred, term_index, term); -- fast find of ids\r\n\r\nThe following delete currently produces a full table scan:\r\n\r\nDELETE FROM kb.mt_gaf_top_level_term_counts WHERE (term = 1407374883554049) OR (pred = 1407374883554049) OR (mt = 1407374883554049)\r\n\r\nHowever, breaking it up into 3 separate deletes does not produce a table scan.\r\n\r\n\r\nNote: I am maintaining statistics on the table if that matters:\r\n\r\ncall SYSCS_UTIL.SYSCS_UPDATE_STATISTICS('KB', 'MT_GAF_TOP_LEVEL_TERM_COUNTS', null);\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-21T17:04:10.259+0000","updated":"2013-05-21T18:12:49.790+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13664246","id":"13664246","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"i think we should move the delete bug to a new linked JIRA.  Tony, can you verify that\r\nthe current submitted fix, fixes your original reported select issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-22T16:47:28.340+0000","updated":"2013-05-22T16:47:28.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13664255","id":"13664255","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"just looked more carefully at the problem delete query, an optimal execution would do single probes in 3 different indexes.  I am not sure if the in list optimization is coded to do that.  This may be a feature request vs a bug.  Could someone who knows the optimizer comment?  It would be good to know if a select that looks like the delete query has a problem or not.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-22T16:59:33.158+0000","updated":"2013-05-22T17:16:09.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13665288","id":"13665288","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"Is there a way I can get quick access to fixed jar files (client and embedded)? I'm not currently set up to do Derby development. \r\n\r\nAlso, once you enable statistics with SYSCS_UTIL.SYSCS_UPDATE_STATISTICS, is there a way to turn it off again? Since this bypasses the issue, I'll need to undo this change so I can test accurately.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-23T15:59:49.138+0000","updated":"2013-05-23T16:01:29.317+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13665612","id":"13665612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"body":"I tried the SELECT version of the DELETE statement:\r\n\r\nSELECT *  FROM kb.mt_gaf_top_level_term_counts WHERE (term = 1407374883554049) OR (pred = 1407374883554049) OR (mt = 1407374883554049) \r\n\r\nIt looks like it is doing a table scan as well.\r\n\r\nNumber of pages visited=67\r\nNumber of rows qualified=418\r\nNumber of rows visited=29498\r\n\r\nNote: this was tried without the Mamta's patches for this bug so far. However, I am using table statics which would avoid this bug, so I'm pretty sure this is still a real issue.\r\n\r\nHere is the query plan:\r\n\r\nThu May 23 15:17:22 CDT 2013 Thread[DRDAConnThread_3,5,main] (XID = 80859), (SESSIONID = 1), SELECT COUNT(*) FROM (SELECT *  FROM kb.mt_gaf_top_level_term_counts WHERE (term = 1407374883554049) OR (pred = 1407374883554049) OR (mt = 1407374883554049)) C2668 ******* Project-Restrict ResultSet (4):\r\nNumber of opens = 1\r\nRows seen = 1\r\nRows filtered = 0\r\nrestriction = false\r\nprojection = true\r\n\tconstructor time (milliseconds) = 0\r\n\topen time (milliseconds) = 0\r\n\tnext time (milliseconds) = 0\r\n\tclose time (milliseconds) = 0\r\n\trestriction time (milliseconds) = 0\r\n\tprojection time (milliseconds) = 0\r\n\toptimizer estimated row count: 1.00\r\n\toptimizer estimated cost: 12365.71\r\nSource result set:\r\n\tScalar Aggregate ResultSet:\r\n\tNumber of opens = 1\r\n\tRows input = 418\r\n\t\tconstructor time (milliseconds) = 0\r\n\t\topen time (milliseconds) = 0\r\n\t\tnext time (milliseconds) = 0\r\n\t\tclose time (milliseconds) = 0\r\n\t\toptimizer estimated row count: 14751.50\r\n\t\toptimizer estimated cost: 12365.71\r\n\tIndex Key Optimization = false\r\n\tSource result set:\r\n\t\tProject-Restrict ResultSet (3):\r\n\t\tNumber of opens = 1\r\n\t\tRows seen = 418\r\n\t\tRows filtered = 0\r\n\t\trestriction = false\r\n\t\tprojection = true\r\n\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\topen time (milliseconds) = 0\r\n\t\t\tnext time (milliseconds) = 0\r\n\t\t\tclose time (milliseconds) = 0\r\n\t\t\trestriction time (milliseconds) = 0\r\n\t\t\tprojection time (milliseconds) = 0\r\n\t\t\toptimizer estimated row count: 14751.50\r\n\t\t\toptimizer estimated cost: 12365.71\r\n\t\tSource result set:\r\n\t\t\tTable Scan ResultSet for MT_GAF_TOP_LEVEL_TERM_COUNTS at read committed isolation level using share row locking chosen by the optimizer\r\n\t\t\tNumber of opens = 1\r\n\t\t\tRows seen = 418\r\n\t\t\tRows filtered = 0\r\n\t\t\tFetch Size = 1\r\n\t\t\t\tconstructor time (milliseconds) = 0\r\n\t\t\t\topen time (milliseconds) = 0\r\n\t\t\t\tnext time (milliseconds) = 0\r\n\t\t\t\tclose time (milliseconds) = 0\r\n\t\t\t\tnext time in milliseconds/row = 0\r\n\r\n\t\t\tscan information:\r\n\t\t\t\tBit set of columns fetched=All\r\n\t\t\t\tNumber of columns fetched=6\r\n\t\t\t\tNumber of pages visited=67\r\n\t\t\t\tNumber of rows qualified=418\r\n\t\t\t\tNumber of rows visited=29498\r\n\t\t\t\tScan type=heap\r\n\t\t\t\tstart position:\r\n\t\t\t\t\tnull\r\n\t\t\t\tstop position:\r\n\t\t\t\t\tnull\r\n\t\t\t\tqualifiers:\r\n\t\t\t\t\tColumn[1][0] Id: 3\r\n\t\t\t\t\tOperator: =\r\n\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\t\tColumn[1][1] Id: 2\r\n\t\t\t\t\tOperator: =\r\n\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\t\tColumn[1][2] Id: 1\r\n\t\t\t\t\tOperator: =\r\n\t\t\t\t\tOrdered nulls: false\r\n\t\t\t\t\tUnknown return value: false\r\n\t\t\t\t\tNegate comparison result: false\r\n\t\t\t\toptimizer estimated row count: 14751.50\r\n\t\t\t\toptimizer estimated cost: 12365.71\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=apb","name":"apb","emailAddress":"brusseau at cyc dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tony Brusseau","active":true},"created":"2013-05-23T20:22:46.272+0000","updated":"2013-05-23T20:22:46.272+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13665813","id":"13665813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I have created DERBY-6226 to track the discussion on the \"delete/select\" with OR's on multiple columns.  Tony I think you can delete your private data as we actually did repro the problem, just did not know it.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2013-05-23T23:06:42.135+0000","updated":"2013-05-23T23:06:42.135+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/13670535","id":"13670535","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"body":"I will go ahead and close this jira since we are following issue with OR on multiple columns as part of DERBY-6226","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mamtas","name":"mamtas","emailAddress":"msatoor at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mamta A. Satoor","active":true},"created":"2013-05-30T17:58:59.609+0000","updated":"2013-05-30T18:00:55.250+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12628077/comment/14284761","id":"14284761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"bulk change to close all issues resolved but not closed and not changed since June 1, 2014.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2015-01-21T00:23:11.783+0000","updated":"2015-01-21T00:23:11.783+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6045/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i17wxz:"}}