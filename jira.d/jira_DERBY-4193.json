{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12423957","self":"https://issues.apache.org/jira/rest/api/latest/issue/12423957","key":"DERBY-4193","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314116","id":"12314116","description":"10.5.2 Release July 30 2009 (794445) Now deprecated","name":"10.5.2.0","archived":false,"released":true,"releaseDate":"2009-07-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313727","id":"12313727","description":"Feature release","name":"10.6.1.0","archived":false,"released":true,"releaseDate":"2010-05-18"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2009-04-28 12:37:45.847","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"24091","customfield_12310222":"3_*:*_1_*:*_686607555_*|*_1_*:*_1_*:*_45604910_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2009-05-06T11:21:21.526+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4193/watchers","watchCount":0,"isWatching":false},"created":"2009-04-27T23:57:49.061+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12313771","id":"12313771","description":"build: 764942, 14/Apr/09. Voted release: 28/Apr/09. Announced: 1/May/09","name":"10.5.1.1","archived":false,"released":true,"releaseDate":"2009-04-28"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313727","id":"12313727","description":"Feature release","name":"10.6.1.0","archived":false,"released":true,"releaseDate":"2010-05-18"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-12T22:24:25.877+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11412","id":"11412","name":"Store"}],"timeoriginalestimate":null,"description":"The attached program ScanPosSaved.java produces the error below, fairly quickly.  \r\nThe program has three threads, one doing inserts into a table with an identity column, one updating the row with the maximum id, one deleting the row with the maximum id.\r\n\r\nTo reproduce, run >java ScanPosSaved  and <ctrl> <c> out of the program after you get the error.\r\n\r\nI saw this 10.5 and trunk sane builds but did not see it on 10.4.  With the insane build of 10.5.1.1 (RC2) I did not see any symptoms right away, so don't know how serious an issue this is for insane builds.\r\n\r\n\r\norg.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Scan position already saved\r\n\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.BTreeScan.savePositionAndReleasePage(BTreeScan.java:2148)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.BTreeScan.savePositionAndReleasePage(BTreeScan.java:2212)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.BTreeRowPosition.saveMeAndReleasePage(BTreeRowPosition.java:128)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:295)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:599)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:105)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(BTreeMaxScan.java:347)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(BTreeMaxScan.java:434)\r\n\r\n\tat org.apache.derby.impl.store.access.btree.index.B2I.fetchMaxOnBTree(B2I.java:739)\r\n\r\n\tat org.apache.derby.impl.store.access.RAMTransaction.fetchMaxOnBtree(RAMTransaction.java:1078)\r\n\r\n\tat org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.openCore(LastIndexKeyResultSet.java:189)\r\n\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)\r\n\r\n\tat org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.openCore(ScalarAggregateResultSet.java:133)\r\n\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)\r\n\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:245)\r\n\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)\r\n\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)\r\n\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)\r\n\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)\r\n\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:152)\r\n\r\n\tat ScanPosSaved.updateOperation(ScanPosSaved.java:62)\r\n\r\n\tat ScanPosSaved$3.run(ScanPosSaved.java:17)\r\n\r\n\r\nI discovered this when trying to get a smaller repro for DERBY-4181, but I think it is a different issue, because it reproduces on multiple jvms and does not reproduce on 10.4.  The assertion was added with DERBY-2991.  Knut could you perhaps assess how serious this is?\r\n\r\n\r\n\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37708","summary":"ASSERT FAILED Scan position already saved with multi-threaded insert/update/delete ","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10422","value":"High Value Fix","id":"10422"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":"Windows XP, IBM 1.6 SR6, Sun  1.6.0_01-b06","customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":13,"total":13,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703455","id":"12703455","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Correcting typo in previous repro.  I was actually passing the same connection into two threads.  The issue still reproduces with this corrected.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2009-04-28T00:16:27.547+0000","updated":"2009-04-28T00:16:27.547+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703624","id":"12703624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I think the assert is harmless, in the sense that nothing bad should happen in non-debug builds. It basically indicates that the last time we saved the position of this scan, we didn't subsequently use it to reposition the scan, so in this case I think it just means that we saved the position unnecessarily.\r\n\r\nThe code that fails tries to save the position of a max scan because it has to wait in order to obtain the lock on the rightmost row in an index. In this case it won't use the saved position when it wakes up, instead it performs a new search from the root of the B-tree to find the rightmost row again (which is possibly a different row now). In the repro, the max scan needs to wait a second time to lock the rightmost row because a new row has become the rightmost one, and it's still locked exclusively.\r\n\r\nSince the locking of the last row is performed the same way as one would do previous key locking (the comment above it actually says \"backward scan initial positioning will request a previous key lock for initial positioning\"), I believe that it would be correct to replace the call to lockScanRow() with a call to lockNonScanPreviousRow(). Previous key locking will not save the position when it needs to wait, so the assert failure will go away, and the logic in BTreeMaxScan.positionAtStartPosition() will also be simpler as it doesn't need to decrement/increment pos.current_slot before/after the lock call.\r\n\r\nI think there may be similar problems in\r\n\r\n  BTreeScan.positionAtStartForForwardScan()\r\n  BTreeScan.positionAtStartForBackwardScan()\r\n  BTreeMaxScan.fetchMax()","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-28T12:37:45.847+0000","updated":"2009-04-28T12:37:45.847+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703626","id":"12703626","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The attached patch adds a test case to IndexSplitDeadlockTest that fails most of the time (there is a race for a lock, so that it sometimes doesn't fail) with the assert failure reported by Kathey.\r\n\r\nThe patch also changes BTreeMaxScan.positionAtStartPosition() so that it uses lockNonScanPreviousRow() instead of lockScanRow(). This change makes both IndexSplitDeadlockTest and ScanPosSaved run without errors.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-28T12:44:30.235+0000","updated":"2009-04-28T12:44:30.235+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703761","id":"12703761","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Thanks Knut for the quick fix.  I ran the program for 2 hours with the patch and got no errors and checked consistency and it was fine.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2009-04-28T17:36:24.949+0000","updated":"2009-04-28T17:36:24.949+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703770","id":"12703770","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I believe your proposed change may result in a change in behavior for isolation levels which don't \r\nrequire previous key locking.  In particular if you use previous key locking code it may not get a lock\r\nat all for some isolation levels.  I am not sure how important it is, but the difference I think is:\r\ncurrent code: It loops using the \"fast\" search until it can get a lock on the last row in the last leaf page while holding latch and not waiting on lock.\r\nchange:  in some isolation levels may not get lock in the position code, and instead will fail to get lock\r\n                 in fetchMax() code and give up earlier on the \"fast\" search in case where there is competition\r\n                 for the lock.\r\n\r\nReading through the comments in the code, I believe they are misleading.  I think they came from a\r\ncut/paste of some prototype backward scan code and actually don't apply to the specific max scan case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2009-04-28T18:06:39.566+0000","updated":"2009-04-28T18:06:39.566+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12703773","id":"12703773","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"Here is an updated version of BTreeMaxScan.java I would like to check into the trunk, it just has comment changes.  I believe this better describes the intent of the code.  I believe the old comments about previous key locking did not apply to the max scan.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2009-04-28T18:09:16.330+0000","updated":"2009-04-28T18:09:16.330+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12704146","id":"12704146","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The suggested changes to the comments look like improvements to me. +1 to commit.\r\n\r\n(I noticed that you added a RESOLVE comment in some code that you don't think will ever be called. I came to the same conclusion when I wrote tests for DERBY-2991 and added a comment about it in IndexSplitDeadlockTest. So we should probably just remove that code.)\r\n\r\nAs to the changed behaviour, I haven't been able to see any. I tried a simple SELECT MAX(X) FROM T, and observed this both with and without the patch:\r\n\r\n* read uncommitted: no locks obtained in position or in fetchMax (IS obtained before position)\r\n\r\n* read committed: zero duration row lock on last row obtained *both* in position and fetchMax (and IS before position)\r\n\r\n* repeatable read and serializable: no locks in position/fetchMax (already had S on table)\r\n\r\nI think that whether or not previous key locking should be used, is determined by the lockScanRow() method as it decides whether it should call lockNonScanPreviousRow(), and it's not determined by lockNonScanPreviousRow() itself. So my understanding of the code is that if lockScanRow() would have obtained a lock, so will lockNonScanPreviousRow().\r\n\r\nAnd isn't this lock really a range lock, like the previous key locks? It's not just protecting the row containing the max value, but really the range starting with that row, so that no higher values can be inserted while the lock is held.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-29T15:11:30.869+0000","updated":"2009-04-29T15:11:30.869+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12704623","id":"12704623","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"An alternative to using lockNonScan* methods for the problematic cases is to add a flag to lockScanRow() to state whether or not the position should be saved if the latch is released. See the attached patch.\r\n\r\nI'll try to write some test cases that trigger the assert from the other methods mentioned above.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-30T12:53:32.256+0000","updated":"2009-04-30T12:53:32.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12704682","id":"12704682","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"i prefer the use of lockScanRow, so your most recent suggestion seems better.  The code already does some special case code on the btree position in the cases I think you are going after - I wonder\r\nif there should just be new routine on BTreeRowPosition to clear the state if you are intending to \r\nre-search the tree.  maybe .init() does the job?\r\n\r\nWould the following work (or something like it)?:\r\nold btreemax code:\r\nif (latch_released)\r\n{\r\n    // lost latch on pos.current_leaf, search the tree again.\r\n    pos.current_leaf = null;\r\n    continue;\r\n}\r\nnew?:\r\nif (latch_released)\r\n{\r\n    // lost latch on pos.current_leaf, search the tree again - will not use current position\r\n    pos.init();\r\n    continue;\r\n}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2009-04-30T16:14:34.732+0000","updated":"2009-04-30T16:14:34.732+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12705577","id":"12705577","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks, Mike. pos.init() should do the trick. In the 1c patch I've addressed the four cases I identified as problematic the following way:\r\n\r\n* BTreeMaxScan.positionAtStartPosition and BTreeScan.positionAtStartForForwardScan:\r\n  - use pos.init() to clear the saved position\r\n\r\n* BTreeScan.positionAtStartForBackwardScan:\r\n  - this method is never used, as far as I can see, so I removed it instead of fixing it\r\n\r\n* BTreeMaxScan.fetchMax:\r\n  - not a problem in this method because it calls positionAtDoneScan() before it restarts the scan from the beginning, so the position will be cleared in the code as it is now\r\n\r\nI also added a test case for the forward scan case. Like the max scan test, it does not fail consistently, but it fails in most cases in my environment without the fix.\r\n\r\nThe regression tests are running now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-05-04T12:47:11.878+0000","updated":"2009-05-04T12:47:11.878+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12705638","id":"12705638","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"All regression tests passed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-05-04T16:09:20.204+0000","updated":"2009-05-04T16:09:20.204+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12706340","id":"12706340","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed revision 772090.\r\nI'll also back-port the fix to 10.5.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-05-06T08:04:57.922+0000","updated":"2009-05-06T08:04:57.922+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12423957/comment/12706382","id":"12706382","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Merged to 10.5 and committed revision 772146.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-05-06T11:21:21.468+0000","updated":"2009-05-06T11:21:21.468+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4193/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06tgv:"}}