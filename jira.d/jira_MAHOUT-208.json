{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12441595","self":"https://issues.apache.org/jira/rest/api/latest/issue/12441595","key":"MAHOUT-208","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310751","id":"12310751","key":"MAHOUT","name":"Mahout","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310751&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310751&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310751&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310751&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13060","id":"13060","description":"Apache Mahout","name":"Mahout"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314281","id":"12314281","description":"","name":"0.3","archived":false,"released":true,"releaseDate":"2010-03-17"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2009-12-10 19:14:14.78","customfield_12312323":null,"customfield_12310420":"9857","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1446184412_*|*_5_*:*_2_*:*_4073653382_*|*_4_*:*_1_*:*_50009764","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-01-28T06:16:53.542+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAHOUT-208/watchers","watchCount":1,"isWatching":false},"created":"2009-11-24T19:06:05.984+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312976","id":"12312976","description":"First Minor Release","name":"0.1","archived":false,"released":true,"releaseDate":"2009-04-07"}],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-05-21T03:24:16.753+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312270","id":"12312270","name":"Math","description":"Math / Matrix / Vector stuff"}],"timeoriginalestimate":null,"description":"SparseVector and DenseVector both cache the value of lengthSquared, so that subsequent calls to it get the cached value.  Great, except the cache is never cleared - calls to set/setQuick or assign or anything, all leave the cached value unchanged.  \r\n\r\nMutating method calls should set lengthNorm to -1 so that the cache is cleared.\r\n\r\nThis could be a really nasty bug if hit.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"23211","summary":"Vector.getLengthSquared() is dangerously optimized","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"all","customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":16,"total":16,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12788848","id":"12788848","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"body":"Agree, I already saw this and half-fixed it as regards readFields(). Yes, it is a bad one indeed. Seems like the caller should cache the value if it's so important.\r\n\r\nAny objection to removing this caching?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"created":"2009-12-10T19:14:14.780+0000","updated":"2009-12-10T19:14:14.780+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12788854","id":"12788854","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"body":"\r\nThis caching can be a really major win so I would prefer to keep it.\r\n\r\nYou are correct that many callers could cache it, but that can also be quite difficult because they would need to cache *lots* of lengths.  Moreover, the caching is primarily to assist in computing distances between sparse vectors.  Thus if you compute the distance v1 and v2 in one part of the code, it isn't real obvious how some other part of the code would know to cache these lengths for when v2 is compared to v3.  Certainly it isn't easy to understand how the caller could inject the cached values into the euclideanDistance call that it is supposed to accelerate.\r\n\r\nHaving the caching in vectors makes all of this happen with no overhead (other than stupid bugs) for users who don't use the capability and only minimal effort for users who do use the capability.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"created":"2009-12-10T19:30:40.858+0000","updated":"2009-12-10T19:30:40.858+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12788857","id":"12788857","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"We could remove it, but I actually did something like this in decomposer, and kept track of a single boolean (isCacheValid or whatever) which would get set to false whenever a mutating method was called (not worrying about the case where you were setting it to something which didn't change the lengthNorm - ie be as conservative as possible).  But with iterator methods which can mutate the vector entries as well, tracking down all the places where things can change could be tricky (and adding another isCacheValid = false in all the inner loops... is there a perf impact?).\r\n\r\nThe other option is to just have a immutable subclasses which do keep track of things like this where we know it won't change, and as you say, the caller can keep track of it in the mutable case.\r\n\r\nThere is a use-case for this though, if you're running over a huge set of vectors (say, a big matrix of them), and need to do dot products with them and then divide or multiply by norms or whatnot, keeping track of all of these norms externally is a lot of overhead, but recomputing them every time doubles your run time.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2009-12-10T19:31:29.837+0000","updated":"2009-12-10T19:31:29.837+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12788862","id":"12788862","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"body":"(ted speaking from far down the slippery slope)\r\n\r\nWe could have mutable iterators that set the cache flag to false if you even ask for the iterator and immutable iterators that throw an exception if you try to mutate anything.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"created":"2009-12-10T19:39:43.814+0000","updated":"2009-12-10T19:39:43.814+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12788869","id":"12788869","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"bq. We could have mutable iterators that set the cache flag to false if you even ask for the iterator and immutable iterators that throw an exception if you try to mutate anything.\r\n\r\nSo we go from having one iterator, to two, to four?  Talk about ew, right?  Or is this not what you're suggesting?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2009-12-10T19:47:45.305+0000","updated":"2009-12-10T19:47:45.305+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789171","id":"12789171","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kshashi","name":"kshashi","emailAddress":"shashikant at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shashikant Kore","active":true},"body":"It is important to have this caching  to keep the work done on MAHOUT-121 intact. \r\n\r\nAlternative to maintaining caching flag is to use the hashcode of underlying constructs. For example, in case of SparseVector, we could use OpenIntDoubleHashMap.hashCode() to see if the cached value is still valid.  In case of DenseVectors, hashcode of arrays can be used.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kshashi","name":"kshashi","emailAddress":"shashikant at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shashikant Kore","active":true},"created":"2009-12-11T08:33:14.526+0000","updated":"2009-12-11T08:33:14.526+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789201","id":"12789201","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"bq. Alternative to maintaining caching flag is to use the hashcode of underlying constructs. For example, in case of SparseVector, we could use OpenIntDoubleHashMap.hashCode() to see if the cached value is still valid. In case of DenseVectors, hashcode of arrays can be used.\r\n\r\nDoes this really work?  hashCode() is nearly as expensive as lengthNorm() to compute itself, so unless I'm blanking on some fancy thing the JVM does to cache hashcodes and invalidate them when data which would make them change... then you do a hashCode() check to see if you need to recompute the lengthNorm(), taking nearly twice the time in the case where there was mutation, and taking O(numNonZeroEntries) time instead of O(1) when there wasn't.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2009-12-11T10:00:44.760+0000","updated":"2009-12-11T10:00:44.760+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789207","id":"12789207","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"body":"Agree with Jake, there isn't any special handling of hashcode. This also introduces the possibility of errors, which seems unacceptable for this API.\r\n\r\nI'll go the other way and just fix handling of the caching, because yes it's going to be quite wrong if the vector is changed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"created":"2009-12-11T10:11:18.456+0000","updated":"2009-12-11T10:11:18.456+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789217","id":"12789217","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"So the strategy is just \"be careful\" (what I did in decomposer), not \"separate out the mutating iterators from the immutable ones\", right?  Personally I'd be fine if we decided to go the slightly easier route for now, and only did caching on immutable vectors (make a new subclass, and move the caching down into that), because this actually covers most of both Shashi and my main use cases.  Of course, there are probably many more, so \"doing it right\" and keeping a properly invalidated cache even for mutable vectors is desirable in the long run.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2009-12-11T10:30:25.862+0000","updated":"2009-12-11T10:30:25.862+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789262","id":"12789262","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"body":"Actually I think you are right that this is the ultimate solution. Many uses of Vector don't mutate them, and therefore that should be something one can optimize for by selecting an immutable implementation.\r\n\r\nActually there are a number of issues I'd like to discuss about the Vector implementation, perhaps sooner than later. Who should I understand to be the \"owner\" of Vector? I also ask because we need to understand how the migration to Colt is going, and who's heading that up.\r\n\r\nBut for purposes here: fixing this right now means recomputing the length on each set() operation. That's better than broken code, but is it better than not caching? If I just took out caching actually would that be good motivation to refactor Vector?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"created":"2009-12-11T12:10:21.481+0000","updated":"2009-12-11T12:10:21.481+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789274","id":"12789274","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"bq. Actually there are a number of issues I'd like to discuss about the Vector implementation, perhaps sooner than later. Who should I understand to be the \"owner\" of Vector? I also ask because we need to understand how the migration to Colt is going, and who's heading that up.\r\n\r\nI'll own Matrix and Vector if nobody else really has serious plans for it.  MAHOUT-205 is something which needs to come soon, so we can make a hadoop-independent linar package, with a separate interface to Hadoop, and then a (couple of) fully parallel Matrix implementation(s), as well as the whole incorporation of Colt primitives.\r\n\r\nbq. But for purposes here: fixing this right now means recomputing the length on each set() operation.\r\n\r\nNo!  Far too costly.  Just invalidate the cache (set lengthNorm to -1, or set a boolean), because maybe nobody will ever call lengthNorm() on this Vector again, so why recompute it?  Just leave it lazily for the lengthNorm() call.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2009-12-11T12:26:12.918+0000","updated":"2009-12-11T12:26:12.918+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12789284","id":"12789284","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"body":"Fixed by adding '  lengthSquared = -1.0; ' to every place the values are mutated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=srowen","name":"srowen","emailAddress":"srowen at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=srowen&avatarId=10104","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=srowen&avatarId=10104","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=srowen&avatarId=10104","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=srowen&avatarId=10104"},"displayName":"Sean Owen","active":true},"created":"2009-12-11T12:49:10.356+0000","updated":"2009-12-11T12:49:10.356+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12790118","id":"12790118","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kshashi","name":"kshashi","emailAddress":"shashikant at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shashikant Kore","active":true},"body":"Apologies. I *assumed* underlying library already does some caching for hash value. String does cache, but it is immutable, so it is \"obvious.\" Caching hashcode for mutable object will face the same problems as us. \r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kshashi","name":"kshashi","emailAddress":"shashikant at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shashikant Kore","active":true},"created":"2009-12-14T12:16:04.293+0000","updated":"2009-12-14T12:16:04.293+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12805408","id":"12805408","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jakemannix","name":"jakemannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"jakes old (non-committer) account","active":true},"body":"Hmm... I'm getting bitten by this again: setQuick() mutates, but only calls \"lengthSquared = -1.0\" in DenseVector.  The sparse vectors don't do this, and nasty things happen. Will check in fix.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jakemannix","name":"jakemannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"jakes old (non-committer) account","active":true},"created":"2010-01-27T08:19:09.418+0000","updated":"2010-01-27T08:19:09.418+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12805560","id":"12805560","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"reopening until I check in the sparse fixes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2010-01-27T16:23:23.570+0000","updated":"2010-01-27T16:23:23.570+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12441595/comment/12805806","id":"12805806","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"fixed in r903965","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2010-01-28T06:16:53.539+0000","updated":"2010-01-28T06:16:53.539+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAHOUT-208/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04c0f:"}}