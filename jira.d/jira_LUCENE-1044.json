{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12381729","self":"https://issues.apache.org/jira/rest/api/latest/issue/12381729","key":"LUCENE-1044","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312681","id":"12312681","description":"","name":"2.4","archived":false,"released":true,"releaseDate":"2008-10-08"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2007-11-03 05:22:50.682","customfield_12312323":null,"customfield_12310420":"12701","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_36957042_*|*_6_*:*_1_*:*_0_*|*_5_*:*_3_*:*_21351778444_*|*_4_*:*_2_*:*_8310203992","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2008-02-11T18:59:51.957+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-1044/watchers","watchCount":5,"isWatching":false},"created":"2007-11-02T19:07:15.323+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"9.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[],"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2009-02-23T17:15:03.387+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12310232","id":"12310232","name":"core/index","description":"issues with indexing code"}],"timeoriginalestimate":null,"description":"When indexing a large number of documents, upon a hard power failure  (e.g. pull the power cord), the index seems to get corrupted. We start a Java application as an Windows Service, and feed it documents. In some cases (after an index size of 1.7GB, with 30-40 index segment .cfs files) , the following is observed.\n\nThe 'segments' file contains only zeros. Its size is 265 bytes - all bytes are zeros.\nThe 'deleted' file also contains only zeros. Its size is 85 bytes - all bytes are zeros.\n\nBefore corruption, the segments file and deleted file appear to be correct. After this corruption, the index is corrupted and lost.\n\nThis is a problem observed in Lucene 1.4.3. We are not able to upgrade our customer deployments to 1.9 or later version, but would be happy to back-port a patch, if the patch is small enough and if this problem is already solved.\n","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"27003","summary":"Behavior on hard power shutdown","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ts01","name":"ts01","emailAddress":"venkat at clearwellsystems dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"venkat rangan","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ts01","name":"ts01","emailAddress":"venkat at clearwellsystems dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"venkat rangan","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Windows Server 2003, Standard Edition, Sun Hotspot Java 1.5","customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":52,"total":52,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12539787","id":"12539787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"body":"first off: there have been *numerous* changes to the way lucene writes to files (particularly relating to segment files, write locks, and fault tollerance) between 2.0 and 2.2 (not to mention differences between 1.4.3 and 2.0 that i may not be aware of) -- so you may see many differences in behavior if you upgrade.\r\n\r\nsecond: to quote myself from a recent thread regarding lucene and \"kill -9\" ...\r\n\r\nhttp://www.nabble.com/Help-with-Lucene-Indexer-crash-recovery-tf4572570.html#a13068939\r\n\r\n{quote}\r\n: That said, it should never in fact cause index corruption, as far as I\r\n: know.  Lucene is \"semi-transactional\": at any & all moments you should\r\n: be able to destroy the JVM and the index will be unharmed. I would\r\n: really like to get to the bottom of why this is not the case here.\r\n\r\nAt any point you can shutdown the JVM and the index will be unharmed, but\r\n\"destroying\" it with \"kill -9\" goes a little farther then that.  \r\n\r\nLucene can't make that claim because the JVM can't even garuntee that\r\nbytes are written to physical disk when we close() an OutputStream -- all\r\nit garuntees is that the bytes have been handed to the OS.  When you \"kill\r\n-9\" a process the OS is free to make *EVERYTHING* about that process\r\nvanish without cleaning up after it ... i'm pretty sure even pending IO\r\noperations are fair game for disappearing.\r\n{quote}\r\n\r\n...what's true for \"kill -9\" is true for hanking the power cord ... if the JVM isn't shut down cleanly, there is nothing Lucene or the JVM can do to guarantee that your index is in a consistent state.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hossman","name":"hossman","emailAddress":"hossman_apachejira at fucit dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hossman&avatarId=21247","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hossman&avatarId=21247","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hossman&avatarId=21247","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hossman&avatarId=21247"},"displayName":"Hoss Man","active":true},"created":"2007-11-03T05:22:50.682+0000","updated":"2007-11-03T05:22:50.682+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12539891","id":"12539891","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rengels%40ix.netcom.com","name":"rengels@ix.netcom.com","emailAddress":"rengels at ix dot netcom dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"robert engels","active":true},"body":"The last comment is not correct, in that, there are many Java based applications (and non-java) that offer true transactional integrity.\r\n\r\nIt usually involves a log file, and using sync to ensure data is written to disk.\r\n\r\nThe Lucene structure allows for this VERY easily, as the 'segments' file controls everything.\r\n\r\nIf all previous files are \"synced\", and then the 'segments.new' file written, and synced (with a marker/checksum). Then the old 'segments' deleted, and 'segments.new' 'renamed to 'segments'. It is trivial to ensure transactional integrity.\r\n\r\nUpon index open, check for segments.new - if doesn't exist, or does not have a valid checksum, delete all segments not in 'segments', if it is valid, then reattempt the rename. Then open the index.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rengels%40ix.netcom.com","name":"rengels@ix.netcom.com","emailAddress":"rengels at ix dot netcom dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"robert engels","active":true},"created":"2007-11-03T07:13:30.130+0000","updated":"2007-11-03T07:13:30.130+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540013","id":"12540013","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ts01","name":"ts01","emailAddress":"venkat at clearwellsystems dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"venkat rangan","active":true},"body":"Robert,\r\nAre your comments applicable for version 1.4.3? The behavior of an all-zero 'segments' and 'deleted' files is very easily reproduced. Also, there is no left over 'segments.new' after a power-cord yank.\r\nThanks.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ts01","name":"ts01","emailAddress":"venkat at clearwellsystems dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"venkat rangan","active":true},"created":"2007-11-03T21:52:51.649+0000","updated":"2007-11-03T21:52:51.649+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540056","id":"12540056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"See the healthy follow-on discussion here:\r\n\r\n    http://www.gossamer-threads.com/lists/lucene/java-dev/54300\r\n\r\nI plan to add optional argument when calling FSDirectory.getDirectory() to ask all created FSIndexOutputs to always call sync() on the file descriptor before closing it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-04T10:34:31.301+0000","updated":"2007-11-04T10:34:31.301+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540071","id":"12540071","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"This recent thread is also relevant here:\r\n\r\n    http://www.gossamer-threads.com/lists/lucene/java-dev/39898","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-04T14:34:20.558+0000","updated":"2007-11-04T14:34:20.558+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540073","id":"12540073","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Attached patch that adds optional \"doSync\" boolean to\r\nFSDirectory.getDirectory(...).  It defaults to \"false\".  When true, I\r\ncall file.getFD().sync() just before file.close() in\r\nFSIndexOutput.close().\r\n\r\nHowever, I can't figure out how to also sync the directory.  Does\r\nanyone know how to do this in Java?\r\n\r\nAll tests pass if I default it to true or to false.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-04T15:28:33.307+0000","updated":"2007-11-04T15:28:33.307+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540088","id":"12540088","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nAttached another rev of the patch, that adds \"fsdirectory.dosync\"\r\nboolean config option to contrib/benchmark.\r\n\r\nI ran a quick perf test of sync vs no sync.  I indexed all of\r\nWikipedia using this alg:\r\n\r\n  analyzer=org.apache.lucene.analysis.SimpleAnalyzer\r\n  \r\n  # Feed that knows how to process the line file format:\r\n  doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\r\n  \r\n  docs.file=/lucene/wikifull.txt\r\n  \r\n  doc.maker.forever=false\r\n  ram.flush.mb = 8\r\n  max.buffered = 0\r\n  directory = FSDirectory\r\n  max.field.length = 2147483647\r\n  doc.term.vector=false\r\n  doc.stored=false\r\n  fsdirectory.dosync = true\r\n  \r\n  ResetSystemErase\r\n  CreateIndex\r\n  {AddDoc >: *\r\n  CloseIndex\r\n  \r\n  RepSumByName\r\n\r\nThis is on a quad core Mac OS X (Mac Pro) with a 4-drive RAID 0 IO\r\nsystem.  The baseline (non-sync) test took 19:54 and the sync test\r\ntook 20:21, which I think is a fairly minor slowdown.\r\n\r\nI also tried opening the file descriptor with \"rws\", which I think is\r\noverkill for us (we don't need every IO operation to be sync'd) and it\r\ntook 31:11, which is a major slowdown :)\r\n\r\nMaybe we should actually make doSync=true the default?  It seems like\r\na small price to pay for the added safety.  The option would still be\r\nthere to turn off if people wanted to made the opposite tradeoff.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-04T18:29:22.449+0000","updated":"2007-11-04T18:29:22.449+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12540612","id":"12540612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Attached another rev of the patch.\r\n\r\nI changed the default to \"true\": I think the small performance hit is\r\nworth the added safety.\r\n\r\nAlso put a try/finally around the the call to sync to make sure we\r\nclose even if we hit exception during sync(), and improved the\r\njavadocs.  I plan to commit in a day or two.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-06T22:38:47.597+0000","updated":"2007-11-06T22:38:47.597+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12541566","id":"12541566","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I just committed this.  Thanks Venkat!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-10T17:51:55.439+0000","updated":"2007-11-10T17:51:55.439+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12541569","id":"12541569","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"body":"{quote}This is on a quad core Mac OS X (Mac Pro) with a 4-drive RAID 0 IO\r\nsystem. The baseline (non-sync) test took 19:54 and the sync test\r\ntook 20:21, which I think is a fairly minor slowdown.\r\n{quote}\r\n\r\nWas that compound or non-compound index format?  I imagine non-compound will take a bigger hit since each file will be synchronized separately and in a serialized fashion.  I also imagine that the hit will be larger for a weaker disk subsystem, and for usage patterns that continually add a few docs and close?\r\n\r\nIs a sync before every file close really needed, or can some of them be avoided when autocommit==false?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yseeley%40gmail.com","name":"yseeley@gmail.com","emailAddress":"yseeley at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yonik Seeley","active":true},"created":"2007-11-10T18:10:41.958+0000","updated":"2007-11-10T18:10:41.958+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12541570","id":"12541570","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rengels%40ix.netcom.com","name":"rengels@ix.netcom.com","emailAddress":"rengels at ix dot netcom dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"robert engels","active":true},"body":"I agree. Just for a baseline, I think the test needs to be done on a single drive system.\r\n\r\nAlso, the 'sync' should be optional. BerkleyDB offers similar functionality.\r\n\r\nThe reason being, if the index can be completely recreated from other sources, you might not want to pay the performance hit, instead recreate the index if corruption/hard failure occurs.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rengels%40ix.netcom.com","name":"rengels@ix.netcom.com","emailAddress":"rengels at ix dot netcom dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"robert engels","active":true},"created":"2007-11-10T18:17:25.559+0000","updated":"2007-11-10T18:17:25.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12541576","id":"12541576","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\n{quote}\r\nWas that compound or non-compound index format?  I imagine\r\nnon-compound will take a bigger hit since each file will be\r\nsynchronized separately and in a serialized fashion.\r\n{quote}\r\n\r\nThe test was with compound file.\r\n\r\nBut, the close() on each component file that goes into the compound\r\nfile also does a sync, so compound file would be a slightly bigger hit\r\nbecause it has one additional sync()?\r\n\r\nWe can't safely remove the sync() on each component file before\r\nbuilding the compound file because we currently do a commit of the new\r\nsegments file before building the compound file.\r\n\r\nI guess we could revisit whether that commit (before building the\r\ncompound file) is really necessary?  I think it's there from when\r\nflushing & merging were the same thing, and you do want to do this\r\nwhen merging to save 1X extra peak on the disk usage, but now that\r\nflushing is separate from merging we could remove that intermediate\r\ncommit?\r\n\r\n{quote}\r\nI also imagine that the hit will be larger for a weaker disk\r\nsubsystem, and for usage patterns that continually add a few docs and\r\nclose?\r\n{quote}\r\n\r\nOK I'll run the same test, but once on a laptop and once over NFS to\r\nsee what the cost is for those cases.\r\n\r\nYes, continually adding docs & flushing/closing your writer will in\r\ntheory be most affected here.  I think for such apps performance is\r\nnot usually top priority (indexing latency is)?  Ie if you wanted\r\nperformance you would batch up the added docs more?  Anyway, for such\r\ncases users can turn off sync() if they want to risk it?\r\n\r\n{quote}\r\nIs a sync before every file close really needed, or can some of them\r\nbe avoided when autocommit==false?\r\n{quote}\r\n\r\nIt's somewhat tricky to safely remove sync() even when\r\nautoCommit=false, because you don't know at close() whether this file\r\nyou are closing will be referenced (and not merged away) when the\r\ncommit is finally done (when IndexWriter is closed).\r\n\r\nIf there were a way to sync a file after having closed it (is there?)\r\nthen we could go and sync() all new files we had created that are now\r\nreferenced by the segments file we are writing.\r\n\r\nAlso, I was thinking we could start simple (call sync() before every\r\nclose()) and then with time, and if necessary, work out smarter ways\r\nto safely remove some of those sync()'s.\r\n\r\n{quote}\r\nAlso, the 'sync' should be optional. BerkleyDB offers similar\r\nfunctionality.\r\n{quote}\r\n\r\nIt is optional: I added doSync boolean to\r\nFSDirectory.getDirectory(...).\r\n\r\nAnd, I agree: for cases where there is very low cost to regenerate the\r\nindex, and you want absolute best performance, you can turn off\r\nsyncing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-10T19:04:20.635+0000","updated":"2007-11-10T19:04:20.635+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12541874","id":"12541874","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> Is a sync before every file close really needed [...] ?\r\n\r\nIt might be nice if we could use the Linux sync() system call, instead of fsync().  Then we could call that only when the new segments file is moved into place rather than as each file is closed.  We could exec the sync shell command when running on Unix, but I don't know whether there's an equivalent command for Windows, and it wouldn't be Java...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-12T18:14:06.514+0000","updated":"2007-11-12T18:14:06.514+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12542244","id":"12542244","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I ran sync/nosync tests across various platforms/IO system.  In\r\neach case I ran the test once with doSync=true and once with\r\ndoSync=false, using this alg:\r\n\r\n  analyzer=org.apache.lucene.analysis.SimpleAnalyzer\r\n  doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\r\n  docs.file=/lucene/wikifull.txt\r\n  \r\n  doc.maker.forever=false\r\n  ram.flush.mb = 8\r\n  max.buffered = 0\r\n  directory = FSDirectory\r\n  max.field.length = 2147483647\r\n  doc.term.vector=false\r\n  doc.stored=false\r\n  work.dir = /tmp/lucene\r\n  fsdirectory.dosync = false\r\n  \r\n  ResetSystemErase\r\n  CreateIndex\r\n  {AddDoc >: 150000\r\n  CloseIndex\r\n  \r\n  RepSumByName\r\n\r\nIe, time to index the first 150K docs from Wikipedia.\r\n\r\n\r\nResults for single hard drive:\r\n\r\n  Mac mini (10.5 Leopard) single 4200 RPM \"notebook\" (2.5\") drive -- 2.3% slower:\r\n  \r\n      sync - 296.80 sec\r\n    nosync - 290.06 sec\r\n  \r\n  Mac pro (10.4 Tiger), single external drive -- 35.5% slower:\r\n  \r\n      sync - 259.61 sec\r\n    nosync - 191.53 sec\r\n  \r\n  Win XP Pro laptop, single drive -- 38.2% slower\r\n  \r\n      sync - 536.00 sec\r\n    nosync - 387.90 sec\r\n  \r\n  Linux (2.6.22.1), ext3 single drive -- 23% slower\r\n  \r\n      sync - 185.42 sec\r\n    nosync - 150.56 sec\r\n  \r\nResults for multiple hard drives (RAID arrays):\r\n\r\n  Linux (2.6.22.1), reiserfs 6 drive RAID5 array -- 49% slower (!!)\r\n  \r\n      sync - 239.32 sec\r\n    nosync - 160.56 sec\r\n  \r\n  Mac Pro (10.4 Tiger), 4 drive RAID0 array -- 1% faster\r\n  \r\n      sync - 157.26 sec\r\n    nosync - 158.93 sec\r\n\r\n\r\nSo at this point I'm torn...\r\n\r\nThe performance cost of the simplest approach (sync() before close())\r\nis very costly in many cases (not just laptop IO subsystems).  The\r\nreiserfs test was rather shocking.  Then, it's oddly very lost cost in\r\nother cases: the Mac Mini test I find amazing.\r\n\r\nIt's frustrating to lose such performance \"out of the box\" for the\r\npresumably extremely rare event of OS/machine crash/power cut.\r\n\r\nMaybe we should leave the default as false for now?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-13T21:53:52.099+0000","updated":"2007-11-13T21:53:52.099+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12542261","id":"12542261","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> Maybe we should leave the default as false for now?\r\n\r\nPerhaps for the short-term, but long-term it would be better to find a solution that's both reliable and doesn't have such a big performance impact.\r\n\r\nWe really don't need to sync until we commit.  It would be interesting to know how much it slows things to do that.  As a quick hack we could try running the 'sync' command line program at each commit.  If performance looks good, then we might look into implementing this in pure Java, changing FSDirectory.close() to queue FileDescriptors, add a background thread that syncs queued files, and add a Directory.sync() method that blocks until the queue is empty.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-13T22:47:05.197+0000","updated":"2007-11-13T22:47:05.197+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12542397","id":"12542397","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nPerhaps for the short-term, but long-term it would be better to find a solution that's both reliable and doesn't have such a big performance impact.\r\n{quote}\r\n\r\nAgreed.  I will default doSync back to false, for now.\r\n\r\n{quote}\r\nWe really don't need to sync until we commit. It would be interesting to know how much it slows things to do that. As a quick hack we could try running the 'sync' command line program at each commit.\r\n{quote}\r\n\r\nI will test this as a hack first just to see how performance compares\r\nto the current approach.\r\n\r\n{quote}\r\nIf performance looks good, then we might look into implementing this in pure Java, changing FSDirectory.close() to queue FileDescriptors, add a background thread that syncs queued files, and add a Directory.sync() method that blocks until the queue is empty.\r\n{quote}\r\n\r\nWill do!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-14T10:24:19.283+0000","updated":"2007-11-14T10:24:19.283+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544115","id":"12544115","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK, I tested calling command-line \"sync\", after writing each segments\r\nfile.  It's in fact even slower than fsync on each file for these 3\r\ncases:\r\n\r\nLinux (2.6.22.1), reiserfs 6 drive RAID5 array 93% slower\r\n      sync - 330.74\r\n    nosync - 171.24\r\n\r\nLinux (2.6.22.1), ext3 single drive 60% slower\r\n      sync - 242.02\r\n    nosync - 150.91\r\n\r\nMac Pro (10.4 Tiger), 4 drive RAID0 array 28% slower\r\n      sync - 204.77\r\n    nosync - 159.90\r\n\r\nI'll look into the separate thread to sync/close files in the\r\nbackground next...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-20T23:19:56.745+0000","updated":"2007-11-20T23:19:56.745+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544730","id":"12544730","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"body":"I think changing the only constructor in FSDirectory.FSIndexOutput is\r\nan API change. I have a class that extends FSIndexOutput and it \r\ndoesn't compile anymore after switching to the 2.3-dev jar.\r\n\r\nI think we should put this ctr back:\r\npublic FSIndexOutput(File path) throws IOException {\r\n  this(path, DEFAULT_DO_SYNC);\r\n}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=michaelbusch","name":"michaelbusch","emailAddress":"buschmic at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael Busch","active":true},"created":"2007-11-22T08:38:43.981+0000","updated":"2007-11-22T08:38:43.981+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544758","id":"12544758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Woops, OK I will put it back ...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-22T10:32:48.329+0000","updated":"2007-11-22T10:32:48.329+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544803","id":"12544803","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"{quote}\r\nI'll look into the separate thread to sync/close files in the\r\nbackground next...\r\n{quote}\r\n\r\nI was wondering if delaying sync to actual commit point would run faster\r\nthan a background thread. I thought it would, because the background\r\nthread, though not holding current thread from continue with indexing, \r\ndoes force the sync *now* rather than letting the IO subsystem actually \r\nwrite stuff on its time. I was also hoping that by doing them later, \r\nsome of the syncs would become no-ops, and hence faster. I found\r\nout however that delaying the syncs (but intending to sync) also \r\nmeans keeping the file handles open, and therefore  this is not \r\na practical approach. Still it was interesting to compare. \r\n\r\nSo... my small test sequentially writes M characters to N files \r\nand either do not sync (just close), or does sync in one of three \r\nways: (1) at the end, (2) immediately, (3) in a background thread. \r\nThe results (in millis) on my Windows XP were:\r\n\r\n|| num files || num chars per file || No Sync || Sync At End || Background Sync || Immediate Sync ||\r\n|   100 | 10000 |   631 |   5778 |   5729 |   5828 |\r\n|   100 | 10000 |   581 |   4486 |   4117 |   4687 |\r\n|  1000 |  1000 |  1612 |  38996 |  34900 |  35852 |\r\n|  1000 |  1000 |  1432 |  37153 |  35051 |  37263 |\r\n| 10000 |   100 | 10335 | 154262 | 162103 | 174251 |\r\n| 10000 |   100 | 11276 | 147752 | 159480 | 222450 |\r\n\r\nEach configuration ran twice and there are fluctuations, \r\nbut it is obvious (as Mike noticed) that no-sync is much faster\r\nthen sync. In fact in my test no-sync is at least 10 times faster\r\nthan any sync approach, while in Mike's test which is using \r\nLucene the penalty is smaller. Difference might be because \r\nin my test there is no CPU work involved, just IO. \r\n\r\nComparing \"immediate\" to \"background\" I it is not clearly worth it \r\nto add a background thread (unless Mike's test proves otherwise..)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2007-11-22T13:27:23.842+0000","updated":"2007-11-22T13:27:23.842+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544811","id":"12544811","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"With some artificial CPU activity added to the test program:\r\n|| num files || num chars per file || No Sync || Sync At End || Background Sync || Immediate Sync ||\r\n|   100 | 10000 |  6690  |  11516 |  10706 |  11216 |\r\n|   100 | 10000 |  7200  |  11006 |  10575 |  10846 |\r\n|  1000 |  1000 |  8002  |  48570 |  48479 |  51825 |\r\n|  1000 |  1000 |  7801  |  43142 |  43693 |  43342 |\r\n| 10000 |   100 | 16303  | 152730 | 326810 | 207939 |\r\n| 10000 |   100 | 17805  | 156375 | 160040 | 165398 |\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2007-11-22T14:11:59.328+0000","updated":"2007-11-22T14:11:59.328+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12544812","id":"12544812","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"Attached FSyncPerfTest.java is the standalone (non Lucene) perf test that I used.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2007-11-22T14:16:10.676+0000","updated":"2007-11-22T14:16:56.728+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12545535","id":"12545535","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> I found out however that delaying the syncs (but intending to sync) also\r\nmeans keeping the file handles open [...]\r\n\r\nNot necessarily.  You could just queue the file names for sync, close them, and then have the background thread open, sync and close them.  The close could trigger the OS to sync things faster in the background.  Then the open/sync/close could mostly be a no-op.  Might be worth a try.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-26T18:13:03.127+0000","updated":"2007-11-26T18:13:03.127+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12545993","id":"12545993","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I did a simplistic patch (attached) whereby FSDirectory has a\r\nbackground thread that re-opens, syncs, and closes those files that\r\nLucene has written.  (I'm using a modified version of the class from\r\nDoron's test).\r\n\r\nThis patch is nowhere near ready to commit; I just coded up enough so\r\nwe could get a rough measure of performance cost of syncing.  EG we\r\nmust prevent deletion of a commit point until a future commit point is\r\nfully sync'd to stable storage; we must also take care not to sync a\r\nfile that has been deleted before we sync'd it; don't sync until the\r\nend when running with autoCommit=false; merges if run by\r\nConcurrentMergeScheduler should [maybe] sync in the foreground; maybe\r\nforcefully throttle back updates if syncing is falling too far behind;\r\netc.\r\n\r\nI ran the same alg as the tests above (index first 150K docs of\r\nWikipedia).  I ran CFS and no CFS X sync and nosync (4 tests) for each\r\nIO system.  Time is the fastest of 2 runs:\r\n\r\n|| IO System || CFS sync || CFS nosync || CFS % slower || non-CFS sync || non-CFS nosync || non-CFS % slower ||\r\n| ReiserFS 6-drive RAID5 array Linux (2.6.22.1) | 188 | 157 | 19.7% | 143 | 147 | -2.7% |\r\n| EXT3 single internal drive Linux (2.6.22.1) | 173 | 157 | 10.2% | 136 | 132 | 3.0% |\r\n| 4 drive RAID0 array Mac Pro (10.4 Tiger) | 153 | 152 | 0.7% | 150 | 149 | 0.7% |\r\n| Win XP Pro laptop, single drive | 463 | 352 | 31.5% | 343 | 335 | 2.4% |\r\n| Mac Pro single external drive | 463 | 352 | 31.5% | 343 | 335 | 2.4% |\r\n\r\nThe good news is, the non-CFS case shows very little cost when we do\r\nBG sync'ing!\r\n\r\nThe bad news is, the CFS case still shows a high cost.  However, by\r\nnot sync'ing the files that go into the CFS (and also not committing a\r\nnew segments_N file until after the CFS is written) I expect that cost\r\nto go way down.\r\n\r\nOne caveat: I'm using a 8 MB RAM buffer for all of these tests.  As\r\nYonik pointed out, if you have a smaller buffer, or, you add just a\r\nfew docs and then close your writer, the sync cost as a pctg of net\r\nindexing time will be quite a bit higher.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-27T20:14:17.626+0000","updated":"2007-11-27T20:14:17.626+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546039","id":"12546039","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Woops, the last line in the table above is wrong (it's a copy of the line before it).  I'll re-run the test.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-27T22:56:33.029+0000","updated":"2007-11-27T22:56:33.029+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546042","id":"12546042","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nHow about if we don't sync every single commit point?\r\n\r\nI think on a crash what's important when you come back up is 1) index\r\nis consistent and 2) you have not lost that many docs from your index.\r\nLosing the last N (up to mergeFactor) flushes might be acceptable?\r\n\r\nEG we could force a full sync only when we commit the merge, before we\r\nremove the merged segments.  This would mean on a crash that you're\r\n\"guaranteed\" to have the last successfully committed & sync'd merge to\r\nfall back to, and possibly a newer commit point if the OS had sync'd\r\nthose files on its own?\r\n\r\nThat would be a big simplification because I think we could just do\r\nthe sync() in the foreground since ConcurrentMergeScheduler is already\r\nusing BG threads to do merges.\r\n\r\nThis would also mean we cannot delete the commit points that were not\r\nsync'd.  So the first 10 flushes would result in 10 segments_N files.\r\nBut then when the merge of these segments completes, and the result is\r\nsync'd, those files could all be deleted.\r\n\r\nPlus we would have to fix retry logic on loading the segments file to\r\ntry more than just the 2 most recent commit points but that's a pretty\r\nminor change.\r\n\r\nI think it should mean better performance, because the longer you wait\r\nto call sync() presumably the more likely it is a no-op if the OS has\r\nalready sync'd the file.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-27T23:06:08.070+0000","updated":"2007-11-27T23:06:08.070+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546051","id":"12546051","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> How about if we don't sync every single commit point?\r\n\r\nI'm confused.  The semantics of commit should be that all changes prior are made permanent, and no subsequent changes are permanent until the next commit.  So syncs, if any, should map 1:1 to commits, no?  Folks can make indexing faster by committing/syncing less often.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-27T23:58:03.648+0000","updated":"2007-11-27T23:58:03.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546277","id":"12546277","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nI'm confused. The semantics of commit should be that all changes prior are made permanent, and no subsequent changes are permanent until the next commit. So syncs, if any, should map 1:1 to commits, no? Folks can make indexing faster by committing/syncing less often.\r\n{quote}\r\n\r\nBut must every \"automatic buffer flush\" by IndexWriter really be a\r\n\"permanent commit\"?  I do agree that when you close an IndexWriter, we\r\nshould should do a \"permanent commit\" (and block until it's done).\r\n\r\nEven if we use that policy, the BG sync thread can still fall behind\r\nsuch that the last few/many flushes are still in-process of being made\r\npermanent (eg I see this happening while a merge is running).  In fact\r\nI'll have to block further flushes if syncing falls \"too far\" behind,\r\nby some metric.  So, we already won't have any \"guarantee\" on when a\r\ngiven flush actually becomes permanent even if we adopt this policy.\r\n\r\nI think \"merge finished\" should be made a \"permanent commit\" because\r\notherwise we are tying up potentially alot of disk space,\r\ntemporarily.  But for a flush there's only a tiny amount of space (the\r\nold segments_N files) being tied up.\r\n\r\nMaybe we could make some flushes permanent but not all, depending on\r\nhow far behind the sync thread is.  EG if you do a flush, but, the\r\nsync thread is still trying to make the last flush permanent, don't\r\nforce the new flush to be permanent?\r\n\r\nIn general, I think the longer we can wait after flushing before\r\nforcing the OS to make those writes \"permanent\", the better the\r\nchances that the OS has in fact already sync'd those files anyway, and\r\nso the sync cost should be lower.  So maybe we could make every flush\r\npermanent, but wait a little while before doing so?\r\n\r\nRegardless of what policy we choose here (which commits must be made\r\n\"permanent\", and, when) I think the approach requires that\r\nIndexFileDeleter query the Directory so that it's only allowed to\r\ndelete older commit points once a newer commit point has successfully\r\nbecome permanent.\r\n\r\nI also worry about those applications that are accidentally flushing\r\ntoo often now.  Say your app now sets maxBufferedDocs=100.  Right now,\r\nthat gives you poor performance but not disastrous, but I fear if we\r\ndo the \"every commit is permanent\" policy then performance could\r\neasily become disastrous.  People who upgrade will suddenly get much\r\nworse performance.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-28T15:39:17.215+0000","updated":"2007-11-28T15:39:17.215+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546306","id":"12546306","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> But must every \"automatic buffer flush\" by IndexWriter really be a\r\n\"permanent commit\"?\r\n\r\nWhen autoCommit is true, then we should periodically commit automatically.  When autoCommit is false, then nothing should be committed until the IndexWriter is closed.  The ambiguous case is flush().  I think the reason for exposing flush() was to permit folks to commit without closing, so I think flush() should commit too, but we could add a separate commit() method that flushes and commits.\r\n\r\n> People who upgrade will suddenly get much worse performance.\r\n\r\nYes, that would be bad.  Perhaps the semantics of autoCommit=true should be altered so that it commits less than every flush.  Is that what you were proposing?  If so, then I think it's a good solution.  Prior to 2.2 the commit semantics were poorly defined.  Folks were encouraged to close() their IndexWriter to persist changes, and that's about all we said.  2.2's docs say that things are committed at every flush, but there was no sync, so I don't think changing this could break any applications.\r\n\r\nSo I'm +1 for changing autoCommit=true to sync less than every flush, e.g., only after merges.  I'd also argue that we should be vague in the documentation about precisely when autoCommit=true commits.  If someone needs to know exactly when things are committed then they should be encouraged to explicitly flush(), not to rely on autoCommit.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-28T17:20:20.848+0000","updated":"2007-11-28T17:20:20.848+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546309","id":"12546309","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nI modified the CFS sync case to NOT bother syncing the files that go\r\ninto the CFS.  I also turned off syncing of segments.gen.  I also\r\ntested on a Windows Server 2003 box.\r\n\r\nNew patched attached (still a hack just to test performance!) and new\r\nresults.  All tests are with the \"sync every commit\" policy:\r\n\r\n||IO System||CFS sync||CFS nosync||CFS % slower||non-CFS sync||non-CFS nosync||non-CFS % slower||\r\n|2 drive RAID0 Windows 2003 Server R2 Enterprise x64|250|244|2.6%|241|241|0.1%|\r\n|ReiserFS 6-drive RAID5 array Linux (2.6.22.1)|186|166|11.9%|145|142|2.0%|\r\n|EXT3 single internal drive Linux (2.6.22.1)|160|158|0.9%|142|135|4.8%|\r\n|4 drive RAID0 array Mac Pro (10.4 Tiger)|152|155|-2.4%|149|147|1.3%|\r\n|Win XP Pro laptop, single drive|408|398|2.6%|343|346|-1.1%|\r\n|Mac Pro single external drive|211|209|1.0%|167|149|12.4%|\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-28T17:33:44.212+0000","updated":"2007-11-28T17:33:44.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546312","id":"12546312","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nWhen autoCommit is true, then we should periodically commit automatically. When autoCommit is false, then nothing should be committed until the IndexWriter is closed. The ambiguous case is flush(). I think the reason for exposing flush() was to permit folks to commit without closing, so I think flush() should commit too, but we could add a separate commit() method that flushes and commits.\r\n{quote}\r\n\r\nI think deprecating flush(), renaming it to commit(), and clarifying\r\nthe semantics to mean that commit() flushes pending docs/deletes,\r\ncommits a new segments_N, syncs all files referenced by this commit,\r\nand blocks until the sync is complete, would make sense?  And,\r\ncommit() would in fact commit even when autoCommit is false (flush()\r\ndoesn't commit now when autoCommit=false, which is indeed confusing).\r\n\r\n{quote}\r\nPerhaps the semantics of autoCommit=true should be altered so that it commits less than every flush. Is that what you were proposing? If so, then I think it's a good solution. Prior to 2.2 the commit semantics were poorly defined. Folks were encouraged to close() their IndexWriter to persist changes, and that's about all we said. 2.2's docs say that things are committed at every flush, but there was no sync, so I don't think changing this could break any applications.\r\n\r\nSo I'm +1 for changing autoCommit=true to sync less than every flush, e.g., only after merges. I'd also argue that we should be vague in the documentation about precisely when autoCommit=true commits. If someone needs to know exactly when things are committed then they should be encouraged to explicitly flush(), not to rely on autoCommit.\r\n{quote}\r\n\r\nOK, I will test the \"sync only when committing a merge\" approach for\r\nperformance.  Hopefully a foreground sync() is fine given that with\r\nConcurrentMergePolicy that's already in a background thread.  This\r\nwould be a nice simplification.\r\n\r\nAnd I agree we should be vague about, and users should never rely on,\r\nprecisely when Lucene has really committed (sync'd) the changes to\r\ndisk.  I'll fix the javadocs.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-28T17:46:08.065+0000","updated":"2007-11-28T17:46:08.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12546352","id":"12546352","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> I think deprecating flush(), renaming it to commit()\r\n\r\n+1  That's clearer, since flushes are internal optimizations, while commits are important events to clients.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-11-28T18:55:17.951+0000","updated":"2007-11-28T18:55:17.951+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12547122","id":"12547122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nYou could just queue the file names for sync, close them, and then have the background thread open, sync and close them. The close could trigger the OS to sync things faster in the background. Then the open/sync/close could mostly be a no-op. Might be worth a try.\r\n{quote}\r\n\r\nI am taking this approach now, but one nagging question I have is: do\r\nwe know with some certainty that re-opening a file and then sync'ing\r\nit in fact syncs all writes that were ever done to this file in this\r\nJVM, even with previously opened and now closed descriptors?  VS, eg,\r\nonly sync'ing any new writes done with that particular descriptor?\r\n\r\nIn code:\r\n\r\n{code}\r\nfile = new RandomAccess(path, \"rw\");\r\n<do many writes to file>\r\nfile.close();\r\nnew RandomAccess(path, \"rw\").getFD().sync();\r\n{code}\t\r\n\r\nAre we pretty sure that all of the \"many writes\" will in fact be\r\nsync'd by that sync call, on all OSs?\r\n\r\nI haven't been able to find convincing evidence one way or another.  I\r\ndid run a timing test comparing overall time if you sync with the same\r\ndescriptor you used for writing vs closing it, opening a new one, and\r\nsyncing with that one, and on Linux at least it seems both approaches\r\nseem to be syncing because the total elapsed time is roughly the\r\nsame.\r\n\r\nRobert do you know?\r\n\r\nI sure hope the answer is yes ... because if not, the alternative is\r\nwe must sync() before closing the original descriptor, which makes\r\nthings less flexible because eg we cannot cleanly implement\r\nIndexWriter.commit().\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-30T13:10:40.676+0000","updated":"2007-11-30T13:10:40.676+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12547168","id":"12547168","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Another nuance here is ... say we do a \"soft commit\" (write a new\r\nsegment & segments_N but do not sync the files), and, the machine\r\ncrashes.  This is fine because there will always be an earlier commit\r\npoint (segments_M) that was a \"hard commit\" (sync was done).\r\n\r\nThen, machine comes back up and we open a reader.  The reader sees\r\nboth segments_M (the hard commit) and segments_N (the soft commit) and\r\nchooses segments_N because it's more recent.\r\n\r\nWe have retry logic in SegmentInfos to fallback to segments_M if we\r\nhit an IOException on opening the index described by segments_N.\r\n\r\nBut, the problem is: the extent of the \"corruption\" caused by the\r\ncrash could be somewhat subtle.  EG a given file might be the right\r\nlength, but, filled w/ zeroes.  This is a problem because we may not\r\nthen hit an IOException while opening the reader, but only later hit\r\nsome exception while searching.\r\n\r\nI think this means when we do a \"soft commit\" we should not in fact\r\nwrite a new segments_N file (as we do today).  When we do a \"hard\r\ncommit\" we should first sync all files except the new segments_N file,\r\nthen write the segments_N file, then sync it.\r\n\r\nThe thing is, while we have been (and want to continue to be) vague\r\nabout exactly when a \"commit\" takes place as you add docs to\r\nIndexWriter, users have presumably gotten used to every flush (when\r\nautoCommit=true) committing a new segments_N file that an IndexReader\r\ncan then see.  So, this change (do not write segments_N file except\r\nfor a hard commit) will break that behavior.  Maybe, with the addition\r\nof the explicit commit() method, this is OK?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-30T15:00:40.582+0000","updated":"2007-11-30T15:00:40.582+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12547217","id":"12547217","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"From java-dev, Robert Engels wrote:\r\n\r\n{quote}\r\nMy reading of the Unix specification shows it should work (the _commit under Windows is less clear, and since Windows is not inode based, there may be different issues).\r\n\r\nhttp://www.opengroup.org/onlinepubs/007908799/xsh/fsync.html\r\n{quote}\r\n\r\nOK thanks Robert.\r\n\r\nI think very likely this approach (let's call it \"sync after close\")\r\nwill work.  The _commit docs (for WIN32) also seems to indicate that\r\nthe file referenced by the descriptor is fully flushed (as we want):\r\n\r\n  http://msdn2.microsoft.com/en-us/library/17618685\r\n\r\nAlso at least PostgreSQL and Berkeley DB \"trust\" _commit as the\r\nequivalent of fsync (though I have no idea if they use it the same way\r\nwe want to).\r\n\r\nThough ... I am also a bit concerned about opening files for writing\r\nthat we had already previously closed.  It arguably makes Lucene \"not\r\nquite\" write-once.  And, we may need a retry loop on syncing because\r\non Windows, various tools might wake up and peek into a file right\r\nafter we close them, possibly interfering w/ our reopening/syncing.\r\n\r\nI think the alternative (\"sync before close\") is something like:\r\n\r\n  * Add a new method IndexOutput.close(boolean doSync)\r\n\r\n  * When a merge finishes, it must close all of its files with\r\n    doSync=true; and write the new segments_N with doSync=true.\r\n\r\n  * To implement commit() ... I think we'd have to force a merge of\r\n    all written segments that were not sync'd.  And on closing the\r\n    writer we'd call commit().  This is obviously non-ideal because\r\n    you can get very different sized level 1 segments out.  Although\r\n    the cost would be contained since it's only up to mergeFactor\r\n    level 0 segments that we will merge.\r\n\r\nOK ... I'm leaning towards sticking with \"sync after close\", so I'll\r\nkeep coding up this approach for now.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-11-30T17:34:52.374+0000","updated":"2007-11-30T17:34:52.374+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12547351","id":"12547351","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> I think this means when we do a \"soft commit\" we should not in fact\r\n> write a new segments_N file (as we do today).\r\n\r\n+1  As long as we commit periodically when autoCommit=true I don't think we're breaking any previously advertised contract.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2007-12-01T00:28:00.763+0000","updated":"2007-12-01T00:28:00.763+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12549104","id":"12549104","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I've moved this issue to 2.4.  I think it's too risky to rush it in\r\njust before 2.3 is released vs committing just after 2.3 and\r\ngiving it more time on the trunk.\r\n\r\nBut, I think for 2.3 we should revert the optional \"doSync\" argument\r\nto FSDirectory: I believe the performance impact of syncing is low enough\r\nwith the approach we're now taking, so I don't think we should make it\r\nso trivial to turn it off.  I've added a sync() method to Directory,\r\nso if someone really wants to prevent syncing they will be able to\r\nsubclass FSDirectory and make that method a noop.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-12-06T17:33:50.535+0000","updated":"2007-12-06T17:33:50.535+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12549203","id":"12549203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"{quote}\r\nThough ... I am also a bit concerned about opening files for writing\r\nthat we had already previously closed. It arguably makes Lucene \"not\r\nquite\" write-once. \r\n{quote}\r\nI think this would work too?\r\n{code}\r\nFileInputStream fis = new FileInputStream(path);\r\nfis.getFD().sync();\r\nfis.close();\r\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2007-12-06T21:54:08.593+0000","updated":"2007-12-06T21:54:08.593+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12549213","id":"12549213","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nI think this would work too?\r\n{code}\r\nFileInputStream fis = new FileInputStream(path);\r\nfis.getFD().sync();\r\nfis.close();\r\n{code}\r\n{quote}\r\n\r\nThis was suggested & debated on the java-dev list. But, the man page\r\nfor \"fsync\" on Linux lists this as one of the errors:\r\n\r\n{code}\r\nERRORS\r\n       EBADF  fd is not a valid file descriptor open for writing.\r\n{code}\r\n\r\nAnd Yonik found at least one JVM implementation (I think Harmony) that\r\nsimply skipped if the descriptor was not open for write.\r\n\r\nI think we're walking on thin ice if we do that...\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-12-06T22:21:16.354+0000","updated":"2007-12-06T22:21:16.354+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12549221","id":"12549221","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"body":"{quote}\r\nI think we're walking on thin ice if we do that...\r\n{quote}\r\nOh, I skimmed too fast that part of the discussion in the \r\ndev list.  I agree with \"thin ice\" now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=doronc","name":"doronc","emailAddress":"cdoronc at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=doronc&avatarId=12738","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=doronc&avatarId=12738","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=doronc&avatarId=12738","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=doronc&avatarId=12738"},"displayName":"Doron Cohen","active":true},"created":"2007-12-06T22:42:24.306+0000","updated":"2007-12-06T22:42:24.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12550704","id":"12550704","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"\r\nInitial patch attached:\r\n\r\n  * Created new commit() method; deprecated public flush() method\r\n\r\n  * Changed IndexWriter to not write segments_N when flushing, only\r\n    when syncing (added new private sync() for this).  The current\r\n    \"policy\" is to sync only after merges are committed.  When\r\n    autoCommit=false we do not sync until close() or commit() is\r\n    called\r\n\r\n  * Added MockRAMDirectory.crash() to simulate a machine crash.  It\r\n    keeps track of un-synced files, and then in crash() it goes and\r\n    corrupts any unsynced files rather aggressively.\r\n\r\n  * Added a new unit test, TestCrash, to crash the MockRAMDirectory at\r\n    various interesting times & make sure we can still load the\r\n    resulting index.\r\n\r\n  * Added new Directory.sync() method.  In FSDirectory.sync, if I hit\r\n    an IOException when opening or sync'ing, I retry (currently after\r\n    waiting 5 msec, and retrying up to 5 times).  If it still fails\r\n    after that, the original exception is thrown and the new\r\n    segments_N will not be written (and, the previous commit will also\r\n    not be deleted).\r\n\r\nAll tests now pass, but there is still alot to do, eg at least:\r\n\r\n  * Javadocs\r\n\r\n  * Refactor syncing code so DirectoryIndexReader.doCommit can use it\r\n    as well.\r\n\r\n  * Change format of segments_N to include a hash of its contents, at\r\n    the end.  I think this is now necessary in case we crash after\r\n    writing segments_N but before we can sync it, to ensure that\r\n    whoever next opens the reader can detect corruption in this\r\n    segments_N file.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2007-12-11T20:20:57.531+0000","updated":"2007-12-11T20:20:57.531+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12560789","id":"12560789","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zhanghuangzhu","name":"zhanghuangzhu","emailAddress":"zhanghuangzhu at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew Zhang","active":true},"body":"Hi, Any progress on this issue? \r\n\r\nI found sync call was removed from the source code. Is there an alternative to solve this problem? Thanks a lot!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zhanghuangzhu","name":"zhanghuangzhu","emailAddress":"zhanghuangzhu at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Andrew Zhang","active":true},"created":"2008-01-20T09:56:39.640+0000","updated":"2008-01-20T09:56:39.640+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12560790","id":"12560790","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"This is still in progress.  It's clearly a serious bug since it's something out of your control that can easily cause index corruption.\r\n\r\nsync was removed because the simple approach is far too costly on some IO systems.  The new approach (sync only on committing a merge) has more reasonable performance, but is not quite done yet.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-01-20T10:27:23.267+0000","updated":"2008-01-20T10:27:23.267+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12565698","id":"12565698","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"New rev of this patch.  All tests pass.  I think it's ready to\r\ncommit, but I'll wait a few days for comments.\r\n\r\nThis patch has a small change to the segments_N file: it adds a\r\nchecksum to the end.  I added ChecksumIndexInput/Output that wrap an\r\nexisting IndexInput/Output for this.  This is used to verify the file\r\nis \"intact\" before trusting its contents when opening the index.  We\r\nneed this to guard against the machine crashing after we've written\r\nsegments_N and before we've succeeded in syncing it.\r\n\r\nUnfortunately, in testing performance, I still see a sizable (~30-50%)\r\nperformance hit to indexing throughput, on windows computers (XP Pro\r\nlaptop & Win 2003 Server R64 computer).  It seems that calling sync\r\nwas causing IO in other threads (ie flushing a new segment) to\r\ndrasically slow down.  Note that this is only when autoCommit=true; if\r\nit's false then performance is only slightly worse (because only on\r\nclosing the writer do we sync)\r\n\r\nSo I tried sleeping, after writing and before syncing.  I sleep based\r\non number of bytes written, for up to 10 seconds, and amazingly, this\r\ngreadly reduces the performance loss on the windows computers, and\r\ndoesn't hurt performance on Linux/OS X computers.\r\n\r\nI think this must be because calling sync immediately forces the OS to\r\nwrite dirty buffers to disk \"in a rush\" (severely impacting IO writes\r\nfrom other threads), whereas if you wait first, you let the OS\r\nschedule those writes on its own, at good times (maybe when IO system\r\nis \"relatively\" idle).\r\n\r\nIt's disappointing to have to \"game\" the OS to gain back this\r\nperformance.  I wish Java had a \"waitUntilSync'd\" to do the same\r\nthings as fsync, but without \"rushing\" the OS.\r\n\r\nOn Linux 2.6.22 on a RAID5 array I still see a net performance cost of\r\n~12%, sleeping or no sleeping.  On Mac OS X it's ~3% loss.\r\n\r\nOther fixes:\r\n  * DirectoryIndexReader's doCommit now also syncs\r\n  * Improved logic on when we must sync-before-CFS: it's not necessary\r\n    if the just-merged segments are not referenced by the last commit\r\n    point (ie if they were all flushed during this writer session)\r\n  * Created SegmentInfos.commit() method, which writes and then syncs\r\n    the next segments_N file\r\n  * Simplified sync() logic now that merge threads are stopped before\r\n    writer is closed\r\n  * Changed CMS.newMergeThread to name its threads\r\n  * More test cases\r\n  * Various other small fixes\r\n\r\nHere are test details.  I index first 200K Wikipedia docs with this\r\nalg:\r\n\r\n  analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer\r\n  doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\r\n  docs.file=/Volumes/External/lucene/wiki.txt\r\n  doc.stored = true\r\n  doc.term.vector = true\r\n  doc.term.vector.offsets = true\r\n  doc.term.vector.positions = true\r\n\r\n  doc.maker.forever = false\r\n  directory=FSDirectory\r\n\r\n  { \"BuildIndex\"\r\n    CreateIndex\r\n    { \"AddDocs\" AddDoc > : 200000\r\n    CloseIndex\r\n  }\r\n\r\n  RepSumByPref BuildIndex\r\n\r\nWin2003 R64, JVM 1.6.0_03\r\n  trunk: 523 sec\r\n  patch: 547 sec (5% slower)\r\n\r\nWin XP Pro, laptop hard drive, JVM 1.4.2_15-b02\r\n  trunk: 1237 sec\r\n  patch: 1278 sec (3% slower)\r\n\r\nLinux ReiserFS on 6 drive RAID 5 array, JVM 1.5.0_08\r\n  trunk: 483 sec\r\n  patch: 539 sec (12% slower)\r\n\r\nMac OS X 10.4 4-drive RAID 0 array, JVM 1.5.0_13\r\n  trunk: 268 sec\r\n  patch: 276 sec (3% slower)\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-02-05T10:52:57.115+0000","updated":"2008-02-05T10:52:57.115+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12565701","id":"12565701","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"On thinking through the above costs of committing, I now think we\r\nshould deprecate autoCommit=true entirely, making autocommit=false the\r\nonly choice in 3.0.\r\n\r\nWith that change, when you use an IndexWriter, its changes are never\r\nvisible to a reader until you call commit() or close().  I think this\r\nis how KinoSearch and Ferret work, for example.\r\n\r\nHere are some reasons:\r\n\r\n  * Commit has now become a costly event, because sync() is costly,\r\n    and is forcing us to use this \"syncPause\" logic (hack) to game the\r\n    OS, which really is ugly, dependent on OS/IO particulars, etc.\r\n\r\n  * Since we make no guarantee on when a commit specifically happens,\r\n    and this fix in particular will reduce its frequency from \"every\r\n    flush\" to \"every merge\", autoCommit=true really is not that useful\r\n    for applications (ie, they will have to call commit() on their\r\n    anyway if they need to rely on its frequency).\r\n\r\n  * It's always possible to build an autocommit layer above\r\n    IndexWriter by calling commit on your own schedule, to tradeoff\r\n    performance for commit frequency (but not vice/versa).\r\n\r\n  * Not autocommitting by default opens up some good future\r\n    optimizations on merging since we don't have to flush real\r\n    segments to disk until commit.  One simple example is we could\r\n    skip building CFS files as we flush, and only merge & build CFS on\r\n    commit/close.\r\n\r\nWhat do people think?\r\n\r\nIf we do this, I would right now deprecate all ctors that take\r\nautoCommit and add comment explaining that in 3.0 autoCommit is wired\r\nto \"false\".  I would leave the \"syncPause\" logic in there for now,\r\nbecause it's such a sizable performance gain on windows, but deprecate\r\nit, stating that with it will be removed when we switch to\r\nautoCommit=false in 3.0.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-02-05T10:59:38.411+0000","updated":"2008-02-05T10:59:38.411+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12565815","id":"12565815","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"body":"> deprecate autoCommit=true entirely\r\n\r\n+1  This sounds like a good plan.\r\n\r\nAre your performance numbers above with autoCommit true or false?\r\n\r\nAlso, why not only sleep if Constants.WINDOWS?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","emailAddress":"cutting at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true},"created":"2008-02-05T17:03:17.281+0000","updated":"2008-02-05T17:03:17.281+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12565830","id":"12565830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\n> deprecate autoCommit=true entirely\r\n\r\n+1 This sounds like a good plan.\r\n{quote}\r\nOK I'll work out a new patch with this approach.\r\n\r\n{quote}\r\nAre your performance numbers above with autoCommit true or false?\r\n{quote}\r\nThey were all with autoCommit=true.\r\n\r\n{quote}\r\nAlso, why not only sleep if Constants.WINDOWS?\r\n{quote}\r\nGood, I'll take that approach!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-02-05T17:38:02.248+0000","updated":"2008-02-05T17:38:02.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12565894","id":"12565894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"OK I updated the patch:\r\n\r\n  * Deprecate all IW ctors that take autoCommit param, and updated javadocs stating that autoCommit will be hardwired to false starting in 3.0\r\n\r\n  * Default maxSyncPause to 10 seconds when Constant.WINDOWS; else, to 0\r\n\r\nI'll wait until end of week to commit!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-02-05T21:19:00.876+0000","updated":"2008-02-05T21:19:00.876+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12567190","id":"12567190","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Attached new rev of the patch.  Only changes were to add caveats in javadcos about IO devices that ignore fsync, and, updated patch to apply cleanly on current trunk.\r\n\r\nI plan to commit in a day or two.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2008-02-08T20:31:59.300+0000","updated":"2008-02-08T20:31:59.300+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12675759","id":"12675759","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yeliz","name":"yeliz","emailAddress":"yeliz2002 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yeliz Eseryel","active":true},"body":"I had been following this thread. Just curious if the patch was committed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yeliz","name":"yeliz","emailAddress":"yeliz2002 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yeliz Eseryel","active":true},"created":"2009-02-23T04:22:34.224+0000","updated":"2009-02-23T04:22:34.224+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12675841","id":"12675841","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Yes, this is committed and available as of 2.4.0.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2009-02-23T10:22:24.725+0000","updated":"2009-02-23T10:22:24.725+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12381729/comment/12675983","id":"12675983","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yeliz","name":"yeliz","emailAddress":"yeliz2002 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yeliz Eseryel","active":true},"body":"Thanks Michael!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yeliz","name":"yeliz","emailAddress":"yeliz2002 at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yeliz Eseryel","active":true},"created":"2009-02-23T17:15:03.350+0000","updated":"2009-02-23T17:15:03.350+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-1044/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i04zf3:"}}