{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12522398","self":"https://issues.apache.org/jira/rest/api/latest/issue/12522398","key":"DERBY-5406","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323456","id":"12323456","description":"Third release on the 10.8 branch","name":"10.8.3.0","archived":false,"released":true,"releaseDate":"2012-11-16"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12316344","id":"12316344","description":"First release on the 10.9 branch","name":"10.9.1.0","archived":false,"released":true,"releaseDate":"2012-06-25"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2011-10-21 04:35:23.683","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"3322","customfield_12310222":"3_*:*_1_*:*_10812239288_*|*_1_*:*_1_*:*_954284918_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2012-01-23T14:23:31.016+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5406/watchers","watchCount":0,"isWatching":false},"created":"2011-09-09T09:54:47.207+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317968","id":"12317968","description":"second release on the 10.8 branch","name":"10.8.2.2","archived":false,"released":true,"releaseDate":"2011-10-24"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12316344","id":"12316344","description":"First release on the 10.9 branch","name":"10.9.1.0","archived":false,"released":true,"releaseDate":"2012-06-25"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12343029","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12343029","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12428006","key":"DERBY-4275","self":"https://issues.apache.org/jira/rest/api/2/issue/12428006","fields":{"summary":"Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12343030","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12343030","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12502679","key":"DERBY-5161","self":"https://issues.apache.org/jira/rest/api/2/issue/12502679","fields":{"summary":"Cannot rollback after syntax error in internal statement","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2012-11-01T21:10:43.103+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"The test cases CompressTableTest.testConcurrentInvalidation() and TruncateTableTest.testConcurrentInvalidation() fail intermittently with errors such as:\r\n\r\nERROR XSAI2: The conglomerate (2,720) requested does not exist.\r\n\r\nThe problem has been analyzed in the comments on DERBY-4275, and a patch attached to that issue (invalidation-during-compilation.diff) fixes the underlying race condition. However, that patch only works correctly together with the fix for DERBY-5161, which was backed out because it caused the regression DERBY-5280.\r\n\r\nWe will therefore need to find a way to fix DERBY-5161 without reintroducing DERBY-5280 in order to resolve this issue.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10369","value":"Regression Test Failure","id":"10369"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"35552","summary":"Intermittent failures in CompressTableTest and TruncateTableTest","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"subtasks":[],"customfield_12310090":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":23,"total":23,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13108594","id":"13108594","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The attached patch (d5406-1a-detect-invalidation-during-compilation.diff) improves the invalidation-during-compilation.diff patch attached to DERBY-4275 by restoring the state of the context stack before retrying the compilation. This prevents the \"Cannot issue commit in a nested connection\" errors seen with the original patch.\r\n\r\nAlthough the patch makes the failures happen less frequently, there still appears to be race conditions in this area. I've seen the following two failures when running the D4275.java repro attached to DERBY-4275:\r\n\r\n1) java.sql.SQLException: The conglomerate (1,136) requested does not exist.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:400)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:150)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement20.<init>(EmbedPreparedStatement20.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement30.<init>(EmbedPreparedStatement30.java:63)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement40.<init>(EmbedPreparedStatement40.java:40)\r\n\tat org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1615)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1443)\r\n\tat D4275$1.run0(D4275.java:32)\r\n\tat D4275$1.run(D4275.java:23)\r\nCaused by: java.sql.SQLException: The conglomerate (1,136) requested does not exist.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)\r\n\t... 14 more\r\nCaused by: ERROR XSAI2: The conglomerate (1,136) requested does not exist.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)\r\n\tat org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(HeapConglomerateFactory.java:254)\r\n\tat org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(RAMAccessManager.java:482)\r\n\tat org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:394)\r\n\tat org.apache.derby.impl.store.access.RAMTransaction.getStaticCompiledConglomInfo(RAMTransaction.java:665)\r\n\tat org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(BaseJoinStrategy.java:100)\r\n\tat org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getScanArgs(NestedLoopJoinStrategy.java:252)\r\n\tat org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(FromBaseTable.java:3496)\r\n\tat org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(FromBaseTable.java:3186)\r\n\tat org.apache.derby.impl.sql.compile.FromBaseTable.generate(FromBaseTable.java:3113)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1382)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1334)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1382)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1334)\r\n\tat org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:637)\r\n\tat org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:345)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:472)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:93)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:131)\r\n\t... 8 more\r\nTest stopped after 2927 ms\r\n\r\nThis error happens in a different code path, outside of the current retry logic.\r\n\r\n2) java.sql.SQLException: The conglomerate (136,832) requested does not exist.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:400)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:284)\r\n\tat D4275$1.run0(D4275.java:35)\r\n\tat D4275$1.run(D4275.java:23)\r\nCaused by: java.sql.SQLException: The conglomerate (136,832) requested does not exist.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)\r\n\t... 10 more\r\nCaused by: ERROR XSAI2: The conglomerate (136,832) requested does not exist.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)\r\n\tat org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(FromBaseTable.java:2352)\r\n\tat org.apache.derby.impl.sql.compile.FromList.bindTables(FromList.java:317)\r\n\tat org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(SelectNode.java:489)\r\n\tat org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(DMLStatementNode.java:199)\r\n\tat org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:137)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:253)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:327)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:85)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(GenericPreparedStatement.java:231)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:414)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)\r\n\t... 4 more\r\nTest stopped after 78573 ms\r\n\r\nThis error does go through the code path with the retry logic, but it doesn't trigger a retry, so it looks like the invalidation somehow gets lost.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-09-20T11:19:47.830+0000","updated":"2011-09-20T11:19:47.830+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13114590","id":"13114590","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching a new revision (1b) of the patch that prevents invalidation requests to get lost if a compilation is already in progress. It adds some more comments, and also moves the restoring of the context stack out from the block synchronized on the GPS, since it only modifies state local to the LCC and doesn't need statement-global synchronization.\r\n\r\nCommitted revision 1175785.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-09-26T10:58:20.586+0000","updated":"2011-09-26T10:58:20.586+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13129781","id":"13129781","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Of the two stack traces mentioned above, I see (2) more frequently than (1). (I also sometimes see other stack traces, and I suspect there may be multiple holes.)\r\n\r\nStack trace (2) is in fact the same problem that caused the NullPointerException fixed in DERBY-4275. The fix made it throw a StandardException instead, so that the retry logic would come into play. In some cases it actually does recover from that error, but apparently not always. Here's what I think is happening in FromBaseTable.bindNonVTITables() when this error occurs:\r\n\r\n1) The statement is in the process of being recompiled, and it builds the table descriptor at line 2190:\r\n\r\n\t\tTableDescriptor tableDescriptor = bindTableDescriptor();\r\n\r\n2) The statement's dependency on the table is registered at line 2341:\r\n\r\n\t\t\t/* This represents a table - query is dependent on the TableDescriptor */\r\n\t\t\tcompilerContext.createDependency(tableDescriptor);\r\n\r\n3) It discovers that the conglomerate referred to by the table descriptor no longer exists at line 2351 and raises an exception:\r\n\r\n            // Bail out if the descriptor couldn't be found. The conglomerate\r\n            // probably doesn't exist anymore.\r\n            if (baseConglomerateDescriptor == null) {\r\n                throw StandardException.newException(\r\n                        SQLState.STORE_CONGLOMERATE_DOES_NOT_EXIST,\r\n                        new Long(tableDescriptor.getHeapConglomerateId()));\r\n            }\r\n\r\nNow, the conglomerate disappeared some time after the table descriptor was built, because of a compress or truncate operation. If the dependency on the table had been registered before the conglomerate was removed, the compress/truncate operation will have invalidated the statement, so the retry logic knows it should try again.\r\n\r\nIf the compress/truncate operation happened after the table descriptor was built, but before the dependency was registered, the statement will not be invalidated. In that case, the retry logic does not know that an invalidation has occurred, and it won't retry the compilation.\r\n\r\nSo it looks like we either need to find a way to close the window between the calls to bindTableDescriptor() and createDependency(), or when this happens the statement should invalidate itself before it throws the exception.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-18T15:03:54.038+0000","updated":"2011-10-18T15:03:54.038+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13131684","id":"13131684","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching patch 2a which makes FromBaseTable.bindNonVTITables() invalidate the statement itself when it discovers that the conglomerate has disappeared. That way, if the conglomerate was dropped between buildTableDescriptor() and createDependency() so that the original invalidation was lost, we'll still invalidate the statement and make GenericPreparedStatement.executeStmt() detect that a recompilation is needed.\r\n\r\nI've run four parallel instances of the D4275 test case for 1.5 hours without seeing any instances of stack trace (2) mentioned in an earlier comment. That stack trace usually reproduces in 2 to 5 minutes on the same machine without the patch.\r\n\r\nA very similar stack trace was seen three times in those 1.5 hours. That exception was thrown at the exact same place in FromBaseTable, but the re-compilation had been started at a lower level, from GenericActivationHolder, instead of directly from GenericPreparedStatement.executeStmt().\r\n\r\nI think the reason why it still fails if the compilation was started at a lower level, is that the self-invalidation introduced by this patch is ignored because it happens while the statement is being compiled. This was the exact same problem as the one addressed by the 1b patch. However, the 1b patch only added logic to retry compilations started directly from GenericPreparedStatement.executeStmt(). So it looks like the retry logic from 1b must be enhanced to cover more cases.\r\n\r\nBut, in any case, I think the 2a patch is an improvement on its own. It makes the failures happen less frequently, and I haven't noticed any new failures because of it.\r\n\r\nThe full regression test suite is currently running. I plan to commit the patch if all the tests pass, and then I'll go on trying to fix the retry logic for the cases that are still missed out.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-20T15:10:09.354+0000","updated":"2011-10-20T15:10:09.354+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13132323","id":"13132323","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"Patch 2a looks like a good improvement to me too, Knut Anders. It's clean and concise.\r\n\r\nJust by looking at the patch I have one question: will getCurrentDependent() always return a dependent, or is null a valid return value as well?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2011-10-21T04:35:23.683+0000","updated":"2011-10-21T04:35:23.683+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13132501","id":"13132501","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for looking at the patch, Kristian.\r\n\r\nI think getCurrentDependent() is guaranteed to return a non-null dependent at that location in the code for the following reasons:\r\n\r\n- JavaDoc for CompilerContext.setCurrentDependent() says\r\n\r\n\t * This should be called at the start of a compile to\r\n\t * register who has the dependencies needed for the compilation.\r\n\r\nso it sounds like the compiler context is expected to have a dependent once the compilation has started.\r\n\r\n- CompilerContextImpl.createDependency(Provider), which is called just a few lines before getCurrentDependent() is called, has the following assertion:\r\n\r\n\t\tSanityManager.ASSERT(currentDependent != null,\r\n\t\t\t\t\"no current dependent for compilation\");\r\n\r\n(and in insane builds it would fail with a NullPointerException) so we should not come to that point in the code if the dependent was null.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-21T08:08:16.560+0000","updated":"2011-10-21T08:08:16.560+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13132503","id":"13132503","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed the 2a patch with revision 1187204.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-21T08:13:05.079+0000","updated":"2011-10-21T08:13:05.079+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13133896","id":"13133896","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I mentioned that I still saw similar stack traces when the compilation was\r\ninvoked from GenericActivationHolder.execute() instead of\r\nGenericPreparedStatement.executeStmt(), and suggested that\r\nGenericActivationHolder needed retry logic similar to the one in\r\nGenericPreparedStatement.\r\n\r\nThe attached patch (d5406-3a.diff) takes a somewhat different approach. Instead\r\nof adding the extra logic to GenericActivationHolder, it makes\r\nGenericActivationHolder.execute() stop re-preparing the statement if it detects\r\nthat it's using an outdated generated class. Instead, it just asks the prepared\r\nstatement to give it the most recent version of the generated class.\r\n\r\nIn most cases, it will receive an up-to-date version of the class, and it can\r\ncontinue without recompiling (the existing code would short-circuit the\r\nrePrepare() call in that case, so no changes in this scenario).\r\n\r\nIf an invalidation happened after the last recompilation of the statement, the\r\nfresh version of the generated class will also be outdated. With the existing\r\ncode, a recompilation would be requested immediately. With the patch, however,\r\nwe just go ahead executing using the outdated class. The execution code already\r\nhas checks for invalid plans, so it will be detected by the normal execution\r\nmechanisms. This has the advantage that the invalid plans will be reported in a\r\nway that GenericPreparedStatement.executeStmt() is able to detect, and the\r\nrecompilation will be done by GenericPreparedStatement.executeStmt(). Since we\r\nalready have the required retry logic in place there, re-invalidation of the\r\nstatement during the recompilation will be detected and handled properly.\r\n\r\n(This is, by the way, the exact same thing as the existing code would do if the\r\ninvalidation had happened right after we had fetched the fresh class. So this\r\nchange could be seen as handling the two cases - invalidation right before\r\nretrieving the class and invalidation right after retrieving the class -\r\nuniformly.)\r\n\r\nAnother edge case is that the returned generated class could be null. This\r\nhappens if another thread was recompiling the statement when we retrieved the\r\nclass. In that case, the patch makes GenericActivationHolder.execute() throw an\r\nexception with message id LANG_STATEMENT_NEEDS_RECOMPILE. This is a special\r\nkind of exception that GenericPreparedStatement.executeStmt() detects and takes\r\nas a signal to recompile the statement. Again, the recompilation will happen\r\nusing the code that's already prepared for the need to retry in case of\r\nre-invalidations, so we should be covered if the conglomerate disappears during\r\nthat compilation too.\r\n\r\nThis also has the benefit that we can remove the workaround for DERBY-3260,\r\nwhere we added a synchronization block around the calls to rePrepare() and\r\ngetActivationClass() to prevent that a concurrent recompilation made\r\ngetActivationClass() return null.\r\n\r\nAll the regression tests ran cleanly with the patch.\r\n\r\nI also ran my standard test case, four parallel processes of the D4275 class,\r\nfor two hours without seeing any failures.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-24T08:41:20.475+0000","updated":"2011-10-24T08:41:20.475+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13135791","id":"13135791","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed the 3a patch to trunk with revision 1189067.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-26T08:07:58.742+0000","updated":"2011-10-26T08:07:58.742+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13135867","id":"13135867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching a class (CompressAndPrepare.java) that can be used to more easily reproduce the stack trace (1) in the first comment on this issue. This repro repeatedly prepares a query while another thread repeatedly compresses a table used by the query.\r\n\r\nThe difference between the stack traces (1) and (2) is that the former happens in prepareStatement(), whereas the latter happens in executeQuery().\r\n\r\nWhen running the class on an idle system, it can run for a long time without showing the error (at least in my environment). But when putting on some background load, for example by running two instances of the repro concurrently, I get the error within seconds.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-26T11:04:29.075+0000","updated":"2011-10-26T11:04:29.075+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13136087","id":"13136087","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The attached d5406-4a-push-retry-logic.diff patch attempts to fix stack trace (1) by pushing the retry logic further down into GenericStatement.prepare(). That method is used both when the compilation request comes from prepareStatement() and when it comes from the execution.\r\n\r\nI don't see stack trace (1) when I run the CompressAndPrepare repro. I saw a couple occurrences of DERBY-5358, but no other errors.\r\n\r\nAll the regression tests passed with the patch.\r\n\r\nMore disappointing, I saw an error appear a couple of times when I ran the D4275 repro. However, I also saw this error without the patch, so it looks like an existing hole, and not something caused by this patch. No idea why I didn't see it when I tested the 3a patch in the same environment. Here's the stack trace I saw:\r\n\r\nCaused by: ERROR XSAI2: The conglomerate (20 848) requested does not exist.\r\n        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)\r\n        at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(HeapConglomerateFactory.java:254)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(RAMAccessManager.java:482)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:394)\r\n        at org.apache.derby.impl.store.access.RAMTransaction.getStaticCompiledConglomInfo(RAMTransaction.java:665)\r\n        at org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(BaseJoinStrategy.java:100)\r\n        at org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getScanArgs(NestedLoopJoinStrategy.java:252)\r\n        at org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(FromBaseTable.java:3510)\r\n        at org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(FromBaseTable.java:3200)\r\n        at org.apache.derby.impl.sql.compile.FromBaseTable.generate(FromBaseTable.java:3127)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1382)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1334)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1382)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1334)\r\n        at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109)\r\n        at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:637)\r\n        at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:345)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:517)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:97)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:85)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(GenericPreparedStatement.java:231)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:411)\r\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)\r\n        ... 4 more","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-26T16:35:27.782+0000","updated":"2011-10-26T16:35:27.782+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13136104","id":"13136104","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Setting the patch available flag since the patch passes the regression tests, and the problems still seen with the stress test for this issue are also seen without the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-26T16:51:06.568+0000","updated":"2011-10-26T16:51:06.568+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13138202","id":"13138202","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed d5406-4a-push-retry-logic.diff to trunk revision 1190220.\r\n\r\nThen there's hopefully just one single exception left to fix before we can declare victory on this issue (see comment dated 26/Oct/11 16:35). I added some instrumentation and found that the statement did not have the invalidatedWhileCompiling flag set, which means that it wasn't retried because the invalidation was lost somehow.\r\n\r\nMy guess is that its cause is similar to the case fixed by patch 2a. The statement is invalidated after we have built the table descriptor, but before we have registered the statement as a dependent of the table. However, contrary to the case fixed by 2a, the conglomerate isn't actually removed before we fetch the conglomerate descriptor, so the self-invalidation logic we added to the error handling when the conglomerate descriptor is missing, doesn't help in this case. The conglomerate is removed a little later, though, so the compilation will fail, but without the invalidation flag set, the compilation will not be retried.\r\n\r\nI'm wondering if a more robust approach would be to retry the compilation always if it fails because of a missing conglomerate. That's an error that will never be reported to the user unless there's a bug in Derby, I think, so retrying the compilation in those cases shouldn't be a problem. And if we get an error about the same conglomerate missing on the retry, we could report it to prevent infinite loops in case there actually is a problem that must be reported. In the case of a concurrent compress or truncate operation, we should find the new conglomerate when retrying. If the conglomerate is missing because of a drop operation, the recompilation will fail, but it should fail earlier because the system tables have been updated with the correct information, and the error message will be more informative (typically: \"Table T does not exist\" instead of \"Conglomerate X does not exist\").","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-10-28T09:49:58.305+0000","updated":"2011-10-28T09:49:58.305+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13147040","id":"13147040","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I experimented with always retrying the compilation if it failed with conglomerate does not exist, see the attached patch d5406-4a-retry-on-conglomerate-error.diff. That patch also backs out the changes in the 2a patch, since the case addressed by that fix will also be covered by the broader fix in the 4a patch.\r\n\r\nI ran four parallel processes of the D4275 repro for almost two hours, two of the processes with the fix and two without the fix. The processes that had the fix only had one occurrence of DERBY-5358, and no other errors. The processes that ran without the fix, had about 30 errors.\r\n\r\nSo this fix appears to take care of the remaining issues, at least those I'm able to reproduce. It is however just a workaround for a more fundamental problem with how we track dependencies between statements and conglomerates. I would have felt more comfortable if we found a way to fix the underlying issue that makes invalidation requests vanish. I'll do a little more digging before I give up...\r\n\r\nAll regression tests ran cleanly with the 4a patch, except one intermittent failure (DERBY-5498) that didn't show up when rerunning the tests.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2011-11-09T13:32:07.949+0000","updated":"2011-11-09T13:32:07.949+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13187787","id":"13187787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I have a user with a trigger referencing a bad conglomerate number.  With the \"right\" set of circumstances could this issue cause a trigger to not get recompiled after a compress and be left with the old conglomerate number?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-01-17T16:29:50.111+0000","updated":"2012-01-17T16:29:50.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13188563","id":"13188563","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Triggers use a different code path for doing the recompiling, but I think they also suffer from the problems with invalidations that get lost if they happen during compilation. I'm not sure if any of the fixes that have gone into this issue would help the trigger case. Probably not, since most of the new code lives in GenericStatement.prepare(), which on first look doesn't seem to be used when preparing a trigger.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-01-18T17:41:41.532+0000","updated":"2012-01-18T17:41:41.532+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13188813","id":"13188813","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"saw following in nightly's, 10.8 current branch, windows, ibm15 jvm.  This looks like another occurence of this bug.\r\n\r\nhttp://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm15/1231438-suites.All_diff.txt\r\n\r\n1) testConcurrentInvalidation(org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest)junit.framework.AssertionFailedError: Helper thread failed\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:813)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest.testConcurrentInvalidation(TruncateTableTest.java:359)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: java.sql.SQLException: The conglomerate (3696) requested does not exist.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQuery(Unknown Source)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest$1.run(TruncateTableTest.java:331)\r\nCaused by: org.apache.derby.client.am.SqlException: The conglomerate (3696) requested does not exist.\r\n\tat org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.completeOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseOpenQueryFailure(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseOPNQRYreply(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.StatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatement.readOpenQuery_(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQueryX(Unknown Source)\r\n\t... 2 more\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-01-18T23:47:34.396+0000","updated":"2012-01-18T23:47:34.396+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13190077","id":"13190077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"do you still think we should not checkin your most current patch to this issue?  The patch seems good to me in that at least it will reduce errors reported to user.  I didn't see much downside with this approach, as it only affects the error\r\ncode path with an added retry.  \r\n\r\nI agree it would be best to fix the underlying issue, but at least this patch seems like a good incremental step to make\r\nthe system better until we get there.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-01-20T20:38:15.905+0000","updated":"2012-01-20T20:38:15.905+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13191176","id":"13191176","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for looking at the patch, Mike. I haven't come any closer to a good solution for the underlying problem, so I agree that it's better to check in the workaround for now. Committed revision 1234776.\r\n\r\nSince multiple fixes have been checked in as part of this issue, and each of them fixed actual problems, I think it is OK to mark this issue as resolved for now. If more problems of similar nature surface, new and more specific bug reports should be filed to get those problems fixed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-01-23T14:23:31.227+0000","updated":"2012-01-23T14:23:31.227+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13191430","id":"13191430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"are the fixes associated with this derby issue appropriate for backport, i do see that it is not going to be a simple merge as there are a number of svn commits and some backouts of other changes.  \r\n\r\nAny idea how old the issues are, I assume they at least go back as far as 10.5.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-01-23T20:39:45.795+0000","updated":"2012-01-23T20:39:45.795+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13191565","id":"13191565","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I think merging to 10.8 should be straightforward. Not sure how many conflicts to expect when merging further back. I suppose at least DERBY-4275 would have to be merged first.\r\n\r\nI think most of these issues go all the way back, but I haven't checked. Dag verified that the repro for DERBY-4275 failed on 10.4, and that's the repro used to show the problems in this JIRA issue too.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-01-23T22:34:26.076+0000","updated":"2012-01-23T22:34:26.076+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13195217","id":"13195217","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"I am looking at backporting this fix to 10.8, so setting ownership to myself.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-01-27T23:13:40.258+0000","updated":"2012-01-27T23:13:40.258+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12522398/comment/13198010","id":"13198010","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"backported change from trunk to 10.8.  resetting original owner.  \r\n\r\nTo backport farther back, this change may depend on other changes, as is discussed in previous comments of this issue.  \r\n\r\nHope is that this backport will elinate current intermittent failures in the nightly tests against 10.8 as they did for trunk.   At this point since this issue is closed any new failures seen in these 2 tests in versions that have the fix should be logged in a new issue and can\r\nbe linked back to this one  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-02-01T18:05:15.829+0000","updated":"2012-02-01T18:05:15.829+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5406/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06g5r:"}}