{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12411669","self":"https://issues.apache.org/jira/rest/api/latest/issue/12411669","key":"DERBY-4001","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314116","id":"12314116","description":"10.5.2 Release July 30 2009 (794445) Now deprecated","name":"10.5.2.0","archived":false,"released":true,"releaseDate":"2009-07-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12313727","id":"12313727","description":"Feature release","name":"10.6.1.0","archived":false,"released":true,"releaseDate":"2010-05-18"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2009-01-05 10:13:54.685","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"23965","customfield_12310222":"3_*:*_1_*:*_1188563432_*|*_1_*:*_1_*:*_8576545419_*|*_5_*:*_1_*:*_0","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2009-04-28T07:48:47.903+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4001/watchers","watchCount":1,"isWatching":false},"created":"2009-01-05T07:16:59.052+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12312876","id":"12312876","description":"","name":"10.3.2.1","archived":false,"released":true,"releaseDate":"2007-12-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12327014","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12327014","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"inwardIssue":{"id":"12436312","key":"DERBY-4385","self":"https://issues.apache.org/jira/rest/api/2/issue/12436312","fields":{"summary":"Comparision with ALL (subquery) may give wrong result if constant is selected","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.png","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2011-01-21T17:52:11.914+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"\r\nA query involving \"< ALL\" does not yield the right results for decimal datatype. \"< ANY\" works, though.\r\n\r\nTo reproduce the issue:\r\n\r\n% create table t1(col1 decimal(10,5));\r\n% insert into t1 values (-21483.64800);\r\n% insert into t1 values (74837.00000);\r\n% select col1 from t1 where col1 < ALL (select 0.0 from t1);\r\n\r\nThe above yields no results whereas it should return the first row.\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10366","value":"Wrong query result","id":"10366"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"37262","summary":"Sequence comparison with \"ALL\" does not yield correct results","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=viyer","name":"viyer","emailAddress":"viyer at actuate dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkateswaran Iyer","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10422","value":"High Value Fix","id":"10422"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=viyer","name":"viyer","emailAddress":"viyer at actuate dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkateswaran Iyer","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":"Windows","customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":17,"total":17,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12660707","id":"12660707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I tried to reproduce the issue, but in my environment (OpenSolaris, java 1.6.0_10) the query does return the first row. I tried both Derby 10.3.2.1, where the problem was reported, and Derby 10.4.2.0.\r\n\r\nij> create table t1(col1 decimal(10,5));\r\n0 rows inserted/updated/deleted\r\nij> insert into t1 values (-21483.64800);\r\n1 row inserted/updated/deleted\r\nij> insert into t1 values (74837.00000);\r\n1 row inserted/updated/deleted\r\nij> select col1 from t1 where col1 < ALL (select 0.0 from t1);\r\nCOL1        \r\n------------\r\n-21483.64800\r\n\r\n1 row selected","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-01-05T10:13:54.685+0000","updated":"2009-01-05T10:13:54.685+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12660858","id":"12660858","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=viyer","name":"viyer","emailAddress":"viyer at actuate dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkateswaran Iyer","active":true},"body":"I forgot to add that the column has to be declared with a \"NOT NULL\" constraint. Attached the output from ij.\r\n\r\n\r\n======================\r\n\r\nC:\\apps\\derby\\db-derby-10.4.2.0-bin\\db-derby-10.4.2.0-bin\\bin>ij\r\nij version 10.4\r\nij> connect .........................................\r\nij> drop table t2;\r\n0 rows inserted/updated/deleted\r\nij> create table t2(acdecimal decimal(10,5) not null);\r\n0 rows inserted/updated/deleted\r\nij> insert into t2 values (-21483.648);\r\n1 row inserted/updated/deleted\r\nij> insert into t2 values (74387);\r\n1 row inserted/updated/deleted\r\nij> select * from t2;\r\nACDECIMAL\r\n------------\r\n-21483.64800\r\n74387.00000\r\n\r\n2 rows selected\r\nij> select acdecimal from t2 where acdecimal < all (select 0.0 from t2);\r\nACDECIMAL\r\n------------\r\n\r\n0 rows selected\r\nij>","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=viyer","name":"viyer","emailAddress":"viyer at actuate dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkateswaran Iyer","active":true},"created":"2009-01-05T18:59:05.158+0000","updated":"2009-01-05T18:59:05.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12661174","id":"12661174","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks. I see the issue too when I add NOT NULL.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-01-06T15:52:27.395+0000","updated":"2009-01-06T15:52:27.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12661184","id":"12661184","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The problem does not seem to be limited to the decimal data type:\r\n\r\nij> create table t(x varchar(10) not null);\r\n0 rows inserted/updated/deleted\r\nij> insert into t values 'a','b','c';\r\n3 rows inserted/updated/deleted\r\nij> select x from t where x < ALL (select 'b' from t);\r\nX         \r\n----------\r\n\r\n0 rows selected\r\n\r\n(Should have returned one row. Works as expected if the NOT NULL constraint is removed.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-01-06T16:09:04.051+0000","updated":"2009-01-06T16:09:04.051+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12661206","id":"12661206","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"SubqueryNode apparently rewrites queries with ALL differently depending on whether the columns are nullable or not. Since we only see this problem when the column isn't nullable, that's probably a good starting point for tracking down the bug. Here's a comment from SubqueryNode.pushNewPredicate():\r\n\r\n\t\t/* For NOT IN or ALL, and if either side of the comparison is nullable, and the\r\n\t\t * subquery can not be flattened (because of that), we need to add IS NULL node\r\n\t\t * on top of the nullables, such that the behavior is (beetle 5173):\r\n\t\t *\r\n\t\t *    (1) If we have nulls in right operand, no row is returned.\r\n\t\t *    (2) If subquery result is empty before applying join predicate, every\r\n\t\t *\t\t  left row (including NULLs) is returned.\r\n\t\t *\t  (3) Otherwise, return {all left row} - {NULLs}\r\n\t\t */","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-01-06T17:07:55.566+0000","updated":"2009-01-06T17:07:55.566+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12688706","id":"12688706","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The query \"SELECT x FROM t WHERE x < ALL (SELECT 'b' FROM t)\" will be\r\nrewritten internally to a not exists join between \"SELECT x FROM t t1\"\r\n(left side) and \"SELECT * FROM t t2\" (right side) with t1.x >= 'b' as\r\nthe join condition. All is correct so far.\r\n\r\nBut then at some point (not sure where), the optimizer decides that\r\nthe join condition should be pushed down into the scan on the left\r\nside of the join. However, there are a some problems with pushing\r\npredicates into the left side of a not exists join:\r\n\r\n  - the condition would probably have to be negated, otherwise you'll\r\n    end up with just the uninteresting rows from the left side (those\r\n    rows that have a match in the right result set and should\r\n    therefore be filtered out of the join result).\r\n\r\n  - even if the join condition is negated negated before it is pushed,\r\n    I think you'll still need to keep the original join condition and\r\n    apply it on the right side of the join (or perhaps change the not\r\n    exists join to an exists join). If we remove the original join\r\n    condition, all the rows returned from the left side will have a\r\n    match in the right side result, and they will be removed from the\r\n    result when they should have been kept\r\n\r\n  - if the right side of the join happens to be empty, all the rows\r\n    from the left side should be returned, so in that case the pushed\r\n    predicate shouldn't be used to restrict the left side\r\n\r\nThe condition is not negated before it is pushed, though, so the left\r\nside of the join will give you all the rows you are not interested\r\nin. The result of the join will be empty if the right side is not\r\nempty, and it might miss some rows if the right side is empty.\r\n\r\nExamples:\r\n\r\nCREATE TABLE T1 (X INT NOT NULL);\r\nINSERT INTO T1 VALUES (1),(2),(3);\r\n\r\nThese queries are expected to return 3 rows, but they return 0 rows:\r\n\r\nSELECT * FROM T1 WHERE X < ALL (SELECT 100 FROM T1);\r\nSELECT * FROM T1 WHERE NOT X > ANY (SELECT 100 FROM T1);\r\n\r\n(They reason why they return 0 rows is that the join condition\r\n(X>=100) is pushed to the left side of the not exists join, so that no\r\nrows are returned from the left side.)\r\n\r\nThis query is expected to return 3 rows, but it returns 1 row:\r\n\r\nSELECT * FROM T1 WHERE X < ALL (SELECT 3 FROM T1 WHERE X = 100);\r\n\r\n(Similarly here, the join condition (X>=3) is pushed to the left side\r\nwithout being negated. This condition happens to match one row, and it\r\nis returned because the right side of the join is empty. Since the ALL\r\nsubquery is empty, all three rows should have been returned.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-03-24T14:57:58.347+0000","updated":"2009-03-24T14:57:58.347+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12688716","id":"12688716","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"This problem can also be seen if we use a NOT EXISTS subquery\r\ndirectly:\r\n\r\nij> create table t(x int);\r\n0 rows inserted/updated/deleted\r\nij> insert into t values (1),(2),(3);\r\n3 rows inserted/updated/deleted\r\nij> select * from t t1 where not exists (select * from t t2 where t1.x > 100);\r\nX          \r\n-----------\r\n\r\n0 rows selected\r\n\r\nThe query above should have returned all three rows since the subquery\r\nis always empty and therefore NOT EXISTS (...) should always evaluate\r\nto true.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-03-24T15:30:06.264+0000","updated":"2009-03-24T15:30:06.264+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12689894","id":"12689894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Same problem exists for NOT IN queries when both sides are not nullable (they get rewritten to NOT EXISTS in that case).\r\n\r\nij> create table t(x int);\r\n0 rows inserted/updated/deleted\r\nij> insert into t values 1,2,3;\r\n3 rows inserted/updated/deleted\r\nij> select * from t where x not in (select x from t where 1<>1); -- ok, not rewritten because x is nullable\r\nX          \r\n-----------\r\n1          \r\n2          \r\n3          \r\n\r\n3 rows selected\r\nij> alter table t alter column x not null;\r\n0 rows inserted/updated/deleted\r\nij> select * from t where x not in (select x from t where 1<>1); -- wrong result, query rewritten to NOT EXISTS because x is not nullable\r\nX          \r\n-----------\r\n\r\n0 rows selected","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-03-27T13:38:26.986+0000","updated":"2009-03-27T13:38:26.986+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12689909","id":"12689909","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I'm beginning to think that we should stop flattening NOT EXISTS (and ALL and NOT IN queries that are rewritten to NOT EXISTS), at least in some of the cases. In general, it it not safe to flatten a NOT EXISTS join because the join predicate should have the opposite effect on the left side and the right side of the join, and also because it should not in any case filter out rows on the left side if the right side happens to be empty.\r\n\r\nThe only case where I believe that it is safe to flatten a NOT EXISTS join, is when the join predicate does not have any effect on the left side. (Does not have any effect on the left side does not mean that all predicates that don't reference the table on the left side are OK, since a predicate that always evaluates to false, like 1<>1, would still have an effect on the left side of the join.) It might be possible to detect this condition in SubqueryNode.preprocess() when we set the flattenableNotExists flag, which is where we decide whether or not the query should be flattened.\r\n\r\nIt looks like flattening of NOT EXISTS, ALL and NOT IN was added in Beetle 5173, and there are some test cases in lang/subqueryFlattening.sql that check that the queries actually are flattened, so I guess we should try to continue flattening the queries that are safe to flatten.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-03-27T14:20:36.260+0000","updated":"2009-03-27T14:20:36.260+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12698231","id":"12698231","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"+1 to the suggestion to cease flattening NOT EXISTS, although if you think you can tell\r\nthe difference between queries that are safe to flatten, and those that aren't, that would be fine too. \r\n\r\nWhat are the example queries in subqueryFlattening that involve flattening of NOT EXISTS?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2009-04-12T16:12:05.918+0000","updated":"2009-04-12T16:12:05.918+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12698772","id":"12698772","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I had another look at the code, and I think I've found a way to\r\ndistinguish between safe and unsafe queries. See the attached patch\r\n(which lacks comments and test cases, and is not ready for commit).\r\n\r\nlang/subqueryFlattening.sql runs cleanly with the patch, so all the\r\nqueries that the test expected to be flattened are still flattened.\r\n\r\nThere are three essential changes in the patch:\r\n\r\n1) ProjectRestrictNode.pullOptPredicates()\r\n\r\nDon't pull any predicates if the from table is marked as a not exists\r\ntable. This way the flattening of queries like the ones below will\r\nwork, because the predicate 1<>1 is not pulled out and applied on the\r\nouter table.\r\n\r\n  SELECT * FROM T WHERE NOT EXISTS (SELECT * FROM T WHERE 1<>1)\r\n  SELECT * FROM T WHERE X < ALL (SELECT X FROM T WHERE 1<>1)\r\n  SELECT * FROM T WHERE X NOT IN (SELECT X FROM T WHERE 1<>1)\r\n\r\n2) SubqueryNode.preprocess()\r\n\r\nDon't allow not exists flattening unless all the predicates in the\r\nsubquery reference the base table of the inner query. When all the\r\npredicates reference that table, none of them will be used in the\r\nouter query, so they won't cause any trouble for the flattening. This\r\nmakes queries like the one below work:\r\n\r\n  SELECT * FROM T T1 WHERE NOT EXISTS (SELECT * FROM T T2 WHERE T1.X > 100)\r\n\r\nNo flattening will happen in this case, though.\r\n\r\nAlthough it may sound like (2) would prevent the example queries in\r\n(1) from being flattened, that's not the case. This is because simple\r\npredicates like 1<>1 are pushed down before SubqueryNode.preprocess()\r\ngets to the flattening, so it doesn't see those predicates. The\r\nflattening is still safe, since we have made sure that those\r\npredicates won't be pulled out again.\r\n\r\n3) SubqueryNode.preprocess()\r\n\r\nIf an ALL subquery or a NOT IN subquery is flattened, a new join\r\ncondition is created, for instance\r\n\r\n   WHERE X < ALL (SELECT Y ...) results in the join condition X >= Y\r\nand\r\n   WHERE X NOT IN (SELECT Y ...) results in the join condition X = Y\r\n\r\nThe patch adds a check so that the flattening only happens if the\r\nright side of the join condition references the base table of the\r\nsubquery. If it does, we know that the join condition cannot be used\r\nto filter rows from the outer table, so it's safe to do the\r\nflattening. This prevents queries like the ones below from being\r\nflattened, and they now work as expected:\r\n\r\n  SELECT * FROM T WHERE X < ALL (SELECT 100 FROM T)\r\n  SELECT * FROM T T1 WHERE X = ALL (SELECT T1.X FROM T)\r\n  SELECT * FROM T WHERE X NOT IN (SELECT 100 FROM T)\r\n  SELECT * FROM T T1 WHERE X NOT IN (SELECT T1.X+100 FROM T)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-14T13:36:00.744+0000","updated":"2009-04-14T13:36:00.744+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12698776","id":"12698776","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Bryan asked which NOT EXISTS queries lang/subqueryFlattening.sql\r\nexpected to be flattened. Here are the ones I found (some of them are\r\nexecuted multiple times with different nullability constraints).\r\n\r\nNOT EXISTS (flattened to NOT EXISTS JOIN):\r\n\r\n  SELECT COUNT(*) FROM\r\n  ( SELECT ID FROM DOCS WHERE\r\n          ( NOT EXISTS  (SELECT ID FROM COLLS WHERE DOCS.ID = COLLS.ID\r\n  AND COLLID IN (-2,1) ) )\r\n  ) AS TAB;\r\n\r\n  select * from t1 where not exists (select * from t2 where\r\n  t1.c1=t2.c1);\r\n\r\nNOT IN (flattened to NOT EXISTS JOIN):\r\n\r\n  SELECT COUNT(*) FROM\r\n  ( SELECT ID FROM DOCS WHERE\r\n          ( ID NOT IN (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) ) )\r\n  ) AS TAB;\r\n\r\nALL (flattened to NOT EXISTS JOIN):\r\n\r\n  SELECT count(ID) FROM DOCS WHERE ID = ALL (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) );\r\n  SELECT count(ID) FROM DOCS WHERE ID < ALL (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) );\r\n  SELECT count(ID) FROM DOCS WHERE ID <> ALL (SELECT ID FROM COLLS WHERE COLLID IN (-2,1) );","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-14T13:51:41.463+0000","updated":"2009-04-14T13:51:41.463+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12699497","id":"12699497","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Nice clear explanation of the behavior, and of the approach. Thanks much for putting this together!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2009-04-16T02:43:29.721+0000","updated":"2009-04-16T02:43:29.721+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12700114","id":"12700114","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching a patch - d4001-1a-test.diff - which adds a (not yet enabled) test for this bug. I've written test cases for all the problematic cases I've found. All the queries (except two which I included for completeness and marked with a comment) fail without the fixes suggested in an earlier comment. The test checks both that the correct rows are returned and whether or not the queries are flattened.\r\n\r\nCommitted revision 765930.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-17T10:17:49.309+0000","updated":"2009-04-17T10:17:49.309+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12701153","id":"12701153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"This patch (d4001-2a-code.diff) is the same as dontFlatten.diff, only that it adds comments and also enables SubqueryFlatteningTest as part of the regression test suite. Derbyall and suites.All ran cleanly with the dontFlatten.diff patch, but I'm rerunning the tests now in case I accidentally changed something I didn't mean to change.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-21T13:30:45.696+0000","updated":"2009-04-21T13:30:45.696+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12703527","id":"12703527","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed revision 769273.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-28T07:48:47.828+0000","updated":"2009-04-28T07:48:47.828+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12411669/comment/12703610","id":"12703610","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Merged to 10.5 and committed revision 769344.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-04-28T11:43:51.666+0000","updated":"2009-04-28T11:43:51.666+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-4001/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06qpr:"}}