{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12523325","self":"https://issues.apache.org/jira/rest/api/latest/issue/12523325","key":"DERBY-5416","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326659","id":"12326659","description":"candidate for Second release for 10.10 branch","name":"10.10.2.0","archived":false,"released":true,"releaseDate":"2014-04-15"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12324243","id":"12324243","description":"First release on the 10.11 branch","name":"10.11.1.1","archived":false,"released":true,"releaseDate":"2014-08-26"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2011-09-16 13:54:47.368","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"24832","customfield_12310222":"3_*:*_1_*:*_152765994_*|*_1_*:*_1_*:*_70428463115_*|*_5_*:*_2_*:*_6682710579_*|*_4_*:*_1_*:*_11118651","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2014-02-26T22:21:58.435+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5416/watchers","watchCount":4,"isWatching":false},"created":"2011-09-16T13:04:20.152+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.png","name":"Critical","id":"2"},"labels":["derby_triage10_9"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12315343","id":"12315343","description":"Derby 10.6.2.1 Release","name":"10.6.2.1","archived":false,"released":true,"releaseDate":"2010-10-06"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12315564","id":"12315564","description":"First release on the 10.7 branch.","name":"10.7.1.1","archived":false,"released":true,"releaseDate":"2010-12-14"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12316362","id":"12316362","description":"First release on the 10.8 branch","name":"10.8.1.2","archived":false,"released":true,"releaseDate":"2011-04-29"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12355407","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12355407","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12599854","key":"DERBY-5876","self":"https://issues.apache.org/jira/rest/api/2/issue/12599854","fields":{"summary":"Overhaul table compression code","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}},{"id":"12383609","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12383609","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12695601","key":"DERBY-6481","self":"https://issues.apache.org/jira/rest/api/2/issue/12695601","fields":{"summary":"Derby 10.10 backport issue (winter/spring 2014)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-01-21T00:23:08.209+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11412","id":"11412","name":"Store"}],"timeoriginalestimate":null,"description":"When compressing a table with an index that is larger than the maximum heap size and therefore cannot be hold in memory as a whole an OutOfMemoryError can occur. \r\n\r\nFor this to happen the heap usage must be close to the maximum heap size at the start of the index recreation and then while the entries are sorted a garbage collection run must clean out most of the heap. This can happen because a concurrent process releases a huge chunk of memory or just because the buffer of a previous table compression has not yet been garbage collected. \r\nThe internally used heuristics to guess when more memory can be used for the merge inserter estimates that more memory is available and then the sort buffer gets doubled. The buffer size gets doubled until the heap usage is back to the level when the merge inserter was first initialized or when the OOM occurs.\r\n\r\nThe problem lies in MergeInsert.insert(...). The check if the buffer can be doubled contains the expression \"estimatedMemoryUsed < 0\" where estimatedMemoryUsed is the difference in current heap usage and heap usage at initialization. Unfortunately, in the aforementioned scenario this will be true until the heap usage will reach close to maximum heap size before doubling the buffer size will be stopped.\r\n\r\nI've tested it with 10.6.2.1, 10.7.1.1 and 10.8.1.2 but the actual bug most likely exists in prior versions too.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10365","value":"Crash","id":"10365"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10421","value":"Seen in production","id":"10421"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"35604","summary":"SYSCS_COMPRESS_TABLE causes an OutOfMemoryError when the heap is full at call time and then gets mostly garbage collected later on","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rbaradari","name":"rbaradari","emailAddress":"baradari dot ramin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ramin Baradari","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10424","value":"Repro attached","id":"10424"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rbaradari","name":"rbaradari","emailAddress":"baradari dot ramin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ramin Baradari","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":21,"total":21,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13106042","id":"13106042","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rbaradari","name":"rbaradari","emailAddress":"baradari dot ramin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ramin Baradari","active":true},"body":"Patch \"compress_test_5416.patch\" adds a new test method to CompressTableTest.java that reproduces the crash. The test reproduced the crash on my systems each time I ran it but the bug depends a bit on the proper timing so it might actually succeed on systems. The test is a bit slow takes about 10minutes to complete.\r\n\r\nThe test creates a table with an index that is larger in data size than the 512mb maximum heap size the test runner has. (should be about 600mb+). It then fills the heap in chunks of several megabytes until an OOM occurs that is catched and ignore. The reference to that dummy data is then released and the table compression is called.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rbaradari","name":"rbaradari","emailAddress":"baradari dot ramin at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ramin Baradari","active":true},"created":"2011-09-16T13:13:24.585+0000","updated":"2011-09-16T13:13:24.585+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13106072","id":"13106072","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"body":"Thanks for taking the time to write up a bug report and to provide a repro, Ramin.\r\n\r\nFYI, we do have a separate low-memory test suite that's run with a 16 MB heap. It can be run with 'ant junit-lowmem', the suite is found in java/testing/org/apache/derbyTesting/functionTests/tests/memory","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kristwaa","name":"kristwaa","emailAddress":"kristwaa at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kristwaa&avatarId=14736","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kristwaa&avatarId=14736","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kristwaa&avatarId=14736","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kristwaa&avatarId=14736"},"displayName":"Kristian Waagan","active":true},"created":"2011-09-16T13:54:47.368+0000","updated":"2011-09-16T13:54:47.368+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13164675","id":"13164675","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I wonder, is this really a bug or just a case where we simply do not have enough heap to execute the task so it fails with an OOM?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2011-12-07T20:21:35.366+0000","updated":"2011-12-07T20:21:35.366+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13210632","id":"13210632","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"Any suggestions on a better way to determine if sort should use more in-memory.  It seems for performance derby should be \r\nusing more memory for these operations automatically, but as this issue points out operations can fail if the choice is wrong.\r\nSolutions should be zero-admin by default, with maybe tuning knobs to work around issues like this one where the default does\r\nnot work.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2012-02-17T22:46:20.850+0000","updated":"2012-02-17T22:46:20.850+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13760086","id":"13760086","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"I was able to repro by applying the patch supplied.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2013-09-06T09:37:48.845+0000","updated":"2013-09-06T09:37:48.845+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13843115","id":"13843115","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"If the heap is filled right before the CREATE INDEX statement, the OOME happens in CREATE INDEX instead of SYSCS_COMPRESS_TABLE. (They both use the same code for sorting.) The OOME is reproduced faster that way.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-09T12:40:48.761+0000","updated":"2013-12-09T12:40:48.761+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13843219","id":"13843219","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The code that decides whether or not to grow the sort buffer, essentially works like this in the failing case:\r\n\r\n- When the sort buffer is initialized, it records the amount of memory currently in use, and allocates a small buffer.\r\n\r\n- When the buffer is full, it checks the amount of memory currently in use. It intends to use the difference between the current usage and the initial usage as an estimate of how much memory a doubling of the sort buffer requires. However, since a gc has happened, the difference is negative. Since there is more memory available now than when the buffer was initialized, it assumes that it is safe to allocate as much extra space now as the amount that it successfully allocated with less available memory. So it doubles the buffer size. This sounds like a fair assumption.\r\n\r\n- The next time the buffer is full, it still sees that the memory usage is smaller than the initial memory usage. Again it assumes that it is safe to double the buffer size, and does exactly that. However, at this point, the assumption is not as fair. Notice the difference between the assumption in this step and in the previous step: In the previous step, it was assumed safe to grow the buffer with as much space as we added when the buffer was initialized. In this step, we don't grow the buffer by the same amount as we initially gave the buffer; we actually grow it by twice that amount. This step is repeated each time the buffer gets full, and each time the amount we add gets doubled (way beyond the initial amount that we regarded as a safe increment). Eventually, the buffer gets too large for the heap, and we get an OOME.\r\n\r\nI see at least three ways we could improve the heuristic to avoid this problem:\r\n\r\n1. Instead of using the difference between the current memory usage and the initial memory usage for estimating the memory requirements, we could use the difference between the current memory usage and the memory usage the previous time the buffer was doubled. Then a big gc right after the allocation of the buffer won't affect all upcoming estimates, only the estimate calculated the first time the buffer is full.\r\n\r\n2. When we don't have an estimate of the memory requirement for doubling the buffer (because of a gc), and the current memory usage is smaller than the initial memory usage, don't assume blindly that it is OK to double the buffer. Instead, grow it by the amount of memory that we found it was safe to add initially, when the memory usage was at least as high as it is now. This would mean a doubling of the buffer the first time the buffer gets full, but less than that from the second time the buffer gets full. (In the common case, where we do have an estimate of the memory usage, a doubling will happen each time the buffer gets full, as long as the estimate suggests there's enough free heap space.) In other words, use a more conservative approach and grow the buffer more slowly when we don't have a good estimate for the actual memory requirements.\r\n\r\n3. Since the buffer contains arrays of DataValueDescriptors, we may be able to estimate the memory requirements the same way as we do for BackingStoreHashtable. That is, by calling estimateMemoryUsage() on the DataValueDescriptors to see approximately how much space a single row takes. (Currently, this approach underestimates the actual memory requirements. See DERBY-4620.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-09T15:00:52.523+0000","updated":"2013-12-09T15:00:52.523+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13843296","id":"13843296","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching lowmem-test.diff, which scales down the test case so that it fits into the lowmem test suite that runs with 16 MB heap, as Kristian suggested. It still shows the OOME in my environment, and it runs a lot faster since it uses a much smaller test table.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-09T16:29:49.254+0000","updated":"2013-12-09T16:29:49.254+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13843310","id":"13843310","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"All the proposed changes sound like improvements to me. 2) sounds more conservative (less efficient but also less risky) than 1. If we could do 3) that's the best as far as accuracy is concerned; not sure how expensive it is?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2013-12-09T16:42:13.283+0000","updated":"2013-12-09T16:42:13.283+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13844224","id":"13844224","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Unfortunately, the scaled-down test case in lowmem-test.diff does not work as a good repro for this bug, since it also fails with OOME if the code that grows the sort buffer is completely disabled. So that test case only shows that 16MB heap is too small when compressing a table of that shape and size. It would of course be good reduce the minimum memory requirements too, but that's not what's requested in this bug report.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-10T12:13:36.224+0000","updated":"2013-12-10T12:13:36.224+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13844275","id":"13844275","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for the feedback, Dag.\r\n\r\nYou're right that 3) would probably give better accuracy. I don't think it's particularly expensive, and in any case I think we'd only call estimateMemoryUsage() on a single row each time the buffer is full, so it won't be called frequently.\r\n\r\nThe downsides with 3) are:\r\n- It will underestimate the memory requirements until DERBY-4620 is fixed, which might lead to OOME. (I've been reluctant to fix the estimates in DERBY-4620, because that might degrade the performance of existing applications unless we increase the max hash table size at the same time.)\r\n- With variable-width data types, the rows may vary greatly in size, so the estimate may be way off with that approach too if the sample row is not close to the average row size.\r\n\r\nI experimented with 2), but it has some weaknesses too. The buffer will indeed grow more slowly with that approach, but if the heap was completely full when the sort buffer was initialized (like it is in this case), it simply means that the buffer will grow slowly until it has filled up the heap again. So it is very likely to eventually hit the ceiling and fail with OOME (and Ramin's test case does still fail with OOME when this approach is used).\r\n\r\nAnother experiment I ran, one that looks more promising, is a simplified variant of 1). It changes the meaning of beginTotalMemory and beginFreeMemory so that they represent the low-water mark of the memory usage. In the common case, where the memory usage grows as the buffer fills up, they have the same meaning as today. But once it detects that the memory usage is lower than when the buffer was initialized, those fields are changed to the current state. Although this doesn't make the estimates completely accurate (they still underestimate the actual memory requirement), it makes them more accurate than they currently are. Ramin's test case succeeds when this approach is used.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-10T13:43:41.891+0000","updated":"2013-12-10T13:43:41.891+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13844369","id":"13844369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The attached patch, d5416-1a.diff, implements the variant of 1) mentioned above, where we simply replace the initial memory usage with the current memory usage if we detect that the memory usage has gone down.\r\n\r\nAlthough this is not a perfect solution (the memory estimates are still inaccurate), I don't think it will make the estimates worse in any situations. In the common case, it won't affect the estimates at all. And when it does affect the estimates, it changes them from \"way too low\" (negative values) to just \"too low\".\r\n\r\nAll the regression tests ran cleanly with the patch. So did Ramin's test case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-10T15:57:00.488+0000","updated":"2013-12-10T15:57:00.488+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13844644","id":"13844644","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"body":"Seems like a net improvement to me, code looks good. +1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dagw","name":"dagw","emailAddress":"dag dot wanvik at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dagw&avatarId=16789","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dagw&avatarId=16789","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dagw&avatarId=16789","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dagw&avatarId=16789"},"displayName":"Dag H. Wanvik","active":true},"created":"2013-12-10T20:41:10.947+0000","updated":"2013-12-10T20:41:10.947+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13845286","id":"13845286","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1550103 from [~knutanders] in branch 'code/trunk'\r\n[ https://svn.apache.org/r1550103 ]\r\n\r\nDERBY-5416: SYSCS_COMPRESS_TABLE causes an OutOfMemoryError when the\r\nheap is full at call time and then gets mostly garbage collected later\r\non.\r\n\r\nImprove the accuracy of the code that estimates the memory requirement\r\nof the sort buffer. When it detects that the current memory usage is\r\nlower than the initial memory usage, it now records the current usage\r\nand uses that value instead of the initial memory usage in future\r\ncalculations.\r\n\r\nThis compensates to some degree, but not fully, for the skew in the\r\nestimates due to garbage collection happening after the initial memory\r\nusage. The memory requirement will not be as badly underestimated, and\r\nthe likelihood of OutOfMemoryErrors is reduced.\r\n\r\nThere is no regression test case for this bug, since the only\r\nreliable, reproducible test case that we currently have, needs too\r\nmuch time, disk space and memory to be included in the regression test\r\nsuite.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2013-12-11T10:57:36.058+0000","updated":"2013-12-11T10:57:36.058+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13845301","id":"13845301","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for reviewing the patch, Dag. I committed it to trunk with revision 1550103.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-12-11T10:58:09.248+0000","updated":"2013-12-11T10:58:09.248+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13913298","id":"13913298","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"consider for 10.10 backport","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T18:44:51.384+0000","updated":"2014-02-26T18:44:51.384+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13913316","id":"13913316","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"temporarily assigning myself ownership while working on 10.10 backport.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T18:56:18.868+0000","updated":"2014-02-26T18:56:18.868+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13913354","id":"13913354","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1572203 from mikem@apache.org in branch 'code/branches/10.10'\r\n[ https://svn.apache.org/r1572203 ]\r\n\r\nDERBY-5416: SYSCS_COMPRESS_TABLE causes an OutOfMemoryError when the\r\nheap is full at call time and then gets mostly garbage collected later\r\non.\r\n\r\nbackporting change #1550103 from trunk to 10.10.\r\n\r\nImprove the accuracy of the code that estimates the memory requirement\r\nof the sort buffer. When it detects that the current memory usage is\r\nlower than the initial memory usage, it now records the current usage\r\nand uses that value instead of the initial memory usage in future\r\ncalculations.\r\n\r\nThis compensates to some degree, but not fully, for the skew in the\r\nestimates due to garbage collection happening after the initial memory\r\nusage. The memory requirement will not be as badly underestimated, and\r\nthe likelihood of OutOfMemoryErrors is reduced.\r\n\r\nThere is no regression test case for this bug, since the only\r\nreliable, reproducible test case that we currently have, needs too\r\nmuch time, disk space and memory to be included in the regression test\r\nsuite.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2014-02-26T19:15:34.656+0000","updated":"2014-02-26T19:15:34.656+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13913355","id":"13913355","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"opening to work on backport to 10.10","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T19:16:39.830+0000","updated":"2014-02-26T19:16:39.830+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/13913614","id":"13913614","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"backported to 10.10.  This is as far as I plan to backport right now, but could be backported more if anyone is interested.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T22:21:58.473+0000","updated":"2014-02-26T22:21:58.473+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12523325/comment/14284751","id":"14284751","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"bulk change to close all issues resolved but not closed and not changed since June 1, 2014.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2015-01-21T00:23:08.181+0000","updated":"2015-01-21T00:23:08.181+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-5416/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06ghb:"}}