{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12455694","self":"https://issues.apache.org/jira/rest/api/latest/issue/12455694","key":"CASSANDRA-781","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310865","id":"12310865","key":"CASSANDRA","name":"Cassandra","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310865&avatarId=12034","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310865&avatarId=12034","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310865&avatarId=12034","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310865&avatarId=12034"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/11961","id":"11961","description":"Apache Cassandra related projects","name":"Cassandra"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12314040","id":"12314040","description":"","name":"0.5","archived":false,"released":true,"releaseDate":"2010-01-24"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2010-02-09 05:52:43.235","customfield_12312322":null,"customfield_12312323":null,"customfield_12310222":"1_*:*_1_*:*_1276409920_*|*_5_*:*_1_*:*_0","customfield_12310420":"19861","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2010-02-23T17:06:05.399+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-781/watchers","watchCount":3,"isWatching":false},"created":"2010-02-08T22:32:35.479+0000","customfield_10022":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12311124":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2010-02-23T17:06:05.397+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312978","id":"12312978","name":"Core"}],"timeoriginalestimate":null,"description":"get_range_slice() does not return the same set of keys as get_key_range() in 0.5.0 final.\r\n\r\nI posted a program to reproduce the behavior:\r\n\r\nhttp://www.mail-archive.com/cassandra-dev@incubator.apache.org/msg01474.html\r\n\r\nApparently, you must have more than one node to get the behavior. Also, it may depend on the locations of the nodes on the ring.. I.e., if you don't generate enough keys randomly, then by chance they could all fall on the same host and you might not see the behavior, although I was able to get it to happen using only 2 nodes and 10 keys.\r\n\r\nHere are the other emails describing the issue:\r\n\r\nhttp://www.mail-archive.com/cassandra-user@incubator.apache.org/msg02423.html\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12435887","id":"12435887","filename":"781.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-15T17:03:44.280+0000","size":54632,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12435887/781.txt"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12436624","id":"12436624","filename":"781-backport.txt","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-22T20:38:23.888+0000","size":82956,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12436624/781-backport.txt"}],"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"91598","summary":"in a cluster, get_range_slice() does not return all the keys it should","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"customfield_12311420":null,"customfield_12311421":null,"environment":"Debian 5 lenny on EC2, Gentoo linux, Windows XP","customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":31,"total":31,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831305","id":"12831305","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Reproduced on trunk.  Can you try the attached patch there?  (We can backport to 0.5 afterwards.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-09T05:52:43.235+0000","updated":"2010-02-09T05:52:43.235+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831346","id":"12831346","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Before applying 781.txt to trunk I was getting an exception. The exception is now gone! Awesome. However, I still have the range scanning problem. Here are a few example runs of the test:\r\n\r\n$ python test_bug.py get_range_slice\r\nebbde791748641be951802d64d48c62d not marked 0\r\n9bfa7ad8abce48a9a45daccfa3772f29 not marked 0\r\n$ python test_bug.py get_range_slice\r\nc554dc532bfb462b950990b6824f11c1 not marked 0\r\ne6c4a0100508451ea3a1d13088877dd9 not marked 0\r\n$ python test_bug.py get_range_slice\r\n$ python test_bug.py get_range_slice\r\n$ python test_bug.py get_range_slice\r\n27fc88c8e7ab489d96f4c749cc86aca1 not marked 0\r\n$ python test_bug.py get_range_slice\r\nb522cca4bd6f4282a507525598139f95 not marked 0\r\n$ python test_bug.py get_range_slice\r\nd045b3edabc949fea30242722a11587a not marked 0\r\n$ \r\n\r\nSigh, I just realized that under trunk my nodetool doesn't work. However, I got the tokens from the log:\r\n\r\nINFO 08:10:50,338 Saved Token not found. Using 68054825649105441942293089893012253843\r\nINFO 08:10:53,293 Saved Token not found. Using 44181284974408316254372647768836513112\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-09T08:16:02.461+0000","updated":"2010-02-09T08:16:02.461+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831443","id":"12831443","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hbadenes","name":"hbadenes","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"body":"I am hitting a similar problem on 3-node cluster I run. I do receive 5 rows in the get_range_slice query (from \"\" to \"\"), instead of an empty result set as described here (there exist more than just those 5 returned).\r\n\r\nI am running 0.5.0 and could be able to test a patch for that version.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hbadenes","name":"hbadenes","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"created":"2010-02-09T12:53:57.661+0000","updated":"2010-02-09T12:53:57.661+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831451","id":"12831451","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"body":"I add the same problem, range_slice on 2 nodes was missing results.\r\nI updated to trunk and applied 781.txt. It fixes the missing results but\r\nintroduce a timeout exception (I don't believe it is the patch fault though).\r\n\r\nThe timeout happens with consistencyLevel.ONE (but I suspect it could happen\r\nwith QUORUM too). Looking a bit to the details, it seems that\r\nRangeSliceResponseResolver wait for a response from every live natural\r\nendpoints (in isDataPresent()). But in StorageProxy, the rangeSlice message is\r\nonly sent to 'responseCount' endpoints (which will be 1 for\r\nconsistencyLevel.ONE). Hence the timeout.\r\n\r\nI'm not sure what would be the best way to deal with that though.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=slebresne","name":"slebresne","emailAddress":"sylvain at datastax dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=slebresne&avatarId=14630","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=slebresne&avatarId=14630","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=slebresne&avatarId=14630","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=slebresne&avatarId=14630"},"displayName":"Sylvain Lebresne","active":true},"created":"2010-02-09T13:30:00.737+0000","updated":"2010-02-09T13:30:00.737+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831468","id":"12831468","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Sylvain: absolutely right, patch 01 has a fix for this.\r\n\r\nJack: updated patch 02 with more logging at INFO, maybe that will help.  I can't reproduce even w/ your tokens and several runs of 100 keys.  I am using a slightly simpler test, though:\r\n\r\n        import uuid\r\n        ks = \"Keyspace1\"\r\n        cf = \"Super1\"\r\n        path = ColumnPath(cf, \"foo\", \"is\")\r\n        value = \"cool\"\r\n\r\n        # insert, record keys in `keys` set\r\n        keys = set()\r\n        for i in xrange(100):\r\n            key = uuid.uuid4().hex\r\n            client.insert(ks, key, path, value, 0, ConsistencyLevel.ONE)\r\n            keys.add(key)\r\n    \r\n        # remove keys found from set\r\n        parent = ColumnParent(column_family=cf)\r\n        slice_range = SliceRange(start=\"key\", finish=\"key\")\r\n        predicate = SlicePredicate(slice_range=slice_range)        \r\n        result = client.get_range_slice(ks, parent, predicate, \"\", \"\", 1000, ConsistencyLevel.ONE)\r\n        for row in result:\r\n            keys.discard(row.key)\r\n\r\n        # if there are any left over, there is a bug\r\n        assert not keys, list(sorted(keys))\r\n\r\n... this will of course only work until you insert more than 1000 keys.  (maybe your original test has a similar limitation, i don't remember.)\r\n\r\n(Are you still testing w/ RF of 2?  If so maybe patch 01 will help you too.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-09T14:27:27.316+0000","updated":"2010-02-09T14:27:27.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831668","id":"12831668","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Ok, I checked out a fresh copy of trunk and applied both new patches (0001 and 0002). There were some errors for 0002, but upon looking at the code it seems parts of the patch have already been committed to the SVN repo, so what I ended up with is the right thing.\r\n\r\n$ patch -p1 <0001-fix-timeout-bug.txt \r\npatching file src/java/org/apache/cassandra/service/StorageProxy.java\r\n$ patch -p1 <0002-fix-slices-over-non-trivial-wrapped-ranges.txt\r\npatching file src/java/org/apache/cassandra/db/ColumnFamilyStore.java\r\nHunk #1 succeeded at 43 (offset 1 line).\r\nHunk #2 succeeded at 1075 (offset 2 lines).\r\npatching file src/java/org/apache/cassandra/dht/AbstractBounds.java\r\nHunk #1 FAILED at 29.\r\n1 out of 1 hunk FAILED -- saving rejects to file src/java/org/apache/cassandra/dht/AbstractBounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Bounds.java\r\nHunk #1 FAILED at 1.\r\nHunk #2 FAILED at 11.\r\n2 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/cassandra/dht/Bounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Range.java\r\npatching file src/java/org/apache/cassandra/service/StorageProxy.java\r\npatching file src/java/org/apache/cassandra/service/StorageService.java\r\nReversed (or previously applied) patch detected!  Assume -R? [n] \r\nApply anyway? [n] \r\nSkipping patch.\r\n3 out of 3 hunks ignored -- saving rejects to file src/java/org/apache/cassandra/service/StorageService.java.rej\r\npatching file test/unit/org/apache/cassandra/dht/BoundsTest.java\r\npatching file test/unit/org/apache/cassandra/dht/RangeTest.java\r\n$ \r\n\r\nCopied my storage-conf.xml into place, which has only two changes: Seeds defined and binding addresses changed to null strings. Thus, my RF is 1 now, not 2 as it was before.\r\n\r\nI now use your simpler test. Here is the test with all the import statements:\r\n\r\nimport uuid\r\n\r\nfrom thrift import Thrift\r\nfrom thrift.transport import TTransport\r\nfrom thrift.transport import TSocket\r\nfrom thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated\r\nfrom cassandra import Cassandra\r\nfrom cassandra.ttypes import *\r\n\r\nnum_keys = 10\r\n\r\nsocket = TSocket.TSocket(\"10.212.87.165\", 9160)\r\ntransport = TTransport.TBufferedTransport(socket)\r\nprotocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)\r\nclient = Cassandra.Client(protocol)\r\n\r\ntransport.open()\r\n\r\nks = \"Keyspace1\"\r\ncf = \"Super1\"\r\npath = ColumnPath(cf, \"foo\", \"is\")\r\nvalue = \"cool\"\r\n\r\n# insert, record keys in `keys` set\r\nkeys = set()\r\nfor i in xrange(100):\r\n    key = uuid.uuid4().hex\r\n    client.insert(ks, key, path, value, 0, ConsistencyLevel.ONE)\r\n    keys.add(key)\r\n\r\n# remove keys found from set\r\nparent = ColumnParent(column_family=cf)\r\nslice_range = SliceRange(start=\"key\", finish=\"key\")\r\npredicate = SlicePredicate(slice_range=slice_range)\r\nresult = client.get_range_slice(ks, parent, predicate, \"\", \"\", 1000, ConsistencyLevel.ONE)\r\nfor row in result:\r\n    keys.discard(row.key)\r\n\r\n# if there are any left over, there is a bug\r\nassert not keys, list(sorted(keys))\r\n\r\n\r\nI cleared out the data/commitlog dirs and launched both nodes. The tokens:\r\n\r\n INFO 21:02:08,768 Saved Token not found. Using 136351045523563703929320485474511375137\r\n INFO 21:02:09,509 Saved Token not found. Using 20118706661854036583649958139769313744\r\n\r\nNow.. run the test!\r\n\r\n$ python test_bug_simple.py\r\nTraceback (most recent call last):\r\n  File \"test_bug_simple.py\", line 36, in <module>\r\n    result = client.get_range_slice(ks, parent, predicate, \"\", \"\", 1000, ConsistencyLevel.ONE) \r\n  File \"/usr/local/python//lib/python2.6/site-packages/cassandra/Cassandra.py\", line 486, in get_range_slice\r\n  File \"/usr/local/python//lib/python2.6/site-packages/cassandra/Cassandra.py\", line 508, in recv_get_range_slice\r\nthrift.Thrift.TApplicationException: Internal error processing get_range_slice\r\n\r\n\r\nThe log from the node I am querying:\r\n\r\n INFO 21:02:08,768 Saved Token not found. Using 13635104552356370392932048547451\r\n1375137\r\n INFO 21:02:08,933 Starting up server gossip\r\n INFO 21:02:09,118 Cassandra starting up...\r\n INFO 21:02:10,686 Node /10.212.230.176 is now part of the cluster\r\n INFO 21:02:11,750 InetAddress /10.212.230.176 is now UP\r\n INFO 21:05:43,927 scanning node range (136351045523563703929320485474511375137,\r\n20118706661854036583649958139769313744]\r\nERROR 21:05:43,927 Internal error processing get_range_slice\r\njava.lang.AssertionError\r\n        at org.apache.cassandra.dht.Bounds.<init>(Bounds.java:16)\r\n        at org.apache.cassandra.dht.Bounds.restrictTo(Bounds.java:34)\r\n        at org.apache.cassandra.service.StorageProxy.getRangeSlice(StorageProxy.\r\njava:559)\r\n        at org.apache.cassandra.thrift.CassandraServer.get_range_slice(Cassandra\r\nServer.java:560)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor$get_range_slice.proce\r\nss(Cassandra.java:1189)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.jav\r\na:984)\r\n        at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadP\r\noolServer.java:253)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExec\r\nutor.java:886)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor\r\n.java:908)\r\n        at java.lang.Thread.run(Thread.java:619)\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-09T21:08:57.393+0000","updated":"2010-02-09T21:08:57.393+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831677","id":"12831677","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Sorry, those patches that didn't apply were probably important. :)\r\n\r\nI've rebased against r908163, can you revert and try again?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-09T21:28:14.517+0000","updated":"2010-02-09T21:28:14.517+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831682","id":"12831682","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Makes sense! Can you try one more time? I still can't apply the patch properly.. Or, maybe I'm doing something wrong? Here is the transcript.\r\n\r\n$ svn checkout -r908163 https://svn.apache.org/repos/asf/incubator/cassandra/trunk cassandra\r\n...\r\nA    cassandra/README.txt\r\n U   cassandra\r\nChecked out revision 908163.\r\n$ cd cassandra\r\n$ wget https://issues.apache.org/jira/secure/attachment/12435345/0001-fix-timeout-bug.txt\r\n--2010-02-09 21:40:51--  https://issues.apache.org/jira/secure/attachment/124353\r\n45/0001-fix-timeout-bug.txt\r\nResolving issues.apache.org... 140.211.11.140\r\nConnecting to issues.apache.org|140.211.11.140|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 1873 (1.8K) [text/plain]\r\nSaving to: `0001-fix-timeout-bug.txt'\r\n\r\n100%[======================================>] 1,873       --.-K/s   in 0s      \r\n\r\n2010-02-09 21:40:52 (47.0 MB/s) - `0001-fix-timeout-bug.txt' saved [1873/1873]\r\n\r\n$ patch -p1 <0001-fix-timeout-bug.txt \r\npatching file src/java/org/apache/cassandra/service/StorageProxy.java\r\n$ wget https://issues.apache.org/jira/secure/attachment/12435346/0002-fix-slices-over-non-trivial-wrapped-ranges.txt\r\n--2010-02-09 21:41:13--  https://issues.apache.org/jira/secure/attachment/124353\r\n46/0002-fix-slices-over-non-trivial-wrapped-ranges.txt\r\nResolving issues.apache.org... 140.211.11.140\r\nConnecting to issues.apache.org|140.211.11.140|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 14776 (14K) [text/plain]\r\nSaving to: `0002-fix-slices-over-non-trivial-wrapped-ranges.txt'\r\n\r\n100%[======================================>] 14,776      74.8K/s   in 0.2s    \r\n\r\n2010-02-09 21:41:14 (74.8 KB/s) - `0002-fix-slices-over-non-trivial-wrapped-ranges.txt' saved [14776/14776]\r\n\r\n$ patch -p1 <0002-fix-slices-over-non-trivial-wrapped-ranges.txt \r\npatching file src/java/org/apache/cassandra/db/ColumnFamilyStore.java\r\npatching file src/java/org/apache/cassandra/dht/AbstractBounds.java\r\nHunk #1 FAILED at 29.\r\n1 out of 1 hunk FAILED -- saving rejects to file src/java/org/apache/cassandra/dht/AbstractBounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Bounds.java\r\nHunk #1 FAILED at 1.\r\nHunk #2 FAILED at 11.\r\n2 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/cassandra/dht/Bounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Range.java\r\npatching file src/java/org/apache/cassandra/service/StorageProxy.java\r\npatching file src/java/org/apache/cassandra/service/StorageService.java\r\npatching file test/unit/org/apache/cassandra/dht/BoundsTest.java\r\npatching file test/unit/org/apache/cassandra/dht/RangeTest.java\r\n$ \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-09T21:44:55.199+0000","updated":"2010-02-09T21:44:55.199+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831707","id":"12831707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"weird, happens for me too.  lame!\r\n\r\nattached Bounds and AbstractBounds as they should look, post-patch.  just do what you showed in the transcript, then overwrite the local copies with these.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-09T22:22:29.918+0000","updated":"2010-02-09T22:22:29.918+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12831752","id":"12831752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Ok, got the patch applied properly and things look better! The simple test passes. Awesome!! :) However, the more complicated test uses a \"start\" offset after the first get_range_slice(), and that still causes an exception. From the log:\r\n\r\n INFO 23:15:52,425 scanning node range (20123910036548544936247138992367052936,67283373037552029587203789575295250400]\r\nERROR 23:15:52,425 Internal error processing get_range_slice\r\njava.lang.AssertionError: [124451343962032323897724984972289130546,67283373037552029587203789575295250400]\r\n        at org.apache.cassandra.dht.Bounds.<init>(Bounds.java:26)\r\n        at org.apache.cassandra.dht.Bounds.getRangeOrBounds(Bounds.java:74)\r\n        at org.apache.cassandra.dht.Bounds.restrictTo(Bounds.java:59)\r\n        at org.apache.cassandra.service.StorageProxy.getRangeSlice(StorageProxy.java:559)\r\n        at org.apache.cassandra.thrift.CassandraServer.get_range_slice(CassandraServer.java:560)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor$get_range_slice.process(Cassandra.java:1189)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.java:984)\r\n        at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:253)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\r\n        at java.lang.Thread.run(Thread.java:619)\r\n\r\nIf you have trouble duplicating this one I can give you more information, but I did not have difficulty getting it to happen. It happened every time I tried. For example, you can get it to happen just by modifying one line of the simple test:\r\n\r\nresult = client.get_range_slice(ks, parent, predicate, \"b37e14bb37304e0096e2e77a8fc88a5b\", \"\", 1000, ConsistencyLevel.ONE)\r\n\r\nOf course, if you don't scan starting from \"\" then the simple test doesn't make sense, because you might specifically exclude keys you are looking for by starting from the string I put in.\r\n\r\nHowever, the more complicated test I posted earlier makes sense and exercises the start and end ranges of get_range_slice(). So..can we go back to the complicated test and specifically make that one work? It's also nice because you should be able to run it over and over, since it removes the keys at the end. With the simple test you have to manually flush the data and restart the servers each time.\r\n\r\nThanks so much for fixing this! I am getting more familiar with the java so soon I might be able to fix some bugs like this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-09T23:24:57.809+0000","updated":"2010-02-09T23:24:57.809+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832385","id":"12832385","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"committed patch 1, the timeout fix.\r\n\r\nhere is a new patch that should fix the remaining range issues.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-11T05:27:42.452+0000","updated":"2010-02-11T05:27:42.452+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832399","id":"12832399","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Almost there I think. I found that the keys were not being returned in sorted order as they were before, so my trick of taking the last key in a limited range, and using that to start the next limited range did not work. So, I modified the test to sort the keys, then take the last one. When I did this I found another bug: when there are fewer keys in the specified range, duplicates are returned. Also, when I played around with the start and end for the range the server starting giving AssertionErrors:\r\n\r\nERROR 06:25:41,032 Internal error processing get_range_slice\r\njava.lang.AssertionError: [125358492461525499902293558181143752059,1244525150549\r\n22950280650433865080672503]\r\n        at org.apache.cassandra.dht.Bounds.<init>(Bounds.java:26)\r\n        at org.apache.cassandra.dht.Bounds.<init>(Bounds.java:18)\r\n        at org.apache.cassandra.thrift.CassandraServer.get_range_slice(Cassandra\r\nServer.java:558)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor$get_range_slice.proce\r\nss(Cassandra.java:1189)\r\n        at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.jav\r\na:984)\r\n        at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadP\r\noolServer.java:253)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExec\r\nutor.java:886)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor\r\n.java:908)\r\n        at java.lang.Thread.run(Thread.java:619)\r\n\r\n\r\nThe modified test (below) gets stuck in an infinite loop. If you run it in ipython, you can control-c to get back to the interpretor, then type \"result\" to look at it's contents. It is a sorted list of keys. Look at the last key.. Here is the transcript showing the last two keys from result:\r\n\r\n 'ff8bfa30777f455695bf934ac7cfedac',\r\n 'ffb701ea740646b9955f0e339f8e3ee2']\r\n\r\nIn [70]: result2 = client.get_range_slice(ks, cparent, p, start, \"\", seg, cl)\r\n\r\nIn [71]: len(result2)\r\nOut[71]: 1000\r\n\r\nIn [72]: result3 = client.get_range_slice(ks, cparent, p, start, \"\", seg, cl)\r\n\r\nIn [73]: len(result3)\r\nOut[73]: 1000\r\n\r\nIn [74]: start\r\nOut[74]: 'ffb701ea740646b9955f0e339f8e3ee2'\r\n\r\nIn [75]: result4 = client.get_range_slice(ks, cparent, p, start, start, seg, cl)\r\n\r\nIn [76]: len(result4)\r\nOut[76]: 1000\r\n\r\nIn [77]: result5 = client.get_range_slice(ks, cparent, p, start, start, seg, cl)\r\n\r\nIn [78]: len(result5)\r\nOut[78]: 1\r\n\r\nIn [79]: \r\n\r\nThat can't be right. Here is the latest test..\r\n\r\nimport sys\r\nimport time\r\nimport uuid\r\n\r\nfrom thrift import Thrift\r\nfrom thrift.transport import TTransport\r\nfrom thrift.transport import TSocket\r\nfrom thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated\r\n\r\nimport sys\r\nsys.path.insert(0,'/usr/local/cassandra/interface/thrift/gen-py')\r\n\r\nfrom cassandra import Cassandra\r\nfrom cassandra.ttypes import *\r\n\r\nnum_keys = 10000\r\n\r\nsocket = TSocket.TSocket(\"10.212.87.165\", 9160)\r\ntransport = TTransport.TBufferedTransport(socket)\r\nprotocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)\r\nclient = Cassandra.Client(protocol)\r\n\r\nks = \"Keyspace1\"\r\ncf = \"Super1\"\r\ncl = ConsistencyLevel.ONE\r\n\r\nd = {}\r\n    \r\ntransport.open()\r\n    \r\nif 1:\r\n    ## insert keys using the raw thrift interface\r\n    cpath = ColumnPath(cf, \"foo\", \"is\")\r\n    value = \"cool\"\r\n\r\n    for i in xrange(num_keys):\r\n        ts = time.time()\r\n        key = uuid.uuid4().hex\r\n        client.insert(ks, key, cpath, value, ts, cl)\r\n        d[key] = 1\r\n\r\nelse:\r\n    ## insert keys using pycassa!\r\n    import pycassa\r\n\r\n    client = pycassa.connect([\"10.212.87.165:9160\"])\r\n    cf_test = pycassa.ColumnFamily(client, ks, cf, super=True)\r\n\r\n    for i in xrange(num_keys):\r\n        key = uuid.uuid4().hex\r\n        cf_test.insert(key, { 'params' : { 'is' : 'cool' }})\r\n        d[key] = 1\r\n\r\n\r\ncparent = ColumnParent(column_family=cf)\r\nslice_range = SliceRange(start=\"key\", finish=\"key\")\r\np = SlicePredicate(slice_range=slice_range)\r\n\r\ndone = False\r\nseg = 1000\r\nstart = \"\"\r\n\r\n## do a scan using either get_key_range() (deprecated) or get_range_slice()\r\n## for every key returned that is in the dictionary, mark it as found\r\nwhile not done:\r\n    print \"start\", start\r\n    result = client.get_range_slice(ks, cparent, p, start, \"\", seg, cl)\r\n\r\n    def getkey(x):\r\n        return x.key\r\n    result = map(getkey, result)   \r\n    result.sort()\r\n\r\n    for r in result:\r\n        if d.has_key(r): \r\n            d[r] = 0\r\n\r\n    if len(result) < seg: done = True\r\n    else: start = result[seg-1]\r\n\r\ncpath = ColumnPath(column_family=cf, super_column='foo')\r\n\r\n## get, remove all the keys\r\n## print all the keys that were not marked 0\r\nfor k in d:\r\n    result = client.get(ks, k, cpath, cl)\r\n    #print result\r\n\r\n    if d[k] == 1: \r\n        print k, \"not marked 0\"\r\n    #else:\r\n    #    print k, \"was marked 0!\"\r\n\r\n    ts = time.time()\r\n    client.remove(ks, k, cpath, ts, cl)\r\n\r\n\r\n\r\n\r\nBTW, this time around my nodetool worked perfectly! When I first brought the two nodes up, they selected keys that were too close, and one node ended up with all the load. So I ran loadbalance, and it worked great! That was really awesome. The only thing I noticed was a single key that should have been found returned a NotFoundException. I'll keep an eye on this one, too. Best,\r\n\r\nJack","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-11T06:53:03.434+0000","updated":"2010-02-11T06:53:03.434+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832704","id":"12832704","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"new patch attached.\r\n\r\n> ERROR 06:25:41,032 Internal error processing get_range_slice \r\n\r\nadded InvalidRequestException when start > end, which fixes this.\r\n\r\n> The modified test (below) gets stuck in an infinite loop\r\n\r\nYour test is buggy. :)\r\n\r\nrange_slice (like key_range) is start-INCLUSIVE, so if you pass a key that exists as start, you will always get at least one result, the start one.\r\n\r\n> the keys were not being returned in sorted order \r\n\r\nThis is working fine for me.  Not sure what you were seeing.\r\n\r\n> when there are fewer keys in the specified range, duplicates are returned\r\n\r\nSounds like another illustration of start-inclusiveness.\r\n\r\nIf you still see problems, can you narrow it down to a specific set of keys, rather than relying on randomness to maybe reproduce it once in a while?  That would help a lot.  Thanks!\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-11T22:17:28.287+0000","updated":"2010-02-11T22:17:28.287+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832827","id":"12832827","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"I don't think my test is buggy. I realize that the range is start inclusive, and it does pass a key that exists as start, but sets \"done = True\" if the range scan returns less keys than requested. Since it passes \"\" as the end/finish, this should return less keys than requested when you get to the end, provided you ask for more than one key (which I do).\r\n\r\nI think the last remaining problem is with the sorting! I bet that is why using \"\" for my finish string doesn't work. Here's the problem I see now (transcript followed by test):\r\n\r\nI put 10 random keys in, ask for them back. They aren't sorted, so I sort them and take the highest. I use that as start, and \"\" as finish. This should give me one key back, but instead I get 10. Could it be that my columnfamily definition is different than yours? Here's mine:\r\n\r\n      <ColumnFamily ColumnType=\"Super\"\r\n                    CompareWith=\"UTF8Type\"\r\n                    CompareSubcolumnsWith=\"UTF8Type\"\r\n                    Name=\"Super1\"\r\n                    RowsCached=\"1000\"\r\n                    KeysCachedFraction=\"0\"\r\n                    Comment=\"A column family with supercolumns, whose column and subcolumn names are UTF8 strings\"/>\r\n\r\n\r\nIn [17]: run test_bug_simple2.py\r\nresult1 before sorting\r\naf37b718213b4219897ea1564ebc8900\r\nf196ad5537294840b2de0a636202dbd2\r\n7578ba38b66d4708a38663717e020959\r\nb5266af926a647c3a1a4d2f62dfe952c\r\nd729d5181bac42a48ac3e49d9700047e\r\n4d58b6fbea214d0c9c7a9f288feba2d8\r\n41df7aee7d674a75a4943d89153f9bde\r\n4e121f95459e4f67a6cd3c06b2d078e7\r\n99b2b03675a8413f94e60e3d1bbded8c\r\n66121c5c863f4c1f804a46b8c2136fe9\r\nresult1 after sorting\r\n41df7aee7d674a75a4943d89153f9bde\r\n4d58b6fbea214d0c9c7a9f288feba2d8\r\n4e121f95459e4f67a6cd3c06b2d078e7\r\n66121c5c863f4c1f804a46b8c2136fe9\r\n7578ba38b66d4708a38663717e020959\r\n99b2b03675a8413f94e60e3d1bbded8c\r\naf37b718213b4219897ea1564ebc8900\r\nb5266af926a647c3a1a4d2f62dfe952c\r\nd729d5181bac42a48ac3e49d9700047e\r\nf196ad5537294840b2de0a636202dbd2\r\nstart f196ad5537294840b2de0a636202dbd2\r\nresult2\r\nf196ad5537294840b2de0a636202dbd2\r\n7578ba38b66d4708a38663717e020959\r\nb5266af926a647c3a1a4d2f62dfe952c\r\nd729d5181bac42a48ac3e49d9700047e\r\n4d58b6fbea214d0c9c7a9f288feba2d8\r\n41df7aee7d674a75a4943d89153f9bde\r\n4e121f95459e4f67a6cd3c06b2d078e7\r\n99b2b03675a8413f94e60e3d1bbded8c\r\n66121c5c863f4c1f804a46b8c2136fe9\r\nb8b290a864464271ad30df1bbab2f2b7\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n\r\n/k/jack/bridge/test_bug_simple2.py in <module>()\r\n     54 for r in result2: print r.key\r\n     55 \r\n---> 56 assert len(result2) == 1\r\n     57 \r\n     58 \r\n\r\nAssertionError: \r\nWARNING: Failure executing file: <test_bug_simple2.py>\r\n\r\nIn [18]: \r\n\r\n\r\n\r\n\r\n\r\nimport uuid\r\n\r\nfrom thrift import Thrift\r\nfrom thrift.transport import TTransport\r\nfrom thrift.transport import TSocket\r\nfrom thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated\r\n \r\nimport sys\r\nsys.path.insert(0,'/usr/local/cassandra/interface/thrift/gen-py')\r\n \r\nfrom cassandra import Cassandra\r\nfrom cassandra.ttypes import *\r\n \r\nsocket = TSocket.TSocket(\"10.212.87.165\", 9160)\r\ntransport = TTransport.TBufferedTransport(socket)\r\nprotocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)\r\nclient = Cassandra.Client(protocol)\r\n \r\ntransport.open()\r\n \r\nks = \"Keyspace1\"\r\ncf = \"Super1\"\r\npath = ColumnPath(cf, \"foo\", \"is\")\r\nvalue = \"cool\"\r\n    \r\nfor i in xrange(100):\r\n    key = uuid.uuid4().hex\r\n    client.insert(ks, key, path, value, 0, ConsistencyLevel.ONE)\r\n \r\nparent = ColumnParent(column_family=cf)\r\nslice_range = SliceRange(start=\"key\", finish=\"key\")\r\npredicate = SlicePredicate(slice_range=slice_range)\r\n \r\nresult1 = client.get_range_slice(ks, parent, predicate, \"\", \"\", 10, ConsistencyLevel.ONE)\r\n \r\nprint \"result1 before sorting\"\r\nfor r in result1: print r.key\r\n \r\ndef getkey(x): return x.key\r\n \r\nprint \"result1 after sorting\"\r\nresult1 = map(getkey, result1)\r\nresult1.sort()\r\n \r\nfor r in result1: print r\r\n \r\nstart = result1[-1]\r\n \r\nprint \"start\", start\r\n \r\nresult2 = client.get_range_slice(ks, parent, predicate, start, \"\", 10, ConsistencyLevel.ONE)\r\n \r\nprint \"result2\"\r\nfor r in result2: print r.key\r\n \r\nassert len(result2) == 1\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-12T03:44:06.065+0000","updated":"2010-02-12T03:44:06.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832828","id":"12832828","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"If you're using RP instead of OPP you will see that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-12T03:48:30.120+0000","updated":"2010-02-12T03:48:30.120+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12832830","id":"12832830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Ahh!! Right you are, I was using RP instead of OPP. Ok, but now here is another problem: if I insert 10 keys and then ask for them back, it works. However, if I insert 10 more and do a range scan with start=\"\", I don't get the lowest key:\r\n\r\nIn [17]: run test_bug_simple3.py\r\ninsert aa3cf33059d64dac8aef4a250bc5ea9c\r\ninsert a7dbda2925eb4b439c89cd71d56b5113\r\ninsert f28e92d5e5554857940c9d3386bf4121\r\ninsert 2b8ec460e7d346cbaf3dcb00e1aaaf91\r\ninsert 7792c98f0c3948299c622c73b906df66\r\ninsert 37a8bfdb69b642ba8e96d33b060f789d\r\ninsert 38c18f5d3d2c46cbb4e44b603a8acdbd\r\ninsert bef8104ea9184abaa3f0788ef7b2e0db\r\ninsert 934fe04d30cc4a96b1f1a9e7930316b8\r\ninsert 1d3413e88af946349f148c4fafeb6bf7\r\nresult 1d3413e88af946349f148c4fafeb6bf7\r\nresult 2b8ec460e7d346cbaf3dcb00e1aaaf91\r\nresult 37a8bfdb69b642ba8e96d33b060f789d\r\nresult 38c18f5d3d2c46cbb4e44b603a8acdbd\r\nresult 7792c98f0c3948299c622c73b906df66\r\nresult a7dbda2925eb4b439c89cd71d56b5113\r\nresult aa3cf33059d64dac8aef4a250bc5ea9c\r\nresult bef8104ea9184abaa3f0788ef7b2e0db\r\nresult f28e92d5e5554857940c9d3386bf4121\r\nstart f28e92d5e5554857940c9d3386bf4121\r\nresult f28e92d5e5554857940c9d3386bf4121\r\n\r\nIn [18]: run test_bug_simple3.py\r\ninsert 4eb0300540ec4b4083fbaf33741fc4a5\r\ninsert 12b43ba967314b369faff7e59902d6c2\r\ninsert 5b4b729676bc4ea2816620c3b6dff080\r\ninsert cf2fda1b11d843f1ae7949dbbb7d179d\r\ninsert c9d0cf4a1e9a48caa143afd2b0268f70\r\ninsert 9a044cff59b940d5bfbeffd58b01ee8e\r\ninsert d2ee042f0b0b4f7ea86e6e2c0dfdcfdd\r\ninsert d239aee577684c27afea2fe7e3361bdf\r\ninsert 706b20976f974de49bda61d55b9c2a63\r\ninsert 36177455bc3b4469b7e6f51897c9f3ba\r\nresult a7dbda2925eb4b439c89cd71d56b5113\r\nresult aa3cf33059d64dac8aef4a250bc5ea9c\r\nresult bef8104ea9184abaa3f0788ef7b2e0db\r\nresult c9d0cf4a1e9a48caa143afd2b0268f70\r\nresult cf2fda1b11d843f1ae7949dbbb7d179d\r\nstart cf2fda1b11d843f1ae7949dbbb7d179d\r\nresult cf2fda1b11d843f1ae7949dbbb7d179d\r\nresult d239aee577684c27afea2fe7e3361bdf\r\nresult d2ee042f0b0b4f7ea86e6e2c0dfdcfdd\r\nresult f28e92d5e5554857940c9d3386bf4121\r\n\r\nIn [19]: \r\n\r\n\r\nSee what I mean? In the first run I inserted \"1d3413e88af946349f148c4fafeb6bf7\" but the second range scan I get \"a7dbda2925eb4b439c89cd71d56b5113\" back first, even when I set start=\"\". Could this somehow be my fault too?\r\n\r\nTest follows:\r\n\r\n\r\nimport uuid\r\n\r\nfrom thrift import Thrift\r\nfrom thrift.transport import TTransport\r\nfrom thrift.transport import TSocket\r\nfrom thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated\r\n\r\nimport sys\r\nsys.path.insert(0,'/usr/local/cassandra/interface/thrift/gen-py')\r\n\r\nfrom cassandra import Cassandra\r\nfrom cassandra.ttypes import *\r\n\r\nsocket = TSocket.TSocket(\"10.212.87.165\", 9160)\r\ntransport = TTransport.TBufferedTransport(socket)\r\nprotocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)\r\nclient = Cassandra.Client(protocol)\r\n\r\ntransport.open()\r\n\r\nks = \"Keyspace1\"\r\ncf = \"Super1\"\r\npath = ColumnPath(cf, \"foo\", \"is\")\r\nvalue = \"cool\"\r\n\r\nfor i in xrange(10):\r\n    key = uuid.uuid4().hex\r\n    print \"insert\", key\r\n    client.insert(ks, key, path, value, 0, ConsistencyLevel.ONE)\r\n\r\nparent = ColumnParent(column_family=cf)\r\nslice_range = SliceRange(start=\"key\", finish=\"key\")\r\npredicate = SlicePredicate(slice_range=slice_range)\r\n\r\n\r\nresult = client.get_range_slice(ks, parent, predicate, \"\", \"\", 5, ConsistencyLevel.ONE)\r\nfor row in result:\r\n    print \"result\", row.key\r\n\r\nstart = result[-1].key\r\n\r\nprint \"start\", start\r\n\r\nresult = client.get_range_slice(ks, parent, predicate, start, \"\", 10, ConsistencyLevel.ONE)\r\nfor row in result:\r\n    print \"result\", row.key\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-12T04:18:48.813+0000","updated":"2010-02-12T04:18:48.813+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12833322","id":"12833322","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Ah, yes, definitely reintroduced a bug in picking the range to start scanning in.  Fix attached.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-13T04:28:50.131+0000","updated":"2010-02-13T04:28:50.131+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12833454","id":"12833454","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Some of the patches didn't apply, some problem as before? I checked out freshly just now. Can you post the individual files again? Thanks.. Or..maybe this is the problem: why does your most recently attached patch have a Wednesday time stamp on it? Here is what I get at the top:\r\n\r\ncommit 630c33353647f062134d66afa3b487d95abe03fe\r\nAuthor: Jonathan Ellis <jonathan.ellis@rackspace.com>\r\nDate:   Wed Feb 10 18:04:08 2010 -0600\r\n\r\n    fix range queries\r\n\r\nShouldn't that be Friday? Here's the transcript:\r\n\r\n$ svn checkout https://svn.apache.org/repos/asf/incubator/cassan\r\ndra/trunk cassandra\r\nA    cassandra/test\r\nA    cassandra/test/unit\r\n...\r\n$ cd cassandra\r\n$ wget https://issues.apache.org/jira/secure/attachment/12435762\r\n/781.txt\r\n--2010-02-13 20:57:49--  https://issues.apache.org/jira/secure/attachment/124357\r\n62/781.txt\r\nResolving issues.apache.org... 140.211.11.140\r\nConnecting to issues.apache.org|140.211.11.140|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 47140 (46K) [text/plain]\r\nSaving to: `781.txt'\r\n\r\n100%[======================================>] 47,140       120K/s   in 0.4s    \r\n\r\n2010-02-13 20:57:50 (120 KB/s) - `781.txt' saved [47140/47140]\r\n\r\n$ patch -p1 <781.txt \r\npatching file src/java/org/apache/cassandra/db/ColumnFamilyStore.java\r\npatching file src/java/org/apache/cassandra/db/RangeSliceReply.java\r\npatching file src/java/org/apache/cassandra/dht/AbstractBounds.java\r\nHunk #1 FAILED at 1.\r\nHunk #2 FAILED at 25.\r\n2 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/cassandra/\r\ndht/AbstractBounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Bounds.java\r\nHunk #1 FAILED at 1.\r\nHunk #2 FAILED at 8.\r\n2 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/cassandra/\r\ndht/Bounds.java.rej\r\npatching file src/java/org/apache/cassandra/dht/Range.java\r\npatching file src/java/org/apache/cassandra/service/RangeSliceResponseResolver.j\r\nava\r\npatching file src/java/org/apache/cassandra/service/StorageProxy.java\r\npatching file src/java/org/apache/cassandra/service/StorageService.java\r\npatching file src/java/org/apache/cassandra/thrift/CassandraServer.java\r\npatching file src/java/org/apache/cassandra/thrift/ThriftValidation.java\r\npatching file test/system/test_server.py\r\npatching file test/unit/org/apache/cassandra/dht/BoundsTest.java\r\npatching file test/unit/org/apache/cassandra/dht/RangeIntersectionTest.java\r\npatching file test/unit/org/apache/cassandra/dht/RangeTest.java\r\n$\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-13T21:04:38.900+0000","updated":"2010-02-13T21:04:38.900+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12833461","id":"12833461","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"re-attached w/ line endings fixed.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-13T21:43:50.063+0000","updated":"2010-02-13T21:43:50.063+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12833477","id":"12833477","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Thanks for fixing the patch, but I'm sorry...it still doesn't work right.. :( I found a couple of weird things. First, sometimes when I ask for 10, it gives more. Second, if I pass start=\"\" it still doesn't start at the beginning. \r\n\r\nHowever, this doesn't happen every time I start fresh. Maybe it's depedent on the tokens. Here are the tokens for the case I show below: \r\n\r\n INFO 23:38:21,989 Saved Token not found. Using 0njMRYmU9KiXE80d \r\n INFO 23:38:20,112 Saved Token not found. Using I8LW8J6h9UCuz0dC \r\n\r\nThe first token belongs to the node I am attaching the client to.\r\n\r\nThis functionality seems surprisingly complicated. Maybe it would help to write down pseudo-code for the way it should work? I have to admit that I cannot piece it together by reading the comments in your patch.\r\n\r\nHere is a transcript and test: \r\n\r\nFirst run, looks ok: \r\n\r\nip-10-212-87-165$ python test_bug_simple3.py \r\ninsert 10b470f49a7c46bd938d784ca4096b63 \r\ninsert 47f70aacb3e94e10acaf8e86edac7169 \r\ninsert 9a3b7d3b921345bebc4f2bedc1db7c01 \r\ninsert c1c9dab59abd4f4ca33ee79f71a179e9 \r\ninsert cff81b145faf4648ac8ae001973c6c75 \r\ninsert c752d33e5d344312908e5008e6cdae3e \r\ninsert 6e9e32e8b89845bb935d993a9c8bcb13 \r\ninsert c286bf2711bc45c1ab033561112c2313 \r\ninsert 2dad487ddfa94c81b52c8b4d35d3cb5c \r\ninsert 9c62c7dafdb94dfdbdf52b527bdd2b24 \r\n\r\nresult 10b470f49a7c46bd938d784ca4096b63 \r\nresult 2dad487ddfa94c81b52c8b4d35d3cb5c \r\nresult 47f70aacb3e94e10acaf8e86edac7169 \r\nresult 6e9e32e8b89845bb935d993a9c8bcb13 \r\nresult 9a3b7d3b921345bebc4f2bedc1db7c01 \r\nresult 9c62c7dafdb94dfdbdf52b527bdd2b24 \r\nresult c1c9dab59abd4f4ca33ee79f71a179e9 \r\nresult c286bf2711bc45c1ab033561112c2313 \r\nresult c752d33e5d344312908e5008e6cdae3e \r\nresult cff81b145faf4648ac8ae001973c6c75 \r\ntotal_keys 10 \r\n\r\nSecond run, get 18 keys when I asked for 10: \r\n\r\nip-10-212-87-165$ python test_bug_simple3.py \r\ninsert f873d662dccf46c28080a01286e09ed8 \r\ninsert 903776c2f45740389aa52675bf47c7ec \r\ninsert 0e80401a9052405a898d11e5ae874a13 \r\ninsert 398d51ba174b4c9db8c25ca6cd2c9454 \r\ninsert 50f1cd47dd284ee9b9573b4dfce39134 \r\ninsert 20fa43d2365b4dfab9b05a93992315d0 \r\ninsert e009d5b76e8840b784fe6b9b649ae1df \r\ninsert 63497f9d63c74b99a681fa2fc52751ac \r\ninsert 824bbcf997de48a99cad174e9e1f1eec \r\ninsert 01c5a6506f4247068660c20338a03bb3 \r\n\r\nresult 01c5a6506f4247068660c20338a03bb3 \r\nresult 0e80401a9052405a898d11e5ae874a13 \r\nresult 10b470f49a7c46bd938d784ca4096b63 \r\nresult 20fa43d2365b4dfab9b05a93992315d0 \r\nresult 2dad487ddfa94c81b52c8b4d35d3cb5c \r\nresult 398d51ba174b4c9db8c25ca6cd2c9454 \r\nresult 47f70aacb3e94e10acaf8e86edac7169 \r\nresult 50f1cd47dd284ee9b9573b4dfce39134 \r\nresult 63497f9d63c74b99a681fa2fc52751ac \r\nresult 6e9e32e8b89845bb935d993a9c8bcb13 \r\nresult 824bbcf997de48a99cad174e9e1f1eec \r\nresult 903776c2f45740389aa52675bf47c7ec \r\nresult c1c9dab59abd4f4ca33ee79f71a179e9 \r\nresult c286bf2711bc45c1ab033561112c2313 \r\nresult c752d33e5d344312908e5008e6cdae3e \r\nresult cff81b145faf4648ac8ae001973c6c75 \r\nresult e009d5b76e8840b784fe6b9b649ae1df \r\nresult f873d662dccf46c28080a01286e09ed8 \r\ntotal_keys 18 \r\n\r\nThird run, start at \"ca..\" even though I pass start=\"\" and all the previous keys remain: \r\n\r\nip-10-212-87-165$ python test_bug_simple3.py \r\ninsert ca97d7efb63448f8a62d6f7f73044236 \r\ninsert 91363a713b714af88ac2191caeea5351 \r\ninsert 7b6756d0ab8e450b826b1abc7210d524 \r\ninsert e6c6765497af4078b93e1a1470bd3194 \r\ninsert e3457f26754c4e7cb7ef606f98e7bb78 \r\ninsert 99643eb237ea4ca8b50cac4bb4d58edd \r\ninsert ec3e1f81359b4ae08cfed73899934a93 \r\ninsert ae2b990ceb044bf194a879059f823ecf \r\ninsert 2c1494f0ad3d48d2bf4feb33f40cf38e \r\ninsert 0cb1c2e906b64fee89f7729052e0810e \r\n\r\nresult ae2b990ceb044bf194a879059f823ecf \r\nresult c1c9dab59abd4f4ca33ee79f71a179e9 \r\nresult c286bf2711bc45c1ab033561112c2313 \r\nresult c752d33e5d344312908e5008e6cdae3e \r\nresult ca97d7efb63448f8a62d6f7f73044236 \r\nresult cff81b145faf4648ac8ae001973c6c75 \r\nresult e009d5b76e8840b784fe6b9b649ae1df \r\nresult e3457f26754c4e7cb7ef606f98e7bb78 \r\nresult e6c6765497af4078b93e1a1470bd3194 \r\nresult ec3e1f81359b4ae08cfed73899934a93 \r\ntotal_keys 10 \r\nip-10-212-87-165$ \r\n\r\nHere is another run (different tokens):\r\n\r\n INFO 00:04:17,105 Saved Token not found. Using Iw1khrAgM5sd6WnX\r\n INFO 00:04:15,795 Saved Token not found. Using IgLbq912n2xEP99G\r\n\r\nIn this case I don't see the problem where I get back more keys than I asked for, but I don't get the 10 lowest keys in the second request. 10 are returned, but they are not ordered consistently with what I know is in the db.\r\n\r\nFirst run, notice key \"893..\" is inserted:\r\n\r\nip-10-212-87-165$ python test_bug_simple3.py \r\ninsert 7be5d87bc45843cfaffd36fd654aee53\r\ninsert 8ef4727d83474570aa2111bee3929a5f\r\ninsert 9a9a91b6b662430092db0209d63a5c9e\r\ninsert e45afe1f0e364012acd0dead5b75ea13\r\ninsert 10171c87634842aea4f16d46d611c435\r\ninsert 10b6f92ac6a447088a82c4ec13056f1e\r\ninsert c1acbde9ae454ea2819322975322206b\r\ninsert 89352cf117dd4cb9ab935cbb5f230ba0\r\ninsert 0b5d924f04174459969594d6293b9aca\r\ninsert e2471db4d8f445f2b0c36f3b2a5bb650\r\n\r\nresult 0b5d924f04174459969594d6293b9aca\r\nresult 10171c87634842aea4f16d46d611c435\r\nresult 10b6f92ac6a447088a82c4ec13056f1e\r\nresult 7be5d87bc45843cfaffd36fd654aee53\r\nresult 89352cf117dd4cb9ab935cbb5f230ba0\r\nresult 8ef4727d83474570aa2111bee3929a5f\r\nresult 9a9a91b6b662430092db0209d63a5c9e\r\nresult c1acbde9ae454ea2819322975322206b\r\nresult e2471db4d8f445f2b0c36f3b2a5bb650\r\nresult e45afe1f0e364012acd0dead5b75ea13\r\ntotal_keys 10\r\n\r\nSecond run, notice the results start with \"0..\" but \"893..\" is not returned (though \"b2..\" is, and other higher keys):\r\n\r\nip-10-212-87-165$ python test_bug_simple3.py \r\ninsert 85d282dfa03a466eb51d03f4eb5dacd5\r\ninsert a61e7757eaed4ef79fc7bf35f47843f7\r\ninsert 9b9b6e3f22994827b0dddcc16105ff7d\r\ninsert 880b1644636845d8b1c92faf1f6d8484\r\ninsert 5d1d7d7b26ec4540a89c027bccc17e06\r\ninsert 4df05d38950f44b29df604c165e1148f\r\ninsert 0c9f818aa28a47fb832b6a0929b94280\r\ninsert 7e7b829c136046a88b120a4a373d9a6b\r\ninsert b2d497713f9342de85bb31b5c0e69af6\r\ninsert 80e250253f1942aaab2e9b49880918c0\r\n\r\nresult 0b5d924f04174459969594d6293b9aca\r\nresult 0c9f818aa28a47fb832b6a0929b94280\r\nresult 10171c87634842aea4f16d46d611c435\r\nresult 10b6f92ac6a447088a82c4ec13056f1e\r\nresult 4df05d38950f44b29df604c165e1148f\r\nresult a61e7757eaed4ef79fc7bf35f47843f7\r\nresult b2d497713f9342de85bb31b5c0e69af6\r\nresult c1acbde9ae454ea2819322975322206b\r\nresult e2471db4d8f445f2b0c36f3b2a5bb650\r\nresult e45afe1f0e364012acd0dead5b75ea13\r\ntotal_keys 10\r\nip-10-212-87-165$ \r\n\r\nI found another issue with \"nodetool ring\" which might be related to the patch: \r\n\r\n$ sudo bin/nodetool -h localhost ring \r\nException in thread \"main\" java.lang.reflect.UndeclaredThrowableException \r\n        at $Proxy0.getRangeToEndPointMap(Unknown Source) \r\n        at org.apache.cassandra.tools.NodeProbe.getRangeToEndPointMap(NodeProbe.java:151) \r\n        at org.apache.cassandra.tools.NodeCmd.printRing(NodeCmd.java:74) \r\n        at org.apache.cassandra.tools.NodeCmd.main(NodeCmd.java:403) \r\nCaused by: java.rmi.UnmarshalException: error unmarshalling return; nested exception is: \r\n        java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.apache.cassandra.dht.OrderPreservingPartitioner \r\n        at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:173) \r\n        at com.sun.jmx.remote.internal.PRef.invoke(Unknown Source) \r\n        at javax.management.remote.rmi.RMIConnectionImpl_Stub.invoke(Unknown Source) \r\n        at javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.invoke(RMIConnector.java:993) \r\n        at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288) \r\n        ... 4 more \r\nCaused by: java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: org.apache.cassandra.dht.OrderPreservingPartitioner \r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1333) \r\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) \r\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) \r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) \r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) \r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) \r\n        at java.util.HashMap.readObject(HashMap.java:1029) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) \r\n        at java.lang.reflect.Method.invoke(Method.java:597) \r\n        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) \r\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) \r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) \r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) \r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) \r\n        at sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:306) \r\n        at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:155) \r\n        ... 8 more \r\nCaused by: java.io.NotSerializableException: org.apache.cassandra.dht.OrderPreservingPartitioner \r\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) \r\n        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) \r\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) \r\n        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) \r\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) \r\n        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) \r\n        at java.util.HashMap.writeObject(HashMap.java:1000) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) \r\n        at java.lang.reflect.Method.invoke(Method.java:597) \r\n        at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) \r\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) \r\n        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) \r\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) \r\n        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) \r\n        at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:274) \r\n        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:315) \r\n        at sun.rmi.transport.Transport$1.run(Transport.java:159) \r\n        at java.security.AccessController.doPrivileged(Native Method) \r\n        at sun.rmi.transport.Transport.serviceCall(Transport.java:155) \r\n        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535) \r\n        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790) \r\n        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649) \r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) \r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) \r\n        at java.lang.Thread.run(Thread.java:619) \r\n$ \r\n\r\n\r\nHere is the test I ran above: \r\n\r\nimport uuid \r\n\r\nfrom thrift import Thrift \r\nfrom thrift.transport import TTransport \r\nfrom thrift.transport import TSocket \r\nfrom thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated \r\n\r\nimport sys \r\nsys.path.insert(0,'/usr/local/cassandra/interface/thrift/gen-py') \r\n\r\nfrom cassandra import Cassandra \r\nfrom cassandra.ttypes import * \r\n\r\nsocket = TSocket.TSocket(\"10.212.87.165\", 9160) \r\ntransport = TTransport.TBufferedTransport(socket) \r\nprotocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport) \r\nclient = Cassandra.Client(protocol) \r\n\r\ntransport.open() \r\n\r\nks = \"Keyspace1\" \r\ncf = \"Super1\" \r\npath = ColumnPath(cf, \"foo\", \"is\") \r\nvalue = \"cool\" \r\n\r\nfor i in xrange(10): \r\n    key = uuid.uuid4().hex \r\n    print \"insert\", key \r\n    client.insert(ks, key, path, value, 0, ConsistencyLevel.ONE) \r\n\r\nprint \r\n\r\nparent = ColumnParent(column_family=cf) \r\nslice_range = SliceRange(start=\"key\", finish=\"key\") \r\npredicate = SlicePredicate(slice_range=slice_range) \r\n\r\ntotal_keys = 0 \r\n\r\nresult = client.get_range_slice(ks, parent, predicate, \"\", \"\", 10, ConsistencyLevel.ONE) \r\nfor row in result: \r\n    total_keys += 1 \r\n    print \"result\", row.key \r\n\r\nprint \"total_keys\", total_keys \r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-14T00:12:06.267+0000","updated":"2010-02-14T00:12:06.267+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12833889","id":"12833889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Yes, it's more complicated than it looks. :)\r\n\r\nAttached version fixes regression w/ result set size, and also start key when it falls into a wrapped node range.\r\n\r\nThere's also a ton of debug logging if you turn that on in log4j, btw.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-15T17:03:44.340+0000","updated":"2010-02-15T17:03:44.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12834016","id":"12834016","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"body":"Victory!! I think this patch works. :)\r\n\r\nOne last possible issue: if I remove keys, then do a get_range_slice(), they still show up. A get() on a removed key will return a \"not found\" exception. Should get_range_slice() be aware of the removal? I'm guessing this is an issue about not properly processing the \"tombstone\".\r\n\r\nDue to the complexity of get_range_slice(), maybe it's not worth processing the tombstone?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bjc","name":"bjc","emailAddress":"jackculpepper at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"bjc","active":true},"created":"2010-02-15T23:18:12.501+0000","updated":"2010-02-15T23:18:12.501+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12834042","id":"12834042","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"right, for get_range_slice we changed the contract from get_key_range -- it can't tell the difference between \"this row has other data, but not data in the columns you requested\" and \"this row has been deleted entirely\" w/o a relatively expensive query, so we decided to just return the slice as-is.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-16T01:38:22.228+0000","updated":"2010-02-16T01:38:22.228+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12834053","id":"12834053","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"fix committed to trunk.  backport to 0.5 pending.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-16T02:48:32.191+0000","updated":"2010-02-16T02:48:32.191+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12834886","id":"12834886","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"body":"Integrated in Cassandra #357 (See [http://hudson.zones.apache.org/hudson/job/Cassandra/357/])\r\n    ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"created":"2010-02-17T17:54:46.278+0000","updated":"2010-02-17T17:54:46.278+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12836603","id":"12836603","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"body":"Is this fix going to be backported to 0.5? (any ETA?)\r\nThanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"created":"2010-02-22T12:46:34.786+0000","updated":"2010-02-22T12:46:34.786+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12836612","id":"12836612","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"Yes, that's at the top of my list.  (I've been busy with PyCon.)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-22T13:08:49.808+0000","updated":"2010-02-22T13:08:49.808+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12836616","id":"12836616","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"body":"Great, thank you. The testcases for the current fix seem thorough, but if it helps I can do the testing with my own data as soon as a new patch is available.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"created":"2010-02-22T13:20:59.417+0000","updated":"2010-02-22T13:20:59.417+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12836886","id":"12836886","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"attached backport of fix to 0.5.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-22T20:38:23.923+0000","updated":"2010-02-22T20:38:23.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12837242","id":"12837242","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"body":"+1 to 781-backport.txt, it solved the problem in my cluster. Thank you!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herchu","name":"herchu","emailAddress":"hbadenes at ar dot ibm dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hernan Badenes","active":true},"created":"2010-02-23T14:04:09.545+0000","updated":"2010-02-23T14:04:09.545+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12455694/comment/12837316","id":"12837316","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"body":"committed to 0.5, thanks for testing.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jbellis","name":"jbellis","emailAddress":"jbellis at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jbellis&avatarId=18380","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jbellis&avatarId=18380","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jbellis&avatarId=18380","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jbellis&avatarId=18380"},"displayName":"Jonathan Ellis","active":true},"created":"2010-02-23T17:06:05.366+0000","updated":"2010-02-23T17:06:05.366+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/CASSANDRA-781/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0g11b:"}}