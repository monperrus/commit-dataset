{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12615162","self":"https://issues.apache.org/jira/rest/api/latest/issue/12615162","key":"LUCENE-4547","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310110","id":"12310110","key":"LUCENE","name":"Lucene - Core","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310110&avatarId=10061","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310110&avatarId=10061","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310110&avatarId=10061","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310110&avatarId=10061"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10150","id":"10150","description":"Lucene-related projects","name":"Lucene"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323899","id":"12323899","description":"Major release after 4.1","name":"4.2","archived":false,"released":true,"releaseDate":"2013-03-11"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12321663","id":"12321663","description":"Current trunk","name":"Trunk","archived":false,"released":false}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2012-11-15 21:16:55.778","customfield_12312323":null,"customfield_12310420":"255757","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_7994320197_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2013-02-08T03:30:59.377+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-4547/watchers","watchCount":10,"isWatching":false},"created":"2012-11-07T14:52:19.214+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[],"issuelinks":[{"id":"12360091","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12360091","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"outwardIssue":{"id":"12608262","key":"SOLR-3855","self":"https://issues.apache.org/jira/rest/api/2/issue/12608262","fields":{"summary":"DocValues support","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12363975","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363975","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12554058","key":"LUCENE-4033","self":"https://issues.apache.org/jira/rest/api/2/issue/12554058","fields":{"summary":"Sort api problems","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12363505","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363505","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12629122","key":"LUCENE-4717","self":"https://issues.apache.org/jira/rest/api/2/issue/12629122","fields":{"summary":"Lucene40's DocValues (sometimes?) have a bogus extra ordinal","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12363976","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363976","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12540301","key":"LUCENE-3729","self":"https://issues.apache.org/jira/rest/api/2/issue/12540301","fields":{"summary":"Allow using FST to hold terms data in DocValues.BYTES_*_SORTED","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12363974","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363974","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12554088","key":"LUCENE-4035","self":"https://issues.apache.org/jira/rest/api/2/issue/12554088","fields":{"summary":"Collation via docvalues","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12363026","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12363026","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"outwardIssue":{"id":"12614886","key":"LUCENE-4540","self":"https://issues.apache.org/jira/rest/api/2/issue/12614886","fields":{"summary":"Allow packed ints norms","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}},{"id":"12375063","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12375063","type":{"id":"12310050","name":"Regression","inward":"is broken by","outward":"breaks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310050"},"outwardIssue":{"id":"12667950","key":"SOLR-5231","self":"https://issues.apache.org/jira/rest/api/2/issue/12667950","fields":{"summary":"When a boolean field is missing from a doc it is sometimes treated as \"true\" by the \"if\" function (based on other docs in segment?)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-09-11T01:34:35.617+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[],"timeoriginalestimate":null,"description":"I tried to write a test to sanity check LUCENE-4536 (first running against svn revision 1406416, before the change).\r\n\r\nBut i found docvalues is already broken here for large indexes that have a PackedLongDocValues field:\r\n\r\n{code}\r\nfinal int numDocs = 500000000;\r\nfor (int i = 0; i < numDocs; ++i) {\r\n  if (i == 0) {\r\n    field.setLongValue(0L); // force > 32bit deltas\r\n  } else {\r\n    field.setLongValue(1<<33L); \r\n  }\r\n  w.addDocument(doc);\r\n}\r\nw.forceMerge(1);\r\nw.close();\r\ndir.close(); // checkindex\r\n{code}\r\n\r\n{noformat}\r\n[junit4:junit4]   2> WARNING: Uncaught exception in thread: Thread[Lucene Merge Thread #0,6,TGRP-Test2GBDocValues]\r\n[junit4:junit4]   2> org.apache.lucene.index.MergePolicy$MergeException: java.lang.ArrayIndexOutOfBoundsException: -65536\r\n[junit4:junit4]   2> \tat __randomizedtesting.SeedInfo.seed([5DC54DB14FA5979]:0)\r\n[junit4:junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:535)\r\n[junit4:junit4]   2> \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:508)\r\n[junit4:junit4]   2> Caused by: java.lang.ArrayIndexOutOfBoundsException: -65536\r\n[junit4:junit4]   2> \tat org.apache.lucene.util.ByteBlockPool.deref(ByteBlockPool.java:305)\r\n[junit4:junit4]   2> \tat org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedBytesWriterBase.set(FixedStraightBytesImpl.java:115)\r\n[junit4:junit4]   2> \tat org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.writePackedInts(PackedIntValues.java:109)\r\n[junit4:junit4]   2> \tat org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.finish(PackedIntValues.java:80)\r\n[junit4:junit4]   2> \tat org.apache.lucene.codecs.DocValuesConsumer.merge(DocValuesConsumer.java:130)\r\n[junit4:junit4]   2> \tat org.apache.lucene.codecs.PerDocConsumer.merge(PerDocConsumer.java:65)\r\n{noformat}\r\n\r\n","customfield_10010":null,"timetracking":{},"customfield_12310120":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10121","value":"New","id":"10121"}],"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"90551","summary":"DocValues field broken on large indexes","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":42,"total":42,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13492401","id":"13492401","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Here was my initial test, just screwing around.\r\n\r\nI ran with 'ant test -Dtestcase=Test2GBDocValues -Dtests.nightly=true -Dtests.heapsize=5G'","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-07T14:54:03.736+0000","updated":"2012-11-07T14:54:03.736+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13492405","id":"13492405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"There is even a out-of-coffee bug in the test, its only using like 2 bits per value :)\r\nSo this is really even worse. \r\n\r\nI'm not sure we should be using ByteBlockPool etc here. I think it shouldnt be used outside of the indexer.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-07T15:00:38.989+0000","updated":"2012-11-07T15:00:38.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13492411","id":"13492411","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"editing description: I think it affects more than PackedIntValues actually?\r\n\r\nI think the bug is in how FixedStraightBytesImpl uses byteblockpool.\r\n\r\nSo this means the problem should be way more widespread: e.g. if you have lots of documents in general I think you are fucked (as norms should trip it too).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-07T15:07:29.925+0000","updated":"2012-11-07T15:07:29.925+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13492421","id":"13492421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Another bug is that I had to pass tests.heapsize at all.\r\n\r\nI think its bad that docvalues gobbles up so much ram when merging.\r\nCant we merge this stuff from disk?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-07T15:24:36.864+0000","updated":"2012-11-07T15:24:36.864+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498345","id":"13498345","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"I'm having a look at the branch, and it looks great! I like the fact that there are less types and that values are buffered into memory so that the doc values format can make decisions depending on the number of distinct values, ... Still, I have some questions on what you plan to do with this branch:\r\n - do you plan to use this branch to:\r\n   - fix other issues such as LUCENE-3862?\r\n   - merge the FieldCache / FunctionValues / DocValues.Source APIs?\r\n - are you going to remove DocValues.Type.FLOAT_*?\r\n - are SimpleDVConsumer and SimpleDocValuesFormat going to replace PerDocConsumer and DocValuesFormat?\r\n - are you going to remove hasArray/getArray?\r\n - will there still be a direct=true|false option at load-time or will it depend on the format impl (potentially with a PerFieldPerDocProducer similarly to the postings formats)?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2012-11-15T21:16:55.778+0000","updated":"2012-11-15T21:16:55.778+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498359","id":"13498359","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"These are hard questions. My personal goal here for this prototype (currently SimpleText only!) was to:\r\n\r\n1. Making merging use (significantly) less RAM, to fix this bug.\r\n2. Make it easier to write docvalues codecs, to encourage innovations (e.g. FST impls, etc etc)\r\n3. Simplify the types to make it easier on the user.\r\n\r\nthe consumer api I think is simpler (part of #2), but I would like to (in the future) simplify the producer API too.\r\nI'm not sure if we should do it here though? anyway we can think about the issues you raised one by one and do them separately on their own issues.\r\n\r\n{quote}\r\nfix other issues such as LUCENE-3862?\r\n{quote}\r\n\r\nIts my opinion we should do this sooner than later.\r\n\r\n{quote}\r\nmerge the FieldCache / FunctionValues / DocValues.Source APIs?\r\n{quote}\r\n\r\nThis really needs to be addressed, but I think not here. Its horrific that algorithms like grouping, sorting, and maybe faceting have to be duplicated for 2 different things (fieldcache and docvalues).\r\n\r\n{quote}\r\nare you going to remove DocValues.Type.FLOAT_*?\r\n{quote}\r\n\r\nI think the 3 types we have here are enough. Someone can do a float or double type \"on top of\" the \"number\" type we have.\r\nLucene is already doing this today: look at norms. I think lucene should just have a number type that stores bits.\r\n\r\n{quote}\r\nare SimpleDVConsumer and SimpleDocValuesFormat going to replace PerDocConsumer and DocValuesFormat?\r\n{quote}\r\n\r\nThis is the idea, once we are happy with the APIs we would implement the 4.0 ones with these apis. \r\n\r\n{quote}\r\nare you going to remove hasArray/getArray?\r\n{quote}\r\n\r\nI don't care about this. I am unsure similarity impls should be calling this though, definitely at least\r\nit would be better for them to fall-back: I just cant bring myself to fix it until LUCENE-3862 is fixed :)\r\n\r\n{quote}\r\nwill there still be a direct=true|false option at load-time or will it depend on the format impl (potentially with a PerFieldPerDocProducer similarly to the postings formats)?\r\n{quote}\r\n\r\nI don't want to change this in the branch. Personally i feel like a codec/segmentreader/etc should generally only manage\r\ndirect, producer exposing the same \"stats\" (minimum, maximum, fixed, whatever) that the consumer apis get (which will also make merging more efficient!) default source impl can be something nice, read the direct impl into a packed ints,\r\nand so on. Codec could override to e.g. just slurp in their on-disk packed ints directly. So codec still has control\r\nof the in-memory RAM representation, i think this is important. But i think codec and segmentreader should somehow not\r\nbe in control of caching: this should be elsewhere (FieldCache.DOCVALUES.xxx????)...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-15T21:35:03.241+0000","updated":"2012-11-15T21:35:03.241+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498754","id":"13498754","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"About the current SimpleDVConsumer API: {{NumericDocValuesConsumer addNumericField(FieldInfo field, long minValue, long maxValue)}} only allows for compression based on the width of the range but there are many other ways to compress values (maybe there are very few unique values, maybe the last 3 bits are always the same, etc...). Now that we buffer values into memory, what would you think of changing the API to pass an iterable of longs instead so that the doc values format can make better decisions?\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2012-11-16T12:03:54.746+0000","updated":"2012-11-16T12:03:54.746+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498758","id":"13498758","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I like that idea!  So codec could iterate once, gathering whatever stats it needs, and then iterate again to do the writing.  Should we not include the long min/maxValues then...?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-11-16T12:17:24.110+0000","updated":"2012-11-16T12:17:24.110+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498819","id":"13498819","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"bq. So codec could iterate once, gathering whatever stats it needs, and then iterate again to do the writing.\r\n\r\nYep.\r\n\r\nbq. Should we not include the long min/maxValues then...?\r\n\r\nI think so? And we could do something similar with {{addBinaryField}} and {{addSortedField}}. I think there are many possible optimizations based on how much lengths vary, whether bytes refs share prefixes or not, ...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2012-11-16T13:36:47.370+0000","updated":"2012-11-16T13:36:47.370+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498837","id":"13498837","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"FYI - I just added simple numeric & binary impls for Lucene41 test demo passes for Lucene41 execpt of the sorted test (no impls yet)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-16T14:47:20.264+0000","updated":"2012-11-16T14:47:20.264+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498838","id":"13498838","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"What would the flush/merge api look like?\r\nWould it get simple or more complicated?\r\nCould we still require certain stats from the Producer, so that we can have a default, efficient in-RAM Source impl?\r\n\r\n{quote}\r\nI think there are many possible optimizations based on how much lengths vary, whether bytes refs share prefixes or not, ...\r\n{quote}\r\n\r\nmaybe, but arguably we should do the simplest possible thing that can work given the codecs we have today. When\r\ndesigning these apis, to me these are the only ones that exist...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-16T14:48:37.146+0000","updated":"2012-11-16T14:48:37.146+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498877","id":"13498877","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"The API could look like\r\n{code}\r\nclass DocValuesConsumer {\r\n\r\n  // add all values in a single call\r\n  void addNumericField(FieldInfo field,  Collection<Long> values); // values.size() == numDocs\r\n  void addBinaryField(FieldInfo field, Collection<BytesRef> values); // values.size() == numDocs\r\n  void addSortedField(FieldInfo field, Collection<BytesRef> ordToValue, Collection<Long> docToOrd); // docToOrd.size() == numDocs, ordToValue.size() == valueCount\r\n\r\n  // same merge API\r\n\r\n}\r\n{code}\r\nI don't see why merging would be more complicated but maybe I'm missing something? The default merge impls would need to use lazy collection impls in order to remain memory-efficient.\r\n\r\nbq. Could we still require certain stats from the Producer, so that we can have a default, efficient in-RAM Source impl?\r\n\r\nWhy would we need stats to make a Source impl efficient?\r\n\r\nbq. maybe, but arguably we should do the simplest possible thing that can work given the codecs we have today\r\n\r\nTo me it looks as simple as the current API.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2012-11-16T16:01:46.967+0000","updated":"2012-11-16T16:01:46.967+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498890","id":"13498890","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"1. We don't need to be passing numDocs today: this should be removed because its duplicated with SegmentWriteState\r\n\r\n2. Merging becomes more complex because the api requires this collection view: today it does not.\r\n\r\n3. We need stats to make the Source impl efficient so we can e.g. use packed integers for Number type. Bye bye arrays.\r\n\r\nI don't think we should make anything more flexible than necessary until things like the producer api are sorted out.\r\nOtherwise its difficult to see the tradeoffs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-16T16:24:04.493+0000","updated":"2012-11-16T16:24:04.493+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13498953","id":"13498953","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"bq. I don't think we should make anything more flexible than necessary until things like the producer api are sorted out.\r\n\r\nI can wait for the producer API. I just wanted to point out that by exposing all the values at once, the DocValuesFormat could make more clever choices than by just exposing the width of the range of values.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2012-11-16T17:36:12.988+0000","updated":"2012-11-16T17:36:12.988+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13499020","id":"13499020","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I committed an initial attempt at a simpler producer API ... it's rough!!  But at least TestDemoDocValue passes w/ SimpleText.\r\n\r\nI moved SimpleText's \"loaded into RAM\" wrappers up into SimpleDVProducer; this way a codec only must impl the direct source and can impl in-RAM source if it wants to.\r\n\r\nSegmentCoreReaders now does the caching of in-RAM sources.\r\n\r\nSimon I temporarily disabled the Lucene41DV producer ... I'll go get it working too ... ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-11-16T19:00:29.459+0000","updated":"2012-11-16T19:00:29.459+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500177","id":"13500177","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"hey folks,\r\n\r\nI looked at the branch and I would want to suggest we move a little slower here. we are doing too many things at once. Like I really don't like the trend to make FieldCache the single source for caching. FieldCache has many problems in my opininon like is uses this DEFAULT singleton, has a single way of how things are cached per reader some users might want to use different access to DV like in ES we don't use FieldCache at all for many reasons.I think we are going into the right direction here but exposing everything through FC is a no-go IMO. I do see why we should merge the interfaces and expose un-inverted fields via the new DV interface - nice! but hiding it behind FC is no good. \r\nI also don't like the way how \"in-ram\" DV are exposed. I don't think we should have newRAMInstance() on the interface. Lets keep the interface clean and don't mix in how it is represented. I'd rather vote for dedicated producers or SimpleDocValuesProducer#getNumericDocValues(boolean inMemory). Then we can still do caching on top. The producer should really be simple and shouldn't do caching. We can also separate the default in-memory impls in a simple helper class with methods like static NumericDocValues load(NumericDocValues directDocValues)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-19T11:53:51.362+0000","updated":"2012-11-19T11:53:51.362+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500205","id":"13500205","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"If you don't want like FieldCache in ES, then use something else.\r\n\r\nIts really broken that things like grouping and faceting are coded to a separate API. This makes DV unsuccessful. If we arent going to fix DocValues and Faceting APIs then perhaps we shoudl consider removing DocValues completely from lucene.\r\n\r\nPlease try to give the branch some time. I committed some work last night very late and got tired and went to sleep. Its not \"ready\" and i'm not threatening to commit to trunk.\r\n\r\nI created this branch to develop publicly. I don't have to do that: I can develop privately instead and not deal with complaints about my every step before I even say things are ready. I just thought it would make it easier for other people to help.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-19T12:52:08.036+0000","updated":"2012-11-19T12:52:08.036+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500213","id":"13500213","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"bq. Its really broken that things like grouping and faceting are coded to a separate API. This makes DV unsuccessful. \r\n\r\ndon't get me wrong I think this adds a lot of value. BUT, if the only way to get a DV instance that is cached is FC then this entire thing is inconsistent. We don't ask people to cache TermEnum which can be heavy if you use MemoryPostings for instance. We neither do for StoredFields nor do we have a caching layer that is not used by default. All I am arguing for is that if somebody wants to use DV it should be simple to do so. The distinction between in-memory and on disk should not be in FC.\r\n\r\nbq.  If we arent going to fix DocValues and Faceting APIs then perhaps we shoudl consider removing DocValues completely from lucene.\r\n\r\nyou mean remove fieldcache?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-19T13:19:58.781+0000","updated":"2012-11-19T13:19:58.781+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500377","id":"13500377","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"Just an idea though... while we are on it should we maybe add a 4th type that allows multiple values. that way we can just pull DV from any field and uninvert if needed?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-19T17:00:55.636+0000","updated":"2012-11-19T17:00:55.636+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500413","id":"13500413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"body":"bq. while we are on it should we maybe add a 4th type that allows multiple values\r\n\r\n+1. That might allow using DVs for faceted search.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=shaie","name":"shaie","emailAddress":"serera at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Shai Erera","active":true},"created":"2012-11-19T17:27:30.589+0000","updated":"2012-11-19T17:27:30.589+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13500418","id":"13500418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"I don't think this is necessary. Someone can do this \"on top\" of a binary impl themselves.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-19T17:31:05.910+0000","updated":"2012-11-19T17:31:05.910+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501241","id":"13501241","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"Hey folks,\r\n\r\nI thought about the IN-RAM vs. ON-Disk distinction we have in DV at this point and how we distinguish API wise. IMO calling $TypeDocValues#newRAMInstance() with different behavior if the instance is already a ram instance is kind of ugly API wise as well as having a binary distinction here might not be sufficient. From my point of view it would logically make most sense to allow the codec to decide if it is in ram or not or if only parts of the values are in memory like in the sorted case where you might wanna use a FST holding a subset of the values. Now giving the control entirely to the code might not be practical. Think about merging where you really don't want to load into memory you should be able to tell don't pull into memory. We can do this already today if we pass in IOContext. Yet, IOContext is the wrong level since its a reader wide setting and might not be true for all fields in the case we open a reader for handling searches. Yet, the idea of IOContext is basically to pass information about the access pattern where merge means sequential access. We might want to use something similar for docvalues that allows us to leave most of the decisions to the codec but if a user decides he really needs stuff in memory he can still pass in something like AccessPattern.SEQUENTIAL and load the values into an auxiliary datastructure. This would allow the codec to optimize under the hood but not making any promises if it's in ram or on disk if AccessPattern.DEFAULT is passed. \r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-20T15:48:01.939+0000","updated":"2012-11-20T15:48:01.939+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501271","id":"13501271","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I think multi-valued case could be compelling, but we should probably do later / outside this branch.  EG FieldCache already supports this (DocTermOrds).  It's true that app could do this on top of Binary DV, but I think it's useful enough that a real impl would be worthwhile (eg for facets).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-11-20T16:19:44.538+0000","updated":"2012-11-20T16:19:44.538+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501276","id":"13501276","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"I think letting the codec control in-RAM vs on-disk is a great idea!\r\n\r\nWhy not let merging load values into RAM if your DVFormat is a RAM-backed impl?  The codec can always override merging if it wants to ...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-11-20T16:23:47.340+0000","updated":"2012-11-20T16:23:47.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501334","id":"13501334","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"bq. I think letting the codec control in-RAM vs on-disk is a great idea!\r\nactually that is not what I was saying and I strongly discourage that we require people to make ram vs. on disk decisions ahead of time. Most of those decisions need to be made dynamically based on ram availability and growth.\r\n\r\nwhat I was saying is that the user should provide its intend so the codec can optimize.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-20T17:51:54.879+0000","updated":"2012-11-20T17:51:54.879+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501370","id":"13501370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"{quote}\r\nbq. I think letting the codec control in-RAM vs on-disk is a great idea!\r\nactually that is not what I was saying and I strongly discourage that we require people to make ram vs. on disk decisions ahead of time.\r\n{quote}\r\n\r\nI think this is actually a clean way to do it, and it matches what we\r\ndo with other codec parts.  Eg with postings you pick MemoryPF if you\r\nhave the free RAM and want fast lookups for that field, else you pick\r\nan on-disk postings format.\r\n\r\nbq. Most of those decisions need to be made dynamically based on ram availability and growth.\r\n\r\nI think making dynamic decisions based on ram availability and growth\r\nis a more expert use case; eg in Lucene today we don't give you that:\r\nDeleted docs, norms, field cache entries, doc values (if you sort by\r\nthem), terms index are all loaded into RAM.  So the only control users\r\nhave now is which fields they index/sort on...\r\n\r\nIf we give control to the codec over whether the DV format is in RAM\r\nor on disk or something in between (like the terms index), and we make\r\na PerFieldDVFormat so you can easily switch impls by field, then users\r\ncan make the decisions themselves, field by field.\r\n\r\nIf a given field will be used for sorting or faceting, they can use\r\nthe fast RAM-based format, but if they are tight on RAM and have lots\r\nof scoring factors, maybe they use the disk-based impl for those fields.\r\n\r\nIf an expert app really need to pick & choose ram vs disk dynamically,\r\ndepending on how many other indices are open and how much RAM they are\r\nusing, etc., they can always make a custom DV format ...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-11-20T18:43:13.318+0000","updated":"2012-11-20T18:43:13.318+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501436","id":"13501436","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"bq. If an expert app really need to pick & choose ram vs disk dynamically, depending on how many other indices are open and how much RAM they are using, etc., they can always make a custom DV format ...\r\n\r\nwhat I am worried about is the lack of communication between the app and the codec. something like this is going to be a major hassle. all I am asking about is to pass in \"hints\" to the codec what I need at a certain point per field. We can't do this and I think we shouldn't allow this. its an encoding / decoding layer and it should be simple. pushing what you call \"experts\" to write their own codecs is a major trap I think. writing a codec is last resort and causes major trouble for non-lucene devs IMO. This is expertexpert :)\r\n\r\nI really like the idea of perfieldDV and I think we should do it. I am just not a big fan of making up-front decisions for this stuff when it comes to on-disk vs. ram. PostingsFormat is a different story, the on disk (low ram useage) have such a perf characteristics that you very unlikely need something else useing lots of ram. For sorting, grouping or scoring you will certainly need that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-20T20:11:35.293+0000","updated":"2012-11-20T20:11:35.293+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501447","id":"13501447","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"one way of merging the two approaches would be a simple boolean that forces on-disk access. that way we can solve the following problems:\r\n\r\n * default merge impls. a format doesn't need to override merge if its an in-ram by default impl\r\n * people can build auxiliary structures on top without worrying about ram\r\n * leave decisions to the codec what in-memory structure or on-disk structure it uses by default\r\n\r\nthis way we can keep the api clean and support expert users. We can even make this package private so that \"normal\" users won't see it?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-20T20:33:30.781+0000","updated":"2012-11-20T20:33:30.781+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501451","id":"13501451","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"This is sounding too complicated. \r\nI think it sounds ok to remove the distinction of ram/on-disk and just have codec.\r\nIf someone wants to do expert stuff in their codec thats fine, but we don't need it in our impls or abstract APIS.\r\n\r\nLets start with just getting the basics working here and the integration with the rest of lucene simple.\r\n\r\nToday (in trunk) on-disk access is a pipe dream (thus, this issue) because the codec api is responsible for too much.\r\n\r\nExpert users and flexibility should be our last priority.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-20T20:45:24.668+0000","updated":"2012-11-20T20:45:24.668+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501466","id":"13501466","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"body":"bq. This is sounding too complicated. \r\na single boolean is too complicated? all I ask for is a way to prevent loading into ram if not necessary. We had this in 4.0 and I think we should make this work in 4.1 too. remember this is a different use-case than postings. I really don't think I ask for much here. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=simonw","name":"simonw","emailAddress":"simonw at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Simon Willnauer","active":true},"created":"2012-11-20T21:10:32.828+0000","updated":"2012-11-20T21:10:47.865+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13501569","id":"13501569","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"{quote}\r\na single boolean is too complicated? \r\n{quote}\r\n\r\nI think it is, I feel like it really confuses the API and makes writing codecs harder.\r\n\r\nI think it would be better if the codec impl determined this, just like MemoryPostings and so on.\r\nSo I'd rather have Per-field dv wrapper that configures this.\r\n\r\nFor example someone would use a different implementation for their solr __version field than they\r\nwould use for a scoring factor, and maybe a different implementation for a sort field than a faceting one.\r\n\r\nI don't think there is a use case to be able to access a single field's values both from RAM and on disk,\r\nand for the codec to have to deal with that. It makes things currently very complicated.\r\n\r\n{quote}\r\nWe had this in 4.0 and I think we should make this work in 4.1 too.\r\n{quote}\r\n\r\nI don't think thats necessarily true. In 4.0 the one DV impl we had could do a lot, but the codec API is\r\nvery difficult. I actually contributed to a lot of the codec apis in Lucene, and as a committer I was unable\r\nto figure out how to write a working DV impl to this api. I think this says a lot.\r\n\r\nI'd rather have a simpler codec API, that enables innovation so that we can see cool shit in the future,\r\nlike implementations geared at sorting and faceting that use less RAM, and so on.\r\n\r\nIf someone really needs more fine-grained control than per-field codec API, then there are other ways to achieve\r\nthat: FileSwitchDirectory, adding such APIs to their own codec, etc. But I'm not sure its mainstream and should\r\nbe required by all codecs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-20T23:17:49.613+0000","updated":"2012-11-20T23:17:49.613+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13505830","id":"13505830","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"body":"I just got an error at search time fetching DocValues in 4.0.0:\r\n{noformat}\r\nSEVERE: null:java.lang.ArrayIndexOutOfBoundsException\r\n        at org.apache.lucene.util.PagedBytes$Reader.fillSlice(PagedBytes.java:97)\r\n        at org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource.getBytes(VarStraightBytesImpl.java:273)\r\n{noformat}\r\nI pass in a scratch BytesRef, and give a docId local to the segment.\r\n\r\nCould it be related to this issue?  This bug is freaking me out a bit as I may be forced to abandon DocValues.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dsmiley","name":"dsmiley","emailAddress":"dsmiley at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=dsmiley&avatarId=10110","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dsmiley&avatarId=10110","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dsmiley&avatarId=10110","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dsmiley&avatarId=10110"},"displayName":"David Smiley","active":true},"created":"2012-11-28T19:38:40.509+0000","updated":"2012-11-28T19:38:40.509+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13505878","id":"13505878","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"David: I'm not sure. the problem I opened this issue for actually relates to things like merging.\r\n\r\nCan you do a manual bounds check, as docvalues at read time doesn't have explicit checks (IndexOutOfBounds is expected/best effort if you pass a wrong docid):\r\n{code}\r\n    if (docID < 0 || docID >= reader.maxDoc())    \r\n{code}\r\n\r\nOtherwise if thats not the problem, do you have a test or something you could upload to an issue?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2012-11-28T20:43:35.218+0000","updated":"2012-11-28T20:43:35.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13510456","id":"13510456","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"body":"Just a quick recap on where things stand on the branch:\r\n\r\n  * We have the DV 2.0 API, shadowing DV 1.0 API.\r\n\r\n  * We have one codec (SimpleText) that implements it, passes tests\r\n\r\n  * CheckIndex does basic tests of DV 2.0, and we also have\r\n    TestDemoDocValue, but nothing else is cutover yet.\r\n\r\n  * Lucene41 codec's impl is I think close but was failing some tests\r\n    (not sure why yet)\r\n\r\n  * We have a MemoryDV but it's very RAM inefficient now\r\n\r\n  * We have Norms 2.0 API too, shadowing current norms, and only\r\n    SimpleText implements it (but should be easy to get Lucene41 to\r\n    impl it too).\r\n\r\n  * We need to cut over all uses/tests of DV 1.0 / norms 1.0 and then\r\n    remove DV/norms 1.0 shadow code.\r\n\r\n  * There are still tons and tons of nocommits ...\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikemccand","name":"mikemccand","emailAddress":"lucene at mikemccandless dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Michael McCandless","active":true},"created":"2012-12-05T13:01:28.627+0000","updated":"2012-12-05T13:01:28.627+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13572034","id":"13572034","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"body":"Applyable patch to trunk r1442822.\r\n\r\nI think this is close: jenkins-blasted, benchmarked, beefed up tests and added many new ones, several codecs with different tradeoffs, per-field configuration, 4.0 file format compat, more efficient 4.2 format, and so on.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rcmuir","name":"rcmuir","emailAddress":"rcmuir at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=rcmuir&avatarId=10150","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rcmuir&avatarId=10150","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rcmuir&avatarId=10150","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rcmuir&avatarId=10150"},"displayName":"Robert Muir","active":true},"created":"2013-02-06T01:30:25.630+0000","updated":"2013-02-06T01:30:25.630+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13572471","id":"13572471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"Big +1!\r\n\r\nI especially like the fact that doc values\r\n - now use the same interface as FieldCache,\r\n - can be configured on a per-field basis thanks to a SPI,\r\n - are first buffered in memory (with RAM accounting) so that the codec has more opportunities to perform optimizations.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2013-02-06T15:04:31.175+0000","updated":"2013-02-06T15:04:31.175+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13573944","id":"13573944","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=commit-tag-bot","name":"commit-tag-bot","emailAddress":"root-jira-commit_tag_bot at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=commit-tag-bot&avatarId=16176","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=commit-tag-bot&avatarId=16176","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=commit-tag-bot&avatarId=16176","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=commit-tag-bot&avatarId=16176"},"displayName":"Commit Tag Bot","active":true},"body":"[trunk commit] Robert Muir\r\nhttp://svn.apache.org/viewvc?view=revision&revision=1443717\r\n\r\nLUCENE-4547: DocValues improvements\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=commit-tag-bot","name":"commit-tag-bot","emailAddress":"root-jira-commit_tag_bot at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=commit-tag-bot&avatarId=16176","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=commit-tag-bot&avatarId=16176","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=commit-tag-bot&avatarId=16176","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=commit-tag-bot&avatarId=16176"},"displayName":"Commit Tag Bot","active":true},"created":"2013-02-07T21:22:14.706+0000","updated":"2013-02-07T21:22:14.706+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13574227","id":"13574227","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=commit-tag-bot","name":"commit-tag-bot","emailAddress":"root-jira-commit_tag_bot at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=commit-tag-bot&avatarId=16176","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=commit-tag-bot&avatarId=16176","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=commit-tag-bot&avatarId=16176","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=commit-tag-bot&avatarId=16176"},"displayName":"Commit Tag Bot","active":true},"body":"[branch_4x commit] Robert Muir\r\nhttp://svn.apache.org/viewvc?view=revision&revision=1443834\r\n\r\nLUCENE-4547: DocValues improvements\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=commit-tag-bot","name":"commit-tag-bot","emailAddress":"root-jira-commit_tag_bot at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=commit-tag-bot&avatarId=16176","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=commit-tag-bot&avatarId=16176","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=commit-tag-bot&avatarId=16176","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=commit-tag-bot&avatarId=16176"},"displayName":"Commit Tag Bot","active":true},"created":"2013-02-08T04:20:11.894+0000","updated":"2013-02-08T04:20:11.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13574391","id":"13574391","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markus17","name":"markus17","emailAddress":"markus at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markus17&avatarId=13831","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markus17&avatarId=13831","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markus17&avatarId=13831","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markus17&avatarId=13831"},"displayName":"Markus Jelsma","active":true},"body":"Revision 1443717 breaks custom collector code such as:\r\n{code}\r\nint[] ints = FieldCache.DEFAULT.getInts(context.reader(), this.fieldName, false);\r\n{code}\r\n\r\nDo you suggest we should keep the returned instance of Ints but where is the concrete Ints class? Can't seem to find it.\r\n\r\nThanks","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markus17","name":"markus17","emailAddress":"markus at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markus17&avatarId=13831","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markus17&avatarId=13831","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markus17&avatarId=13831","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markus17&avatarId=13831"},"displayName":"Markus Jelsma","active":true},"created":"2013-02-08T11:02:04.614+0000","updated":"2013-02-08T11:02:04.614+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13574394","id":"13574394","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"body":"bq. where is the concrete Ints class?\r\n\r\nThis class is an inner class of FieldCache: oal.search.FieldCache.Ints. Then you should be able to fix your code by replacing {{ints[i]}} with {{ints.get( i )}}.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jpountz","name":"jpountz","emailAddress":"jpountz at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=jpountz&avatarId=16520","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jpountz&avatarId=16520","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jpountz&avatarId=16520","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jpountz&avatarId=16520"},"displayName":"Adrien Grand","active":true},"created":"2013-02-08T11:07:07.763+0000","updated":"2013-02-08T11:07:07.763+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13574397","id":"13574397","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markus17","name":"markus17","emailAddress":"markus at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markus17&avatarId=13831","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markus17&avatarId=13831","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markus17&avatarId=13831","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markus17&avatarId=13831"},"displayName":"Markus Jelsma","active":true},"body":"Oh i see, FieldCacheImpl returns and overrides Ints.get(int docId).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=markus17","name":"markus17","emailAddress":"markus at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=markus17&avatarId=13831","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=markus17&avatarId=13831","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=markus17&avatarId=13831","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=markus17&avatarId=13831"},"displayName":"Markus Jelsma","active":true},"created":"2013-02-08T11:10:56.135+0000","updated":"2013-02-08T11:10:56.135+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12615162/comment/13654137","id":"13654137","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thetaphi","name":"thetaphi","emailAddress":"uwe at thetaphi dot de","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thetaphi&avatarId=18956","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thetaphi&avatarId=18956","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thetaphi&avatarId=18956","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thetaphi&avatarId=18956"},"displayName":"Uwe Schindler","active":true},"body":"Closed after release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thetaphi","name":"thetaphi","emailAddress":"uwe at thetaphi dot de","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=thetaphi&avatarId=18956","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=thetaphi&avatarId=18956","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=thetaphi&avatarId=18956","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=thetaphi&avatarId=18956"},"displayName":"Uwe Schindler","active":true},"created":"2013-05-10T10:34:09.524+0000","updated":"2013-05-10T10:34:09.524+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LUCENE-4547/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i0fukn:"}}