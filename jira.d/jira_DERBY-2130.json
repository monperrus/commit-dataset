{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12357299","self":"https://issues.apache.org/jira/rest/api/latest/issue/12357299","key":"DERBY-2130","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12326659","id":"12326659","description":"candidate for Second release for 10.10 branch","name":"10.10.2.0","archived":false,"released":true,"releaseDate":"2014-04-15"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12324243","id":"12324243","description":"First release on the 10.11 branch","name":"10.11.1.1","archived":false,"released":true,"releaseDate":"2014-08-26"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2006-11-30 19:33:58.0","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"22901","customfield_12310222":"1_*:*_1_*:*_217732458833_*|*_5_*:*_2_*:*_10868581024_*|*_4_*:*_1_*:*_16342131","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2014-02-26T23:44:46.934+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2130/watchers","watchCount":3,"isWatching":false},"created":"2006-11-29T22:55:05.000+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":["derby_triage10_11"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"6.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12311953","id":"12311953","description":"","name":"10.1.3.1","archived":false,"released":true,"releaseDate":"2006-06-30"},{"self":"https://issues.apache.org/jira/rest/api/2/version/11187","id":"11187","description":"","name":"10.2.1.6","archived":false,"released":true,"releaseDate":"2006-10-02"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12312590","id":"12312590","description":"","name":"10.3.1.4","archived":false,"released":true,"releaseDate":"2007-08-10"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12377327","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12377327","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12675361","key":"DERBY-6392","self":"https://issues.apache.org/jira/rest/api/2/issue/12675361","fields":{"summary":"Optimizer slowdown from 10.2 to 10.3 (masked by DERBY-2130)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12334067","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12334067","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12474981","key":"DERBY-4818","self":"https://issues.apache.org/jira/rest/api/2/issue/12474981","fields":{"summary":"Derby is taking a long time to compile SQLs with more than 9 tables for the first time.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/improvement.png","name":"Improvement","subtask":false}}}},{"id":"12383611","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12383611","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12695601","key":"DERBY-6481","self":"https://issues.apache.org/jira/rest/api/2/issue/12695601","fields":{"summary":"Derby 10.10 backport issue (winter/spring 2014)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/3","id":"3","description":"A task that needs to be done.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/task.png","name":"Task","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2015-01-21T00:22:54.055+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"Attached is 'repro.sql', an IJ script which demonstrates what I\r\nbelieve to be a serious performance issue in the Optimizer.\r\n\r\nI have run this script in a number of configurations:\r\n\r\n - 10.1.2.1: the script runs successfully. The 'prepare' statement\r\n   takes about 90 seconds, on a fairly powerful Windows machine\r\n\r\n - 10.1.3.1: the script produces a NPE. I believe this is DERBY-1777\r\n\r\n - 10.2.1.8/trunk: the script runs successfully. The 'prepare' statement\r\n   often takes about 220 seconds, on the same Windows machine\r\n\r\n   Intermittently, on 10.2 and on the trunk, the prepare statement takes\r\n   15+ minutes. I cannot reliably reproduce this; I run the same script\r\n   several times in a row and I cannot predict whether it will take 220\r\n   seconds or whether it will take 15+ minutes.\r\n\r\nI am quite motivated to work on this problem, as this is blocking me from\r\nusing Derby for a project that I'm quite keen on, but I need some\r\nsuggestions and ideas about how to attack it. From my perspective\r\nthere are 3 primary topics:\r\n\r\n1) Why did optimizer performance for this query degrade so significantly\r\nfrom 10.1.2.1 to 10.2? The optimizer seems to be at least 2.5 times slower,\r\nfor this particular query at least, in 10.2. Sometimes it is 10x slower.\r\n\r\n2) What is the source of the non-determinism? Why does the optimizer\r\noften take 4 minutes to optimize this query on the trunk, but sometimes\r\ntake 15+ minutes? I don't believe that I'm changing anything from\r\nrun to run.\r\n\r\n3) Can we improve the optimizer performance even beyond what it was\r\nfor 10.1.2? I realize that this is an ugly query, but I was hoping to\r\nsee an optimization time of 5-10 seconds, not 90 seconds (and certainly\r\nnot 220 seconds).\r\n\r\nI have attempted to start answering some of these questions, with\r\nlimited success. Here is some of what I think I've discovered so far:\r\n\r\n - the optimizer changes in 10.2 seem to have given the optimizer many\r\n   more choices of possible query plans to consider. I think this means\r\n   that, if the optimizer does not time out, it will spend substantially\r\n   more time optimizing because there are more choices to evaluate. Does\r\n   this by itself mean that the optimizer will take 2.5 times longer in\r\n   10.2 than it did in 10.1?\r\n\r\n - something about this query seems to make the costing mechanism go\r\n   haywire, and produce extreme costs. While stepping through the\r\n   optimization of this query in the debugger I have seen it compute\r\n   costs like 1e63 and 1e200. This might be very closely related to\r\n   DERBY-1905, although I don't think I'm doing any subqueries here.\r\n   But maybe I'm misunderstanding the term \"subquery\" in DERBY-1905.\r\n   At any rate, due to the enormous estimated costs, timeout does not\r\n   occur.\r\n\r\n - the WHERE clause in this query is converted during compilation to \r\n   an equivalent IN clause, I believe, which then causes me to run into\r\n   a number of the problems described in DERBY-47 and DERBY-713.\r\n   Specifically, rather than constructing a plan which involves 4\r\n   index probes for the 4 WHERE clause values, the optimizer decides\r\n   that an index scan must be performed and that it will have to process\r\n   the entire index (because the query uses parameter markers, not\r\n   literal values). So perhaps solving DERBY-47 would help me\r\n\r\n - the optimizer in fact comes up with a \"decent\" query plan quite quickly.\r\n   I have experimented with placing a hard limit into the optimizer\r\n   timeout code, so that I can force optimization to stop after an\r\n   arbitrary fixed period of time. Then I have been able to set that\r\n   value to as low as 1 second, and the optimizer has produced plans\r\n   that then execute in a few milliseconds. Of course, I have only tried\r\n   this with a trivial amount of data in my database, so it's possible\r\n   that the plan produced by the optimizer after just a second of\r\n   optimizing is in fact poor, and I'm just not noticing it because my\r\n   data sizes are so small.\r\n\r\nAt this point, what would be really helpful to me would be some suggestions\r\nabout some general approaches or techniques to try to start breaking down\r\nand analyzing this problem.\r\n","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10362","value":"Performance","id":"10362"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10420","value":"Regression","id":"10420"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"35339","summary":"Optimizer performance slowdown from 10.1 to 10.2","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10422","value":"High Value Fix","id":"10422"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10423","value":"Newcomer","id":"10423"},{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10424","value":"Repro attached","id":"10424"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10052","value":"Normal","id":"10052"},"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":37,"total":37,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454477","id":"12454477","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"reproduction script is 'repro.sql'.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-11-29T22:56:44.000+0000","updated":"2006-11-29T22:56:44.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454479","id":"12454479","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"One experiment I tried was to remove all the secondary \r\nindexes. I thought that that might shrink the overall \"search \r\nspace\" that the optimizer was dealing with. However, it\r\nactually seemed to make matters worse, not better.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-11-29T22:57:57.000+0000","updated":"2006-11-29T22:57:57.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454738","id":"12454738","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"What continues to puzzle me about these issues is that the \r\nestimated costs are so out of control.  Without a major\r\nrewrite of the optimizer, the basic assumption is that the\r\nestimated costs are somewhat close to the actual elapsed\r\ntime of the query.  Timeout depends on this, and thus\r\noptimizer \"performance\" depends on this as we tend to\r\nloop through ever increasing number of plans as each\r\nvariable is added.\r\n\r\nI think the key is to get the optimizer to time out correctly.\r\nDERBY-1907 would be nice but the whole system is just broken\r\nif estimates are so wrong.\r\n\r\nArmy posted some \"simple\" problem cases, that is where I\r\nwould start.  It seems like all of the following may apply\r\nto your case, probably good to validate there is not something\r\nnew going on with your query.:\r\n\r\nDERBY-1908  \t Investigate: What's the \"unit\" for optimizer cost estimates?   \t \r\nDERBY-1907 \tImprove optimizer to prune query plans more aggressively. \t\r\nDERBY-1906 \tInvestigate appropriateness of current optimizer timeout mechanism. \t\r\nDERBY-1905 \tOptimizer cost estimates for subqueries are way (way) too high. \t\r\nDERBY-47\tIN list optimization\r\n\r\nOne approach that would keep the current basic optimizer technology would be to see if we can fix the estimates.  Some items might be:\r\n\r\n1) update the store costs to reflect current machines\r\no update the store costs to reflect \"actual\" machine it is running on\r\no figure out why there is such variance in DERBY-2130\r\no investigate why optimizer costs are so out of line - is it just\r\n  wrong logic, is it lack of some sort of cost estimate so one bad\r\n  guess on top of another.\r\no DERBY-47\r\n\r\nI am interested in doing 1, but I don't think it is going to help\r\nwith infinite costs.\r\n\r\nIs anyone else interested in looking at this?  The repro for\r\n2130 is pretty ugly, I wonder if we could agree on a smaller problem\r\nto work on that hopefully would help the harder problem.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2006-11-30T19:33:58.000+0000","updated":"2006-11-30T19:33:58.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454741","id":"12454741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"The variance in optimizer times is puzzling as I thought the order of plans picked was pretty much the same.  I think\r\n2 things would help in understanding this:\r\n1) Have a trace flag that tells us if the prepare ended because of timeout or because of plan exhaustion.\r\n2) Can you reproduce the variance if you only do the prepare on the same db, without redoing the ddl.  I think I \r\n     remember some issue with\r\n     the order that tables are looked at being related to hash codes which might vary from ddl to ddl.\r\n      Is this an issue only if entire optmizer is timing out, or are there any \"sub-timeouts\" where we might short circuit\r\n     a list of subquery options?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2006-11-30T19:39:57.000+0000","updated":"2006-11-30T19:39:57.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454745","id":"12454745","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> Some items might be:\r\n\r\n> 1) update the store costs to reflect current machines\r\n> o update the store costs to reflect \"actual\" machine it is running on\r\n> o figure out why there is such variance in DERBY-2130\r\n> o investigate why optimizer costs are so out of line - is it just\r\n>  wrong logic, is it lack of some sort of cost estimate so one bad\r\n>  guess on top of another.\r\n> o DERBY-47\r\n\r\n> I am interested in doing 1, but I don't think it is going to help\r\n> with infinite costs.\r\n\r\n> Is anyone else interested in looking at this?\r\n\r\nI am interested both in this particular issue (DERBY-2130) and also in #3: why the optimizer cost estimates are so out of line.  I.e. DERBY-1905.  I haven't started just yet but I would like to look more into DERBY-1905 to see if I can pull anything up.  I hope to start looking at this very soon...\r\n\r\nFor what it's worth, I ran the repro attached to this issue with various sets of Derby insane jars, and the timings I saw were as follows.  I ran the repro 3 times for each set of jars on Red Hat Linux using ibm142.  Unit of measurement is milliseconds (returned via the \"elapsedtime on\" ij command).\r\n\r\n10.1 Pre-805:\r\n\r\n  - 141570\r\n  - 142463\r\n  - 140686\r\n\r\n10.2 Pre-805:\r\n\r\n  - 143794\r\n  - 139213\r\n  - 138892\r\n\r\n10.1 latest branch:\r\n\r\n  - 43494\r\n  - 37229\r\n  - 37532\r\n\r\n10.2 Post-805, Pre-781 (10.2.0.4, svn 423199)\r\n\r\n  - NPE (caused by DERBY-1777). \r\n\r\n10.2 latest branch:\r\n\r\n  - 470067\r\n  - 438084\r\n  - 433038\r\n\r\nThings to notice:\r\n\r\n * It looks like the slow-down is *not* caused by the DERBY-805 changes--at least not directly.  On the contrary, the query actually runs quite a bit more quickly with the DERBY-805 changes (and all subsequent patches, esp. DERBY-1777) than it does without.  Or put another way, the query runs faster with the latest 10.1 codeline than it does with 10.1.2.1.  Of course, it's possible that changes for DERBY-805 are mingling with more recent changes to cause the slowdown, but we at least know that the DERBY-805 changes alone are not the problem.\r\n\r\n * The run at revision 423199 fails with an NPE, which corresponds to Bryan's results when he ran with 10.1.3.1.  In both cases the DERBY-805 changes have been committed but the subsequent regression fixes (including DERBY-1777) have not, hence the NPE.\r\n\r\n * I did not see the non-deterministic behavior that Bryan did with 10.2 trunk--instead, I consistently see 7+ minutes.  However, I only ran the query 3 times, which is probably not enough to have seen what Bryan saw.  Also note that I only ran the DDL one time and then I re-ran the query the second two times.  So given Mike's previous comment, this may be the reason I didn't see the variance that Bryan did.\r\n\r\nNote sure how useful this information is, but that's what I've found so far.  Still scratching my head and poking around, though, so maybe something will come up. (My inclination is toward DERBY-781, but I don't really know how just yet...)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-11-30T20:11:54.000+0000","updated":"2006-11-30T20:11:54.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12454963","id":"12454963","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Just a random though that occured to me...\r\n\r\nThe query in question is written as:\r\n\r\nprepare p1 as '\r\nselect count(distinct t1.c5) \r\n    from table19 t1 \r\n        inner join table05 t3 on ( t1.c5 = t3.c2)  \r\n        inner join table06 t4 on ( t3.c33 = t4.c1)  \r\n        inner join v3 t5 on ( t4.c34 = t5.c1)  \r\n        inner join table20 t2 on ( t5.c3 = t2.c5)  \r\n        inner join v1 t6 on ( t2.c35 = t6.c1)  \r\n        inner join v2 t7 on ( t6.c3 = t7.c5)  \r\n        inner join v1 t8 on ( t7.c22 = t8.c1)  \r\n    where (((t8.c3 = ? or t8.c3 = ? or t8.c3 = ? or t8.c3 = ?)))';\r\n\r\nIs the use of the explicit \"inner join\" syntax an intentional decision?  Or more specifically, is the intention that the tables are to be joined in a specific order?  From the Optimizer standpoint this query  becomes one large outer query with 8 Optimizables in the from list, so the Optimizer will attempt to evaluate all combinations of the 8 Optimizables before quitting--which takes a (long) while.  If, however, the query was written with a specific join order in mind, you could use Derby optimizer overrides to fix the join order of the 8 Optimizables to be the join order in which they are specified:\r\n\r\nprepare p1 as '\r\nselect count(distinct t1.c5) \r\n    from  --DERBY-PROPERTIES joinOrder=FIXED\r\n            table19 t1 \r\n            inner join table05 t3 on ( t1.c5 = t3.c2)  \r\n            inner join table06 t4 on ( t3.c33 = t4.c1)  \r\n            inner join v3 t5 on ( t4.c34 = t5.c1)  \r\n            inner join table20 t2 on ( t5.c3 = t2.c5)  \r\n            inner join v1 t6 on ( t2.c35 = t6.c1)  \r\n            inner join v2 t7 on ( t6.c3 = t7.c5)  \r\n            inner join v1 t8 on ( t7.c22 = t8.c1)  \r\n    where (((t8.c3 = ? or t8.c3 = ? or t8.c3 = ? or t8.c3 = ?)))';\r\n\r\nWhen I did this the \"prepare' finished in about 3 seconds on the same Red Hat Linux machine with the latest trunk branch (sane build).\r\n\r\nOf course, I still think this issue is one that needs to be resolved.  But if a) you're looking for a temprorary workaround and b) you know the order in which you would like the tables to be joined, maybe the optimizer override can help in the short term.\r\n\r\nPlease note, though, that Derby optimization as a whole would benefit a *lot* more if you continued to help resolve this problem :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-12-01T17:41:01.000+0000","updated":"2006-12-01T17:41:01.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455117","id":"12455117","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Army, thank you for the hint about the optimizer overrides. I will investigate this\r\nas a possible workaround for the short term.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-02T18:25:04.000+0000","updated":"2006-12-02T18:25:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455118","id":"12455118","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Just speaking abstractly here for a minute, I want to make sure I'm following the discussion.\r\n\r\nAs I understand it, the Optimizer's overall top-level algorithm is:\r\n\r\n-  Consider every possible query plan for executing this query (modulo permutation \"jumping\")\r\n-  Evaluate the cost of each such plan.\r\n-  Select the cheapest.\r\n-  If at any time we determine that we've now spent longer evaluating plans\r\n     than it would have taken to execute the cheapest plan seen so far, then\r\n     quit and go run that plan (this is known as OptimizerTimeout)\r\n\r\nIs that an accurate summary? If so, it seems that:\r\n\r\n1) The most important thing about the Optimizer's cost estimation algorithm\r\nis that it be \"relatively accurate\": the cheapest actual plan should\r\nhave the lowest estimated cost. \r\n\r\n2) The second most important thing is that the algorithm should strive to\r\nbe accurate, so that the optimizer timeout works effectively.\r\n\r\n3) Another important thing is that the algorithm should be as rapid as\r\npossible, so that the optimizer can evaluate as many plans as possible\r\nprior to timing out.\r\n\r\nIt seems that most of the discussion so far has been around item (2), regarding\r\nthe accuracy and interpretation (units of measurement) of the cost estimate.\r\nDERBY-1905, DERBY-1906, DERBY-1908, DERBY-1259, DERBY-1260 all\r\nhave to do with this topic.\r\n\r\nI've seen almost no discussion of the first point (that the cheapest actual plan\r\nshould have the cheapest estimated cost); does this mean that we are pretty\r\nconfident about this aspect of cost estimation at this point? That is, the cost\r\nestimating may be off, but it seems to be off for all queries equally?\r\n\r\nAnd I haven't seen much discussion of the third point (that the Optimizer should\r\nstrive to evaluate plans as rapidly as possible, so as to increase its chances of\r\ncoming across a decent plan prior to timeout). DERBY-1907 is certainly relevant\r\nhere; are there other issues logged like this?\r\n\r\nI guess I'm wondering (out loud) whether it is worth investigating a simple tuning\r\nof the cost estimation algorithm. If the optimizer was *much* faster at\r\ngenerating and estimating possible plans, wouldn't that be a big benefit?\r\n\r\nAlso, how confident are we that permutation jumping (as described in \r\nhttp://wiki.apache.org/db-derby/JoinOrderPermutations) is working properly?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-02T18:27:12.000+0000","updated":"2006-12-02T18:27:12.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455141","id":"12455141","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Everything written in Bryan's preceding comment sounds correct to me, so I won't dwell.  As for the specific questions:\r\n\r\n> I've seen almost no discussion of the first point (that the cheapest actual plan\r\n> should have the cheapest estimated cost); does this mean that we are pretty\r\n> confident about this aspect of cost estimation at this point? That is, the cost\r\n> estimating may be off, but it seems to be off for all queries equally?\r\n\r\nThis has been my general assumption about the code, yes--at least, after DERBY-1007 was resolved.  It seems to me that at some point in the last year I found a scenario where the optimizer's \"best\" cost estimate did not (appear to) correspond to the best query plan, but I don't remember the details and it may have ended up being correct after all.  In any event, in all of the discussion that I've had/written, my general assumption has been that \"Yes\", the *relative* accuracy of the cost estimates is correct--i.e. that better plans have lower cost estimates.  Note, though, that this is just an assumption of mine which I have not bothered trying to debunk; if you find info to the contrary, please say so!\r\n\r\n> DERBY-1907 is certainly relevant here; are there other issues logged like this?\r\n\r\nNone come to mind, no.  But I admit that's an answer based strictly on memory; I didn't actually do any searching...\r\n\r\n> I guess I'm wondering (out loud) whether it is worth investigating a simple tuning \r\n> of the cost estimation algorithm. If the optimizer was *much* faster at generating\r\n> and estimating possible plans, wouldn't that be a big benefit? \r\n\r\nYes, definitely!\r\n\r\n> Also, how confident are we that permutation jumping (as described in\r\n> http://wiki.apache.org/db-derby/JoinOrderPermutations) is working properly? \r\n\r\nI had to laugh out loud when I read this question.  It sounds to me like the kind of question someone asks when they've found a somewhat serious bug but don't want to rock the boat ;)\r\n\r\nSo far as I know, the jumping code is working properly.  But if you told me there was a problem with the code, I think I'd assume you were right.  Is that the case?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-12-03T00:16:41.000+0000","updated":"2006-12-03T00:16:41.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455197","id":"12455197","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"> So far as I know, the jumping code is working properly.\r\n\r\nThanks, that's good to know. It actually was an innocent question; I'm\r\nnot holding anything up my sleeve :) My train of thought was something like:\r\n - 7+ minutes of CPU time is a *lot* on today's machines\r\n - therefore, we're either evaluating an astounding number of query plans,\r\n - or, we're burning a lot of CPU evaluating the plans,\r\n - or both\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-03T19:44:04.000+0000","updated":"2006-12-03T19:44:04.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455713","id":"12455713","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Attached are the query plans that I get when running with 10.1.2.1 and 10.2\r\n\r\nI also attached 'plans.diff', which is a diff of the plans after editing the plans to remove \"noisy\" differences such as the floating point values of the estimated costs.\r\n\r\nThe plans are very similar, but not identical.\r\n\r\nIt seems that 10.2 is, in several cases, preferring indexed access to tables, which I think shows that the predicate pushdown changes (DERBY-805 and friends) are working.\r\n\r\nOther than that, my extremely coarse reading of the plans is that the primary difference between the two plans is the estimated costs.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-05T18:09:16.000+0000","updated":"2006-12-05T18:09:16.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12455802","id":"12455802","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"Thanks for the query plans, Bryan.  I took a quick look and nothing stood out, but I'll have to look more closely before I can say anything for sure.  Thank you for taking the time to pull out the \"noise\"--I think that'll be helpful.\r\n\r\nOn a different note, I added some System.outs to various places in the Optimizer to see what cost estimates the optimizer is calculating for different complete join orders in the top-level OptimizerImpl.  I then ran the repro query against the latest 10.1 branch and the latest 10.3 trunk.  The abbreviated output from what I saw is shown below.\r\n\r\nSome things to note:\r\n\r\n  0. Lots of \"Infinity\" and \"NaN\" cost estimates, which are probably the result of DERBY-1905 and DERBY-1260, respectively. This pretty much renders all but a handful of the cost estimates useless.\r\n\r\n  1. In 10.1.3 we try to jump to a target join order and we SUCCESSFULLY do so.  In 10.3 we also try to jump to the same target join order, BUT for some reason the jump does NOT take effect.  So it looks like Bryan's question about whether or not permutation jumping works correctly was indeed well-founded.  This is, I think, the first thing to investigate.\r\n\r\n  2. Because the 10.3 \"jump\" does not occur we spend a lot of time iterating through different permutations until we get to the \"best join order\" found by 10.1. Once we get there the estimated cost for 10.3 (on a 10.1 database) is finite but is much higher than the cost estimate of the same join order in 10.1 (namely, \"247\" in 10.1 vs \"1736685\" in 10.3).  So this is another point of interest.  This could again be the result of DERBY-1260, but it's hard to say at this point.\r\n\r\n  3. This next observation is weird: when running 10.3 on a 10.1 database the query finishes after about 10,000 iterations (roughly 5 minutes on my laptop).  But when running 10.3 on a *10.3* database the query runs until it has exhausted all possible permutations (over 40,000).  The difference is in the calculated cost estimate for the \"2 0 1 3 4 5 6 7\" join order.  When running against a 10.1 database 10.3 estimates a cost of 1736685, followed up by a cost of 198589 for the next complete order, which leads leads to eventual timeout.  But when running against a 10.3 database, the cost estimate is *Infinity* and thus the timeout value sits at 5E62, which we never reach.  I have absolutely no idea why this would be the case.  Any one out there have any theories?   Bryan, can you perhaps try this out to see if you observe the same behavior?  You can connect to a 10.1 database by setting the \"derby.database.allowPreReleaseUpgrade\" property to \"true\".  Note that you should only use that on a _test_ 10.1 database, though; I don't think it's intended for production db's.\r\n\r\nGenerally speaking lines in the output are of the form:\r\n\r\n-=> estimatedCost: j o i n O r d e r\r\n\r\n--------------------------\r\n10.1.3 on 10.1.3 database:\r\n--------------------------\r\n\r\nij version 10.1\r\n-=> 5.607246651648704E62: 0 1 2 3 4 5 6 7\r\n-==> Just set bestCost to: 5.607246651648704E62\r\n-=-> JUMPING to: 1 4 2 6 7 0 3 5\r\n-=> Infinity: 1 4 2 6 7 0 3 5\r\n-=> NaN: 1 4 2 6 7 0 5 3\r\n-=> NaN: 1 4 2 6 7 3 0 5\r\n-=> NaN: 1 4 2 6 7 3 5 0\r\n-=> NaN: 1 4 2 6 7 5 0 3\r\n-=> NaN: 1 4 2 6 7 5 3 0\r\n-=> NaN: 1 4 2 7 0 3 5 6\r\n-=> NaN: 1 4 2 7 0 3 6 5\r\n-=> NaN: 1 4 2 7 0 5 3 6\r\n-=> NaN: 1 4 2 7 0 5 6 3\r\n-=> NaN: 1 4 2 7 0 6 3 5\r\n-=> NaN: 1 4 2 7 0 6 5 3\r\n\r\n<snip ~2,600 permutations with cost estimates of \"NaN\">\r\n\r\n-=> NaN: 1 7 6 5 4 0 2 3\r\n-=> NaN: 1 7 6 5 4 0 3 2\r\n-=> NaN: 1 7 6 5 4 2 0 3\r\n-=> NaN: 1 7 6 5 4 2 3 0\r\n-=> NaN: 1 7 6 5 4 3 0 2\r\n-=> NaN: 1 7 6 5 4 3 2 0\r\n-=> 247.4647753453739: 2 0 1 3 4 5 6 7\r\n-==> Just set bestCost to: 247.4647753453739\r\n-=-> TIMED OUT: exceeded 247.4647753453739 ms.\r\n-=> 247.4647753453739: 2 0 1 3 4 5 6 7\r\nELAPSED TIME = 82961 milliseconds\r\n\r\n------------------------\r\n10.3 on *10.1.3* database:\r\n------------------------\r\n\r\n(on the *same* database that was created by 10.1)\r\n\r\nij version 10.3\r\n-=> 5.607246651648704E62: 0 1 2 3 4 5 6 7\r\n-==> Just set bestCost to: 5.607246651648704E62\r\n-=-> JUMPING to: 1 4 2 6 7 0 3 5\r\n-=> 1.8253980349686949E106: 0 1 2 3 4 5 6 7\r\n-=> 3.021440681134236E107: 0 1 2 3 4 5 7 6\r\n-=> 8.374147544754745E119: 0 1 2 3 4 6 5 7\r\n-=> 8.374147544754745E119: 0 1 2 3 4 6 7 5\r\n-=> 5.993308284393933E109: 0 1 2 3 4 7 5 6\r\n-=> 2.736734332816085E108: 0 1 2 3 4 7 6 5\r\n-=> 3.973494182787193E115: 0 1 2 3 5 4 6 7\r\n-=> 6.577018684224087E116: 0 1 2 3 5 4 7 6\r\n-=> 3.973494182787193E115: 0 1 2 3 5 6 4 7\r\n-=> 6.577018684224087E116: 0 1 2 3 5 7 4 6\r\n-=> 8.374147544754745E119: 0 1 2 3 6 4 5 7\r\n-=> 8.374147544754745E119: 0 1 2 3 6 4 7 5\r\n-=> 1.0852895218002162E119: 0 1 2 3 6 5 4 7\r\n-=> 8.374147544754745E119: 0 1 2 3 6 7 4 5\r\n-=> 5.993308284393933E109: 0 1 2 3 7 4 5 6\r\n-=> 2.736734332816085E108: 0 1 2 3 7 4 6 5\r\n-=> 1.2945545894290903E112: 0 1 2 3 7 5 4 6\r\n-=> 2.736734332816085E108: 0 1 2 3 7 6 4 5\r\n-=> NaN: 0 1 2 4 5 3 6 7\r\n-=> NaN: 0 1 2 4 5 3 7 6\r\n-=> NaN: 0 1 2 4 5 6 3 7\r\n-=> NaN: 0 1 2 4 5 6 7 3\r\n-=> NaN: 0 1 2 4 5 7 3 6\r\n-=> NaN: 0 1 2 4 5 7 6 3\r\n\r\n<snip ~10,000 permutations with cost estimates of \"NaN\">\r\n\r\n-=> NaN: 1 7 6 5 4 0 2 3\r\n-=> NaN: 1 7 6 5 4 0 3 2\r\n-=> NaN: 1 7 6 5 4 2 0 3\r\n-=> NaN: 1 7 6 5 4 2 3 0\r\n-=> NaN: 1 7 6 5 4 3 0 2\r\n-=> NaN: 1 7 6 5 4 3 2 0\r\n-=> 1736685.050617207: 2 0 1 3 4 5 6 7\r\n-==> Just set bestCost to: 1736685.050617207\r\n-=> 198589.53739726284: 2 0 1 3 4 5 7 6\r\n-==> Just set bestCost to: 198589.53739726284\r\n-=-> TIMED OUT: exceeded 198589.53739726284 ms.\r\n-=> 198589.53739726284: 2 0 1 3 4 5 7 6\r\nELAPSED TIME = 336370 milliseconds\r\n\r\n------------------------\r\n10.3 on 10.3 database:\r\n------------------------\r\n\r\nij version 10.3\r\n-=> 5.607246651648704E62: 0 1 2 3 4 5 6 7\r\n-==> Just set bestCost to: 5.607246651648704E62\r\n-=-> JUMPING to: 1 4 2 6 7 0 3 5\r\n-=> 1.8253980349686949E106: 0 1 2 3 4 5 6 7\r\n-=> 3.021440681134236E107: 0 1 2 3 4 5 7 6\r\n-=> 8.374147544754745E119: 0 1 2 3 4 6 5 7\r\n-=> 8.374147544754745E119: 0 1 2 3 4 6 7 5\r\n-=> 5.993308284393933E109: 0 1 2 3 4 7 5 6\r\n-=> 2.736734332816085E108: 0 1 2 3 4 7 6 5\r\n-=> 3.973494182787193E115: 0 1 2 3 5 4 6 7\r\n-=> 6.577018684224087E116: 0 1 2 3 5 4 7 6\r\n-=> 3.973494182787193E115: 0 1 2 3 5 6 4 7\r\n-=> 6.577018684224087E116: 0 1 2 3 5 7 4 6\r\n-=> 8.374147544754745E119: 0 1 2 3 6 4 5 7\r\n-=> 8.374147544754745E119: 0 1 2 3 6 4 7 5\r\n-=> 1.0852895218002162E119: 0 1 2 3 6 5 4 7\r\n-=> 8.374147544754745E119: 0 1 2 3 6 7 4 5\r\n-=> 5.993308284393933E109: 0 1 2 3 7 4 5 6\r\n-=> 2.736734332816085E108: 0 1 2 3 7 4 6 5\r\n-=> 1.2945545894290903E112: 0 1 2 3 7 5 4 6\r\n-=> 2.736734332816085E108: 0 1 2 3 7 6 4 5\r\n-=> NaN: 0 1 2 4 5 3 6 7\r\n-=> NaN: 0 1 2 4 5 3 7 6\r\n-=> NaN: 0 1 2 4 5 6 3 7\r\n-=> NaN: 0 1 2 4 5 6 7 3\r\n-=> NaN: 0 1 2 4 5 7 3 6\r\n\r\n<snip ~10,000 permutations with cost estimates of \"NaN\">\r\n\r\n-=> NaN: 1 7 6 5 4 2 0 3\r\n-=> NaN: 1 7 6 5 4 2 3 0\r\n-=> NaN: 1 7 6 5 4 3 0 2\r\n-=> NaN: 1 7 6 5 4 3 2 0\r\n-=> Infinity: 2 0 1 3 4 5 6 7\r\n-=> NaN: 2 0 1 3 4 5 7 6\r\n-=> NaN: 2 0 1 3 4 6 5 7\r\n-=> NaN: 2 0 1 3 4 6 7 5\r\n-=> NaN: 2 0 1 3 4 7 5 6\r\n-=> NaN: 2 0 1 3 4 7 6 5\r\n-=> NaN: 2 0 1 3 5 4 6 7\r\n\r\n<snip ~30,000 permutations, most with cost estimates of \"NaN\", a few with estimates of Infinity>\r\n\r\n-=> NaN: 7 6 5 4 3 1 0 2\r\n-=> NaN: 7 6 5 4 3 1 2 0\r\n-=> NaN: 7 6 5 4 3 2 0 1\r\n-=> NaN: 7 6 5 4 3 2 1 0\r\n-=-> ENDED because ran out of permutations.\r\n-=> 5.607246651648704E62: 0 1 2 3 4 5 6 7\r\nELAPSED TIME = 1145530 milliseconds\r\n\r\nI'm still trying to make sense of this data, but perhaps this info will be helpful in tracking down the issue(s) here...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-12-05T23:46:15.000+0000","updated":"2006-12-05T23:46:15.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12456115","id":"12456115","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"> When running against a 10.1 database 10.3 estimates a cost of 1736685, followed up by a \r\n> cost of 198589 for the next complete order, which leads leads to eventual timeout. But when \r\n> running against a 10.3 database, the cost estimate is *Infinity* and thus the timeout value \r\n> sits at 5E62, which we never reach.\r\n\r\nIs it possible that the 10.1 vs 10.3 database is a red herring here, and this is simply the\r\nsame \"non-determinism\" that I was observing in my initial tests? That is, you ran against two\r\ndifferent database, thus you ran all the CREATE TABLE/INDEX/VIEW statements twice,\r\nand got hugely different results. I definitely saw dramatically different results even in the\r\n10.3-only case from run to run, when running the entire script which recreates all the tables each time.\r\n\r\nMy guess is that if you created 10.1 database A, and ran 10.3 against it, and then created\r\n10.1 database B, and ran 10.3 against it, you might see dramatic differences even in just\r\nthose two runs. \r\n\r\nI'm wondering if there is something going on, correlated to the DDL statements executed\r\nby the repro script, which sometimes results in tables that return \"reasonable\"\r\nestimates, and sometimes results in tables that return \"infinite\" estimates.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-06T17:02:43.000+0000","updated":"2006-12-06T17:02:43.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12456541","id":"12456541","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> Is it possible that the 10.1 vs 10.3 database is a red herring here,\r\n> and this is simply the same \"non-determinism\" that I was observing\r\n> in my initial tests?\r\n\r\nGood point, very well could be.  That didn't occur to me.\r\n\r\n> My guess is that if you created 10.1 database A, and ran 10.3 against\r\n> it, and then created 10.1 database B, and ran 10.3 against it, you\r\n> might see dramatic differences even in just those two runs.\r\n\r\nHave you yourself seen this variance with *10.1* databases, as well?  I was limiting myself to the details in the description of this issue, which only mention the variance with 10.2 and trunk.  If you are also seeing the variance in 10.1, then can we assume that the non-deterministic variance aspect of this issue is not a regression, but is an existing problem with Derby since who-knows-when?  That might correlate with Mike's earlier comments about that being a potential issue in the past (hash codes based on DDL)...\r\n\r\n> I'm wondering if there is something going on, correlated to the DDL\r\n> statements executed by the repro script, which sometimes results in\r\n> tables that return \"reasonable\" estimates, and sometimes results in\r\n> tables that return \"infinite\" estimates.\r\n\r\nThis is great question.  A follow-up question would be whether or not this DDL-based variance is a regression from 10.1 or has been there from the \"beginning\".\r\n\r\nAs you can tell, my primary focus here has been on potentially regressed behavior.  As I've been looking at this problem I have been asking myself \"what changed from 10.1 to 10.2 to cause this sudden slow-down?\" So that's where my mind (and all of my questions) have been leading...\r\n\r\nAnd on that point, I mentioned in my last comment that the JUMP behavior \"does not take effect\" for 10.3, but it does for 10.1.  I spent some time tracing through the code and quickly realized that this change in behavior is an indirect result of DERBY-1357.  Here's why.\r\n\r\nAs explained on the wiki page that describes jumping (http://wiki.apache.org/db-derby/JoinOrderPermutations), the optimizer will find the first complete join order for a query before attempting to jump.  In the repro query the first join order is simply \"0 1 2 3 4 5 6 7\".  The associated cost is 5.607E62.  Using the row counts calculated for this join order, the \"target\" join order then becomes \"1 4 2 6 7 0 3 5\".  This means that the next 8 calls to \"getNextPermutation()\" will return partial join orders that build up to this target.  i.e.\r\n\r\n1 -1 -1 -1 -1 -1 -1 -1\r\n1  4 -1 -1 -1 -1 -1 -1\r\n1  4  2 -1 -1 -1 -1 -1\r\netc.\r\n\r\nPrior to DERBY-1357 the optimizer \"short-circuit\" logic was not working, so even if a partial join order is more expensive than the best complete join order so far, the optimizer will continue to waste time optimizing join orders that are always going to return an estimate that is higher than the best so far.  So in 10.1 (which does not have the fix for DERBY-1357) we'll merrily continue on our way from [1 4 2 ... ] all the way up until we either timeout or find a join order that is cheaper than 5.607E62.  We eventually find a cheaper join order after about 2500 permutations, and that's the point at which optimization stops (see details from my previous comment).\r\n\r\nWith 10.2 and trunk, though, the DERBY-1357 short-circuit logic has been corrected.  And as it happens, the estimated cost for the partial join order \"1 4 2 6 7 0 3\" is \"Infinity\"; since that's greater than 5.607E62, we do not advance the join order and thus we effectively skip the rest of it (because we know it's going to return a cost that's worse than 5.607E62).  That part is, I think, correct.\r\n\r\nBut having chosen to NOT advance the join order, now we come to the following block of code in OptimizerImpl:\r\n\r\n    if (permuteState == JUMPING && !joinPosAdvanced && joinPosition >= 0)\r\n    {\r\n        //not feeling well in the middle of jump\r\n        // Note: we have to make sure we reload the best plans\r\n        // as we rewind since they may have been clobbered\r\n        // (as part of the current join order) before we gave\r\n        // up on jumping.\r\n        reloadBestPlan = true;\r\n        rewindJoinOrder();  //fall\r\n        permuteState = NO_JUMP;  //give up\r\n    }\r\n\r\nSince we're in the middle of jumping and since we did *not* advance the join order, we execute this if block--i.e. we rewind the join order back to the beginning and start all over.  Or put another way, we gave up on the \"JUMP\" and went back to normal processing.  From there we then have to go through thousands and thousands of permutations before we find a plan that's cheaper than 5.607E62.  Depending on which database is in use, that can be ten thousand permutations or it could be forty thousand, which explains the variance in the time taken to complete optimization.\r\n\r\nI think the changes for DERBY-1357 are correct; what's not clear is whether the \"if\" block shown above is really necessary.  The idea sort of makes sense to me: if we broke away from normal processing and jumped to a _bad_ join order then we want to abort the jump as quickly as possible and return to normal processing.  However, now that the optimizer \"short-circuit\" logic is fixed, I'm not so sure we need to revert back to \"normal\" processing when we jump to a bad join order.  If the join order is bad then the short-circuit logic will make sure that we do not waste \"too much\" (yes, that's an awfully subjective term) time trying out bad join orders.  So would it make sense to just \"iterate\" the target join order as usual without defaulting back to square one?\r\n\r\nAs a sanity check I commented the above \"if\" block out in the trunk codeline and ran the repro; when I did so, the script executed in about the same time as it does on the latest 10.1 branch.  So this seems to confirm my findings.  FAR more testing is needed, though, to see if this simple removal of the \"if\" block is a viable solution.\r\n\r\nAll of that said, I still think the BIGGER problems we are seeing are 1) DERBY-1905 and 2) as Bryan has said, the apparent variance in cost estimates based on DDL.  DERBY-1905 is definitely playing a huge role here, what with the Infinity cost estimates followed by NaN.  These kinds of estimates render the vast majority of the join order estimates useless, even if we do remove the \"if\" block mentioned above.\r\n\r\nAlso note: when I remove the \"if\" block as mentioned above, I found that sometimes the cost estimate for the \"best\" join order (\"2 0 1 3 4 5 6 7\") was \"14116\", and sometimes it was \"247\".  This was on the *same* database and so does not appear to be the result of DDL statements.  I'm still looking into this little tidbit to see what might be going on there...\r\n\r\nAs usual, some of this may be useful, some of it may not be. Please excuse me if I'm babbling...","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-12-07T19:03:39.000+0000","updated":"2006-12-07T19:03:39.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12457083","id":"12457083","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"> My guess is that if you created 10.1 database A, and ran 10.3 against\r\n> it, and then created 10.1 database B, and ran 10.3 against it, you\r\n> might see dramatic differences even in just those two runs.\r\n\r\nI was able to confirm this.\r\n\r\nI created 10 separate databases using 10.1.2.1, and ran the DDL portion of repro.sql\r\nagainst each of those 10 databases using 10.1.2.1.\r\n\r\nThen I ran just the PREPARE portion of repro.sql against each of those 10 databases,\r\nusing the 10.3 trunk, and setting derby.database.allowPreReleaseUpgrade=true so\r\nthat 10.3 would be willing to access the 10.1 database.\r\n\r\nOften, I observed 170-180 seconds for the prepare.\r\n\r\nBut I also observed 500-650 seconds for the prepare.\r\n\r\nFurthermore, it wasn't on the same database each time!\r\n\r\nThat is, once I saw 500 seconds for the prepare on database 6, but I reran DB 6\r\nand saw 168 seconds.\r\n\r\nAnd, the first time I did the prepare on DB 8, it was 170 seconds, but the second\r\ntime I did the prepare on DB 8, it was 607 seconds.\r\n\r\nSo my observations are that:\r\n - 10.3 is non-deterministic regarding the amount of time that the PREPARE takes\r\n - it happens whether the DB and schema are created using 10.1, or 10.3\r\n - the same DB, with the same DDL, can sometimes prepare the query in time X,\r\n   and sometimes in time Y, and as far as I can tell nothing is changing\r\n   between runs. I just run IJ with the \"prepare\" script twice in a row, and\r\n   get two very different elapsed times.\r\n\r\n> I'm wondering if there is something going on, correlated to the DDL\r\n> statements executed by the repro script, which sometimes results in\r\n> tables that return \"reasonable\" estimates, and sometimes results in\r\n> tables that return \"infinite\" estimates.\r\n\r\nI now believe this is *not* an accurate theory, as the non-determinism does not\r\nseem to be correlated to a particular run of the DDL statements.\r\n\r\nSo at this point I don't think that the non-determinism depends on whether the\r\ndatabase and its tables were created by 10.1, or by 10.3, and I don't think that\r\nthe non-determinism is \"tied\" to a particular database and set of tables; the\r\nsame database and tables can sometimes lead to one prepare time, and sometimes\r\nto a different prepare time.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-09T16:13:32.000+0000","updated":"2006-12-09T16:13:32.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12457784","id":"12457784","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"body":"> That is, once I saw 500 seconds for the prepare on database 6, but I\r\n> reran DB 6 and saw 168 seconds. [...] I don't think that the non-\r\n> determinism is \"tied\" to a particular database and set of tables;\r\n> the same database and tables can sometimes lead to one prepare time,\r\n> and sometimes to a different prepare time.  \r\n\r\nAs I was looking at this problem I noticed a bug in the code that *may* be causing this variance.  It looks like we are not resetting the permuteState field in OptimizerImpl at the beginning of each \"round\" of optimization.  The result (in the cases I saw) was that the field has the value WALK_LOW at the start of the second round of optimization, which, in very timing- sensitive situations, can lead to a code-path that causes the bestCost for the round to remain UNSET--i.e. it sits as Double.MAX_VALUE.  Then if we try to add anything to that cost, we end up with Infinity, which effectively ruins most subsequent cost estimates.\r\n\r\nI still have not been able to reproduce the variance that Bryan reports, so I cannot say for sure that this is the cause.  I ran the repro 10 times against the same database and I consistently saw times of 550 to 700 seconds--and in each case I could see that the optimizer tried out all 40k permutations before completing.  Then I added code to reset the permuteState variable (see attached jumpReset.patch) and ran the repro 10 more times against the same database.  In this case every execution completed in about 200 to 220 seconds, and I could see that the optimizer timed out before trying out all permutations (which is more what I would expect).\r\n\r\nThe reason I bring this is up is because the compilation time without jumpReset.patch and the compilation time with it appear to correlate to the times that Bryan is seeing in his variance (based on his previous comment).  So I'm wondering if the two are related...?\r\n\r\nBryan, I know you are busy and that running these tests takes a while, but if you have the time/inclination, can you apply jumpReset.patch to your codeline and run your tests again?  I'm wondering what effect (if any) the patch will have on the variance that you are seeing...  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=army","name":"army","emailAddress":"qozinx at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"A B","active":true},"created":"2006-12-12T16:29:31.000+0000","updated":"2006-12-12T16:29:31.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12458025","id":"12458025","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"With jumpReset.patch applied, I cannot reproduce the varying optimize times.\r\nThe times are all in a tight range, after nearly 6x as many tests as produced\r\nthe variable optimize times before.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2006-12-13T05:57:07.000+0000","updated":"2006-12-13T05:57:07.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12662441","id":"12662441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I wonder if the patch attached to this issue can be pursued as is or if there is more work that needs to be done.  It seems it would be good to get this performance regression fixed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2009-01-09T17:40:17.523+0000","updated":"2009-01-09T17:40:17.523+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12728132","id":"12728132","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Triaged for 10.5.2.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2009-07-07T14:57:33.940+0000","updated":"2009-07-07T14:57:33.940+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12859413","id":"12859413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"body":"Hi Bryan,\r\n\r\nYou contributed a patch for this issue more than 3 years ago but the patch probably needs to be updated before it can be applied now. Are you interested in pursuing this?\r\n\r\nThanks,\r\n-Rick","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=rhillegas","name":"rhillegas","emailAddress":"rhillegas at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Rick Hillegas","active":true},"created":"2010-04-21T16:11:16.217+0000","updated":"2010-04-21T16:11:16.217+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/12859624","id":"12859624","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Hi Rick,\r\n\r\nI think that Army's patch is a good one, but I'm afraid I don't have time right\r\nnow to push this issue forward.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2010-04-22T02:06:56.027+0000","updated":"2010-04-22T02:06:56.027+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13464142","id":"13464142","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Is the patch considered high risk?  Would it be appropriate to mark this newcomer if someone wants to try out Army's patch, run tests and drive this issue to resolution?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2012-09-26T20:29:12.652+0000","updated":"2012-09-26T20:29:12.652+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13464757","id":"13464757","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"I don't consider the patch high risk. I think it is ready to pursue. I think it's reasonable\r\nto mark this as a newcomer issue. I would be willing to help work with anybody who\r\nhas the time/motivation to push this forward.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2012-09-27T14:09:37.213+0000","updated":"2012-09-27T14:09:37.213+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13800149","id":"13800149","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Verified this is still a problem.  On my machine the 10.1 query takes 13 seconds but 203 seconds on trunk.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-10-20T15:15:14.671+0000","updated":"2013-10-20T15:15:14.671+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13800154","id":"13800154","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I manually merged the changes to trunk (jumpReset_10_11_trunk_diff.txt) and find the query runs in 64 seconds on trunk  vs the 13 on 10.1, so three times faster but nowhere near the 10.1 performance.  I am using \r\njava version \"1.7.0\"\r\nJava(TM) SE Runtime Environment (build pwi3270sr5-20130619_01(SR5))\r\nIBM J9 VM (build 2.6, JRE 1.7.0 Windows 7 x86-32 20130617_152572 (JIT enabled, AOT enabled)\r\nJ9VM - R26_Java726_SR5_20130617_1436_B152572\r\nJIT  - r11.b04_20130528_38954ifx1\r\nGC   - R26_Java726_SR5_20130617_1436_B152572\r\nJ9CL - 20130617_152572)\r\nJCL - 20130616_01 based on Oracle 7u25-b12\r\n\r\nI am not sure if I made an error with the merge or if there is some other regression that has been masked by this one.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-10-20T15:58:37.010+0000","updated":"2013-10-20T15:58:37.010+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13800159","id":"13800159","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Three times faster is nothing to sneeze at!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2013-10-20T16:56:10.070+0000","updated":"2013-10-20T16:56:10.070+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13800791","id":"13800791","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"So should I  go ahead and check this in as is if tests pass?  If so, should it go back to 10.10? We aren't really set up for performance regression tests so I am not really sure what testing we could add.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-10-21T16:43:45.138+0000","updated":"2013-10-21T16:43:45.138+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13801328","id":"13801328","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"+1 to checking in the patch. It clearly makes this case better, and that's a good thing.\r\n\r\nI don't think it's worth any backporting, as nobody is specifically waiting for it\r\nthat I know of. If we put the patch only in trunk for now we can continue to\r\ntry to figure out how to test it better.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2013-10-21T23:53:47.085+0000","updated":"2013-10-21T23:53:47.085+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13801431","id":"13801431","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1534465 from [~kmarsden] in branch 'code/trunk'\r\n[ https://svn.apache.org/r1534465 ]\r\n\r\nDERBY-2130 - Optimizer performance slowdown from 10.1 to 10.2\r\n\r\nPatch contributed by Army Brown","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2013-10-22T02:37:13.612+0000","updated":"2013-10-22T02:37:13.612+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13803544","id":"13803544","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"I tried patched 10.2 and found the prepare was 13 seconds, so it seems this patch did resolve the original performance regression.  On patched 10.3 the prepare was 69 seconds, so I guess there was an additional slow down from 10.2 to 10.3 which we are still seeing on trunk 10.11. I will resolve this issue and open another one for the 10.2 to 10.3 performance slow down.\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-10-23T23:33:33.739+0000","updated":"2013-10-23T23:33:33.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13803585","id":"13803585","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Fixing just in trunk for now to monitor any performance change.  Fix should be suitable for backport.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-10-24T00:09:23.739+0000","updated":"2013-10-24T00:09:23.739+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13913302","id":"13913302","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"consider for 10.10 backport","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T18:46:05.241+0000","updated":"2014-02-26T18:46:05.241+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13913337","id":"13913337","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"looking at backporting this to 10.10","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T19:05:02.368+0000","updated":"2014-02-26T19:05:02.368+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13913351","id":"13913351","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"just reopening while working on backport to 10.10.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T19:12:24.844+0000","updated":"2014-02-26T19:12:24.844+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13913749","id":"13913749","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1572351 from mikem@apache.org in branch 'code/branches/10.10'\r\n[ https://svn.apache.org/r1572351 ]\r\n\r\nDERBY-2130 - Optimizer performance slowdown from 10.1 to 10.2\r\n\r\nbackporting change #1534465 from trunk to 10.10\r\n\r\nPatch contributed by Army Brown","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2014-02-26T23:43:36.804+0000","updated":"2014-02-26T23:43:36.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/13913752","id":"13913752","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"body":"backported from trunk to 10.10, do not plan on backporting any more for now - but see no reason it could not be.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mikem","name":"mikem","emailAddress":"mikem_app at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Mike Matrigali","active":true},"created":"2014-02-26T23:44:46.967+0000","updated":"2014-02-26T23:44:46.967+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12357299/comment/14284711","id":"14284711","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"bulk change to close all issues resolved but not closed and not changed since June 1, 2014.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2015-01-21T00:22:54.027+0000","updated":"2015-01-21T00:22:54.027+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-2130/votes","votes":1,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i06euf:"}}