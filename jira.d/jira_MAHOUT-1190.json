{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12641923","self":"https://issues.apache.org/jira/rest/api/latest/issue/12641923","key":"MAHOUT-1190","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310751","id":"12310751","key":"MAHOUT","name":"Mahout","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310751&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310751&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310751&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310751&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13060","id":"13060","description":"Apache Mahout","name":"Mahout"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/3","id":"3","description":"The problem is a duplicate of an existing issue.","name":"Duplicate"},"customfield_12312322":null,"customfield_12310220":"2013-04-10 21:42:06.832","customfield_12312323":null,"customfield_12310420":"322338","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_1954185699_*|*_5_*:*_1_*:*_0","customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2013-05-03T12:05:07.366+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAHOUT-1190/watchers","watchCount":6,"isWatching":false},"created":"2013-04-10T21:15:21.690+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"7.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12312330":null,"customfield_12311120":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12320153","id":"12320153","description":"The release will stabilize core components, improve performances and adds new streaming algorithms. Unmaintained code is getting killed as part of this","name":"0.8","archived":false,"released":true,"releaseDate":"2013-07-25"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2014-02-03T08:06:00.145+0000","customfield_12312335":null,"customfield_12312336":null,"customfield_12311720":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[],"timeoriginalestimate":null,"description":"Currently when calling .assign() on a SASV with another vector and a custom function, it will iterate through it and assign every single entry while also referring it by index.\r\n\r\nThis makes the process *hugely* expensive. (on a run of BallKMeans on the 20 newsgroups data set, profiling reveals that 92% of the runtime was spent updating assigning the vectors).\r\n\r\nHere's a prototype patch:\r\nhttps://github.com/dfilimon/mahout/commit/63998d82bb750150a6ae09052dadf6c326c62d3d","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"322683","summary":"SequentialAccessSparseVector function assignment is very slow and other iterator woes","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":22,"total":22,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13628298","id":"13628298","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Please add a test case to VectorBenchmarks.java, Most of the code in Mahout are tuned with RandomAccess and DenseVectors in mind. Sequential access is a slow format. And really the lower memory requirements does not really justify its existence. I've always wanted to delete that one from the codebase altogether. Vector benchmarks tests a lot of combination of things. I wouldnt want other formats to regress on performance.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-10T21:42:06.832+0000","updated":"2013-04-10T21:42:50.836+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13628314","id":"13628314","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"body":"Here's an updated prototype patch for review:\r\nhttps://reviews.apache.org/r/10409/\r\n\r\nRobin, Sequential is really two sorted arrays so performance wise it's about the same as a map implemented with a binary search tree. Granted we don't use those, but it's still a reasonable way of building a map IMHO. Anyway, SASV, being implemented as arrays should also be more cache-friendly (if not abused :).\r\n\r\nWhether SASV should be entirely removed could should be discussed on the list. Start a thread maybe?\r\n\r\nIn any case, I'll add a test for sure (but it's ridiculously late here now).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"created":"2013-04-10T21:54:45.395+0000","updated":"2013-04-10T21:54:45.395+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13628373","id":"13628373","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"body":"SASV is screaming fast for dot product based programs because dots on large vectors turn into very cache friendly merges.  The difference versus RASV's can literally be 10x or more due to this cache effect.\r\n\r\nI think it is valuable.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"created":"2013-04-10T22:32:20.942+0000","updated":"2013-04-10T22:32:20.942+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13628853","id":"13628853","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ssc","name":"ssc","emailAddress":"ssc at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ssc&avatarId=14353","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ssc&avatarId=14353","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ssc&avatarId=14353","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ssc&avatarId=14353"},"displayName":"Sebastian Schelter","active":true},"body":"I took a look in the code and the situation is even worse, as DenseVector overrides assign and only has a special handling for PlusMult (not Plus!)\r\n\r\nI think we should extend the interfaces, so that you can ask a function whether f(0,x) = 0 and f(x,0) = x holds. I think we should keep definitely keep SASV and make sure that all vectors behave best as possible.\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ssc","name":"ssc","emailAddress":"ssc at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ssc&avatarId=14353","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ssc&avatarId=14353","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ssc&avatarId=14353","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ssc&avatarId=14353"},"displayName":"Sebastian Schelter","active":true},"created":"2013-04-11T11:39:23.264+0000","updated":"2013-04-11T11:48:18.959+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13629031","id":"13629031","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"body":"\"Sequential access is a slow format. \"\r\n\r\n?!?!\r\n\r\nIt was designed for speed, not memory, but for some very specific (and common) uses:  The point is that it should a) be only used immutably, and b) should be used for things which require primarily iteration over the whole nonzero range (dot, plus, minus, cross, norm, etc).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jake.mannix","name":"jake.mannix","emailAddress":"jake dot mannix at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jake Mannix","active":true},"created":"2013-04-11T15:48:57.760+0000","updated":"2013-04-11T15:48:57.760+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13630243","id":"13630243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Jake I understand the use, but IIRC the Vector benchmarks didn't show it when we last tested it two years ago. I would like to see the new numbers to be convinced.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-12T16:14:20.286+0000","updated":"2013-04-12T16:14:20.286+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13630312","id":"13630312","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"{noformat}\r\nBenchMarks              DenseVector             RandSparseVector        SeqSparseVector         Clusters                Dense.fn(Rand)          Dense.fn(Seq)           Rand.fn(Dense)          Rand.fn(Seq)            Seq.fn(Dense)           Seq.fn(Rand)            Closest center without EClosest center with Elka\r\nClone                                                                                           \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 0.094099s;        sum = 0.318823s;        sum = 0.072381s;        \r\n                        min = 0.0010ms;         min = 0.0010ms;         min = 0.0010ms;         \r\n                        max = 2.558ms;          max = 4.139ms;          max = 2.145ms;          \r\n                        mean = 0.004704ms;      mean = 0.015941ms;      mean = 0.003619ms;      \r\n                        stdDev = 0.058739ms;    stdDev = 0.123114ms;    stdDev = 0.050722ms;    \r\n                        Speed = 212542.11 /sec  Speed = 62730.73 /sec   Speed = 276315.6 /sec   \r\n                        Rate = 2550.5054 MB/s   Rate = 752.7688 MB/s    Rate = 3315.7874 MB/s   \r\n\r\nCreate (copy)                                                                                   \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 0.345591s;        sum = 1.548758s;        sum = 0.91669s;         \r\n                        min = 0.011ms;          min = 0.041ms;          min = 0.03ms;           \r\n                        max = 6.345ms;          max = 4.417ms;          max = 4.338ms;          \r\n                        mean = 0.017279ms;      mean = 0.077437ms;      mean = 0.045834ms;      \r\n                        stdDev = 0.061681ms;    stdDev = 0.211875ms;    stdDev = 0.054088ms;    \r\n                        Speed = 57871.875 /sec  Speed = 12913.573 /sec  Speed = 21817.627 /sec  \r\n                        Rate = 694.4625 MB/s    Rate = 154.96289 MB/s   Rate = 261.81152 MB/s   \r\n\r\nCreate (incrementally)                                                                                                  \r\n                        nCalls = 20000;         nCalls = 20000;                                 nCalls = 5000;          \r\n                        sum = 0.11603s;         sum = 2.327242s;                                sum = 0.441183s;        \r\n                        min = 0.0030ms;         min = 0.07ms;                                   min = 0.067ms;          \r\n                        max = 0.28ms;           max = 8.522ms;                                  max = 2.236ms;          \r\n                        mean = 0.005801ms;      mean = 0.116362ms;                              mean = 0.088236ms;      \r\n                        stdDev = 0.004521ms;    stdDev = 0.268825ms;                            stdDev = 0.144592ms;    \r\n                        Speed = 172369.22 /sec  Speed = 8593.863 /sec                           Speed = 45332.66 /sec   \r\n                        Rate = 2068.4307 MB/s   Rate = 103.126366 MB/s                          Rate = 543.99194 MB/s   \r\n\r\nDeserialize                                                                                     \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 0.935276s;        sum = 1.953629s;        sum = 1.448476s;        \r\n                        min = 0.031ms;          min = 0.069ms;          min = 0.047ms;          \r\n                        max = 32.432ms;         max = 21.848ms;         max = 19.022ms;         \r\n                        mean = 0.046763ms;      mean = 0.097681ms;      mean = 0.072423ms;      \r\n                        stdDev = 0.23671ms;     stdDev = 0.195235ms;    stdDev = 0.143115ms;    \r\n                        Speed = 21384.06 /sec   Speed = 10237.357 /sec  Speed = 13807.615 /sec  \r\n                        Rate = 256.60873 MB/s   Rate = 122.8483 MB/s    Rate = 165.69139 MB/s   \r\n\r\nDotProduct                                                                                                                                                                                                                                                              \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 0.025022s;        sum = 0.822768s;        sum = 1.034785s;                                sum = 0.782512s;        sum = 1.221851s;        sum = 0.889112s;        sum = 1.676991s;        sum = 0.642186s;        sum = 0.778225s;        \r\n                        min = 0.0010ms;         min = 0.025ms;          min = 0.042ms;                                  min = 0.034ms;          min = 0.049ms;          min = 0.029ms;          min = 0.075ms;          min = 0.028ms;          min = 0.02ms;           \r\n                        max = 0.097ms;          max = 5.611ms;          max = 1.665ms;                                  max = 1.868ms;          max = 0.221ms;          max = 1.831ms;          max = 2.026ms;          max = 0.385ms;          max = 1.614ms;          \r\n                        mean = 0.001251ms;      mean = 0.041138ms;      mean = 0.051739ms;                              mean = 0.039125ms;      mean = 0.061092ms;      mean = 0.044455ms;      mean = 0.083849ms;      mean = 0.032109ms;      mean = 0.038911ms;      \r\n                        stdDev = 0.003134ms;    stdDev = 0.074289ms;    stdDev = 0.026677ms;                            stdDev = 0.023449ms;    stdDev = 0.008498ms;    stdDev = 0.029101ms;    stdDev = 0.025225ms;    stdDev = 0.009308ms;    stdDev = 0.016324ms;    \r\n                        Speed = 799296.6 /sec   Speed = 24308.19 /sec   Speed = 19327.686 /sec                          Speed = 25558.713 /sec  Speed = 16368.607 /sec  Speed = 22494.354 /sec  Speed = 11926.122 /sec  Speed = 31143.625 /sec  Speed = 25699.508 /sec  \r\n                        Rate = 9591.56 MB/s     Rate = 291.69827 MB/s   Rate = 231.93224 MB/s                           Rate = 306.70456 MB/s   Rate = 196.4233 MB/s    Rate = 269.93225 MB/s   Rate = 143.11348 MB/s   Rate = 373.7235 MB/s    Rate = 308.3941 MB/s    \r\n\r\nSerialize                                                                                       \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 1.044763s;        sum = 1.841978s;        sum = 1.302853s;        \r\n                        min = 0.03ms;           min = 0.067ms;          min = 0.04ms;           \r\n                        max = 4.773ms;          max = 4.727ms;          max = 4.417ms;          \r\n                        mean = 0.052238ms;      mean = 0.092098ms;      mean = 0.065142ms;      \r\n                        stdDev = 0.106575ms;    stdDev = 0.130668ms;    stdDev = 0.120166ms;    \r\n                        Speed = 19143.098 /sec  Speed = 10857.893 /sec  Speed = 15350.926 /sec  \r\n                        Rate = 229.71718 MB/s   Rate = 130.29472 MB/s   Rate = 184.21112 MB/s   \r\n\r\norg.apache.mahout.common.distance.CosineDistanceMeasure                                                                                                                                                                                                                                                                                                \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 200;           nCalls = 200;           \r\n                        sum = 0.217529s;        sum = 10.589026s;       sum = 12.866331s;                               sum = 9.352726s;        sum = 5.674042s;        sum = 8.813188s;        sum = 7.713065s;        sum = 14.759785s;       sum = 17.554847s;       sum = 28.72354s;        sum = 25.441976s;       \r\n                        min = 0.0090ms;         min = 0.446ms;          min = 0.54ms;                                   min = 0.429ms;          min = 0.266ms;          min = 0.406ms;          min = 0.351ms;          min = 0.683ms;          min = 0.802ms;          min = 138.819ms;        min = 123.072ms;        \r\n                        max = 0.296ms;          max = 3.396ms;          max = 3.285ms;                                  max = 2.494ms;          max = 1.711ms;          max = 1.425ms;          max = 2.414ms;          max = 2.395ms;          max = 3.06ms;           max = 155.755ms;        max = 138.626ms;        \r\n                        mean = 0.010876ms;      mean = 0.529451ms;      mean = 0.643316ms;                              mean = 0.467636ms;      mean = 0.283702ms;      mean = 0.440659ms;      mean = 0.385653ms;      mean = 0.737989ms;      mean = 0.877742ms;      mean = 143.6177ms;      mean = 127.20988ms;     \r\n                        stdDev = 0.004232ms;    stdDev = 0.12417ms;     stdDev = 0.086663ms;                            stdDev = 0.091864ms;    stdDev = 0.02228ms;     stdDev = 0.046419ms;    stdDev = 0.049665ms;    stdDev = 0.059414ms;    stdDev = 0.110088ms;    stdDev = 2.441513ms;    stdDev = 2.224582ms;    \r\n                        Speed = 91941.766 /sec  Speed = 1888.7478 /sec  Speed = 1554.4447 /sec                          Speed = 2138.414 /sec   Speed = 3524.8242 /sec  Speed = 2269.3264 /sec  Speed = 2593.003 /sec   Speed = 1355.0332 /sec  Speed = 1139.2864 /sec  Speed = 696.29297 /sec  Speed = 786.1024 /sec   \r\n                        Rate = 1103.3013 MB/s   Rate = 22.664974 MB/s   Rate = 18.653337 MB/s                           Rate = 25.66097 MB/s    Rate = 42.297894 MB/s   Rate = 27.231916 MB/s   Rate = 31.116035 MB/s   Rate = 16.260399 MB/s   Rate = 13.671438 MB/s   Rate = 8.355516 MB/s    Rate = 9.433229 MB/s    \r\n\r\norg.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                                                                                                                                                                                                                                \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 200;           nCalls = 200;           \r\n                        sum = 0.25666s;         sum = 11.483341s;       sum = 13.724728s;                               sum = 9.518714s;        sum = 5.947292s;        sum = 9.080387s;        sum = 7.758182s;        sum = 14.655626s;       sum = 17.584958s;       sum = 28.465162s;       sum = 26.106154s;       \r\n                        min = 0.0090ms;         min = 0.523ms;          min = 0.614ms;                                  min = 0.43ms;           min = 0.265ms;          min = 0.406ms;          min = 0.351ms;          min = 0.682ms;          min = 0.8ms;            min = 138.436ms;        min = 126.409ms;        \r\n                        max = 0.067ms;          max = 2.595ms;          max = 2.481ms;                                  max = 2.496ms;          max = 2.09ms;           max = 2.421ms;          max = 2.267ms;          max = 5.701ms;          max = 3.355ms;          max = 149.691ms;        max = 143.473ms;        \r\n                        mean = 0.012833ms;      mean = 0.574167ms;      mean = 0.686236ms;                              mean = 0.475935ms;      mean = 0.297364ms;      mean = 0.454019ms;      mean = 0.387909ms;      mean = 0.732781ms;      mean = 0.879247ms;      mean = 142.32581ms;     mean = 130.53077ms;     \r\n                        stdDev = 0.007987ms;    stdDev = 0.103067ms;    stdDev = 0.047585ms;                            stdDev = 0.101134ms;    stdDev = 0.048258ms;    stdDev = 0.061061ms;    stdDev = 0.054873ms;    stdDev = 0.057892ms;    stdDev = 0.115034ms;    stdDev = 2.017967ms;    stdDev = 2.686664ms;    \r\n                        Speed = 77924.1 /sec    Speed = 1741.6534 /sec  Speed = 1457.2238 /sec                          Speed = 2101.1243 /sec  Speed = 3362.875 /sec   Speed = 2202.5493 /sec  Speed = 2577.9236 /sec  Speed = 1364.6636 /sec  Speed = 1137.3357 /sec  Speed = 702.6132 /sec   Speed = 766.10284 /sec  \r\n                        Rate = 935.08923 MB/s   Rate = 20.899841 MB/s   Rate = 17.486685 MB/s                           Rate = 25.213491 MB/s   Rate = 40.3545 MB/s     Rate = 26.430593 MB/s   Rate = 30.935083 MB/s   Rate = 16.375963 MB/s   Rate = 13.648029 MB/s   Rate = 8.431359 MB/s    Rate = 9.193234 MB/s    \r\n\r\norg.apache.mahout.common.distance.ManhattanDistanceMeasure                                                                                                                                                                                                                                                                                                \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 200;           nCalls = 200;           \r\n                        sum = 3.170042s;        sum = 32.556211s;       sum = 25.579182s;                               sum = 10.780511s;       sum = 9.422344s;        sum = 32.343222s;       sum = 30.738856s;       sum = 12.301594s;       sum = 26.174744s;       sum = 85.775997s;       sum = 78.017392s;       \r\n                        min = 0.123ms;          min = 1.412ms;          min = 1.14ms;                                   min = 0.481ms;          min = 0.413ms;          min = 1.458ms;          min = 1.397ms;          min = 0.54ms;           min = 1.154ms;          min = 417.87ms;         min = 372.156ms;        \r\n                        max = 4.961ms;          max = 7.106ms;          max = 16.967ms;                                 max = 2.4ms;            max = 3.252ms;          max = 4.803ms;          max = 4.546ms;          max = 4.868ms;          max = 5.869ms;          max = 468.881ms;        max = 426.024ms;        \r\n                        mean = 0.158502ms;      mean = 1.62781ms;       mean = 1.278959ms;                              mean = 0.539025ms;      mean = 0.471117ms;      mean = 1.617161ms;      mean = 1.536942ms;      mean = 0.615079ms;      mean = 1.308737ms;      mean = 428.879985ms;    mean = 390.08696ms;     \r\n                        stdDev = 0.139484ms;    stdDev = 0.426293ms;    stdDev = 0.193845ms;                            stdDev = 0.078308ms;    stdDev = 0.08385ms;     stdDev = 0.229207ms;    stdDev = 0.204743ms;    stdDev = 0.106561ms;    stdDev = 0.169764ms;    stdDev = 8.345077ms;    stdDev = 7.43826ms;     \r\n                        Speed = 6309.0645 /sec  Speed = 614.3221 /sec   Speed = 781.8858 /sec                           Speed = 1855.1996 /sec  Speed = 2122.614 /sec   Speed = 618.36755 /sec  Speed = 650.6423 /sec   Speed = 1625.8055 /sec  Speed = 764.09534 /sec  Speed = 233.16545 /sec  Speed = 256.3531 /sec   \r\n                        Rate = 75.70878 MB/s    Rate = 7.3718657 MB/s   Rate = 9.38263 MB/s                             Rate = 22.262396 MB/s   Rate = 25.471369 MB/s   Rate = 7.420411 MB/s    Rate = 7.807708 MB/s    Rate = 19.509668 MB/s   Rate = 9.169145 MB/s    Rate = 2.7979856 MB/s   Rate = 3.0762374 MB/s   \r\n\r\norg.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure                                                                                                                                                                                                                                                                                                \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 200;           nCalls = 200;           \r\n                        sum = 0.290806s;        sum = 11.536136s;       sum = 13.880762s;                               sum = 9.766405s;        sum = 5.758582s;        sum = 9.01511s;         sum = 7.766585s;        sum = 15.236569s;       sum = 17.606654s;       sum = 28.457724s;       sum = 26.15304s;        \r\n                        min = 0.0090ms;         min = 0.523ms;          min = 0.615ms;                                  min = 0.431ms;          min = 0.265ms;          min = 0.406ms;          min = 0.351ms;          min = 0.684ms;          min = 0.803ms;          min = 138.713ms;        min = 126.679ms;        \r\n                        max = 0.646ms;          max = 2.827ms;          max = 1.961ms;                                  max = 2.81ms;           max = 1.586ms;          max = 2.527ms;          max = 2.326ms;          max = 5.876ms;          max = 3.283ms;          max = 154.886ms;        max = 143.716ms;        \r\n                        mean = 0.01454ms;       mean = 0.576806ms;      mean = 0.694038ms;                              mean = 0.48832ms;       mean = 0.287929ms;      mean = 0.450755ms;      mean = 0.388329ms;      mean = 0.761828ms;      mean = 0.880332ms;      mean = 142.28862ms;     mean = 130.7652ms;      \r\n                        stdDev = 0.029554ms;    stdDev = 0.105924ms;    stdDev = 0.051278ms;                            stdDev = 0.10958ms;     stdDev = 0.027647ms;    stdDev = 0.058501ms;    stdDev = 0.057172ms;    stdDev = 0.119059ms;    stdDev = 0.118333ms;    stdDev = 2.144555ms;    stdDev = 2.273529ms;    \r\n                        Speed = 68774.37 /sec   Speed = 1733.6827 /sec  Speed = 1440.843 /sec                           Speed = 2047.8364 /sec  Speed = 3473.0774 /sec  Speed = 2218.4976 /sec  Speed = 2575.1343 /sec  Speed = 1312.6315 /sec  Speed = 1135.9342 /sec  Speed = 702.7969 /sec   Speed = 764.72943 /sec  \r\n                        Rate = 825.2924 MB/s    Rate = 20.804193 MB/s   Rate = 17.290117 MB/s                           Rate = 24.574038 MB/s   Rate = 41.67693 MB/s    Rate = 26.621973 MB/s   Rate = 30.901615 MB/s   Rate = 15.751578 MB/s   Rate = 13.63121 MB/s    Rate = 8.433563 MB/s    Rate = 9.176754 MB/s    \r\n\r\norg.apache.mahout.common.distance.TanimotoDistanceMeasure                                                                                                                                                                                                                                                                                                \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;                                 nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 200;           nCalls = 200;           \r\n                        sum = 0.204348s;        sum = 11.31s;           sum = 13.732429s;                               sum = 9.189063s;        sum = 5.670745s;        sum = 8.865962s;        sum = 7.617151s;        sum = 14.710979s;       sum = 17.103456s;       sum = 29.166936s;       sum = 26.670028s;       \r\n                        min = 0.0090ms;         min = 0.496ms;          min = 0.589ms;                                  min = 0.43ms;           min = 0.265ms;          min = 0.406ms;          min = 0.351ms;          min = 0.682ms;          min = 0.802ms;          min = 142.985ms;        min = 129.507ms;        \r\n                        max = 0.029ms;          max = 2.249ms;          max = 1.555ms;                                  max = 2.174ms;          max = 5.008ms;          max = 2.216ms;          max = 1.027ms;          max = 1.983ms;          max = 2.472ms;          max = 155.875ms;        max = 143.117ms;        \r\n                        mean = 0.010217ms;      mean = 0.5655ms;        mean = 0.686621ms;                              mean = 0.459453ms;      mean = 0.283537ms;      mean = 0.443298ms;      mean = 0.380857ms;      mean = 0.735548ms;      mean = 0.855172ms;      mean = 145.83468ms;     mean = 133.35014ms;     \r\n                        stdDev = 8.95E-4ms;     stdDev = 0.061798ms;    stdDev = 0.044508ms;                            stdDev = 0.044283ms;    stdDev = 0.038711ms;    stdDev = 0.050872ms;    stdDev = 0.033901ms;    stdDev = 0.05398ms;     stdDev = 0.05586ms;     stdDev = 1.889893ms;    stdDev = 2.16708ms;     \r\n                        Speed = 97872.26 /sec   Speed = 1768.3466 /sec  Speed = 1456.4066 /sec                          Speed = 2176.5005 /sec  Speed = 3526.8733 /sec  Speed = 2255.8184 /sec  Speed = 2625.6536 /sec  Speed = 1359.5288 /sec  Speed = 1169.3542 /sec  Speed = 685.70795 /sec  Speed = 749.90546 /sec  \r\n                        Rate = 1174.4672 MB/s   Rate = 21.22016 MB/s    Rate = 17.47688 MB/s                            Rate = 26.118008 MB/s   Rate = 42.322483 MB/s   Rate = 27.069822 MB/s   Rate = 31.507845 MB/s   Rate = 16.314346 MB/s   Rate = 14.032252 MB/s   Rate = 8.228496 MB/s    Rate = 8.998866 MB/s    \r\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-12T16:57:00.296+0000","updated":"2013-04-12T16:57:00.296+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13630317","id":"13630317","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"I dont see the edge of SeqSV against RandSV in math operations. However SeqSV kicks ass on serialize/deserialize/clone","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-12T16:58:44.845+0000","updated":"2013-04-12T16:59:45.448+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13630364","id":"13630364","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"body":"SASV will only do better on data large enough to cause the RASV to blow the cache.  That may be large enough on modern machines to be irrelevant much of the time.  L3 cache on a Sandy Bridge is 10-15MB.\r\n\r\nIf you run the benchmarks with, say, 50 million non-zeros I would expect you to see some dramatic differences.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tdunning","name":"tdunning","emailAddress":"ted dot dunning at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Ted Dunning","active":true},"created":"2013-04-12T17:23:18.512+0000","updated":"2013-04-12T17:23:18.512+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13630519","id":"13630519","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Sure I agree with that, but for practical POV, when we do ML, are we looking at 50Mil non zeros  I mean with hashing trick, we have seen that same amount of quality can be generated faster at lower dimensions even with collisions. As you can see for realworld mimicking datasets like the one in VectorBenchmarks, the \"cache-friendliness\" is not visible. At-least on Java6. I still remember 3 years ago when Jake and I spend almost 2 nights straight tuning Vectors and bringing K-Means down from 30m to 1.5 min per iterations. There is a lot to be done here and it has a scope to impact a lot of algorithms in Mahout.\r\n\r\nOn that note, I have seen a lot of attention recently on JBLAS(http://mikiobraun.github.io/jblas/). For next-gen performance improvement on Mahout it may be worthwhile for us to invest in that as opposed to tweaking around in Bytecode expecting Java to do the right thing. I have recently prototyped a Javascript vector code that does cosine distance faster than Java using asm.js (http://kripken.github.io/mloc_emscripten_talk). Java is still un-usable for large scale mathy stuff here at Google. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-12T19:18:26.236+0000","updated":"2013-04-12T19:18:26.236+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631150","id":"13631150","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"As it turns out the Non Default iterator on the RandomAccessSparseVector was looking up hashmap for values. By iterating and copying a parallel array, I was able to speed up all operations of RandomAccessSparseVector by 25-45% on dot products and distance measures. Its almost twice as fast as SASV on dot product even after applying Dan's Patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-13T20:41:22.715+0000","updated":"2013-04-13T20:41:22.715+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631235","id":"13631235","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Few more good updates\r\n1) I moved the iterator logic of RASV to OpenIntDoubleHashmap, this removes the extra copy needed and iterates directly on the hashmap arrays. This is giving an extra bump of 5-10% for RASV on benchmarks. Overall the benchmarks have improved 30-55% for RASV\r\n2) The dot product for SASV was in-efficiently implemented as well, I also noticed the dot product has some magic constants. We need to remove those as the tests on one machine is not an indicator on overall performance. Rewriting the dot product for SASV pulled it ahead of RASV by 40% (even with all the optimizations listed above).\r\n3) The benchmark code was running at high density. Increasing the cardinality to 100K and keeping doc length at 1000 (like a text corpus), the benchmarks are looking more realistic.\r\n\r\nBenchmark running at 100K cardinality and 1K doc length.\r\n\r\n{noformat}\r\nBenchMarks              DenseVector             RandSparseVector        SeqSparseVector         Dense.fn(Rand)          Dense.fn(Seq)           Rand.fn(Dense)          Rand.fn(Seq)            Seq.fn(Dense)           Seq.fn(Rand)            \r\nCreate (copy)                                                                                   \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 2.898515s;        sum = 1.598739s;        sum = 0.744008s;        \r\n                        min = 0.083ms;          min = 0.059ms;          min = 0.027ms;          \r\n                        max = 43.645ms;         max = 14.333ms;         max = 21.283ms;         \r\n                        mean = 0.144925ms;      mean = 0.079936ms;      mean = 0.0372ms;        \r\n                        stdDev = 0.95928ms;     stdDev = 0.173512ms;    stdDev = 0.150829ms;    \r\n                        Speed = 6900.085 /sec   Speed = 12509.859 /sec  Speed = 26881.432 /sec  \r\n                        Rate = 82.801025 MB/s   Rate = 150.11832 MB/s   Rate = 322.57718 MB/s   \r\n\r\nDotProduct                                                                                                                                                                                                                                      \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 2.077209s;        sum = 1.117693s;        sum = 0.712275s;        sum = 1.932336s;        sum = 3.017146s;        sum = 1.910794s;        sum = 1.990205s;        sum = 3.039884s;        sum = 0.769796s;        \r\n                        min = 0.084ms;          min = 0.038ms;          min = 0.016ms;          min = 0.072ms;          min = 0.127ms;          min = 0.078ms;          min = 0.086ms;          min = 0.131ms;          min = 0.022ms;          \r\n                        max = 5.707ms;          max = 5.051ms;          max = 0.984ms;          max = 0.419ms;          max = 6.065ms;          max = 0.221ms;          max = 0.614ms;          max = 0.913ms;          max = 0.31ms;           \r\n                        mean = 0.10386ms;       mean = 0.055884ms;      mean = 0.035613ms;      mean = 0.096616ms;      mean = 0.150857ms;      mean = 0.095539ms;      mean = 0.09951ms;       mean = 0.151994ms;      mean = 0.038489ms;      \r\n                        stdDev = 0.040833ms;    stdDev = 0.055292ms;    stdDev = 0.034072ms;    stdDev = 0.020768ms;    stdDev = 0.061155ms;    stdDev = 0.005271ms;    stdDev = 0.0227ms;      stdDev = 0.037256ms;    stdDev = 0.024026ms;    \r\n                        Speed = 9628.304 /sec   Speed = 17894.0 /sec    Speed = 28079.041 /sec  Speed = 10350.167 /sec  Speed = 6628.781 /sec   Speed = 10466.853 /sec  Speed = 10049.216 /sec  Speed = 6579.198 /sec   Speed = 25980.91 /sec   \r\n                        Rate = 115.53966 MB/s   Rate = 214.72801 MB/s   Rate = 336.94852 MB/s   Rate = 124.202 MB/s     Rate = 79.54537 MB/s    Rate = 125.60224 MB/s   Rate = 120.59059 MB/s   Rate = 78.950386 MB/s   Rate = 311.77094 MB/s   \r\n\r\norg.apache.mahout.common.distance.CosineDistanceMeasure                                                                                                                                                                                                                        \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 20.332047s;       sum = 10.604119s;       sum = 9.226591s;        sum = 15.916052s;       sum = 27.26601s;        sum = 15.092329s;       sum = 7.213573s;        sum = 29.085011s;       sum = 19.878921s;       \r\n                        min = 0.927ms;          min = 0.47ms;           min = 0.395ms;          min = 0.725ms;          min = 1.261ms;          min = 0.584ms;          min = 0.327ms;          min = 1.341ms;          min = 0.919ms;          \r\n                        max = 4.847ms;          max = 3.641ms;          max = 5.204ms;          max = 1.338ms;          max = 6.759ms;          max = 1.486ms;          max = 0.677ms;          max = 2.713ms;          max = 53.207ms;         \r\n                        mean = 1.016602ms;      mean = 0.530205ms;      mean = 0.461329ms;      mean = 0.795802ms;      mean = 1.3633ms;        mean = 0.754616ms;      mean = 0.360678ms;      mean = 1.45425ms;       mean = 0.993946ms;      \r\n                        stdDev = 0.0485ms;      stdDev = 0.061561ms;    stdDev = 0.120737ms;    stdDev = 0.032558ms;    stdDev = 0.085586ms;    stdDev = 0.08194ms;     stdDev = 0.039636ms;    stdDev = 0.081356ms;    stdDev = 0.546942ms;    \r\n                        Speed = 983.6688 /sec   Speed = 1886.0596 /sec  Speed = 2167.6477 /sec  Speed = 1256.593 /sec   Speed = 733.51404 /sec  Speed = 1325.1765 /sec  Speed = 2772.551 /sec   Speed = 687.6394 /sec   Speed = 1006.0908 /sec  \r\n                        Rate = 11.804027 MB/s   Rate = 22.632715 MB/s   Rate = 26.011774 MB/s   Rate = 15.079117 MB/s   Rate = 8.802169 MB/s    Rate = 15.902119 MB/s   Rate = 33.270615 MB/s   Rate = 8.251673 MB/s    Rate = 12.073091 MB/s   \r\n\r\norg.apache.mahout.common.distance.EuclideanDistanceMeasure                                                                                                                                                                                                                        \r\n                        nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         nCalls = 20000;         \r\n                        sum = 20.754439s;       sum = 11.289392s;       sum = 9.224848s;        sum = 16.26417s;        sum = 27.594554s;       sum = 15.53272s;        sum = 7.403939s;        sum = 29.404334s;       sum = 19.927117s;       \r\n                        min = 0.932ms;          min = 0.51ms;           min = 0.419ms;          min = 0.663ms;          min = 1.266ms;          min = 0.571ms;          min = 0.326ms;          min = 1.338ms;          min = 0.919ms;          \r\n                        max = 2.279ms;          max = 4.234ms;          max = 14.486ms;         max = 1.672ms;          max = 2.89ms;           max = 1.745ms;          max = 0.973ms;          max = 3.133ms;          max = 1.858ms;          \r\n                        mean = 1.037721ms;      mean = 0.564469ms;      mean = 0.461242ms;      mean = 0.813208ms;      mean = 1.379727ms;      mean = 0.776636ms;      mean = 0.370196ms;      mean = 1.470216ms;      mean = 0.996355ms;      \r\n                        stdDev = 0.07615ms;     stdDev = 0.063422ms;    stdDev = 0.104271ms;    stdDev = 0.062487ms;    stdDev = 0.092051ms;    stdDev = 0.106946ms;    stdDev = 0.056665ms;    stdDev = 0.093252ms;    stdDev = 0.064435ms;    \r\n                        Speed = 963.6493 /sec   Speed = 1771.5746 /sec  Speed = 2168.0574 /sec  Speed = 1229.6969 /sec  Speed = 724.7807 /sec   Speed = 1287.6045 /sec  Speed = 2701.265 /sec   Speed = 680.1718 /sec   Speed = 1003.6574 /sec  \r\n                        Rate = 11.563792 MB/s   Rate = 21.258896 MB/s   Rate = 26.01669 MB/s    Rate = 14.756363 MB/s   Rate = 8.697369 MB/s    Rate = 15.451254 MB/s   Rate = 32.41518 MB/s    Rate = 8.162063 MB/s    Rate = 12.04389 MB/s    \r\n\r\n{noformat}\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-14T00:06:26.687+0000","updated":"2013-04-14T00:06:26.687+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631236","id":"13631236","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"1) Mutable Iterators for OpenKeyTypeValueTypeHashMap\r\n2) Faster dot product for SASV\r\n3) Some portions from Dan's CL in AbstractVector","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-14T00:07:45.437+0000","updated":"2013-04-14T00:07:45.437+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631319","id":"13631319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"body":"Awesome work! Thanks for the benchmarks especially! :)\r\n\r\nJust wanted to say that my patch doesn't do the right thing: I found bugs, some of which relate to the way I'm using iterators, there's a thread on the mailing list.\r\nI think that there's still room for improvement on SSAV but haven't had time to work on it this weekend.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"created":"2013-04-14T14:05:18.346+0000","updated":"2013-04-14T14:05:18.346+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631336","id":"13631336","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Here is a summary of the improvements across two sparsities (100:1, 10:1). At 10K cardinality DenseVectors are about 3x faster on CosineDistance than the sparse format.\r\nhttps://docs.google.com/spreadsheet/ccc?key=0AhewTD_ZgznddGFQbWJCQTZXSnFULUYzdURfWDRJQlE#gid=1","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-14T15:56:01.569+0000","updated":"2013-04-14T15:56:01.569+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631443","id":"13631443","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Iterator fix also contains the optimization of moving iteration close to the OpenIntDoubleHashMap\r\n\r\nThe seq-dot product implementation is an independent change.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-15T01:06:08.965+0000","updated":"2013-04-15T01:06:08.965+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631520","id":"13631520","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"Latest patches","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-15T05:58:13.749+0000","updated":"2013-04-15T05:58:13.749+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631594","id":"13631594","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"body":"Robin, what are the benchmarks you included in the spreadsheet exactly?\r\n\r\nI want to include my revised changes and compare the performance. Are you looking at\r\n\"[Benchmark name] DenseVector | RandSparseVector | SeqSparseVector\"?\r\n\r\nAlso, what are the ones with Dense.fn(Rand), Dense.fn(Seq), Rand.fn(Seq), ...?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"created":"2013-04-15T08:46:55.617+0000","updated":"2013-04-15T08:46:55.617+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631775","id":"13631775","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"body":"I am comparing homogenous benchmarks Dense v/s Dense, Seq vs Seq. To iterate faster I disabled the Dense.fn(Rand)... etc in code. Also I disabled the clustering benchmarks.\r\nIf you have a patch ready please upload it and I can use my machine so as to compare the improvement.\r\n\r\nDan, can you help me out by looking at those clustering tests and Pearson are failing due to me fixing the iterator ? I am thinking the expectations are wrong but I dont know enough about those tests.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=robinanil","name":"robinanil","emailAddress":"robinanil at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=robinanil&avatarId=14747","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=robinanil&avatarId=14747","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=robinanil&avatarId=14747","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=robinanil&avatarId=14747"},"displayName":"Robin Anil","active":true},"created":"2013-04-15T15:06:14.878+0000","updated":"2013-04-15T15:06:14.878+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13631787","id":"13631787","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"body":"I'm working on a patch now. I'd also like to improve aggregate() and I'd love to see nearly all functions implemented in terms of aggregate() and assign().\r\n\r\nI'm also failing some tests right now... but one thing I noticed which I was getting wrong is that you should only ever use the iterator when dealing with isSequentialAccess()==true vectors.\r\nOtherwise, the order of the operations matters.\r\nThis doesn't seem like it should be a problem for clustering since from what I've seen it's only doing additions when adding a new point to a cluster.\r\n\r\nAnyway, I'm also looking at the failing tests and since I'm changing more things, you can leave this to me.\r\nI'll ping when I have a patch.\r\n\r\nThanks a lot!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"created":"2013-04-15T15:18:02.203+0000","updated":"2013-04-15T15:18:02.203+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13632565","id":"13632565","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"body":"Integrated in Mahout-Quality #1965 (See [https://builds.apache.org/job/Mahout-Quality/1965/])\r\n    MAHOUT-1190 fix the tests to use getNumNonZeroElements (Revision 1468212)\r\nMAHOUT-1190 iterator improvements, Use NonZeroElement count in PearsonSimilarity, Speed up SASV dot product (Revision 1468209)\r\n\r\n     Result = SUCCESS\r\nrobinanil : \r\nFiles : \r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/CentroidTest.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/WeightedVectorTest.java\r\n\r\nrobinanil : \r\nFiles : \r\n* /mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/measures/PearsonCorrelationSimilarity.java\r\n* /mahout/trunk/core/src/test/java/org/apache/mahout/clustering/classify/ClusterClassificationDriverTest.java\r\n* /mahout/trunk/core/src/test/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorTest.java\r\n* /mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/measures/VectorSimilarityMeasuresTest.java\r\n* /mahout/trunk/math/src/main/java-templates/org/apache/mahout/math/map/AbstractKeyTypeObjectMap.java.t\r\n* /mahout/trunk/math/src/main/java-templates/org/apache/mahout/math/map/OpenKeyTypeValueTypeHashMap.java.t\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractMatrix.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/DelegatingVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/DenseVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/NamedVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java\r\n* /mahout/trunk/math/src/main/java/org/apache/mahout/math/Vector.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/AbstractVectorTest.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/CentroidTest.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/TestDenseVector.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java\r\n* /mahout/trunk/math/src/test/java/org/apache/mahout/math/WeightedVectorTest.java\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","emailAddress":"jira at apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true},"created":"2013-04-16T05:01:51.696+0000","updated":"2013-04-16T05:01:51.696+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12641923/comment/13648354","id":"13648354","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"body":"Moved into this other issue as it grew in scope:\r\nhttps://issues.apache.org/jira/browse/MAHOUT-1202","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=dfilimon","name":"dfilimon","emailAddress":"dangeorge dot filimon at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dan Filimon","active":true},"created":"2013-05-03T12:05:07.384+0000","updated":"2013-05-03T12:05:07.384+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/MAHOUT-1190/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1jm5b:"}}