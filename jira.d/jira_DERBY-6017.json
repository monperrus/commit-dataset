{"expand":"renderedFields,names,schema,transitions,operations,editmeta,changelog","id":"12624466","self":"https://issues.apache.org/jira/rest/api/latest/issue/12624466","key":"DERBY-6017","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/10594","id":"10594","key":"DERBY","name":"Derby","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=10594&avatarId=10122","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=10594&avatarId=10122","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=10594&avatarId=10122","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=10594&avatarId=10122"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10090","id":"10090","description":"DB related projects","name":"DB"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12323475","id":"12323475","description":"Head of 10.8 branch starting 2014-01-13","name":"10.8.3.3","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12323562","id":"12323562","description":"Head of 10.9 branch after releasing 10.9.1.0","name":"10.9.2.2","archived":false,"released":false},{"self":"https://issues.apache.org/jira/rest/api/2/version/12321550","id":"12321550","description":"First release on the 10.10 branch","name":"10.10.1.1","archived":false,"released":true,"releaseDate":"2013-04-15"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12310220":"2012-12-18 17:02:03.358","customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"300015","customfield_12310222":"3_*:*_2_*:*_5999841874_*|*_1_*:*_1_*:*_26794_*|*_6_*:*_1_*:*_0_*|*_5_*:*_1_*:*_567136640_*|*_4_*:*_1_*:*_574464","customfield_12312320":null,"customfield_12312321":null,"customfield_12312120":null,"customfield_12312121":null,"resolutiondate":"2013-03-04T13:47:14.666+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6017/watchers","watchCount":6,"isWatching":false},"created":"2012-12-18T13:27:34.933+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12316344","id":"12316344","description":"First release on the 10.9 branch","name":"10.9.1.0","archived":false,"released":true,"releaseDate":"2012-06-25"}],"customfield_12311120":null,"customfield_12312330":null,"issuelinks":[{"id":"12362134","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12362134","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12360835","key":"DERBY-2256","self":"https://issues.apache.org/jira/rest/api/2/issue/12360835","fields":{"summary":"Wrong Results: Use of decimal values in an IN-list with INTEGER left operand can lead to extra rows.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12364567","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12364567","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12633152","key":"DERBY-6080","self":"https://issues.apache.org/jira/rest/api/2/issue/12633152","fields":{"summary":"Cast to same type changes result with IN subquery","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"New"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.png","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}},{"id":"12373542","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12373542","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12656863","key":"DERBY-6289","self":"https://issues.apache.org/jira/rest/api/2/issue/12656863","fields":{"summary":"Derby 10.8 backport issue (summer 2013)","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.png","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/images/icons/issuetypes/bug.png","name":"Bug","subtask":false}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12312337":null,"customfield_12312338":null,"updated":"2013-08-07T14:52:10.752+0000","customfield_12312335":null,"customfield_12311720":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Complete"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/11408","id":"11408","name":"SQL"}],"timeoriginalestimate":null,"description":"Given this table:\r\n\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t(x bigint);\r\n0 rows inserted/updated/deleted\r\nij> insert into t values 9223372036854775805, 9223372036854775806, 9223372036854775807;\r\n3 rows inserted/updated/deleted\r\n\r\nA query that uses an IN list that contains all the three values actually stored in the table, returns all three rows as expected:\r\n\r\nij> select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807);\r\nX                   \r\n--------------------\r\n9223372036854775805 \r\n9223372036854775806 \r\n9223372036854775807 \r\n\r\n3 rows selected\r\n\r\nHowever, if we add a value whose type precedence is higher, like a DOUBLE value, and that value happens to be equal to the approximation of the other values in the IN list when they are cast from BIGINT to DOUBLE, only one row is returned:\r\n\r\nij> select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18);\r\nX                   \r\n--------------------\r\n9223372036854775805 \r\n\r\n1 row selected\r\n\r\nI believe this query should return all three rows too.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12310200":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10366","value":"Wrong query result","id":"10366"}],"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12310921":null,"customfield_12310920":"243992","summary":"IN lists with mixed types may return wrong results","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"subtasks":[],"customfield_12310090":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10424","value":"Repro attached","id":"10424"}],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"customfield_12310291":null,"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"environment":null,"customfield_12311020":null,"customfield_12310050":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"startAt":0,"maxResults":23,"total":23,"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13534914","id":"13534914","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I believe this happens because of optimizations that are performed if the IN list consists of constants only.\r\n\r\nSuch IN lists are sorted at compile time so that binary search can be used to find if there's a match at run time. That's all good. However, the sorting and the binary search use different ordering. The sorting (in ValueNodeList.sortInAscendingOrder()) uses the ordering of the type with the highest precedence of the target and all the operands. The binary search (in DataType.in()) uses the ordering of the type with the highest precedence of each pair of values that it compares.\r\n\r\nIn the query above, this means:\r\n\r\nThe sorting happens using the type with the highest precedence of all the values. That is, DOUBLE. All the four values in the IN list have the same DOUBLE value, so the list is already sorted, regardless of how we order the actual values. But when binary search is performed at run time, BIGINT semantics are used for some of the comparisons (those that involve BIGINTs only) and DOUBLE comparison for others (those that involve a DOUBLE value). So the binary search does not see the list as one that contain values that are all equal.\r\n\r\nAdditionally, during preprocessing, there is code to simplify the predicate if it's an IN list where all values are equal. This check also uses the dominant type, DOUBLE, and finds that the list indeed contains only one distinct value. It therefore eliminates the IN list and replaces it with a simple equality check using just one of the values in the IN list. That is, it rewrites the query from\r\n\r\n    select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18)\r\n\r\nto\r\n\r\n    select * from t where x = 9223372036854775805\r\n\r\nThose two queries are equivalent if the equality operator uses DOUBLE semantics. Unfortunately, the information about what's the dominant type is lost when the IN list is eliminated, and the equality check is performed using BIGINT semantics instead. The result is that only a single row matches.\r\n\r\nSo I think there are two things that need to be fixed:\r\n\r\n1) The sorting and the binary search must be made consistent.\r\n\r\n2) The duplicate elimination must preserve type information.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-18T14:23:10.569+0000","updated":"2012-12-18T14:23:10.569+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13535049","id":"13535049","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"A very clear description, and a very clear analysis; thank you very much!\r\n\r\nThe fact that floating point comparisons are approximate has always caught me up;\r\nI wish that SQL had made it illegal to perform an exact comparison ( \"=\", \"IN\", etc.)\r\non a floating point type.\r\n\r\nThen we could have just declared this query illegal, and forced the user to think\r\nmore clearly about what computation they were trying to express.\r\n\r\nIs there any hope for such a resolution in the SQL standard?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2012-12-18T17:02:03.358+0000","updated":"2012-12-18T17:02:03.358+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13535311","id":"13535311","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I think the query is allowed by the SQL standard. The first paragraph in SQL:2003, part 2, section 4.4.1 (Introduction to numbers) says: \"A number is either an exact numeric value or an approximate numeric value. Any two numbers are comparable.\" So no such luck.\r\n\r\nWe probably need to study the standard more closely to find out what the exact semantics are, though. In particular this: Is it the sorting or the binary search that uses the right kind of comparison. If it's the sorting (which uses the same kind of comparison for all the values, based on the dominant type), I suspect the problem also affects IN lists that don't have constants. For example:\r\n\r\nij> create table t3(b1 bigint, b2 bigint, d double);\r\n0 rows inserted/updated/deleted\r\nij> insert into t3 values (9223372036854775805, 9223372036854775806, 1);\r\n1 row inserted/updated/deleted\r\nij> select * from t3 where b1 in (b2, d);\r\nB1                  |B2                  |D                     \r\n----------------------------------------------------------------\r\n\r\n0 rows selected\r\n\r\nIf it is correct that the dominant type should be used, I would have expected the above query to return one row, as there is a DOUBLE value in the IN list, and b1=b2 when they are converted to DOUBLE.\r\n\r\nAnother puzzling result that doesn't involve constants, is this:\r\n\r\nij> create table t4 (b bigint);\r\n0 rows inserted/updated/deleted\r\nij> insert into t4 values 9223372036854775806, 9223372036854775807;\r\n2 rows inserted/updated/deleted\r\nij> create table t5 (d double);\r\n0 rows inserted/updated/deleted\r\nij> insert into t5 values 9.223372036854776E18;\r\n1 row inserted/updated/deleted\r\nij> select * from t4 where b in (select d from t5);\r\nB                   \r\n--------------------\r\n9223372036854775807 \r\n\r\n1 row selected\r\nij> select * from t4 where b in (select cast(d as double) from t5);\r\nB                   \r\n--------------------\r\n9223372036854775806 \r\n9223372036854775807 \r\n\r\n2 rows selected\r\n\r\nIs it correct that the two queries should return different results? The only difference is that the first query accesses the D column with no cast, and the second one casts D to DOUBLE. But since D already is a DOUBLE column, I wouldn't expect the cast to make any difference.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-18T20:58:21.505+0000","updated":"2012-12-18T20:58:21.505+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13535934","id":"13535934","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I've tried to interpret what the standard says. Here are the relevant parts I've found:\r\n\r\n> 8.4 <in predicate> - Syntax Rules\r\n>\r\n> 2) Let IVL be an <in value list>.\r\n> ( IVL )\r\n> is equivalent to the <table value constructor>:\r\n> ( VALUES IVL )\r\n\r\nSo, according to this rule, the following two queries should be equivalent (which they are not currently):\r\n\r\nij> select * from t where x in (9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18);\r\nX                   \r\n--------------------\r\n9223372036854775805 \r\n\r\n1 row selected\r\nij> select * from t where x in (values 9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18);\r\nX                   \r\n--------------------\r\n9223372036854775805 \r\n9223372036854775806 \r\n9223372036854775807 \r\n\r\n3 rows selected\r\n\r\nFurthermore, it says:\r\n\r\n> 8.4 <in predicate> - Syntax Rules\r\n>\r\n> 5) The expression\r\n> RVC IN IPV\r\n> is equivalent to\r\n> RVC = ANY IPV\r\n\r\nSo to find the correct semantics for IN, we need to rewrite the query to ANY. That is,\r\n\r\nselect * from t where x = any (values 9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18);\r\n\r\nand see what the standard says about that. (This particular ANY query returns three rows in Derby, which is the same as the IN (VALUES ...) query above.)\r\n\r\nThis leads us to:\r\n\r\n> 8.8 <quantified comparison predicate> - Syntax Rules\r\n>\r\n> 1) Let RV1 and RV2 be <row value predicand>s whose declared types are respectively that of the <row value\r\n> predicand> and the row type of the <table subquery>. The Syntax Rules of Subclause 8.2, “<comparison\r\n> predicate>”, are applied to:\r\n> RV1 <comp op> RV2\r\n\r\nThat is, for the comparisons, the value on the right hand side should have the row type of the sub-query.\r\n\r\nAnd the row type of our VALUES sub-query is DOUBLE (or at least some approximate numeric type) as 7.3 <table value constructor> says row type is determined by applying Subclause 9.3, “Data types of results of aggregations”, whose syntax rule 3d says:\r\n\r\n> If any data type in DTS is approximate numeric, then each data type in DTS shall be numeric and the\r\n> result data type is approximate numeric with implementation-defined precision.\r\n\r\nDerby does produce the right type for the <table value constructor>:\r\n\r\nij> values 9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18;\r\n1                     \r\n----------------------\r\n9.223372036854776E18  \r\n9.223372036854776E18  \r\n9.223372036854776E18  \r\n9.223372036854776E18  \r\n\r\n4 rows selected\r\n\r\nThe ANY query should therefore end up like:\r\n\r\n  select * from t where x = 9.223372036854776E18 or x = 9.223372036854776E18 or x = 9.223372036854776E18 or x = 9.223372036854776E18;\r\n\r\nOr even simpler, because the DOUBLE representation of all four values happens to be the same:\r\n\r\n  select * from t where x = 9.223372036854776E18;\r\n\r\nNow, 8.2 <comparison predicate> - General Rules, says this:\r\n\r\n> 2) Numbers are compared with respect to their algebraic value.\r\n\r\nNo more details than that, I'm afraid. And no mentioning about converting the operands to the dominant type, so far as I can see.\r\n\r\nDerby currently returns these three rows for the query:\r\n\r\nij> select * from t where x = 9.223372036854776E18;\r\nX                   \r\n--------------------\r\n9223372036854775805 \r\n9223372036854775806 \r\n9223372036854775807 \r\n\r\n3 rows selected\r\n\r\nI'm not completely convinced that all those three values have the same algebraic value as 9.223372036854776E18. But in any case I think changing how Derby performs numeric comparisons is outside the scope of this issue.\r\n\r\nSo how's this for a plan? In this issue, let's assume Derby's equality comparison operator does the right thing. The goal for now should be to make an <in value list> behave the same way as the ANY query the SQL standard says it should be equivalent to. We should have tests that use the results from the equivalent ANY queries as canons, and those tests would also alert us if we later make changes to the comparison operator in a way that makes ANY and IN behave inconsistently.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-19T13:12:19.525+0000","updated":"2012-12-19T13:12:19.525+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13536036","id":"13536036","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"Thank you Knut Anders for digging deep into the standard to explore these topics.\r\n\r\nI see no holes in your logic; it seems unavoidable that (a) these queries are intended to be\r\nclearly-defined by the standard, and (b) Derby is doing it wrong. I can *wish* that the\r\nstandard were written differently, but it ain't so... :)\r\n\r\nI think your proposed approach is excellent.\r\n\r\nHopefully the fact that we currently seem to behave correctly in the ANY queries and\r\nin the table value constructor (VALUES ... ) give some clues about what's needed to\r\nbe included in the other queries to give them the right form.\r\n\r\nAm I right in conceptualizing this as \"we need to be implicitly casting the values to\r\nthe correct type in certain situations, and we're currently not doing so.\"?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2012-12-19T15:30:51.642+0000","updated":"2012-12-19T15:30:51.642+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13536050","id":"13536050","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"A little bit of quick searching confirms my suspicion that most databases have this problem,\r\nand that comparison of floating point values can lead to confusing results:\r\n\r\nhttp://stackoverflow.com/questions/2567434/mysql-floating-point-comparison-issues\r\n\r\nhttp://yongjun-jiao.blogspot.com/2011/11/floating-point-number-equality.html\r\n\r\nhttps://kb.askmonty.org/en/numeric-operations/\r\n\r\nIt might be worth, as a related issue or sub-task, considering ways to improve our\r\ndocumentation in this area so that we guide users toward safer ways of comparing\r\nfloating point values, e.g., some form of:\r\n\r\n    WHERE ABS(float_column - other_value) < small_epsilon\r\n\r\nwith an appropriate suggestion for what small_epsilon should be.\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2012-12-19T15:42:48.291+0000","updated":"2012-12-19T15:42:48.291+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13536117","id":"13536117","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks, Bryan.\r\n\r\n> Am I right in conceptualizing this as \"we need to be implicitly casting the values to\r\n> the correct type in certain situations, and we're currently not doing so.\"?\r\n\r\nFor the values in the IN list, I think that's the right way to conceptualize it.\r\n\r\nFor the simple comparison operations (for example a predicate such as 9223372036854775805 = 9.223372036854776E18) I'm not so sure. But that's the part of the problem that I suggested we didn't focus on in this issue.\r\n\r\nI think it's a good idea to make our docs say that equality comparisons involving floating point values may have surprising results.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-19T16:52:27.491+0000","updated":"2012-12-19T16:52:27.491+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13536889","id":"13536889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"I changed the title of the bug since the problem is not restricted to constants.\r\n\r\nHere's another example that we may add to our tests once the bug is fixed:\r\n\r\nij> create table t3(b1 bigint, b2 bigint, d double);\r\n0 rows inserted/updated/deleted\r\nij> insert into t3 values (9223372036854775805, 9223372036854775806, 1);\r\n1 row inserted/updated/deleted\r\nij> select * from t3 where b1 in (b2, d);\r\nB1                  |B2                  |D                     \r\n----------------------------------------------------------------\r\n\r\n0 rows selected\r\nij> select * from t3 where b1 in (values b2, d);\r\nB1                  |B2                  |D                     \r\n----------------------------------------------------------------\r\n9223372036854775805 |9223372036854775806 |1.0                   \r\n\r\n1 row selected\r\n\r\nThe two select queries return different results, although the standard says they should be equivalent.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-20T09:28:28.168+0000","updated":"2012-12-20T09:28:28.168+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13537085","id":"13537085","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching a patch (d6017-1a-duplicates.diff) for the problem we see when duplicates are eliminated from the IN list.\r\n\r\nThe original code would detect that an IN list consisting of the values (9223372036854775805, 9223372036854775806, 9223372036854775807, 9.223372036854776E18) only contained one distinct value after conversion to the dominant type. It would arbitrarily pick the first value and replace the IN predicate with leftOperand = \r\n9223372036854775805.\r\n\r\nThe patch changes this optimization so that it casts the right operand in the comparison to the dominant type if neither of the two operands already is of the dominant type.\r\n\r\nIt also adds a test case to verify that the expected results are produced.\r\n\r\nAll the regression tests ran cleanly with the patch.\r\n\r\nThe patch doesn't address any of the other problems discussed in this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-20T15:37:00.647+0000","updated":"2012-12-20T15:37:00.647+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13537094","id":"13537094","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"body":"+1 to the duplicates patch.\r\n\r\nI notice that you've mostly been experimenting with values that become\r\napproximate when converted from LONG to DOUBLE.\r\n\r\nAre there similar problems when mixing the 4-byte-floating-point REAL\r\nwith the 8-byte-floating-point DOUBLE?\r\n\r\nOr is it generally integer-to-floating-point where the most problems arise?\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bryanpendleton","name":"bryanpendleton","emailAddress":"bpendleton dot derby at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Bryan Pendleton","active":true},"created":"2012-12-20T15:50:51.706+0000","updated":"2012-12-20T15:50:51.706+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13537406","id":"13537406","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks for looking at the patch, Bryan.\r\n\r\nI'll look into the other data types and see if I find similar problems. If promoting a REAL to a DOUBLE could cause loss of precision (can it?), they might show the same problem. Promoting an INT to a REAL could lose precision too, but I think we always promote to DOUBLE when mixing INTs and REALs (per [1]). It's worth testing, though.\r\n\r\n[1] http://db.apache.org/derby/docs/10.9/ref/rrefsqlj27767.html","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-20T21:43:27.282+0000","updated":"2012-12-20T21:43:27.282+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13537829","id":"13537829","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"For the problem fixed by the 1a patch, I didn't find any problematic combinations except BIGINT/DOUBLE. As far as I can see REAL/DOUBLE doesn't have the problem because the conversion from REAL to DOUBLE never loses precision. And mixing INT and REAL is not a problem either, as the problem only affects IN lists that consists entirely of literals, and Derby's grammar doesn't have any way to express REAL literals (all approximate number literals get the type DOUBLE). You can of course cast a DOUBLE literal to a REAL, but then it's no longer a ConstantNode, and the problematic optimization is not applied.\r\n\r\nHowever, mixing REAL and INT seems to have similar problems as DOUBLE and BIGINT when using non-constant expressions in the IN list. Here's one example:\r\n\r\nij> select * from tt where r1 in (i1, r2);\r\nI1         |R1           |R2           \r\n---------------------------------------\r\n2147483645 |2.14748365E9 |2.14748365E9 \r\n2147483645 |2.14748365E9 |0.0          \r\n\r\n2 rows selected\r\nij> select * from tt where r1 in (values i1, r2);\r\nI1         |R1           |R2           \r\n---------------------------------------\r\n2147483645 |2.14748365E9 |2.14748365E9 \r\n\r\n1 row selected\r\n\r\nThe two queries are supposed to be equivalent, but they return different results.\r\n\r\nI think the former query performs both of the comparisons (r1=i1, r1=r2) using REAL semantics, whereas the latter query uses DOUBLE semantics because the (values i1,r2) sub-query has DOUBLE as its row type. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-21T12:52:38.735+0000","updated":"2012-12-21T12:52:38.735+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13537831","id":"13537831","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed the 1a patch to trunk, revision 1424889.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2012-12-21T12:53:36.735+0000","updated":"2012-12-21T12:53:36.735+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13578355","id":"13578355","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching d6017-2a-cast-if-needed.diff which solves the remaining IN\r\nlist problems discussed in this issue (except the second anomaly\r\nmentioned in my 18/Dec/12 21:58 comment, as that's an IN subquery, not\r\nan IN list).\r\n\r\nThe 2a patch replaces the fix in the 1a patch with a more general one\r\nthat also addresses the problems with non-constants.\r\n\r\nThe problems are caused by the comparison operations being performed\r\nusing the semantics of the dominant type of the two values being\r\ncompared. It should be performed using the dominant type of *all* the\r\nvalues in the IN predicate.\r\n\r\nTo fix this, the patch makes InListOperatorNode.preprocess() cast the\r\nleft operand to the dominant type if some of the comparisons otherwise\r\nwould have been performed using a non-dominant type.\r\n\r\nThe fix works because the left operand is part of every single\r\ncomparison operation, and as long as one of the values being compared\r\nis of the dominant type, the comparison will be performed using the\r\nsemantics of that type.\r\n\r\nThe cast is not added if the left operand is already of the dominant\r\ntype, in which case the cast would be redundant. Also, it is not added\r\nif all the values in the right operand (the IN list) are of the\r\ndominant type. In that case, too, every single comparison operation\r\nwould include one value of the dominant type, and the correct\r\nsemantics would be used.\r\n\r\nIn all other cases, a cast is added to ensure that the comparisons are\r\nperformed using the right type.\r\n\r\nAll the regression tests ran cleanly with the patch.\r\n\r\nDescription of the changes:\r\n\r\n* engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java\r\n\r\n- Made preprocess() cast the left operand to the dominant type if\r\n  necessary.\r\n\r\n- Removed the cast added by the 1a patch for the case where all values\r\n  in the IN list represented the same constant value, as that code was\r\n  made redundant by the new fix.\r\n\r\n* engine/org/apache/derby/iapi/types/DataType.java\r\n\r\n- Improved comment about how types are handled when evaluating an IN\r\n  predicate.\r\n\r\n* engine/org/apache/derby/iapi/types/DataTypeDescriptor.java\r\n* engine/org/apache/derby/impl/sql/compile/ValueNodeList.java\r\n\r\n- Removed unnecessary throws clauses. Did this so that I didn't have\r\n  to add another unnecessary throws clause to a helper method I added\r\n  to InListOperatorNode.\r\n\r\n* testing/org/apache/derbyTesting/functionTests/tests/lang/InPredicateTest.java\r\n\r\n- Added test cases from previous comments on this issue. They work as\r\n  expected with the patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-02-14T13:20:58.192+0000","updated":"2013-02-14T13:20:58.192+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13582028","id":"13582028","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Committed revision 1448025.\r\n\r\nI've logged DERBY-6080 for the IN subquery anomaly. Resolving this issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-02-20T08:20:48.021+0000","updated":"2013-02-20T08:20:48.021+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13587605","id":"13587605","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"The test for this issue is failing on weme. For example here: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1450000-suites.All_diff.txt\r\n\r\nThere was 1 failure:\r\n1) testMixedTypes(org.apache.derbyTesting.functionTests.tests.lang.InPredicateTest)junit.framework.AssertionFailedError: Column value mismatch @ column 'R1', row 1:\r\n    Expected: >2.14748365E9<\r\n    Found:    >2.1474836E9<\r\n\r\nIt looks like doubles are formatted differently on that platform. I'll see if I can make the test more robust against formatting differences.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-02-26T21:53:04.668+0000","updated":"2013-02-26T21:53:04.668+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13588179","id":"13588179","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Attaching d6017-3a-weme-test-failure.diff which makes the test case use a different assert method that checks the actual numeric values returned by the result set, rather than just checking the string representation of the values. Hopefully, this is enough to get the test to pass on weme.\r\n\r\nCommitted revision 1450695.\r\n\r\nI'll keep this bug open until there has been a clean run on weme in the nightly tests. I don't have a copy of weme to test it on myself.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-02-27T09:46:44.756+0000","updated":"2013-02-27T09:46:44.756+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13589772","id":"13589772","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"body":"Looks like the run for weme was clean last night, using a build of trunk sync-ed up to revision 1451076. Thanks for noticing this failure, and fixing it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=myrna","name":"myrna","emailAddress":"m dot v dot lunteren at gmail dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Myrna van Lunteren","active":true},"created":"2013-02-28T18:38:15.065+0000","updated":"2013-02-28T18:38:15.065+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13592208","id":"13592208","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"body":"Thanks, Myrna. Closing the issue again.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=knutanders","name":"knutanders","emailAddress":"knut dot hatlen at oracle dot com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Knut Anders Hatlen","active":true},"created":"2013-03-04T13:47:14.695+0000","updated":"2013-03-04T13:47:14.695+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13729484","id":"13729484","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Assign to myself for backport","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-08-05T12:54:47.266+0000","updated":"2013-08-05T12:54:47.266+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13729650","id":"13729650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1510609 from [~kmarsden] in branch 'code/branches/10.9'\r\n[ https://svn.apache.org/r1510609 ]\r\n\r\nDERBY-6017 IN lists with mixed types may return wrong results\r\n\r\nmerge from trunk revisions 1424889, 1448025, 1450695\r\nContributed by Knut Anders Hatlen","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2013-08-05T17:05:14.533+0000","updated":"2013-08-05T17:05:14.533+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13731929","id":"13731929","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"body":"Commit 1511288 from [~kmarsden] in branch 'code/branches/10.8'\r\n[ https://svn.apache.org/r1511288 ]\r\n\r\nDERBY-6017  IN lists with mixed types may return wrong results\r\n\r\nmerged from trunk 1424889, 1448025, 1450695\r\nContrubuted by Knut Anders Hatlen","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jira-bot","name":"jira-bot","emailAddress":"no-reply at urd dot zones dot apache dot org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF subversion and git services","active":true},"created":"2013-08-07T12:45:56.964+0000","updated":"2013-08-07T12:45:56.964+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12624466/comment/13731931","id":"13731931","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"body":"Assign back to Knut after backport.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kmarsden","name":"kmarsden","emailAddress":"kmarsdenderby at sbcglobal dot net","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Kathey Marsden","active":true},"created":"2013-08-07T12:46:53.144+0000","updated":"2013-08-07T12:46:53.144+0000"}]},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/DERBY-6017/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i165b3:"}}